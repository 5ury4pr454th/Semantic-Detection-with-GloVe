an academic discipline academic field subdivision knowledge taught researched college university level  disciplines defined  part  recognized academic journals research published  learned societies academic departments faculties within colleges universities practitioners belong  academic disciplines conventionally divided humanities  including language  art cultural studies  scientific disciplines  physics  chemistry  biology  social sciences sometimes considered third category individuals associated academic disciplines commonly referred experts specialists  others  may studied liberal arts systems theory rather concentrating specific academic discipline  classified generalists while academic disciplines less focused practices  scholarly approaches multidisciplinarity interdisciplinarity  transdisciplinarity  cross-disciplinarity integrate aspects multiple academic disciplines  therefore addressing problems may arise narrow concentration within specialized fields study  for example  professionals may encounter trouble communicating across academic disciplines differences language  specified concepts methodology some researchers believe academic disciplines may  future  replaced known mode    post-academic science   involves acquisition cross-disciplinary knowledge collaboration specialists various academic disciplines    terminology   also known field study  field inquiry  research field branch knowledge  the different terms used different countries fields    history concept   the university paris      consisted four faculties  theology  medicine  canon law arts  educational institutions originally used term  discipline  catalog archive new expanding body information produced scholarly community  disciplinary designations originated german universities beginning nineteenth century most academic disciplines roots mid-to-late-nineteenth century secularization universities  traditional curricula supplemented non-classical languages literatures  social sciences political science  economics  sociology public administration  natural science technology disciplines physics  chemistry  biology  engineering in early twentieth century  new academic disciplines education psychology added  in          explosion new academic disciplines focusing specific themes  media studies  women studies  africana studies  many academic disciplines designed preparation careers professions  nursing  hospitality management  corrections  also emerged universities  finally  interdisciplinary scientific fields study biochemistry geophysics gained prominence contribution knowledge became widely recognized  some new disciplines  public administration  found one disciplinary setting  public administration programs associated business schools  thus emphasizing public management aspect   others linked political science field  emphasizing policy analysis aspect  as twentieth century approached  designations gradually adopted countries became accepted conventional subjects  however  designations differed various countries  in twentieth century  natural science disciplines included  physics  chemistry  biology  geology  astronomy  the social science disciplines included  economics  politics  sociology  psychology prior twentieth century  categories broad general  expected due lack interest science time  with rare exceptions  practitioners science tended amateurs referred  natural historians   natural philosophers  labels date back aristotle instead  scientists   natural history referred call life sciences natural philosophy referred current physical sciences prior twentieth century  opportunities existed science occupation outside educational system  higher education provided institutional structure scientific investigation  well economic support research teaching  soon  volume scientific information rapidly increased researchers realized importance concentrating smaller  narrower fields scientific activity  because narrowing  scientific specializations emerged  as specializations developed  modern scientific disciplines universities also improved sophistication  eventually  academia identified disciplines became foundations scholars specific specialized interests expertise    functions criticism   an influential critique concept academic disciplines came michel foucault      book  discipline punish  foucault asserts academic disciplines originate social movements mechanisms control established modern prison penal system eighteenth-century france  fact reveals essential aspects continue common   the disciplines characterize  classify  specialize  distribute along scale  around norm  hierarchize individuals relation one another  necessary  disqualify invalidate    foucault             p         communities academic disciplines   communities academic disciplines found outside academia within corporations  government agencies  independent organizations  take form associations professionals common interests specific knowledge  such communities include corporate think tanks  nasa  iupac  communities exist benefit organizations affiliated providing specialized new ideas  research  findings nations various developmental stages find need different academic disciplines different times growth  a newly developing nation likely prioritize government  political matters engineering humanities  arts social sciences  on hand  well-developed nation may capable investing arts social sciences  communities academic disciplines would contribute varying levels importance different stages development    interactions   these categories explain different academic disciplines interact one another     multidisciplinary    multidisciplinary knowledge associated one existing academic discipline profession a multidisciplinary community project made people different academic disciplines professions  these people engaged working together equal stakeholders addressing common challenge  a multidisciplinary person one degrees two academic disciplines  this one person take place two people multidisciplinary community  over time  multidisciplinary work typically lead increase decrease number academic disciplines  one key question well challenge decomposed subparts  addressed via distributed knowledge community  the lack shared vocabulary people communication overhead sometimes issue communities projects  if challenges particular type need repeatedly addressed one properly decomposed  multidisciplinary community exceptionally efficient effective there many examples particular idea appearing different academic disciplines  came around time  one example scenario shift approach focusing sensory awareness whole   attention  total field     sense whole pattern  form function unity    integral idea structure configuration   this happened art  form cubism   physics  poetry  communication educational theory  according marshall mcluhan  paradigm shift due passage era mechanization  brought sequentiality  era instant speed electricity  brought simultaneity multidisciplinary approaches also encourage people help shape innovation future  the political dimensions forming new multidisciplinary partnerships solve so-called societal grand challenges presented innovation union european framework programme  horizon      operational overlay  innovation across academic disciplines considered pivotal foresight creation new products  systems  processes benefit societies  growth wellbeing  regional examples biopeople industry-academia initiatives translational medicine share ku dk denmark provides evidence successful endeavour multidisciplinary innovation facilitation paradigm shift     transdisciplinary    in practice  transdisciplinary thought union interdisciplinary efforts  while interdisciplinary teams may creating new knowledge lies several existing disciplines  transdisciplinary team holistic seeks relate disciplines coherent whole     cross-disciplinary    cross-disciplinary knowledge explains aspects one discipline terms another  common examples cross-disciplinary approaches studies physics music politics literature    bibliometric studies disciplines   bibliometrics used map several issues relation disciplines  example flow ideas within among disciplines  lindholm-romantschuk        existence specific national traditions within disciplines  scholarly impact influence one discipline another may understood analyzing flow citations the bibliometrics approach described straightforward based simple counting  the method also objective quantitative method may compatible qualitative assessment therefore manipulated  the number citations dependent number persons working domain instead inherent quality published result originality    see also   outline academic disciplineslist academic fields   references      further reading   abbott  a          the system professions  an essay division expert labor  university chicago press  isbn    - -   -     - augsburg  t          becoming interdisciplinary  an introduction interdisciplinary studies dogan  m    pahre  r           the fate formal disciplines  coherence dispersion   in creative marginality  innovation intersections social sciences  boulder  co  westview  pp         dullemeijer  p           dividing biology disciplines  chaos multiformity   journal acta biotheoretica               fagin  r   halpern  j y   moses  y     vardi  m y          reasoning knowledge  mit press  isbn  -   -     - gibbons  m   limoges  c   nowotny  h   schwartzman  s   scott  p    trow  m          the new production knowledge  the dynamics science research contemporary societies  london  sage golinski  j               making natural knowledge  constructivis  history science  new york  cambridge university press  chapter     identity discipline   part ii  the disciplinary mold  pp        hicks  d           the four literatures social science   in  handbook quantitative science technology research  the use publication patent statistics studies s t systems  ed  henk moed  dordrecht  kluwer academic hyland  k          disciplinary discourses  social interactions academic writing  new edition  university michigan press esl klein  j t          interdisciplinarity  history  theory  practice  detroit  wayne state university press krishnan  armin  january        what academic disciplines  some observations disciplinarity vs  interdisciplinarity debate  pdf   ncrm working paper series  southampton  esrc national centre research methods  retrieved september         leydesdorff  l    rafols  i          a global map science based isi subject categories  journal american society information science technology lindholm-romantschuk  y          scholarly book reviewing social sciences humanities  the flow ideas within among disciplines  westport  connecticut  greenwood press martin  b          information liberation  challenging corruptions information power  london  freedom pressmorillo  f   bordons  m    gomez  i           an approach interdisciplinarity bibliometric indicators   scientometrics                morillo  f   bordons  m    gomez  i           interdisciplinarity science  a tentative typology disciplines research areas   journal american society information science technology                  newell  a           reflections structure interdiscipline   in machlup  f    u  mansfield  eds    the study information  interdisciplinary messages  pp          ny  john wiley   sons pierce  s j           subject areas  disciplines concept authority   library information science research            porter  a l   roessner  j d   cohen  a s    perreault  m           interdisciplinary research  meaning  metrics nurture   research evaluation                prior  p          writing disciplinarity  a sociohistoric account literate activity academy  lawrence erlbaum   rhetoric  knowledge society series qin  j   lancaster  f w    allen  b           types levels collaboration interdisciplinary research sciences   journal american society information science                  rinia  e j   van leeuwen  t n   bruins  e e w   van vuren  h g    van raan  a f j           measuring knowledge transfer fields science   scientometrics                sanz-menendez  l   bordons  m    zulueta  m  a           interdisciplinarity multidimensional concept  measure three different research areas   research evaluation               stichweh  r           scientific disciplines  history    smelser  n j    baltes  p b   eds    international encyclopedia social behavioral sciences  oxford  elsevier science  pp           szostak  r   october        superdisciplinarity  a simple definition interdisciplinarity with profound implications  association integrative studies  portland  oregon   meeting presentation tengstr  e          biblioteks- och informationsvetenskapen   ett fler- eller tv rvetenskapligt omr de  svensk biblioteksforskning           tomov  d t    mutafov  h g           comparative indicators interdisciplinarity modern science   scientometrics                van leeuwen  t n    tijssen  r j w           assessing multidisciplinary areas science technology   a synthetic bibliometric study dutch nuclear-energy research   scientometrics                van leeuwen  t n    tijssen  r j w           interdisciplinary dynamics modern science  analysis cross-disciplinary citation flows   research evaluation               weisgerber  d w           interdisciplinary searching   problems suggested remedies   a report icsti group interdisciplinary searching   journal documentation                wittrock  b           disciplines  history  social sciences    international encyclopedia social   behavioral sciences  pp           smeltser  n j    baltes  p b   eds    amsterdam  elsevier    external links   association interdisciplinary studiesryan shaw         periodization isko encyclopedia knowledge organization  eds  birger hj rland claudio gnoli sandoz  r   ed    interactive historical atlas disciplines  university geneva
applied science use scientific method knowledge obtained via conclusions method attain practical goals  it includes broad range disciplines engineering medicine  applied science often contrasted basic science  focused advancing scientific theories laws explain predict events natural world  applied science also apply formal science  statistics probability theory  epidemiology  genetic epidemiology applied science applying biological statistical methods    applied research   applied research practical application science  it accesses uses accumulated theories  knowledge  methods  techniques  specific  state-  business-  client-driven purpose   applied research contrasted pure research  basic research  discussion research ideals  methodologies  programs  projects  applied research usually specific commercial objectives related products  procedures  services  the comparison pure research applied research provides basic framework direction businesses follow applied research deals solving practical problems generally employs empirical methodologies  because applied research resides messy real world  strict research protocols may need relaxed  for example  may impossible use random sample  thus  transparency methodology crucial  implications interpretation results brought relaxing otherwise strict canon methodology also considered since applied research provisional close-to-the-problem close-to-the-data orientation  may also use provisional conceptual framework working hypotheses pillar questions  the oecd frascati manual describes applied research one three forms research  along basic research   experimental development due practical focus  applied research information found literature associated individual disciplines    branches   engineering fields include thermodynamics  heat transfer  fluid mechanics  statics  dynamics  mechanics materials  kinematics  electromagnetism  materials science  earth sciences  engineering physics medical sciences  instance medical microbiology clinical virology  applied sciences apply biology toward medical knowledge inventions  necessarily medical technology  whose development specifically biomedicine biomedical engineering    in education   in canada  netherlands places bachelor applied science  basc  sometimes equivalent bachelor engineering  classified professional degree  this based age school applied science used include boiler making  surveying engineering  there also bachelor applied science degrees child studies  the basc tends focus application engineering sciences   in australia new zealand  degree awarded various fields study considered highly specialized professional degree in united kingdom educational system  applied science refers suite  vocational  science qualifications run alongside  traditional  general certificate secondary education a-level sciences  applied science courses generally contain coursework  also known portfolio internally assessed work  compared traditional counterparts  these evolution gnvq qualifications offered      these courses regularly come scrutiny due review following wolf report      however  merits argued elsewhere in united states  the college william   mary offers undergraduate minor well master science doctor philosophy degrees  applied science   courses research cover varied fields including neuroscience  optics  materials science engineering  nondestructive testing  nuclear magnetic resonance  university nebraska lincoln offers bachelor science applied science  online completion bachelor science applied science master applied science  course work centered science  agriculture natural resources wide range options including ecology  food genetics  entrepreneurship  economics  policy  animal science plant science  in new york city  bloomberg administration awarded consortium cornell-technion      million city capital construct universities  proposed applied sciences campus roosevelt island    see also   basic researchexact scienceshard soft scienceinventionsecondary research   references      external links    media related applied sciences wikimedia commons
coding theory study properties codes respective fitness specific applications  codes used data compression  cryptography  error detection correction  data transmission data storage  codes studied various scientific disciplines information theory  electrical engineering   mathematics  linguistics  computer science purpose designing efficient reliable data transmission methods  this typically involves removal redundancy correction detection errors transmitted data there four types coding data compression  source coding error control  channel coding cryptographic codingline codingdata compression attempts remove redundancy data source order transmit efficiently  for example  zip data compression makes data files smaller  purposes reduce internet traffic  data compression error correction may studied combination error correction adds extra data bits make transmission data robust disturbances present transmission channel  the ordinary user may aware many applications using error correction  a typical music compact disc  cd  uses reed solomon code correct scratches dust  in application transmission channel cd itself  cell phones also use coding techniques correct fading noise high frequency radio transmission  data modems  telephone transmissions  nasa deep space network employ channel coding techniques get bits  example turbo code ldpc codes    history coding theory   in       claude shannon published  a mathematical theory communication   article two parts july october issues bell system technical journal  this work focuses problem best encode information sender wants transmit  in fundamental work used tools probability theory  developed norbert wiener  nascent stages applied communication theory time  shannon developed information entropy measure uncertainty message essentially inventing field information theory the binary golay code developed       it error-correcting code capable correcting three errors   -bit word  detecting fourth richard hamming turing award      work bell labs numerical methods  automatic coding systems  error-detecting error-correcting codes  he invented concepts known hamming codes  hamming windows  hamming numbers  hamming distance in       nasir ahmed proposed discrete cosine transform  dct   developed t  natarajan k  r  rao       the dct widely used lossy compression algorithm  basis multimedia formats jpeg  mpeg mp     source coding   the aim source coding take source data make smaller     definition    data seen random variable                     x                                                         x                                  displaystyle x  omega    mathcal  x                           x                                       x                                  displaystyle x   mathcal  x      appears probability                               p                         x                 x                         displaystyle  mathbb  p   x x     data encoded strings  words  alphabet                                      displaystyle  sigma     a code function                    c                                       x                                                                                                       displaystyle c   mathcal  x    sigma                                                                                                  displaystyle  sigma         empty string part alphabet                      c                 x                         displaystyle c x     code word associated                     x                displaystyle x    length code word written                    l                 c                 x                                           displaystyle l c x      expected length code                    l                 c                                                           x                                                       x                                                    l                 c                 x                                    p                         x                 x                                  displaystyle l c   sum   x   mathcal  x   l c x   mathbb  p   x x     the concatenation code words                     c                           x                                                                                      x                      k                                            c                           x                                                          c                           x                                                                   c                           x                      k                                           displaystyle c x      ldots  x  k   c x     c x      cdots c x  k      the code word empty string empty string                     c                                                             displaystyle c  epsilon    epsilon        properties                        c                                       x                                                                                                       displaystyle c   mathcal  x    sigma         non-singular injective                     c                                                     x                                                                                                                                                    displaystyle c   mathcal  x        sigma         uniquely decodable injective                     c                                       x                                                                                                       displaystyle c   mathcal  x    sigma         instantaneous                     c                           x                                                                  displaystyle c x         prefix                     c                           x                                                                  displaystyle c x          vice versa      principle    entropy source measure information  basically  source codes try reduce redundancy present source  represent source fewer bits carry information data compression explicitly tries minimize average length messages according particular assumed probability model called entropy encoding various techniques used source coding schemes try achieve limit entropy source  c x    h x   h x  entropy source  bitrate    c x  bitrate compression  in particular  source coding scheme better entropy source     example    facsimile transmission uses simple run length code  source coding removes data superfluous need transmitter  decreasing bandwidth required transmission    channel coding   the purpose channel coding theory find codes transmit quickly  contain many valid code words correct least detect many errors  while mutually exclusive  performance areas trade off  so  different codes optimal different applications  the needed properties code mainly depend probability errors happening transmission  in typical cd  impairment mainly dust scratches cds use cross-interleaved reed solomon coding spread data disk although good code  simple repeat code serve understandable example  suppose take block data bits  representing sound  send three times  at receiver examine three repetitions bit bit take majority vote  the twist merely send bits order  we interleave them  the block data bits first divided   smaller blocks  then cycle block send one bit first  second  etc  this done three times spread data surface disk  in context simple repeat code  may appear effective  however  powerful codes known effective correcting  burst  error scratch dust spot interleaving technique used other codes appropriate different applications  deep space communications limited thermal noise receiver continuous nature bursty nature  likewise  narrowband modems limited noise  present telephone network also modeled better continuous disturbance  cell phones subject rapid fading  the high frequencies used cause rapid fading signal even receiver moved inches  again class channel codes designed combat fading     linear codes    the term algebraic coding theory denotes sub-field coding theory properties codes expressed algebraic terms researched algebraic coding theory basically divided two major types codes linear block codesconvolutional codesit analyzes following three properties code   mainly code word lengthtotal number valid code wordsthe minimum distance two valid code words  using mainly hamming distance  sometimes also distances like lee distance     linear block codes     linear block codes property linearity  i e  sum two codewords also code word  applied source bits blocks  hence name linear block codes  there block codes linear  difficult prove code good one without property linear block codes summarized symbol alphabets  e g   binary ternary  parameters  n dmin  wheren length codeword  symbols number source symbols used encoding dmin minimum hamming distance code there many types linear block codes  ascyclic codes  e g   hamming codes repetition codesparity codespolynomial codes  e g   bch codes reed solomon codesalgebraic geometric codesreed muller codesperfect codesblock codes tied sphere packing problem  received attention years  in two dimensions  easy visualize  take bunch pennies flat table push together  the result hexagon pattern like bee nest  but block codes rely dimensions cannot easily visualized  the powerful         golay code used deep space communications uses    dimensions  if used binary code  usually  dimensions refer length codeword defined above the theory coding uses n-dimensional sphere model  for example  many pennies packed circle tabletop    dimensions  many marbles packed globe  other considerations enter choice code  for example  hexagon packing constraint rectangular box leave empty space corners  as dimensions get larger  percentage empty space grows smaller  but certain dimensions  packing uses space codes so-called  perfect  codes  the nontrivial useful perfect codes distance-  hamming codes parameters satisfying   r       r       r                binary          ternary golay codes another code property number neighbors single codeword may have again  consider pennies example  first pack pennies rectangular grid  each penny   near neighbors    corners farther away   in hexagon  penny   near neighbors  when increase dimensions  number near neighbors increases rapidly   the result number ways noise make receiver choose neighbor  hence error  grows well  this fundamental limitation block codes  indeed codes  it may harder cause error single neighbor  number neighbors large enough total error probability actually suffers properties linear block codes used many applications   for example  syndrome-coset uniqueness property linear block codes used trellis shaping  one best-known shaping codes      convolutional codes     the idea behind convolutional code make every codeword symbol weighted sum various input message symbols  this like convolution used lti systems find output system  know input impulse response so generally find output system convolutional encoder  convolution input bit  states convolution encoder  registers fundamentally  convolutional codes offer protection noise equivalent block code  in many cases  generally offer greater simplicity implementation block code equal power  the encoder usually simple circuit state memory feedback logic  normally xor gates  the decoder implemented software firmware the viterbi algorithm optimum algorithm used decode convolutional codes  there simplifications reduce computational load  they rely searching likely paths  although optimum  generally found give good results low noise environments convolutional codes used voiceband modems  v     v     v     gsm mobile phones  well satellite military communication devices    cryptographic coding   cryptography cryptographic coding practice study techniques secure communication presence third parties  called adversaries   more generally  constructing analyzing protocols block adversaries  various aspects information security data confidentiality  data integrity  authentication  non-repudiation central modern cryptography  modern cryptography exists intersection disciplines mathematics  computer science  electrical engineering  applications cryptography include atm cards  computer passwords  electronic commerce cryptography prior modern age effectively synonymous encryption  conversion information readable state apparent nonsense  the originator encrypted message shared decoding technique needed recover original information intended recipients  thereby precluding unwanted persons same  since world war i advent computer  methods used carry cryptology become increasingly complex application widespread modern cryptography heavily based mathematical theory computer science practice  cryptographic algorithms designed around computational hardness assumptions  making algorithms hard break practice adversary  it theoretically possible break system  infeasible known practical means  these schemes therefore termed computationally secure  theoretical advances  e g   improvements integer factorization algorithms  faster computing technology require solutions continually adapted  there exist information-theoretically secure schemes provably cannot broken even unlimited computing power example one-time pad schemes difficult implement best theoretically breakable computationally secure mechanisms    line coding   a line code  also called digital baseband modulation digital baseband transmission method  code chosen use within communications system baseband transmission purposes  line coding often used digital data transport line coding consists representing digital signal transported amplitude- time-discrete signal optimally tuned specific properties physical channel  receiving equipment   the waveform pattern voltage current used represent   digital data transmission link called line encoding  the common types line encoding unipolar  polar  bipolar  manchester encoding    other applications coding theory   another concern coding theory designing codes help synchronization  a code may designed phase shift easily detected corrected multiple signals sent channel another application codes  used mobile phone systems  code-division multiple access  cdma   each phone assigned code sequence approximately uncorrelated codes phones  when transmitting  code word used modulate data bits representing voice message  at receiver  demodulation process performed recover data  the properties class codes allow many users  different codes  use radio channel time  to receiver  signals users appear demodulator low-level noise another general class codes automatic repeat-request  arq  codes  in codes sender adds redundancy message error checking  usually adding check bits  if check bits consistent rest message arrives  receiver ask sender retransmit message  all simplest wide area network protocols use arq  common protocols include sdlc  ibm   tcp  internet   x     international  many others  there extensive field research topic problem matching rejected packet new packet  is new one retransmission  typically numbering schemes used  tcp  rfc      rfcs  internet engineering task force  ietf   september          group testing    group testing uses codes different way  consider large group items different particular way  e g   defective products infected test subjects   the idea group testing determine items  different  using tests possible  the origin problem roots second world war united states army air forces needed test soldiers syphilis     analog coding    information encoded analogously neural networks brains  analog signal processing  analog electronics  aspects analog coding include analog error correction analog data compression analog encryption    neural coding   neural coding neuroscience-related field concerned sensory information represented brain networks neurons  the main goal studying neural coding characterize relationship stimulus individual ensemble neuronal responses relationship among electrical activity neurons ensemble  it thought neurons encode digital analog information  neurons follow principles information theory compress information  detect correcterrors signals sent throughout brain wider nervous system    see also   coding gaincovering codeerror correction codefolded reed solomon codegroup testinghamming distance  hamming weightlee distancelist algebraic coding theory topicsspatial coding mimo multiple antenna researchspatial diversity coding spatial coding transmits replicas information signal along different spatial paths  increase reliability data transmission spatial interference cancellation codingspatial multiplex codingtimeline information theory  data compression  error correcting codes   notes      references   elwyn r  berlekamp         algebraic coding theory  world scientific publishing  revised edition   isbn    - -     -   -  mackay  david j  c   information theory  inference  learning algorithms cambridge  cambridge university press        isbn  -   -     - vera pless         introduction theory error-correcting codes  john wiley   sons  inc   isbn  -   -     -  randy yates  a coding theory tutorial 
cybernetics transdisciplinary  antidisciplinary  approach concerned regulatory purposive systems structures  constraints  possibilities  the core concept discipline circular causality feedback  outcomes actions taken inputs action  cybernetics concerned processes however embodied  including ecological  technological  biological  cognitive  social systems  context practical activities designing  learning  managing  conversation  practice cybernetics itself    overview   cybernetics origins intersection numerous fields      including anthropology  mathematics  neuroscience  psychology  engineering  initial developments consolidated meetings macy conferences ratio club  at prominent          cybernetics precursor fields computing  artificial intelligence  cognitive science  complexity science  robotics amongst others  it closely related systems science  developed parallel  early focuses included purposeful behaviour  neural networks  heterarchy  information theory  self-organising systems  as cybernetics developed  became broader scope include work domains design  family therapy  management organisation  pedagogy   sociology  creative arts  at time  questions arising circular causality explored relation philosophy science  ethics  constructivist approaches  cybernetics also associated counter-cultural movements  contemporary cybernetics thus varies widely scope focus  cyberneticians variously adopting combining technical  scientific  philosophical  creative  critical approaches     definitions    cybernetics defined variety ways  reflecting  richness conceptual base   one well known definitions norbert wiener characterised cybernetics concerned  control communication animal machine   another early definition macy cybernetics conferences  cybernetics understood study  circular causal feedback mechanisms biological social systems   margaret mead emphasised role cybernetics  form cross-disciplinary thought made possible members many disciplines communicate easily language could understand  other definitions include   art governing science government   andr -marie amp    art steersmanship   ross ashby    study systems nature capable receiving  storing  processing information use control   andrey kolmogorov    branch mathematics dealing problems control  recursiveness  information  focuses forms patterns connect   gregory bateson    art securing efficient operation   louis couffignal    art effective organization    stafford beer    science art manipulating defensible metaphors  showing may constructed inferred result existence   gordon pask    art creating equilibrium world constraints possibilities   ernst von glasersfeld    science art understanding   humberto maturana    ability cure temporary truth eternal triteness   herbert brun    way thinking ways thinking  one    larry richards      etymology    the word cybernetics comes greek              kybern tik    meaning  governance   i e   pertinent           kybern     latter meaning  steer  navigate govern   hence             kyb rn sis   meaning  government   government             kybern  governor  pilot   helmsperson   ship  french physicist mathematician andr -marie amp first coined word  cybernetique       essay essai sur la philosophie des sciences describe science civil government  the term used norbert wiener  book cybernetics  define study control communication animal machine  in book  states   although term cybernetics date back summer       shall find convenient use referring earlier epochs development field      key concepts    key concepts cybernetics include the black boxdistinctionfeedback circular causalityhomeostasisself-organising systemsvariety requisite variety   history       pre   th century    the word cybernetics first used context  study self-governance  plato republic alcibiades signify governance people  the word  cybern tique  also used      physicist andr -marie amp             denote sciences government classification system human knowledge the first artificial automatic regulatory system water clock  invented mechanician ktesibios  based tank poured water reservoir using run mechanism  used cone-shaped float monitor level water reservoir adjust rate flow water accordingly maintain constant level water reservoir  this first artificial truly automatic self-regulatory device required outside intervention feedback controls mechanism  although considered part engineering  use term cybernetics much posterior   ktesibios others heron su song considered first study cybernetic principles the study teleological mechanisms  greek       los end  goal  purpose  machines corrective feedback dates far back late   th century james watt steam engine equipped governor              centrifugal feedback valve controlling speed engine  alfred russel wallace identified principle evolution famous      paper  in      james clerk maxwell published theoretical article governors  one first discuss refine principles self-regulating devices  jakob von uexk applied feedback mechanism via model functional cycle  funktionskreis  order explain animal behaviour origins meaning general     early   th century    contemporary cybernetics began interdisciplinary study connecting fields control systems  electrical network theory  mechanical engineering  logic modeling  evolutionary biology neuroscience      ideas also related biological work ludwig von bertalanffy general systems theory  electronic control systems originated      work bell telephone laboratories engineer harold s  black using negative feedback control amplifiers early applications negative feedback electronic circuits included feedback amplifier control gun mounts radar antenna world war ii   the founder system dynamics  jay forrester  worked gordon s  brown wwii graduate student servomechanisms laboratory mit develop electronic control systems u s  navy  forrester later applied ideas social organizations  corporations cities  became original organizer mit school industrial management mit sloan school management w  edwards deming  total quality management guru japan named top post-wwii industrial prize  intern bell telephone labs      may influenced network theory  deming made  understanding systems  one four pillars described  profound knowledge  book the new economics numerous papers spearheaded coalescing field  in      russian physiologist p  k  anokhin published book concept feedback   back afferentation   studied  the study mathematical modelling regulatory processes became continuing research effort two key articles published        behavior  purpose teleology  arturo rosenblueth  norbert wiener  julian bigelow  based research living organisms arturo rosenblueth mexico   paper  a logical calculus ideas immanent nervous activity  warren mcculloch walter pitts in        tefan odobleja published  phonoscopy clinical semiotics   in       participated ix international congress military medicine  demonstration de phonoscopie   paper disseminated prospectus announcing future work   psychologie consonantiste   important writings  lays theoretical foundations generalized cybernetics  the book  published paris librairie maloine  vol  i      vol  ii        contains almost     pages includes     figures text  the author wrote time  book     table contents  index dictionary psychology        great treatise psychology contain       volumes   due beginning world war ii  publication went unnoticed  first romanian edition work appear       cybernetics discipline firmly established norbert wiener  mcculloch  arturo rosenblueth others  w  ross ashby  mathematician alan turing  w  grey walter   in spring       wiener invited congress harmonic analysis  held nancy  france important geographical locus early cybernetics together us uk   event organized bourbaki mathematician szolem mandelbrojt during stay france  wiener received offer write manuscript unifying character part applied mathematics  found study brownian motion telecommunication engineering  the following summer  back united states  wiener decided introduce neologism cybernetics  coined denote study  teleological mechanisms   scientific theory  popularized book cybernetics  or control communication animal machine  in uk became focus ratio club in early     john von neumann contributed unique unusual addition world cybernetics  von neumann cellular automata  logical follow  von neumann universal constructor   the result deceptively simple thought-experiments concept self replication  cybernetics adopted core concept   the concept properties genetic reproduction applied social memes  living cells  even computer viruses proof somewhat surprising universality cybernetic study in       wiener popularized social implications cybernetics  drawing analogies automatic systems  regulated steam engine  human institutions best-selling the human use human beings  cybernetics society  houghton-mifflin      split artificial intelligence    artificial intelligence  ai  founded distinct discipline dartmouth workshop       after uneasy coexistence  ai gained funding prominence  consequently  cybernetic sciences study artificial neural networks downplayed  discipline shifted world social sciences therapy prominent cyberneticians period include gregory bateson aksel berg     late   th century    cybernetics soviet union initially considered  pseudoscience   ideological weapon   imperialist reactionaries   soviet philosophical dictionary        later criticised narrow form cybernetics  in mid late     viktor glushkov others salvaged reputation field  soviet cybernetics incorporated much became known computer science west published       qian xuesen published work  engineering cybernetics  basis science segregating engineering concepts cybernetics theoretical understanding cybernetics described far historically while instance research organization focused cybernetics  biological computer lab university illinois urbana champaign  direction heinz von foerster  major center cybernetic research almost    years  beginning          new cybernetics    in      new cyberneticians emerged multiple fields  especially biology  the ideas maturana  varela atlan  according jean-pierre dupuy         realized cybernetic metaphors program upon molecular biology based rendered conception autonomy living impossible  consequently  thinkers led invent new cybernetics  one suited organizations mankind discovers nature - organizations invented   however      question whether features new cybernetics could applied social forms organization remained open debate in political science  project cybersyn attempted introduce cybernetically controlled economy early     s  in      according harries-jones         unlike predecessor  new cybernetics concerns interaction autonomous political actors subgroups  practical reflexive consciousness subjects produce reproduce structure political community  a dominant consideration recursiveness  self-reference political action regards expression political consciousness ways systems build upon  one characteristic emerging new cybernetics considered time felix geyer hans van der zouwen  according bailey          views information constructed reconstructed individual interacting environment  this provides epistemological foundation science  viewing observer-dependent  another characteristic new cybernetics contribution towards bridging micro-macro gap  that  links individual society   another characteristic noted  transition classical cybernetics new cybernetics   involves transition classical problems new problems  these shifts thinking involve  among others    change emphasis system steered system steering  factor guides steering decisions   b  new emphasis communication several systems trying steer  recent endeavors true focus cybernetics  systems control emergent behavior  related fields game theory  analysis group interaction   systems feedback evolution  metamaterials  study materials properties beyond newtonian properties constituent atoms   led revived interest field    notable subfields theories   notable subfields theories cybernetics include     autopoiesis        biological cybernetics    cybernetics biology study cybernetic systems present biological organisms  primarily focusing animals adapt environment  information form genes passed generation generation  there also secondary focus combining artificial systems biological systems  a notable application biology world would        physicist george gamow published prescient article scientific american called  information transfer living cell   cybernetics gave biologists jacques monod fran ois jacob language formulating early theory gene regulatory networks     s     conversation theory        engineering cybernetics        management cybernetics    management field study covers task managing multitude systems  often business systems   presents wide natural overlap many classical concepts cybernetics     medical cybernetics    cybernetics used general reference science interjection disciplines medicine technology  this involves sciences bionics  prosthetics  neural network  microchip implants  neuroprosthetics brain-computer interface     perceptual control theory        second-order cybernetics    second-order cybernetics  also known cybernetics cybernetics  recursive application cybernetics practice cybernetics according critique  it seen development cybernetics relation family therapy  social sciences  creative arts  design research  philosophy  it associated margaret mead  heinz von foerster  biological computer laboratory american society cybernetics     sociocybernetics    by examining group behavior lens cybernetics  sociologists seek reasons spontaneous events smart mobs riots  well communities develop rules etiquette consensus without formal discussion  affect control theory explains role behavior  emotions  labeling theory terms homeostatic maintenance sentiments associated cultural categories the comprehensive attempt ever made social sciences increase cybernetics generalized theory society made talcott parsons  in way  cybernetics establishes basic hierarchy parsons  agil paradigm  ordering system-dimension action theory  these cybernetic models sociology reviewed book edited mcclelland fararo    relations fields   cybernetics  broad scope tendency transgress disciplinary norms means boundaries shifted time difficult define  cybernetics close relationship systems science  many contemporary disciplines trace origins whole part work carried cybernetics     relation systems sciences    cybernetics sometimes understood within context broad field systems sciences systems approaches influenced cybernetics include critical systems thinking  incorporates viable system model management cybernetics systemic design  drawn work cyberneticians ranulph glanville  klaus krippendorff  paul pangaro     intersecting fields    many fields trace origins whole part work carried cybernetics  partially absorbed cybernetics developed  these include artificial intelligencebionicscognitive sciencecontrol theorycomplexity sciencecomputer scienceinformation theoryrobotics   applications influence   cybernetics  transdisciplinary origins led wide variety applications  approaches associations     in arts    nicolas sch ffer cysp i        perhaps first artwork explicitly employ cybernetic principles  cysp acronym joins first two letters words  cybernetic   spatiodynamic    the prominent influential cybernetic serendipity exhibition held institute contemporary arts      curated jasia reichardt  including sch ffer cysp i gordon pask colloquy mobiles installation  pask reflections colloquy connected earlier musicolour installation termed  aesthetically potent environments   concept connected artistic work concerns teaching learning the artist roy ascott elaborated extensive theory cybernetic art   behaviourist art cybernetic vision   cybernetica  journal international association cybernetics  namur   volume ix  no          volume x no           the cybernetic stance  my process purpose   leonardo vol    no           art historian edward a  shanken written history art cybernetics essays including  cybernetics art  cultural convergence      from cybernetics telematics  the art  pedagogy  theory roy ascott         traces trajectory ascott work cybernetic art telematic art  art using computer networking medium  precursor net art      in architecture design    cybernetics influence thinking architecture design decades second world war  ashby pask drawn design theorists horst rittel  christopher alexander bruce archer  pask consultant nicholas negroponte architecture machine group  forerunner mit media lab  collaborated architect cedric price theatre director joan littlewood influential fun palace project     s  pask     musicolour installation inspiration john julia frazer work price generator project the cybernetic study design contributed design methods research development systemic design practices     in counter culture    cybernetics influential development countercultural movements figures stewart brand publications whole earth catalogue co-evolution quarterly     in economics    the design self-regulating control systems real-time planned economy explored economist oskar lange  cyberneticist viktor glushkov  soviet cyberneticists     s  by time information technology developed enough enable feasible economic planning based computers  soviet union eastern bloc countries began moving away planning eventually collapsed after fall soviet union proposal  new socialism  outlined computer scientists paul cockshott allin cottrell       towards new socialism   computers determine manage flows allocation resources among socially owned enterprises on hand  friedrich hayek also mentions cybernetics discipline could help economists understand  self-organizing self-generating systems  called markets  being  complex phenomena   best way examine market functions using feedback mechanism  explained cybernetic theorists  that way  economists could make  pattern predictions  therefore  market hayek  communication system    efficient mechanism digesting dispersed information   the economist cyberneticist like garderners  providing appropriate environment   hayek definition information idiosyncratic precedes information theory used cybernetics natural sciences finally  hayek also considers adam smith idea invisible hand anticipation operation feedback mechanism cybernetics  in book  law  legislation liberty  hayek mentions  along cybernetics  economists rely scientific findings ludwig von bertalanffy general systems theory  along information communication theory semiotics     in family therapy    the development family therapy significantly influenced cybernetics work gregory bateson     in feminism    ideas cybernetics influenced feminism work donna haraway     in philosophy    in      essay  postscript societies control  gilles deleuze argues society undergoing shift structure control  the author claims institutions technologies introduced since world war ii dissolved boundaries enclosures  as result  social coercion discipline moved lives individuals considered  masses  samples  data  markets   banks   controlled cybernetically   these mechanisms modern societies control described continuous  following tracking individuals throughout existence via transaction records  mobile location tracking  personally identifiable information gregory bateson saw world series systems containing individuals  societies ecosystems  each systems adaptive changes depend upon feedback loops control balance changing multiple variables  he saw natural ecological system innately good long allowed maintain homeostasis  key unit survival evolution organism environment bateson  subject  presents western epistemology method thinking leads mindset man exerts autocratic rule cybernetic systems unbalances natural cybernetic system controlled competition mutual dependency  bateson claims humanity never able control whole system operate linear fashion  humanity creates rules system  opens becoming slave self-made system due non-linear nature cybernetics   lastly  man technological prowess combined scientific hubris gives potential irrevocably damage destroy  supreme cybernetic system   i e  biosphere   instead disrupting system temporally system self-correct     other applications    other applications cybernetics include  in earth system science  geocybernetics aims study control complex co-evolution ecosphere anthroposphere  example  dealing planetary problems anthropogenic global warming  geocybernetics applies dynamical systems perspective earth system analysis  it provides theoretical framework studying implications following different sustainability paradigms co-evolutionary trajectories planetary socio-ecological system reveal attractors system  stability  resilience reachability  concepts tipping points climate system  planetary boundaries  safe operating space humanity proposals manipulating earth system dynamics global scale geoengineering framed language geocybernetic earth system analysis in sport  a model cybernetics sport introduced yuri verkhoshansky mel c  siff      book supertraining    journals   constructivist foundationscybernetics human knowingcybernetics systemsieee transactions systems  man  cybernetics  systemsieee transactions human-machine systemsieee transactions cyberneticsieee transactions computational social systemskybernetes   organisations   organisations primarily concerned cybernetics aspects include     american society cybernetics        cybernetics society        metaphorum    the metaphorum group set      develop stafford beer legacy organizational cybernetics  the metaphorum group born syntegration      every year developed conference issues related organizational cybernetics  theory practice     ieee systems  man  cybernetics society       see also      external links   generalnorbert wiener stefan odobleja - a comparative analysisreading list cybernetics principia cybernetica webweb dictionary cybernetics systemsglossary slideshow      slides  basics cybernetics   archived original     -  -    retrieved     -  -   what cybernetics  livas short introductory videos youtubesocietiesamerican society cyberneticsieee systems  man    cybernetics societyinternational society cybernetics systems researchthe cybernetics society   further reading   arbib  michael a          brains  machines  mathematics   nd ed    new york  springer-verlag  isbn    -           arbib  michael a          the metaphorical brain  wiley  isbn    - -   -     -  ascott  roy         behaviourist art cybernetic vision  cybernetica  journal international association cybernetics  namur       pp       ashby  william ross         an introduction cybernetics  pdf   chapman   hall  retrieved   june      beer  stafford         designing freedom  chichester  west sussex  england  wiley  isbn    -           fran ois  charles          systemics cybernetics historical perspective   in  systems research behavioral science  vol     pp                george  f  h          cybernetics  teach yourself books  isbn    - -   -     -  gerovitch  slava         from newspeak cyberspeak   history soviet cybernetics  cambridge  massachusetts  u a    mit press  isbn    -    -     -  heims  steve joshua         constructing social science postwar america   cybernetics group      -       st ed    cambridge  massachusetts u a   mit press  isbn               helvey  t c          the age information  interdisciplinary survey cybernetics  englewood cliffs  n j   educational technology publications  isbn               heylighen  francis  cliff joslyn          cybernetics second order cybernetics    r a  meyers  ed    encyclopedia physical science   technology   rd ed    vol      academic press  san diego   p     -    hy tyniemi  heikki         neocybernetics biological systems  espoo  helsinki university technology  control engineering laboratory ilgauds  hans joachim         norbert wiener  leipzig johnston  john         the allure machinic life   cybernetics  artificial life  new ai  cambridge  massachusetts  mit press  isbn    - -   -     -  medina  eden         cybernetic revolutionaries   technology politics allende chile  cambridge  massachusetts  mit press  isbn    - -   -     -  pangaro  paul   cybernetics   a definition  pask  gordon          cybernetics   encyclop dia britannica  archived original     -  -    retrieved     -  -   patten  bernard c   odum  eugene p   december         the cybernetic nature ecosystems   the american naturalist                    doi                 jstor           s cid          pekelis  v          cybernetics a z  moscow  mir publishers pickering  andrew         the cybernetic brain   sketches another future   online-ausg   ed    chicago  university chicago press  isbn    -           umpleby  stuart          the science cybernetics cybernetics science    cybernetics systems   vol      no             pp          von foerster  heinz          ethics second-order cybernetics wiener  norbert          hermann   cie  ed    cybernetics   control communication animal machine  paris  technology press  retrieved   june      wiener  norbert         cybernetics society  the human use human beings  houghton mifflin    references   
discrete mathematics study mathematical structures fundamentally discrete rather continuous  in contrast real numbers property varying  smoothly   objects studied discrete mathematics   integers  graphs  statements logic   vary smoothly way  distinct  separated values  discrete mathematics therefore excludes topics  continuous mathematics  calculus euclidean geometry  discrete objects often enumerated integers  more formally  discrete mathematics characterized branch mathematics dealing countable sets  finite sets sets cardinality natural numbers   however  exact definition term  discrete mathematics   indeed  discrete mathematics described less included excluded  continuously varying quantities related notions the set objects studied discrete mathematics finite infinite  the term finite mathematics sometimes applied parts field discrete mathematics deals finite sets  particularly areas relevant business research discrete mathematics increased latter half twentieth century partly due development digital computers operate discrete steps store data discrete bits  concepts notations discrete mathematics useful studying describing objects problems branches computer science  computer algorithms  programming languages  cryptography  automated theorem proving  software development  conversely  computer implementations significant applying ideas discrete mathematics real-world problems  operations research although main objects study discrete mathematics discrete objects  analytic methods continuous mathematics often employed well in university curricula   discrete mathematics  appeared      initially computer science support course  contents somewhat haphazard time  the curriculum thereafter developed conjunction efforts acm maa course basically intended develop mathematical maturity first-year students  therefore  nowadays prerequisite mathematics majors universities well  some high-school-level discrete mathematics textbooks appeared well  at level  discrete mathematics sometimes seen preparatory course  unlike precalculus respect the fulkerson prize awarded outstanding papers discrete mathematics    grand challenges  past present   the history discrete mathematics involved number challenging problems focused attention within areas field  in graph theory  much research motivated attempts prove four color theorem  first stated       proved       kenneth appel wolfgang haken  using substantial computer assistance  in logic  second problem david hilbert list open problems presented      prove axioms arithmetic consistent  g del second incompleteness theorem  proved       showed possible   least within arithmetic itself  hilbert tenth problem determine whether given polynomial diophantine equation integer coefficients integer solution  in       yuri matiyasevich proved could done the need break german codes world war ii led advances cryptography theoretical computer science  first programmable digital electronic computer developed england bletchley park guidance alan turing seminal work  on computable numbers  at time  military requirements motivated advances operations research  the cold war meant cryptography remained important  fundamental advances public-key cryptography developed following decades  operations research remained important tool business project management  critical path method developed     s  the telecommunication industry also motivated advances discrete mathematics  particularly graph theory information theory  formal verification statements logic necessary software development safety-critical systems  advances automated theorem proving driven need computational geometry important part computer graphics incorporated modern video games computer-aided design tools several fields discrete mathematics  particularly theoretical computer science  graph theory  combinatorics  important addressing challenging bioinformatics problems associated understanding tree life currently  one famous open problems theoretical computer science p   np problem  involves relationship complexity classes p np  the clay mathematics institute offered    million usd prize first correct proof  along prizes six mathematical problems    topics discrete mathematics       theoretical computer science    theoretical computer science includes areas discrete mathematics relevant computing  it draws heavily graph theory mathematical logic  included within theoretical computer science study algorithms data structures  computability studies computed principle  close ties logic  complexity studies time  space  resources taken computations  automata theory formal language theory closely related computability  petri nets process algebras used model computer systems  methods discrete mathematics used analyzing vlsi electronic circuits  computational geometry applies algorithms geometrical problems  computer image analysis applies representations images  theoretical computer science also includes study various continuous computational topics     information theory    information theory involves quantification information  closely related coding theory used design efficient reliable data transmission storage methods  information theory also includes continuous topics  analog signals  analog coding  analog encryption     logic    logic study principles valid reasoning inference  well consistency  soundness  completeness  for example  systems logic  intuitionistic logic  peirce law    p q  p  p  theorem  for classical logic  easily verified truth table  the study mathematical proof particularly important logic  applications automated theorem proving formal verification software logical formulas discrete structures  proofs  form finite trees  generally  directed acyclic graph structures  inference step combining one premise branches give single conclusion   the truth values logical formulas usually form finite set  generally restricted two values  true false  logic also continuous-valued  e g   fuzzy logic  concepts infinite proof trees infinite derivation trees also studied  e g  infinitary logic     set theory    set theory branch mathematics studies sets  collections objects   blue  white  red   infinite  set prime numbers  partially ordered sets sets relations applications several areas in discrete mathematics  countable sets  including finite sets  main focus  the beginning set theory branch mathematics usually marked georg cantor work distinguishing different kinds infinite set  motivated study trigonometric series  development theory infinite sets outside scope discrete mathematics  indeed  contemporary work descriptive set theory makes extensive use traditional continuous mathematics     combinatorics    combinatorics studies way discrete structures combined arranged enumerative combinatorics concentrates counting number certain combinatorial objects - e g  twelvefold way provides unified framework counting permutations  combinations partitions analytic combinatorics concerns enumeration  i e   determining number  combinatorial structures using tools complex analysis probability theory  in contrast enumerative combinatorics uses explicit combinatorial formulae generating functions describe results  analytic combinatorics aims obtaining asymptotic formulae design theory study combinatorial designs  collections subsets certain intersection properties partition theory studies various enumeration asymptotic problems related integer partitions  closely related q-series  special functions orthogonal polynomials  originally part number theory analysis  partition theory considered part combinatorics independent field order theory study partially ordered sets  finite infinite     graph theory    graph theory  study graphs networks  often considered part combinatorics  grown large enough distinct enough  kind problems  regarded subject right  graphs one prime objects study discrete mathematics  they among ubiquitous models natural human-made structures  they model many types relations process dynamics physical  biological social systems  in computer science  represent networks communication  data organization  computational devices  flow computation  etc  in mathematics  useful geometry certain parts topology  e g  knot theory  algebraic graph theory close links group theory  there also continuous graphs  however  part  research graph theory falls within domain discrete mathematics     probability    discrete probability theory deals events occur countable sample spaces  for example  count observations numbers birds flocks comprise natural number values                 on hand  continuous observations weights birds comprise real number values would typically modeled continuous probability distribution normal  discrete probability distributions used approximate continuous ones vice versa  for highly constrained situations throwing dice experiments decks cards  calculating probability events basically enumerative combinatorics     number theory    number theory concerned properties numbers general  particularly integers  it applications cryptography cryptanalysis  particularly regard modular arithmetic  diophantine equations  linear quadratic congruences  prime numbers primality testing  other discrete aspects number theory include geometry numbers  in analytic number theory  techniques continuous mathematics also used  topics go beyond discrete objects include transcendental numbers  diophantine approximation  p-adic analysis function fields     algebraic structures    algebraic structures occur discrete examples continuous examples  discrete algebras include  boolean algebra used logic gates programming  relational algebra used databases  discrete finite versions groups  rings fields important algebraic coding theory  discrete semigroups monoids appear theory formal languages     calculus finite differences  discrete calculus discrete analysis    a function defined interval integers usually called sequence  a sequence could finite sequence data source infinite sequence discrete dynamical system  such discrete function could defined explicitly list  domain finite   formula general term  could given implicitly recurrence relation difference equation  difference equations similar differential equations  replace differentiation taking difference adjacent terms  used approximate differential equations  often  studied right  many questions methods concerning differential equations counterparts difference equations  for instance  integral transforms harmonic analysis studying continuous functions analogue signals  discrete transforms discrete functions digital signals  as well discrete metric general discrete finite metric spaces finite topological spaces     geometry    discrete geometry combinatorial geometry combinatorial properties discrete collections geometrical objects  a long-standing topic discrete geometry tiling plane  computational geometry applies algorithms geometrical problems     topology    although topology field mathematics formalizes generalizes intuitive notion  continuous deformation  objects  gives rise many discrete topics  attributed part focus topological invariants  usually take discrete values see combinatorial topology  topological graph theory  topological combinatorics  computational topology  discrete topological space  finite topological space  topology  chemistry      operations research    operations research provides techniques solving practical problems engineering  business  fields   problems allocating resources maximize profit  scheduling project activities minimize risk  operations research techniques include linear programming areas optimization  queuing theory  scheduling theory  network theory  operations research also includes continuous topics continuous-time markov process  continuous-time martingales  process optimization  continuous hybrid control theory     game theory  decision theory  utility theory  social choice theory    decision theory concerned identifying values  uncertainties issues relevant given decision  rationality  resulting optimal decision utility theory measures relative economic satisfaction  desirability  consumption various goods services social choice theory voting  a puzzle-based approach voting ballot theory game theory deals situations success depends choices others  makes choosing best course action complex  there even continuous games  see differential game  topics include auction theory fair division     discretization    discretization concerns process transferring continuous models equations discrete counterparts  often purposes making calculations easier using approximations  numerical analysis provides important example     discrete analogues continuous mathematics    there many concepts continuous mathematics discrete versions  discrete calculus  discrete probability distributions  discrete fourier transforms  discrete geometry  discrete logarithms  discrete differential geometry  discrete exterior calculus  discrete morse theory  difference equations  discrete dynamical systems  discrete vector measures in applied mathematics  discrete modelling discrete analogue continuous modelling  in discrete modelling  discrete formulae fit data  a common method form modelling use recurrence relation in algebraic geometry  concept curve extended discrete geometries taking spectra polynomial rings finite fields models affine spaces field  letting subvarieties spectra rings provide curves lie space  although space curves appear finite number points  curves much sets points analogues curves continuous settings  for example  every point form                     v                 x                 c                          spec                 k                 x                                                a                                                                   displaystyle v x-c  subset  operatorname  spec  k x   mathbb  a                              k                displaystyle k    field studied either                     spec                 k                 x                                                     x                 c                          spec                 k                displaystyle  operatorname  spec  k x   x-c  cong  operatorname  spec  k     point  spectrum                     spec                 k                 x                                                      x                         c                                               displaystyle  operatorname  spec  k x    x-c      local ring  x-c   point together neighborhood around it  algebraic varieties also well-defined notion tangent space called zariski tangent space  making many features calculus applicable even finite settings     hybrid discrete continuous mathematics    the time scale calculus unification theory difference equations differential equations  applications fields requiring simultaneous modelling discrete continuous data  another way modeling situation notion hybrid dynamical systems    see also   outline discrete mathematicscyberchase  show teaches discrete mathematics children   references      further reading   norman l  biggs      -  -     discrete mathematics  oxford university press  isbn    - -  -      -  john dwyer         an introduction discrete mathematics business   computing  isbn    - -      -  -  susanna s  epp      -  -     discrete mathematics with applications  thomson brooks cole  isbn    - -   -     -  ronald graham  donald e  knuth  oren patashnik  concrete mathematics ralph p  grimaldi         discrete combinatorial mathematics  an applied introduction  addison wesley  isbn    - -   -     -  donald e  knuth      -  -     the art computer programming  volumes  - boxed set  addison-wesley professional  isbn    - -   -     -  ji   matou ek  jaroslav ne et il         discrete mathematics  oxford university press  isbn    - -  -      -  obrenic  bojana      -  -     practice problems discrete mathematics  prentice hall  isbn    - -  -      -  kenneth h  rosen  john g  michaels         hand book discrete combinatorial mathematics  crc pressi llc  isbn    - -    -    -  kenneth h  rosen         discrete mathematics  and its applications  mcgraw-hill college  isbn    - -  -      -  andrew simpson         discrete mathematics example  mcgraw-hill incorporated  isbn    - -  -      -     external links    media related discrete mathematics wikimedia commonsdiscrete mathematics utk edu mathematics archives  providing links syllabi  tutorials  programs  etc iowa central  electrical technologies program discrete mathematics electrical engineering 
in mathematics  graph theory study graphs  mathematical structures used model pairwise relations objects  a graph context made vertices  also called nodes points  connected edges  also called links lines   a distinction made undirected graphs  edges link two vertices symmetrically  directed graphs  edges link two vertices asymmetrically  graphs one principal objects study discrete mathematics    definitions   definitions graph theory vary  the following basic ways defining graphs related mathematical structures     graph    in one restricted common sense term  graph ordered pair                     g                          v                 e                         displaystyle g  v e     comprising                     v                displaystyle v     set vertices  also called nodes points                      e                                   x                                          x                                 v                                                                       x                                         displaystyle e subseteq     x   mid x v    textrm     x neq       set edges  also called links lines   unordered pairs vertices   edge associated two distinct vertices  to avoid ambiguity  type object may called precisely undirected simple graph in edge                              x                                         displaystyle   x       vertices                     x                displaystyle x                                       displaystyle    called endpoints edge  the edge said join                     x                displaystyle x                                       displaystyle    incident                     x                displaystyle x                                       displaystyle     a vertex may exist graph belong edge  multiple edges  allowed definition  two edges join two vertices in one general sense term allowing multiple edges  graph ordered triple                     g                          v                 e                                           displaystyle g  v e  phi      comprising                     v                displaystyle v     set vertices  also called nodes points                      e                displaystyle e     set edges  also called links lines                                        e                                   x                                          x                                 v                                                                       x                                         displaystyle  phi  e     x   mid x v    textrm     x neq       incidence function mapping every edge unordered pair vertices   edge associated two distinct vertices  to avoid ambiguity  type object may called precisely undirected multigraph a loop edge joins vertex itself  graphs defined two definitions cannot loops  loop joining vertex                     x                displaystyle x    edge  undirected simple graph  incident  undirected multigraph                               x                 x                                   x                         displaystyle   x x     x                                            x                                          x                                 v                                                                       x                                         displaystyle     x   mid x v    textrm     x neq       so allow loops definitions must expanded  for undirected simple graphs  definition                     e                displaystyle e    modified                     e                                   x                                          x                                 v                         displaystyle e subseteq     x   mid x v       for undirected multigraphs  definition                                      displaystyle  phi     modified                                       e                                   x                                          x                                 v                         displaystyle  phi  e     x   mid x v       to avoid ambiguity  types objects may called undirected simple graph permitting loops undirected multigraph permitting loops  respectively                     v                displaystyle v                        e                displaystyle e    usually taken finite  many well-known results true  rather different  infinite graphs many arguments fail infinite case  moreover                      v                displaystyle v    often assumed non-empty                      e                displaystyle e    allowed empty set  the order graph                                                v                                           displaystyle  v      number vertices  the size graph                                                e                                           displaystyle  e      number edges  the degree valency vertex number edges incident  loop counted twice  the degree graph maximum degrees vertices in undirected simple graph order n  maximum degree vertex n     maximum size graph n n        the edges undirected simple graph permitting loops                     g                displaystyle g    induce symmetric homogeneous relation   vertices                     g                displaystyle g    called adjacency relation                     g                displaystyle g     specifically  edge                              x                                         displaystyle  x      endpoints                     x                displaystyle x                                       displaystyle    said adjacent one another  denoted                     x                displaystyle x                                         displaystyle        directed graph    a directed graph digraph graph edges orientations in one restricted common sense term  directed graph ordered pair                     g                          v                 e                         displaystyle g  v e     comprising                     v                displaystyle v     set vertices  also called nodes points                      e                                                               x                                                                           x                                                                            v                                                                                                                                                                x                                                                     displaystyle e subseteq  left   x  mid  x  v        textrm     x neq right       set edges  also called directed edges  directed links  directed lines  arrows arcs  ordered pairs vertices   edge associated two distinct vertices  to avoid ambiguity  type object may called precisely directed simple graph in edge                              x                                         displaystyle  x     directed                     x                displaystyle x                                       displaystyle     vertices                     x                displaystyle x                                       displaystyle    called endpoints edge                      x                displaystyle x    tail edge                                    displaystyle    head edge  the edge said join                     x                displaystyle x                                       displaystyle    incident                     x                displaystyle x                                       displaystyle     a vertex may exist graph belong edge  the edge                                              x                         displaystyle  x     called inverted edge                              x                                         displaystyle  x      multiple edges  allowed definition  two edges tail head in one general sense term allowing multiple edges  directed graph ordered triple                     g                          v                 e                                           displaystyle g  v e  phi      comprising                     v                displaystyle v     set vertices  also called nodes points                      e                displaystyle e     set edges  also called directed edges  directed links  directed lines  arrows arcs                                        e                                                               x                                                                           x                                                                            v                                                                                                                                                                x                                                                     displaystyle  phi  e  left   x  mid  x  v        textrm     x neq right       incidence function mapping every edge ordered pair vertices   edge associated two distinct vertices  to avoid ambiguity  type object may called precisely directed multigraph a loop edge joins vertex itself  directed graphs defined two definitions cannot loops  loop joining vertex                     x                displaystyle x    edge  directed simple graph  incident  directed multigraph                               x                 x                         displaystyle  x x                                                                       x                                                                           x                                                                            v                                                                                                                                                                x                                                                     displaystyle  left   x  mid  x  v        textrm     x neq right       so allow loops definitions must expanded  for directed simple graphs  definition                     e                displaystyle e    modified                     e                                                               x                                                                           x                                                                            v                                                                                                      displaystyle e subseteq  left   x  mid  x  v     right       for directed multigraphs  definition                                      displaystyle  phi     modified                                       e                                                               x                                                                           x                                                                            v                                                                                                      displaystyle  phi  e  left   x  mid  x  v     right       to avoid ambiguity  types objects may called precisely directed simple graph permitting loops directed multigraph permitting loops  quiver  respectively the edges directed simple graph permitting loops                     g                displaystyle g    homogeneous relation   vertices                     g                displaystyle g    called adjacency relation                     g                displaystyle g     specifically  edge                              x                                         displaystyle  x      endpoints                     x                displaystyle x                                       displaystyle    said adjacent one another  denoted                     x                displaystyle x                                         displaystyle       applications   graphs used model many types relations processes physical  biological  social information systems  many practical problems represented graphs  emphasizing application real-world systems  term network sometimes defined mean graph attributes  e g  names  associated vertices edges  subject expresses understands real-world systems network called network science     computer science    in computer science  graphs used represent networks communication  data organization  computational devices  flow computation  etc  for instance  link structure website represented directed graph  vertices represent web pages directed edges represent links one page another  a similar approach taken problems social media  travel  biology  computer chip design  mapping progression neuro-degenerative diseases  many fields  the development algorithms handle graphs therefore major interest computer science  the transformation graphs often formalized represented graph rewrite systems  complementary graph transformation systems focusing rule-based in-memory manipulation graphs graph databases geared towards transaction-safe  persistent storing querying graph-structured data     linguistics    graph-theoretic methods  various forms  proven particularly useful linguistics  since natural language often lends well discrete structure  traditionally  syntax compositional semantics follow tree-based structures  whose expressive power lies principle compositionality  modeled hierarchical graph  more contemporary approaches head-driven phrase structure grammar model syntax natural language using typed feature structures  directed acyclic graphs  within lexical semantics  especially applied computers  modeling word meaning easier given word understood terms related words  semantic networks therefore important computational linguistics  still  methods phonology  e g  optimality theory  uses lattice graphs  morphology  e g  finite-state morphology  using finite-state transducers  common analysis language graph  indeed  usefulness area mathematics linguistics borne organizations textgraphs  well various  net  projects  wordnet  verbnet  others     physics chemistry    graph theory also used study molecules chemistry physics  in condensed matter physics  three-dimensional structure complicated simulated atomic structures studied quantitatively gathering statistics graph-theoretic properties related topology atoms  also   feynman graphs rules calculation summarize quantum field theory form close contact experimental numbers one wants understand   in chemistry graph makes natural model molecule  vertices represent atoms edges bonds  this approach especially used computer processing molecular structures  ranging chemical editors database searching  in statistical physics  graphs represent local connections interacting parts system  well dynamics physical process suchsystems  similarly  computational neuroscience graphs used represent functional connections brain areas interact give rise various cognitive processes  vertices represent different areas brain edges represent connections areas  graph theory plays important role electrical modeling electrical networks   weights associated resistance wire segments obtain electrical properties network structures  graphs also used represent micro-scale channels porous media  vertices represent pores edges represent smaller channels connecting pores  chemical graph theory uses molecular graph means model molecules graphs networks excellent models study understand phase transitions critical phenomena removal nodes edges lead critical transition network breaks small clusters studied phase transition  this breakdown studied via percolation theory     social sciences    graph theory also widely used sociology way  example  measure actors  prestige explore rumor spreading  notably use social network analysis software  under umbrella social networks many different types graphs  acquaintanceship friendship graphs describe whether people know other  influence graphs model whether certain people influence behavior others  finally  collaboration graphs model whether two people work together particular way  acting movie together     biology    likewise  graph theory useful biology conservation efforts vertex represent regions certain species exist  inhabit  edges represent migration paths movement regions  this information important looking breeding patterns tracking spread disease  parasites changes movement affect species graphs also commonly used molecular biology genomics model analyse datasets complex relationships  for example  graph-based methods often used  cluster  cells together cell-types single-cell transcriptome analysis  another use model genes proteins pathway study relationships  metabolic pathways gene regulatory networks  evolutionary trees  ecological networks  hierarchical clustering gene expression patterns also represented graph structures  graph theory also used connectomics  nervous systems seen graph  nodes neurons edges connections them     mathematics    in mathematics  graphs useful geometry certain parts topology knot theory  algebraic graph theory close links group theory  algebraic graph theory applied many areas including dynamic systems complexity     other topics    a graph structure extended assigning weight edge graph  graphs weights  weighted graphs  used represent structures pairwise connections numerical values  for example  graph represents road network  weights could represent length road  there may several weights associated edge  including distance  previous example   travel time  monetary cost  such weighted graphs commonly used program gps  travel-planning search engines compare flight times costs    history   the paper written leonhard euler seven bridges k nigsberg published      regarded first paper history graph theory  this paper  well one written vandermonde knight problem  carried analysis situs initiated leibniz  euler formula relating number edges  vertices  faces convex polyhedron studied generalized cauchy l huilier  represents beginning branch mathematics known topology more one century euler paper bridges k nigsberg listing introducing concept topology  cayley led interest particular analytical forms arising differential calculus study particular class graphs  trees  this study many implications theoretical chemistry  the techniques used mainly concern enumeration graphs particular properties  enumerative graph theory arose results cayley fundamental results published p lya            these generalized de bruijn       cayley linked results trees contemporary studies chemical composition  the fusion ideas mathematics chemistry began become part standard terminology graph theory in particular  term  graph  introduced sylvester paper published      nature  draws analogy  quantic invariants   co-variants  algebra molecular diagrams      every invariant co-variant thus becomes expressible graph precisely identical kekul diagram chemicograph      i give rule geometrical multiplication graphs  i e  constructing graph product in- co-variants whose separate graphs given        italics original  the first textbook graph theory written d nes k nig  published       another book frank harary  published        considered world definitive textbook subject   enabled mathematicians  chemists  electrical engineers social scientists talk other  harary donated royalties fund p lya prize one famous stimulating problems graph theory four color problem   is true map drawn plane may regions colored four colors  way two regions common border different colors   this problem first posed francis guthrie      first written record letter de morgan addressed hamilton year  many incorrect proofs proposed  including cayley  kempe  others  the study generalization problem tait  heawood  ramsey hadwiger led study colorings graphs embedded surfaces arbitrary genus  tait reformulation generated new class problems  factorization problems  particularly studied petersen k nig  the works ramsey colorations specially results obtained tur n      origin another branch graph theory  extremal graph theory the four color problem remained unsolved century  in      heinrich heesch published method solving problem using computers  a computer-aided proof produced      kenneth appel wolfgang haken makes fundamental use notion  discharging  developed heesch  the proof involved checking properties       configurations computer  fully accepted time due complexity  a simpler proof considering     configurations given twenty years later robertson  seymour  sanders thomas the autonomous development topology           fertilized graph theory back works jordan  kuratowski whitney  another important factor common development graph theory topology came use techniques modern algebra  the first example use comes work physicist gustav kirchhoff  published      kirchhoff circuit laws calculating voltage current electric circuits the introduction probabilistic methods graph theory  especially study erd r nyi asymptotic probability graph connectivity  gave rise yet another branch  known random graph theory  fruitful source graph-theoretic results    graph drawing   graphs represented visually drawing point circle every vertex  drawing line two vertices connected edge  if graph directed  direction indicated drawing arrow a graph drawing confused graph  abstract  non-visual structure  several ways structure graph drawing  all matters vertices connected others many edges exact layout  in practice  often difficult decide two drawings represent graph  depending problem domain layouts may better suited easier understand others the pioneering work w  t  tutte influential subject graph drawing  among achievements  introduced use linear algebraic methods obtain graph drawings graph drawing also said encompass problems deal crossing number various generalizations  the crossing number graph minimum number intersections edges drawing graph plane must contain  for planar graph  crossing number zero definition drawings surfaces plane also studied    graph-theoretic data structures   there different ways store graphs computer system  the data structure used depends graph structure algorithm used manipulating graph  theoretically one distinguish list matrix structures concrete applications best structure often combination both  list structures often preferred sparse graphs smaller memory requirements  matrix structures hand provide faster access applications consume huge amounts memory  implementations sparse matrix structures efficient modern parallel computer architectures object current investigation list structures include edge list  array pairs vertices  adjacency list  separately lists neighbors vertex  much like edge list  vertex list vertices adjacent to matrix structures include incidence matrix  matrix     whose rows represent vertices whose columns represent edges  adjacency matrix  rows columns indexed vertices  in cases   indicates two adjacent objects   indicates two non-adjacent objects  the degree matrix indicates degree vertices  the laplacian matrix modified form adjacency matrix incorporates information degrees vertices  useful calculations kirchhoff theorem number spanning trees graph the distance matrix  like adjacency matrix  rows columns indexed vertices  rather containing     cell contains length shortest path two vertices    problems       enumeration    there large literature graphical enumeration  problem counting graphs meeting specified conditions  some work found harary palmer            subgraphs  induced subgraphs  minors    a common problem  called subgraph isomorphism problem  finding fixed graph subgraph given graph  one reason interested question many graph properties hereditary subgraphs  means graph property subgraphs too unfortunately  finding maximal subgraphs certain kind often np-complete problem  for example finding largest complete subgraph called clique problem  np-complete  one special case subgraph isomorphism graph isomorphism problem   it asks whether two graphs isomorphic  it known whether problem np-complete  whether solved polynomial time a similar problem finding induced subgraphs given graph  again  important graph properties hereditary respect induced subgraphs  means graph property induced subgraphs also it  finding maximal induced subgraphs certain kind also often np-complete  for example finding largest edgeless induced subgraph independent set called independent set problem  np-complete  still another problem  minor containment problem  find fixed graph minor given graph  a minor subcontraction graph graph obtained taking subgraph contracting   edges  many graph properties hereditary minors  means graph property minors too  for example  wagner theorem states  a graph planar contains minor neither complete bipartite graph k     see three-cottage problem  complete graph k  a similar problem  subdivision containment problem  find fixed graph subdivision given graph  a subdivision homeomorphism graph graph obtained subdividing   edges  subdivision containment related graph properties planarity  for example  kuratowski theorem states    a graph planar contains subdivision neither complete bipartite graph k    complete graph k  another problem subdivision containment kelmans seymour conjecture every  -vertex-connected graph planar contains subdivision  -vertex complete graph k  another class problems extent various species generalizations graphs determined point-deleted subgraphs  for example the reconstruction conjecture    graph coloring    many problems theorems graph theory various ways coloring graphs   typically  one interested coloring graph two adjacent vertices color  similar restrictions   one may also consider coloring edges  possibly two coincident edges color   variations   among famous results conjectures concerning graph coloring following four-color theoremstrong perfect graph theoremerd faber lov sz conjecture  unsolved total coloring conjecture  also called behzad conjecture  unsolved list coloring conjecture  unsolved hadwiger conjecture  graph theory   unsolved     subsumption unification    constraint modeling theories concern families directed graphs related partial order  in applications  graphs ordered specificity  meaning constrained graphs specific thus contain greater amount information subsumed general  operations graphs include evaluating direction subsumption relationship two graphs   computing graph unification  the unification two argument graphs defined general graph  computation thereof  consistent  i e  contains information  inputs  graph exists  efficient unification algorithms known for constraint frameworks strictly compositional  graph unification sufficient satisfiability combination function  well-known applications include automatic theorem proving modeling elaboration linguistic structure     route problems    hamiltonian path problemminimum spanning treeroute inspection problem  also called  chinese postman problem  seven bridges k nigsbergshortest path problemsteiner treethree-cottage problemtraveling salesman problem  np-hard     network flow    there numerous problems arising especially applications various notions flows networks  example max flow min cut theorem    visibility problems    museum guard problem    covering problems    covering problems graphs may refer various  set cover problems subsets vertices subgraphs dominating set problem special case set cover problem sets closed neighborhoods vertex cover problem special case set cover problem sets cover every edges the original set cover problem  also called hitting set  described vertex cover hypergraph     decomposition problems    decomposition  defined partitioning edge set graph  many vertices necessary accompanying edges part partition   wide variety questions  often  problem decompose graph subgraphs isomorphic fixed graph  instance  decomposing complete graph hamiltonian cycles  other problems specify family graphs given graph decomposed  instance  family cycles  decomposing complete graph kn n     specified trees  respectively                n     edges some specific decomposition problems studied include arboricity  decomposition forests possiblecycle double cover  decomposition collection cycles covering edge exactly twiceedge coloring  decomposition matchings possiblegraph factorization  decomposition regular graph regular subgraphs given degrees    graph classes    many problems involve characterizing members various classes graphs  some examples questions enumerating members classcharacterizing class terms forbidden substructuresascertaining relationships among classes  e g  one property graphs imply another finding efficient algorithms decide membership classfinding representations members class   see also      notes      references   bender  edward a   williamson  s  gill         lists  decisions graphs  with introduction probability claude  claude         th orie des graphes et ses applications  paris  dunod  english edition  wiley       methuen   co  new york       russian  moscow       spanish  mexico       roumanian  bucharest       chinese  shanghai       second printing      first english edition  dover  new york      biggs  n   lloyd  e   wilson  r          graph theory             oxford university press bondy  j  a   murty  u  s  r          graph theory  springer  isbn    - -     -   -  bollob  b la  riordan  o  m          mathematical results scale-free random graphs  handbook graphs networks   s  bornholdt h g  schuster  eds     st ed    weinheim  wiley vch chartrand  gary         introductory graph theory  dover  isbn  -   -     -  deo  narsingh         graph theory applications engineering computer science  pdf   englewood  new jersey  prentice-hall  isbn  -  -      -  gibbons  alan         algorithmic graph theory  cambridge university press reuven cohen  shlomo havlin         complex networks  structure  robustness function  cambridge university press  isbn               golumbic  martin         algorithmic graph theory perfect graphs  academic press harary  frank         graph theory  reading  massachusetts  addison-wesley harary  frank  palmer  edgar m          graphical enumeration  new york  new york  academic press mahadev  n  v  r   peled  uri n          threshold graphs related topics  north-holland newman  mark         networks  an introduction  oxford university press kepner  jeremy  gilbert  john         graph algorithms the language linear algebra  philadelphia  pennsylvania  siam  isbn    - -      -  -     external links    graph theory   encyclopedia mathematics  ems press             graph theory tutoriala searchable database small connected graphsimage gallery  graphs wayback machine  archived february         concise  annotated list graph theory resources researchersrocs   graph theory idethe social life routers   non-technical paper discussing graphs people computersgraph theory software   tools teach learn graph theoryonline books  library resources library libraries graph theorya list graph algorithms references links graph library implementations    online textbooks    phase transitions combinatorial optimization problems  section    introduction graphs        hartmann weigtdigraphs  theory algorithms applications      jorgen bang-jensen gregory gutingraph theory  reinhard diestel
mathematical logic study logic within mathematics  major subareas include model theory  proof theory  set theory  recursion theory  research mathematical logic commonly addresses mathematical properties formal systems logic expressive deductive power  however  also include uses logic characterize correct mathematical reasoning establish foundations mathematics since inception  mathematical logic contributed  motivated  study foundations mathematics  this study began late   th century development axiomatic frameworks geometry  arithmetic  analysis  in early   th century shaped david hilbert program prove consistency foundational theories  results kurt g del  gerhard gentzen  others provided partial resolution program  clarified issues involved proving consistency  work set theory showed almost ordinary mathematics formalized terms sets  although theorems cannot proven common axiom systems set theory  contemporary work foundations mathematics often focuses establishing parts mathematics formalized particular formal systems  reverse mathematics  rather trying find theories mathematics developed    subfields scope   the handbook mathematical logic      makes rough division contemporary mathematical logic four areas set theorymodel theoryrecursion theory  andproof theory constructive mathematics  considered parts single area  each area distinct focus  although many techniques results shared among multiple areas  the borderlines amongst fields  lines separating mathematical logic fields mathematics  always sharp   g del incompleteness theorem marks milestone recursion theory proof theory  also led l b theorem modal logic  the method forcing employed set theory  model theory  recursion theory  well study intuitionistic mathematics the mathematical field category theory uses many formal axiomatic methods  includes study categorical logic  category theory ordinarily considered subfield mathematical logic  because applicability diverse fields mathematics  mathematicians including saunders mac lane proposed category theory foundational system mathematics  independent set theory  these foundations use toposes  resemble generalized models set theory may employ classical nonclassical logic    history   mathematical logic emerged mid-  th century subfield mathematics  reflecting confluence two traditions  formal philosophical logic mathematics    mathematical logic  also called   logistic    symbolic logic    algebra logic    recently  simply  formal logic   set logical theories elaborated course last  nineteenth  century aid artificial notation rigorously deductive method    before emergence  logic studied rhetoric  calculationes  syllogism  philosophy   the first half   th century saw explosion fundamental results  accompanied vigorous debate foundations mathematics     early history    theories logic developed many cultures history  including china  india  greece islamic world   greek methods  particularly aristotelian logic  term logic  found organon  found wide application acceptance western science mathematics millennia  the stoics  especially chrysippus  began development predicate logic  in   th-century europe  attempts treat operations formal logic symbolic algebraic way made philosophical mathematicians including leibniz lambert  labors remained isolated little known       th century    in middle nineteenth century  george boole augustus de morgan presented systematic mathematical treatments logic   their work  building work algebraists george peacock  extended traditional aristotelian doctrine logic sufficient framework study foundations mathematics  charles sanders peirce later built upon work boole develop logical system relations quantifiers  published several papers           gottlob frege presented independent development logic quantifiers begriffsschrift  published       work generally considered marking turning point history logic  frege work remained obscure  however  bertrand russell began promote near turn century   the two-dimensional notation frege developed never widely adopted unused contemporary texts from            ernst schr der published vorlesungen  ber die algebra der logik three volumes  this work summarized extended work boole  de morgan  peirce  comprehensive reference symbolic logic understood end   th century      foundational theories     concerns mathematics built proper foundation led development axiomatic systems fundamental areas mathematics arithmetic  analysis  geometry in logic  term arithmetic refers theory natural numbers  giuseppe peano published set axioms arithmetic came bear name  peano axioms   using variation logical system boole schr der adding quantifiers  peano unaware frege work time  around time richard dedekind showed natural numbers uniquely characterized induction properties  dedekind proposed different characterization  lacked formal logical character peano axioms  dedekind work  however  proved theorems inaccessible peano system  including uniqueness set natural numbers  isomorphism   recursive definitions addition multiplication successor function mathematical induction in mid-  th century  flaws euclid axioms geometry became known   in addition independence parallel postulate  established nikolai lobachevsky       mathematicians discovered certain theorems taken granted euclid fact provable axioms  among theorem line contains least two points  circles radius whose centers separated radius must intersect  hilbert developed complete set axioms geometry  building previous work pasch   the success axiomatizing geometry motivated hilbert seek complete axiomatizations areas mathematics  natural numbers real line   this would prove major area research first half   th century the   th century saw great advances theory real analysis  including theories convergence functions fourier series  mathematicians karl weierstrass began construct functions stretched intuition  nowhere-differentiable continuous functions  previous conceptions function rule computation  smooth graph  longer adequate   weierstrass began advocate arithmetization analysis  sought axiomatize analysis using properties natural numbers  the modern       -definition limit continuous functions already developed bolzano       remained relatively unknown cauchy      defined continuity terms infinitesimals  see cours analyse  page       in       dedekind proposed definition real numbers terms dedekind cuts rational numbers  definition still employed contemporary texts georg cantor developed fundamental concepts infinite set theory  his early results developed theory cardinality proved reals natural numbers different cardinalities  over next twenty years  cantor developed theory transfinite numbers series publications  in       published new proof uncountability real numbers introduced diagonal argument  used method prove cantor theorem set cardinality powerset  cantor believed every set could well-ordered  unable produce proof result  leaving open problem            th century    in early decades   th century  main areas study set theory formal logic  the discovery paradoxes informal set theory caused wonder whether mathematics inconsistent  look proofs consistency in       hilbert posed famous list    problems next century  the first two resolve continuum hypothesis prove consistency elementary arithmetic  respectively  tenth produce method could decide whether multivariate polynomial equation integers solution  subsequent work resolve problems shaped direction mathematical logic  effort resolve hilbert entscheidungsproblem  posed       this problem asked procedure would decide  given formalized mathematical statement  whether statement true false      set theory paradoxes     ernst zermelo gave proof every set could well-ordered  result georg cantor unable obtain  to achieve proof  zermelo introduced axiom choice  drew heated debate research among mathematicians pioneers set theory  the immediate criticism method led zermelo publish second exposition result  directly addressing criticisms proof  this paper led general acceptance axiom choice mathematics community skepticism axiom choice reinforced recently discovered paradoxes naive set theory  cesare burali-forti first state paradox  burali-forti paradox shows collection ordinal numbers cannot form set  very soon thereafter  bertrand russell discovered russell paradox       jules richard  discovered richard paradox zermelo provided first set axioms set theory  these axioms  together additional axiom replacement proposed abraham fraenkel  called zermelo fraenkel set theory  zf   zermelo axioms incorporated principle limitation size avoid russell paradox in       first volume principia mathematica russell alfred north whitehead published  this seminal work developed theory functions cardinality completely formal framework type theory  russell whitehead developed effort avoid paradoxes  principia mathematica considered one influential works   th century  although framework type theory prove popular foundational theory mathematics fraenkel proved axiom choice cannot proved axioms zermelo set theory urelements  later work paul cohen showed addition urelements needed  axiom choice unprovable zf  cohen proof developed method forcing  important tool establishing independence results set theory      symbolic logic     leopold l wenheim thoralf skolem obtained l wenheim skolem theorem  says first-order logic cannot control cardinalities infinite structures  skolem realized theorem would apply first-order formalizations set theory  implies formalization countable model  this counterintuitive fact became known skolem paradox in doctoral thesis  kurt g del proved completeness theorem  establishes correspondence syntax semantics first-order logic  g del used completeness theorem prove compactness theorem  demonstrating finitary nature first-order logical consequence  these results helped establish first-order logic dominant logic used mathematicians in       g del published on formally undecidable propositions principia mathematica related systems  proved incompleteness  different meaning word  sufficiently strong  effective first-order theories  this result  known g del incompleteness theorem  establishes severe limitations axiomatic foundations mathematics  striking strong blow hilbert program  it showed impossibility providing consistency proof arithmetic within formal theory arithmetic   hilbert  however  acknowledge importance incompleteness theorem time g del theorem shows consistency proof sufficiently strong  effective axiom system cannot obtained system  system consistent  weaker system  this leaves open possibility consistency proofs cannot formalized within system consider  gentzen proved consistency arithmetic using finitistic system together principle transfinite induction  gentzen result introduced ideas cut elimination proof-theoretic ordinals  became key tools proof theory   g del gave different consistency proof  reduces consistency classical arithmetic intuitionistic arithmetic higher types the first textbook symbolic logic layman written lewis carroll  author alice wonderland            beginnings branches     alfred tarski developed basics model theory beginning       group prominent mathematicians collaborated pseudonym nicolas bourbaki publish  l ments de math matique  series encyclopedic mathematics texts  these texts  written austere axiomatic style  emphasized rigorous presentation set-theoretic foundations  terminology coined texts  words bijection  injection  surjection  set-theoretic foundations texts employed  widely adopted throughout mathematics the study computability came known recursion theory computability theory  early formalizations g del kleene relied recursive definitions functions  when definitions shown equivalent turing formalization involving turing machines  became clear new concept   computable function   discovered  definition robust enough admit numerous independent characterizations  in work incompleteness theorems       g del lacked rigorous concept effective formal system  immediately realized new definitions computability could used purpose  allowing state incompleteness theorems generality could implied original paper numerous results recursion theory obtained     stephen cole kleene emil leon post  kleene introduced concepts relative computability  foreshadowed turing  arithmetical hierarchy  kleene later generalized recursion theory higher-order functionals  kleene georg kreisel studied formal versions intuitionistic mathematics  particularly context proof theory    formal logical systems   at core  mathematical logic deals mathematical concepts expressed using formal logical systems  these systems  though differ many details  share common property considering expressions fixed formal language   the systems propositional logic first-order logic widely studied today  applicability foundations mathematics desirable proof-theoretic properties   stronger classical logics second-order logic infinitary logic also studied  along non-classical logics intuitionistic logic     first-order logic    first-order logic particular formal system logic  its syntax involves finite expressions well-formed formulas  semantics characterized limitation quantifiers fixed domain discourse early results formal logic established limitations first-order logic  the l wenheim skolem theorem        showed set sentences countable first-order language infinite model least one model infinite cardinality  this shows impossible set first-order axioms characterize natural numbers  real numbers  infinite structure isomorphism  as goal early foundational studies produce axiomatic theories parts mathematics  limitation particularly stark g del completeness theorem established equivalence semantic syntactic definitions logical consequence first-order logic  it shows particular sentence true every model satisfies particular set axioms  must finite deduction sentence axioms  the compactness theorem first appeared lemma g del proof completeness theorem  took many years logicians grasped significance began apply routinely  it says set sentences model every finite subset model  words inconsistent set formulas must finite inconsistent subset  the completeness compactness theorems allow sophisticated analysis logical consequence first-order logic development model theory  key reason prominence first-order logic mathematics g del incompleteness theorems establish additional limits first-order axiomatizations  the first incompleteness theorem states consistent  effectively given  defined  logical system capable interpreting arithmetic  exists statement true  sense holds natural numbers  provable within logical system  indeed may fail non-standard models arithmetic may consistent logical system   for example  every logical system capable expressing peano axioms  g del sentence holds natural numbers cannot proved here logical system said effectively given possible decide  given formula language system  whether formula axiom  one express peano axioms called  sufficiently strong   when applied first-order logic  first incompleteness theorem implies sufficiently strong  consistent  effective first-order theory models elementarily equivalent  stronger limitation one established l wenheim skolem theorem  the second incompleteness theorem states sufficiently strong  consistent  effective axiom system arithmetic prove consistency  interpreted show hilbert program cannot reached     other classical logics    many logics besides first-order logic studied   these include infinitary logics  allow formulas provide infinite amount information  higher-order logics  include portion set theory directly semantics the well studied infinitary logic                               l                                                                                                                                                          displaystyle l   omega       omega       in logic  quantifiers may nested finite depths  first-order logic  formulas may finite countably infinite conjunctions disjunctions within them  thus  example  possible say object whole number using formula                               l                                                                                                                                                          displaystyle l   omega       omega                                  x                                                     x                                                     x                                                                      displaystyle  x    lor  x    lor  x    lor  cdots     higher-order logics allow quantification elements domain discourse  subsets domain discourse  sets subsets  objects higher type  the semantics defined  rather separate domain higher-type quantifier range  quantifiers instead range objects appropriate type   the logics studied development first-order logic  example frege logic  similar set-theoretic aspects  although higher-order logics expressive  allowing complete axiomatizations structures natural numbers  satisfy analogues completeness compactness theorems first-order logic  thus less amenable proof-theoretic analysis another type logics fixed-point logics allow inductive definitions  like one writes primitive recursive functions one formally define extension first-order logic   notion encompasses logics section behave like first-order logic certain fundamental ways  encompass logics general  e g  encompass intuitionistic  modal fuzzy logic lindstr theorem implies extension first-order logic satisfying compactness theorem downward l wenheim skolem theorem first-order logic     nonclassical modal logic    modal logics include additional modal operators  operator states particular formula true  necessarily true  although modal logic often used axiomatize mathematics  used study properties first-order provability set-theoretic forcing intuitionistic logic developed heyting study brouwer program intuitionism  brouwer avoided formalization  intuitionistic logic specifically include law excluded middle  states sentence either true negation true   kleene work proof theory intuitionistic logic showed constructive information recovered intuitionistic proofs  for example  provably total function intuitionistic arithmetic computable  true classical theories arithmetic peano arithmetic     algebraic logic    algebraic logic uses methods abstract algebra study semantics formal logics  a fundamental example use boolean algebras represent truth values classical propositional logic  use heyting algebras represent truth values intuitionistic propositional logic  stronger logics  first-order logic higher-order logic  studied using complicated algebraic structures cylindric algebras    set theory   set theory study sets  abstract collections objects  many basic notions  ordinal cardinal numbers  developed informally cantor formal axiomatizations set theory developed  the first axiomatization  due zermelo  extended slightly become zermelo fraenkel set theory  zf   widely used foundational theory mathematics other formalizations set theory proposed  including von neumann bernays g del set theory  nbg   morse kelley set theory  mk   new foundations  nf    of  zf  nbg  mk similar describing cumulative hierarchy sets  new foundations takes different approach  allows objects set sets cost restrictions set-existence axioms  the system kripke platek set theory closely related generalized recursion theory two famous statements set theory axiom choice continuum hypothesis  the axiom choice  first stated zermelo  proved independent zf fraenkel  come widely accepted mathematicians   it states given collection nonempty sets single set c contains exactly one element set collection  the set c said  choose  one element set collection  while ability make choice considered obvious  since set collection nonempty  lack general  concrete rule choice made renders axiom nonconstructive  stefan banach alfred tarski showed axiom choice used decompose solid ball finite number pieces rearranged  scaling  make two solid balls original size  this theorem  known banach tarski paradox  one many counterintuitive results axiom choice the continuum hypothesis  first proposed conjecture cantor  listed david hilbert one    problems       g del showed continuum hypothesis cannot disproven axioms zermelo fraenkel set theory  without axiom choice   developing constructible universe set theory continuum hypothesis must hold  in       paul cohen showed continuum hypothesis cannot proven axioms zermelo fraenkel set theory  this independence result completely settle hilbert question  however  possible new axioms set theory could resolve hypothesis  recent work along lines conducted w  hugh woodin  although importance yet clear contemporary research set theory includes study large cardinals determinacy   large cardinals cardinal numbers particular properties strong existence cardinals cannot proved zfc  the existence smallest large cardinal typically studied  inaccessible cardinal  already implies consistency zfc   despite fact large cardinals extremely high cardinality  existence many ramifications structure real line   determinacy refers possible existence winning strategies certain two-player games  games said determined   the existence strategies implies structural properties real line polish spaces    model theory   model theory studies models various formal theories   here theory set formulas particular formal logic signature  model structure gives concrete interpretation theory  model theory closely related universal algebra algebraic geometry  although methods model theory focus logical considerations fields the set models particular theory called elementary class  classical model theory seeks determine properties models particular elementary class  determine whether certain classes structures form elementary classes the method quantifier elimination used show definable sets particular theories cannot complicated  tarski established quantifier elimination real-closed fields  result also shows theory field real numbers decidable  he also noted methods equally applicable algebraically closed fields arbitrary characteristic  a modern subfield developing concerned o-minimal structures morley categoricity theorem  proved michael d  morley  states first-order theory countable language categorical uncountable cardinality  i e  models cardinality isomorphic  categorical uncountable cardinalities a trivial consequence continuum hypothesis complete theory less continuum many nonisomorphic countable models countably many  vaught conjecture  named robert lawson vaught  says true even independently continuum hypothesis   many special cases conjecture established    recursion theory   recursion theory  also called computability theory  studies properties computable functions turing degrees  divide uncomputable functions sets level uncomputability   recursion theory also includes study generalized computability definability   recursion theory grew work r zsa p ter  alonzo church alan turing      greatly extended kleene post     s classical recursion theory focuses computability functions natural numbers natural numbers  the fundamental results establish robust  canonical class computable functions numerous independent  equivalent characterizations using turing machines    calculus  systems   more advanced results concern structure turing degrees lattice recursively enumerable sets generalized recursion theory extends ideas recursion theory computations longer necessarily finite  it includes study computability higher types well areas hyperarithmetical theory  -recursion theory contemporary research recursion theory includes study applications algorithmic randomness  computable model theory  reverse mathematics  well new results pure recursion theory     algorithmically unsolvable problems    an important subfield recursion theory studies algorithmic unsolvability  decision problem function problem algorithmically unsolvable possible computable algorithm returns correct answer legal inputs problem  the first results unsolvability  obtained independently church turing       showed entscheidungsproblem algorithmically unsolvable  turing proved establishing unsolvability halting problem  result far-ranging implications recursion theory computer science there many known examples undecidable problems ordinary mathematics  the word problem groups proved algorithmically unsolvable pyotr novikov      independently w  boone        the busy beaver problem  developed tibor rad        another well-known example hilbert tenth problem asked algorithm determine whether multivariate polynomial equation integer coefficients solution integers  partial progress made julia robinson  martin davis hilary putnam  the algorithmic unsolvability problem proved yuri matiyasevich         proof theory constructive mathematics   proof theory study formal proofs various logical deduction systems  these proofs represented formal mathematical objects  facilitating analysis mathematical techniques   several deduction systems commonly considered  including hilbert-style deduction systems  systems natural deduction  sequent calculus developed gentzen the study constructive mathematics  context mathematical logic  includes study systems non-classical logic intuitionistic logic  well study predicative systems   an early proponent predicativism hermann weyl  showed possible develop large part real analysis using predicative methods because proofs entirely finitary  whereas truth structure  common work constructive mathematics emphasize provability    the relationship provability classical  nonconstructive  systems provability intuitionistic  constructive  respectively  systems particular interest   results g del gentzen negative translation show possible embed  translate  classical logic intuitionistic logic  allowing properties intuitionistic proofs transferred back classical proofs recent developments proof theory include study proof mining ulrich kohlenbach study proof-theoretic ordinals michael rathjen    applications    mathematical logic successfully applied mathematics foundations  g  frege  b  russell  d  hilbert  p  bernays  h  scholz  r  carnap  s  lesniewski  t  skolem   also physics  r  carnap  a  dittrich  b  russell  c  e  shannon  a  n  whitehead  h  reichenbach  p  fevrier   biology  j  h  woodger  a  tarski   psychology  f  b  fitch  c  g  hempel   law morals  k  menger  u  klug  p  oppenheim   economics  j  neumann  o  morgenstern   practical questions  e  c  berkeley  e  stamm   even metaphysics  j   jan  salamucha  h  scholz  j  m  bochenski    its applications history logic proven extremely fruitful  j  lukasiewicz  h  scholz  b  mates  a  becker  e  moody  j  salamucha  k  duerr  z  jordan  p  boehner  j  m  bochenski  s   stanislaw  t  schayer  d  ingalls     applications also made theology  f  drewnowski  j  salamucha  i  thomas      connections computer science   the study computability theory computer science closely related study computability mathematical logic   there difference emphasis  however   computer scientists often focus concrete programming languages feasible computability  researchers mathematical logic often focus computability theoretical concept noncomputability the theory semantics programming languages related model theory  program verification  particular  model checking   the curry howard correspondence proofs programs relates proof theory  especially intuitionistic logic  formal calculi lambda calculus combinatory logic studied idealized programming languages computer science also contributes mathematics developing techniques automatic checking even finding proofs  automated theorem proving logic programming descriptive complexity theory relates logics computational complexity  the first significant result area  fagin theorem        established np precisely set languages expressible sentences existential second-order logic    foundations mathematics   in   th century  mathematicians became aware logical gaps inconsistencies field  it shown euclid axioms geometry  taught centuries example axiomatic method  incomplete  the use infinitesimals  definition function  came question analysis  pathological examples weierstrass  nowhere-differentiable continuous function discovered cantor study arbitrary infinite sets also drew criticism  leopold kronecker famously stated  god made integers  else work man   endorsing return study finite  concrete objects mathematics  although kronecker argument carried forward constructivists   th century  mathematical community whole rejected them  david hilbert argued favor study infinite  saying  no one shall expel us paradise cantor created  mathematicians began search axiom systems could used formalize large parts mathematics  in addition removing ambiguity previously naive terms function  hoped axiomatization would allow consistency proofs   in   th century  main method proving consistency set axioms provide model it  thus  example  non-euclidean geometry proved consistent defining point mean point fixed sphere line mean great circle sphere  the resulting structure  model elliptic geometry  satisfies axioms plane geometry except parallel postulate with development formal logic  hilbert asked whether would possible prove axiom system consistent analyzing structure possible proofs system  showing analysis impossible prove contradiction  this idea led study proof theory  moreover  hilbert proposed analysis entirely concrete  using term finitary refer methods would allow precisely defining them  this project  known hilbert program  seriously affected g del incompleteness theorems  show consistency formal theories arithmetic cannot established using methods formalizable theories  gentzen showed possible produce proof consistency arithmetic finitary system augmented axioms transfinite induction  techniques developed seminal proof theory a second thread history foundations mathematics involves nonclassical logics constructive mathematics  the study constructive mathematics includes many different programs various definitions constructive  at accommodating end  proofs zf set theory use axiom choice called constructive many mathematicians  more limited versions constructivism limit natural numbers  number-theoretic functions  sets natural numbers  used represent real numbers  facilitating study mathematical analysis   a common idea concrete means computing values function must known function said exist  in early   th century  luitzen egbertus jan brouwer founded intuitionism part philosophy mathematics   this philosophy  poorly understood first  stated order mathematical statement true mathematician  person must able intuit statement  believe truth understand reason truth  a consequence definition truth rejection law excluded middle  statements  according brouwer  could claimed true negations also could claimed true   brouwer philosophy influential  cause bitter disputes among prominent mathematicians  later  kleene kreisel would study formalized versions intuitionistic logic  brouwer rejected formalization  presented work unformalized natural language   with advent bhk interpretation kripke models  intuitionism became easier reconcile classical mathematics    see also   argumentinformal logicknowledge representation reasoninglogiclist computability complexity topicslist first-order theorieslist logic symbolslist mathematical logic topicslist set theory topicsmereologypropositional calculuswell-formed formula   notes      references       undergraduate texts    walicki  micha          introduction mathematical logic  singapore  world scientific publishing  isbn               boolos  george  burgess  john  jeffrey  richard         computability logic   th ed    cambridge university press  isbn               crossley  j n   ash  c j   brickhill  c j   stillwell  j c   williams  n h          what mathematical logic   london  oxford  new york city  oxford university press  isbn                zbl            enderton  herbert         a mathematical introduction logic   nd ed    boston ma  academic press  isbn    - -  -      -  fisher  alec         formal number theory computability  a workbook   suitable first course independent study    st ed    oxford university press  isbn    - -  -      -  hamilton  a g          logic mathematicians   nd ed    cambridge university press  isbn    - -   -     -  ebbinghaus  h -d   flum  j   thomas  w          mathematical logic   nd ed    new york city  springer  isbn               katz  robert         axiomatic analysis  boston ma  d  c  heath company mendelson  elliott         introduction mathematical logic   th ed    london  chapman   hall  isbn    - -   -     -  rautenberg  wolfgang         a concise introduction mathematical logic   rd ed    new york city  springer  doi            - -    -    -   isbn               schwichtenberg  helmut              mathematical logic  pdf   munich  mathematisches institut der universit m nchen  retrieved     -  -   shawn hedman  a first course logic  introduction model theory  proof theory  computability  complexity  oxford university press        isbn  -  -      -   covers logics close relation computability theory complexity theoryvan dalen  dirk         logic structure  universitext  berlin  springer  doi            - -    -    -   isbn    - -    -    -      graduate texts    andrews  peter b          an introduction mathematical logic type theory  to truth through proof   nd ed    boston  kluwer academic publishers  isbn    - -    -    -  barwise  jon  ed          handbook mathematical logic  studies logic foundations mathematics  amsterdam  elsevier  isbn               hodges  wilfrid         a shorter model theory  cambridge university press  isbn               jech  thomas         set theory  millennium edition  springer monographs mathematics  berlin  new york  springer  isbn               kleene  stephen cole         introduction metamathematics  new york  van nostrand   ishi press       reprint  kleene  stephen cole           mathematical logic  john wiley  dover reprint        isbn  -   -     -  shoenfield  joseph r                 mathematical logic   nd ed    a k peters  isbn               troelstra  anne sjerp  schwichtenberg  helmut         basic proof theory  cambridge tracts theoretical computer science   nd ed    cambridge university press  isbn    - -   -     -      research papers  monographs  texts  surveys    augusto  luis m          logical consequences  theory applications  an introduction  london  college publications  isbn    - -     -   -  boehner  philotheus         medieval logic  manchester cohen  paul j          set theory continuum hypothesis  menlo park ca  w  a  benjamin cohen  paul j                 set theory continuum hypothesis  mineola ny  dover publications  isbn               j d  sneed  the logical structure mathematical physics  reidel  dordrecht        revised edition       davis  martin          hilbert tenth problem unsolvable   the american mathematical monthly                   doi                  jstor          reprinted appendix martin davis         computability unsolvability  dover  isbn               felscher  walter          bolzano  cauchy  epsilon  delta   the american mathematical monthly                    doi                  jstor         ferreir  jos           the road modern logic-an interpretation   pdf   bulletin symbolic logic                  doi                  hdl              jstor          s cid          hamkins  joel david  l  benedikt          the modal logic forcing   transactions american mathematical society                      arxiv math          doi            -    -  -     -   s cid          katz  victor j          a history mathematics  addison wesley  isbn               morley  michael          categoricity power   transactions american mathematical society                    doi                  jstor         soare  robert i           computability recursion   bulletin symbolic logic                  citeseerx                 doi                 jstor        solovay  robert m           provability interpretations modal logic   israel journal mathematics                     doi         bf          s cid           woodin  w  hugh          the continuum hypothesis  part i   pdf   notices american mathematical society             classical papers  texts  collections    banach  stefan  tarski  alfred          sur la composition des ensembles de points en parties respectivement congruentes   pdf   fundamenta mathematicae  french               doi         fm- - -   -    bochenski  jozef maria  ed          a precis mathematical logic  synthese library  vol     translated otto bird  dordrecht  springer  doi            -  -   -    -   isbn               burali-forti  cesare         a question transfinite numbers  reprinted van heijenoort       pp         cantor  georg          ueber eine eigenschaft des inbegriffes aller reellen algebraischen zahlen   pdf   journal f r die reine und angewandte mathematik                      doi         crll              s cid           carroll  lewis         symbolic logic  kessinger legacy reprints  isbn               dedekind  richard         stetigkeit und irrationale zahlen  german   english translation   consistency irrational numbers  dedekind  richard         was sind und sollen die zahlen   two english translations              essays theory numbers  beman  w  w   ed  trans  dover       in from kant hilbert  a source book foundations mathematics    vols  ewald  william b   ed   oxford university press          fraenkel  abraham a           der begriff  definit  und die unabh ngigkeit des auswahlsaxioms   sitzungsberichte der preussischen akademie der wissenschaften  physikalisch-mathematische klasse  german   pp           reprinted english translation  the notion  definite  independence axiom choice  van heijenoort       pp          frege  gottlob         begriffsschrift  eine der arithmetischen nachgebildete formelsprache des reinen denkens  halle a  s   louis nebert  translation  concept script  formal language pure thought modelled upon arithmetic  s  bauer-mengelberg van heijenoort      frege  gottlob         die grundlagen der arithmetik  eine logisch-mathematische untersuchung  ber den begriff der zahl  breslau  w  koebner  translation  j  l  austin        the foundations arithmetic  a logico-mathematical enquiry concept number   nd ed  blackwell gentzen  gerhard          die widerspruchsfreiheit der reinen zahlentheorie   mathematische annalen                doi         bf          s cid            reprinted english translation gentzen collected works  m  e  szabo  ed   north-holland  amsterdam       g del  kurt          ber die vollst ndigkeit des logikkalk ls  completeness logical calculus   doctoral dissertation  university of vienna g del  kurt          die vollst ndigkeit der axiome des logischen funktionen-kalk ls   the completeness axioms calculus logical functions   monatshefte f r mathematik und physik  german                doi         bf          s cid           g del  kurt           ber formal unentscheidbare s tze der principia mathematica und verwandter systeme i   on formally undecidable propositions principia mathematica related systems   monatshefte f r mathematik und physik  german                    doi         bf          s cid           g del  kurt           ber eine bisher noch nicht ben tzte erweiterung des finiten standpunktes   dialectica  german                      doi         j     -          tb      x  reprinted english translation g del collected works  vol ii  solomon feferman et al   eds  oxford university press       van heijenoort  jean  ed                 from frege g del  a source book mathematical logic              rd ed    cambridge ma  harvard university press  isbn                 pbk   hilbert  david         grundlagen der geometrie  german   leipzig  teubner  english      edition  the foundations geometry  republished       open court  chicago hilbert  david          probleme der grundlegung der mathematik   mathematische annalen            doi         bf          s cid            lecture given international congress mathematicians    september       published english translation  the grounding elementary number theory   mancosu       pp          hilbert  david  bernays  paul         grundlagen der mathematik  i  die grundlehren der mathematischen wissenschaften      berlin  new york city  springer  isbn                jfm             mr         kleene  stephen cole          recursive predicates quantifiers   transactions american mathematical society                 doi                  jstor         lobachevsky  nikolai         geometrishe untersuchungen zur theorie der parellellinien  german   reprinted english translation robert bonola  ed           geometric investigations theory parallel lines   non-euclidean geometry  dover  isbn  -   -     -  l wenheim  leopold           ber m glichkeiten im relativkalk l   mathematische annalen  german                    doi         bf          issn     -      s cid            translated  on possibilities calculus relatives  jean van heijenoort         a source book mathematical logic             harvard univ  press  pp          mancosu  paolo  ed          from brouwer hilbert  the debate foundations mathematics     s  oxford university press pasch  moritz         vorlesungen  ber neuere geometrie peano  giuseppe         arithmetices principia  nova methodo exposita  lithuanian   excerpt reprinted english translation  the principles arithmetic  presented new method van heijenoort       pp        richard  jules          les principes des math matiques et le probl des ensembles   revue g n rale des sciences pures et appliqu es  french            reprinted english translation  the principles mathematics problems sets  van heijenoort       pp          skolem  thoralf          logisch-kombinatorische untersuchungen  ber die erf llbarkeit oder beweisbarkeit mathematischer s tze nebst einem theoreme  ber dichte mengen   videnskapsselskapet skrifter  i  matematisk-naturvidenskabelig klasse  german           soare  robert irving     december         computability theory applications  the art classical computability   pdf   department mathematics  university chicago  retrieved    august      swineshead  richard         calculationes suiseth anglici  lithuanian   papie  per franciscum gyrardengum tarski  alfred         a decision method elementary algebra geometry  santa monica ca  rand corporation turing  alan m           systems logic based ordinals   proceedings london mathematical society                   doi         plms -          hdl              -    -  ce-  weyl  hermann         das kontinuum  kritische untersuchungen  ber die grund lagen der analysis  german   leipzig zermelo  ernst          beweis  da  jede menge wohlgeordnet werden kann   mathematische annalen  german                    doi         bf          s cid            reprinted english translation  proof every set well-ordered  van heijenoort       pp          zermelo  ernst         neuer beweis f r die m glichkeit einer wohlordnung   mathematische annalen  german                doi         bf          issn     -      s cid            reprinted english translation  a new proof possibility well-ordering  van heijenoort       pp          zermelo  ernst      b    untersuchungen  ber die grundlagen der mengenlehre   mathematische annalen                   doi         bf          s cid              external links    mathematical logic   encyclopedia mathematics  ems press             polyvalued logic quantity relation logicforall x  introduction formal logic  free textbook p  d  magnus a problem course mathematical logic  free textbook stefan bilaniuk detlovs  vilnis  podnieks  karlis  university latvia   introduction mathematical logic   hyper-textbook  in stanford encyclopedia philosophy classical logic stewart shapiro first-order model theory wilfrid hodges in london philosophy study guide mathematical logicset theory   further logicphilosophy mathematics
in mathematics mathematical logic  boolean algebra branch algebra values variables truth values true false  usually denoted      respectively  instead elementary algebra  values variables numbers prime operations addition multiplication  main operations boolean algebra conjunction   denoted    disjunction   denoted    negation   denoted    it thus formalism describing logical operations  way elementary algebra describes numerical operations boolean algebra introduced george boole first book the mathematical analysis logic         set forth fully an investigation laws thought        according huntington  term  boolean algebra  first suggested sheffer       although charles sanders peirce gave title  a boolean algebra one constant  first chapter  the simplest mathematics       boolean algebra fundamental development digital electronics  provided modern programming languages  it also used set theory statistics    history   a precursor boolean algebra gottfried wilhelm leibniz algebra concepts  leibniz algebra concepts deductively equivalent boolean algebra sets boole algebra predated modern developments abstract algebra mathematical logic  however seen connected origins fields  in abstract setting  boolean algebra perfected late   th century jevons  schr der  huntington others  reached modern conception  abstract  mathematical structure  for example  empirical observation one manipulate expressions algebra sets  translating expressions boole algebra  explained modern terms saying algebra sets boolean algebra  note indefinite article   in fact  m  h  stone proved      every boolean algebra isomorphic field sets in      studying switching circuits  claude shannon observed one could also apply rules boole algebra setting  introduced switching algebra way analyze design circuits algebraic means terms logic gates  shannon already disposal abstract mathematical apparatus  thus cast switching algebra two-element boolean algebra  in modern circuit engineering settings  little need consider boolean algebras  thus  switching algebra   boolean algebra  often used interchangeably efficient implementation boolean functions fundamental problem design combinational logic circuits  modern electronic design automation tools vlsi circuits often rely efficient representation boolean functions known  reduced ordered  binary decision diagrams  bdd  logic synthesis formal verification logic sentences expressed classical propositional calculus equivalent expression boolean algebra  thus  boolean logic sometimes used denote propositional calculus performed way  boolean algebra sufficient capture logic formulas using quantifiers  like first order logic although development mathematical logic follow boole program  connection algebra logic later put firm ground setting algebraic logic  also studies algebraic systems many logics  the problem determining whether variables given boolean  propositional  formula assigned way make formula evaluate true called boolean satisfiability problem  sat   importance theoretical computer science  first problem shown np-complete  the closely related model computation known boolean circuit relates time complexity  algorithm  circuit complexity    values   whereas expressions denote mainly numbers elementary algebra  boolean algebra  denote truth values false true  these values represented bits  binary digits   namely      they behave like integers                 may identified elements two-element field gf      integer arithmetic modulo               addition multiplication play boolean roles xor  exclusive-or  and  conjunction   respectively  disjunction x    inclusive-or  definable x     xy boolean algebra also deals functions values set        a sequence bits commonly used functions  another common example subsets set e  subset f e  one define indicator function takes value   f    outside f  the general example elements boolean algebra  foregoing instances thereof as elementary algebra  purely equational part theory may developed  without considering explicit values variables    operations       basic operations    the basic operations boolean algebra conjunction  disjunction  negation  these boolean operations expressed corresponding binary operators and  or unary operator not  collectively referred boolean operators the basic boolean operations variables x defined follows alternatively values x  x   x expressed tabulating values truth tables follows if truth values     interpreted integers  operations may expressed ordinary operations arithmetic  x   uses addition xy uses multiplication   minimum maximum functions                                                                         x                                                                                                             x                                                min                                 x                                                                                                                     x                                                                                                             x                                                                 x                                                max                                 x                                                                                                                                      x                                                                                                               x                                                            displaystyle   begin aligned x wedge  xy  min x   x vee  x y-xy  max x    neg x   -x end aligned     one might consider negation one two operations basic  following identities allow one define conjunction terms negation disjunction  vice versa  de morgan laws                                                                          x                                                                                                                                                                x                                                                                                                                      x                                                                                                                                                                x                                                                                                                              displaystyle   begin aligned x wedge   neg   neg x vee  neg   x vee   neg   neg x wedge  neg  end aligned         secondary operations    the three boolean operations described referred basic  meaning taken basis boolean operations built composition  manner operations combined compounded  operations composed basic operations include following examples these definitions give rise following truth tables giving values operations four possible inputs material conditionalthe first operation  x    cxy  called material implication  if x true  value x   taken  e g  x true false  x   also false   but x false  value ignored  however  operation must return boolean value two choices  so definition  x   true x false    relevance logic suggests definition  viewing implication false premise something either true false  exclusive or  xor the second operation  x    jxy  called exclusive  often abbreviated xor  distinguish disjunction inclusive kind  it excludes possibility x true  e g  see table   true result false  defined terms arithmetic addition mod             logical equivalencethe third operation  complement exclusive  equivalence boolean equality  x    exy  true x value  hence x   complement understood x    true x different  thus  counterpart arithmetic mod   x   y  equivalence counterpart arithmetic mod   x       given two operands  two possible values         possible combinations inputs  because output two possible values  total         possible binary boolean operations  any operation function  well boolean function inputs  expressed basic operations above  hence basic operations functionally complete    laws   a law boolean algebra identity x      z     x      z two boolean terms  boolean term defined expression built variables constants     using operations          the concept extended terms involving boolean operations          extensions unnecessary purposes laws put  such purposes include definition boolean algebra model boolean laws  means deriving new laws old derivation x      z    x    z      z   z    treated   axiomatizing boolean algebra      monotone laws    boolean algebra satisfies many laws ordinary algebra one matches   addition   multiplication  in particular following laws common kinds algebra the following laws hold boolean algebra  ordinary algebra taking x     third law shows ordinary algebra law  since            the remaining five laws falsified ordinary algebra taking variables    for example  absorption law    left hand side would               right hand side would     all laws treated thus far conjunction disjunction  these operations property changing either argument either leaves output unchanged  output changes way input  equivalently  changing variable     never results output changing      operations property said monotone  thus axioms thus far monotonic boolean logic  nonmonotonicity enters via complement   follows     nonmonotone laws    the complement operation defined following two laws                                                                                                         complementation                                                              x                                                  x                                                                                                                                                                                  complementation                                                              x                                                  x                                                                                                                                          displaystyle   begin aligned    text complementation     x wedge  neg x        text complementation     x vee  neg x    end aligned     all properties negation including laws follow two laws alone in ordinary boolean algebra  negation works exchanging pairs elements  whence algebras satisfies double negation law  also called involution law                                                                                                         double negation                                                                                                                                                         x                                                                                                                                  x                                                            displaystyle   begin aligned    text double negation    neg    neg  x     x end aligned     but whereas ordinary algebra satisfies two laws                                                                                                          x                                                                                                                                                                x                                                                                                                     x                                                                                                                                                                                                                   x                                                                                                             displaystyle   begin aligned  -x  -y   xy   -x   -y   - x  end aligned     boolean algebra satisfies de morgan laws                                                                                                         de morgan                                                                               x                                                                                                                                                                                    x                                                                                                                                                                           de morgan                                                                               x                                                                                                                                                                                    x                                                                                                                                   displaystyle   begin aligned    text de morgan      neg x wedge  neg   neg   x vee       text de morgan      neg x vee  neg   neg   x wedge   end aligned         completeness    the laws listed define boolean algebra  sense entail rest subject  the laws complementation      together monotone laws  suffice purpose therefore taken one possible complete set laws axiomatization boolean algebra  every law boolean algebra follows logically axioms  furthermore  boolean algebras defined models axioms treated   boolean algebras to clarify  writing laws boolean algebra cannot give rise new consequences axioms  rule model them  in contrast  list laws  could boolean laws follow list  moreover would models listed laws boolean algebras this axiomatization means one  even necessarily natural given pay attention whether axioms followed others simply chose stop noticed enough laws  treated   axiomatizing boolean algebra  or intermediate notion axiom sidestepped altogether defining boolean law directly tautology  understood equation holds values variables      all definitions boolean algebra shown equivalent     duality principle    principle  if  x  r  poset   x  r inverse   also poset there nothing magical choice symbols values boolean algebra  we could rename     say      long consistently throughout would still boolean algebra  albeit obvious cosmetic differences but suppose rename         respectively  then would still boolean algebra  moreover operating values  however would identical original boolean algebra find   behaving way   used vice versa  so still cosmetic differences show fiddling notation  despite fact still using   s but addition interchanging names values also interchange names two binary operations  trace done  the end product completely indistinguishable started with  we might notice columns x   x   truth tables changed places  switch immaterial when values operations paired way leaves everything important unchanged pairs switched simultaneously  call members pair dual other  thus     dual      dual  the duality principle  also called de morgan duality  asserts boolean algebra unchanged dual pairs interchanged one change need make part interchange complement  we say complement self-dual operation  the identity do-nothing operation x  copy input output  also self-dual  a complicated example self-dual operation  x         z     z   x   there self-dual binary operation depends arguments  a composition self-dual operations self-dual operation  for example  f x   z     x         z     z   x   f f x   z   x   self-dual operation four arguments x   z  t the principle duality explained group theory perspective fact exactly four functions one-to-one mappings  automorphisms  set boolean polynomials back  identity function  complement function  dual function contradual function  complemented dual   these four functions form group function composition  isomorphic klein four-group  acting set boolean polynomials  walter gottschalk remarked consequently appropriate name phenomenon would principle  square  quaternality    diagrammatic representations       venn diagrams    a venn diagram used representation boolean operation using shaded overlapping regions  there one region variable  circular examples here  the interior exterior region x corresponds respectively values    true     false  variable x  the shading indicates value operation combination regions  dark denoting   light    authors use opposite convention  the three venn diagrams figure represent respectively conjunction x  disjunction x  complement  x for conjunction  region inside circles shaded indicate x   variables    the regions left unshaded indicate x   three combinations the second diagram represents disjunction x shading regions lie inside either circles  the third diagram represents complement  x shading region inside circle while shown venn diagrams constants      trivial  respectively white box dark box  neither one containing circle  however could put circle x boxes  case would denote function one argument  x  returns value independently x  called constant function  as far outputs concerned  constants constant functions indistinguishable  difference constant takes arguments  called zeroary nullary operation  constant function takes one argument  ignores  unary operation venn diagrams helpful visualizing laws  the commutativity laws     seen symmetry diagrams  binary operation commutative would symmetric diagram interchanging x would effect reflecting diagram horizontally failure commutativity would appear failure symmetry idempotence     visualized sliding two circles together noting shaded area becomes whole circle      to see first absorption law  x  x    x  start diagram middle x note portion shaded area common x circle whole x circle  for second absorption law  x  x    x  start left diagram x note shading whole x circle results x circle shaded  since previous shading inside x circle the double negation law seen complementing shading third diagram  x  shades x circle to visualize first de morgan law    x         x   start middle diagram x complement shading region outside circles shaded  right hand side law describes  the result shaded region outside x circle outside circle  i e  conjunction exteriors  left hand side law describes the second de morgan law    x         x   works way two diagrams interchanged the first complement law  x  x      says interior exterior x circle overlap  the second complement law  x  x      says everything either inside outside x circle     digital logic gates    digital logic application boolean algebra     electronic hardware consisting logic gates connected form circuit diagram  each gate implements boolean operation  depicted schematically shape indicating operation  the shapes associated gates conjunction  and-gates   disjunction  or-gates   complement  inverters  follows the lines left gate represent input wires ports  the value input represented voltage lead  for so-called  active-high  logic    represented voltage close zero  ground     represented voltage close supply voltage  active-low reverses this   the line right gate represents output port  normally follows voltage conventions input ports complement implemented inverter gate  the triangle denotes operation simply copies input output  small circle output denotes actual inversion complementing input  the convention putting circle port means signal passing port complemented way  whether input output port the duality principle  de morgan laws  understood asserting complementing three ports and gate converts or gate vice versa  shown figure   below  complementing ports inverter however leaves operation unchanged more generally one may complement eight subsets three ports either and or gate  the resulting sixteen possibilities give rise eight boolean operations  namely odd number   truth table  there eight  odd-bit-out  either     go four positions truth table  there sixteen binary boolean operations  must leave eight operations even number   truth tables  two constants      binary operations ignore inputs   four operations depend nontrivially exactly one two inputs  namely x    x    remaining two x  xor  complement x y    boolean algebras   the term  algebra  denotes subject  namely subject algebra  object  namely algebraic structure  whereas foregoing addressed subject boolean algebra  section deals mathematical objects called boolean algebras  defined full generality model boolean laws  we begin special case notion definable without reference laws  namely concrete boolean algebras  give formal definition general notion     concrete boolean algebras    a concrete boolean algebra field sets nonempty set subsets given set x closed set operations union  intersection  complement relative x  as aside  historically x required nonempty well exclude degenerate one-element boolean algebra  one exception rule boolean algebras satisfy equations since degenerate algebra satisfies every equation  however exclusion conflicts preferred purely equational definition  boolean algebra   way rule one-element algebra using equations        count  negated equation  hence modern authors allow degenerate boolean algebra let x empty  example    the power set  x x  consisting subsets x  here x may set  empty  finite  infinite  even uncountable example    the empty set x  this two-element algebra shows concrete boolean algebra finite even consists subsets infinite set  it seen every field subsets x must contain empty set x  hence smaller example possible  degenerate algebra obtained taking x empty make empty set x coincide example    the set finite cofinite sets integers  cofinite set one omitting finitely many integers  this clearly closed complement  closed union union cofinite set set cofinite  union two finite sets finite   intersection behaves like union  finite   cofinite  interchanged example    for less trivial example point made example    consider venn diagram formed n closed curves partitioning diagram  n regions  let x  infinite  set points plane curve somewhere within diagram  the interior region thus infinite subset x  every point x exactly one region   then set   n possible unions regions  including empty set obtained union empty set regions x obtained union  n regions  closed union  intersection  complement relative x therefore forms concrete boolean algebra  again finitely many subsets infinite set forming concrete boolean algebra  example   arising case n     curves     subsets bit vectors    a subset y x identified indexed family bits index set x  bit indexed x   x     according whether x   y   this so-called characteristic function notion subset    for example    -bit computer word consists    bits indexed set                      indexing low high order bits respectively  for smaller example  x    b c   b  c viewed bit positions order left right  eight subsets      c    b    b c       c    b    b c  x identified respective bit vectors                                         bit vectors indexed set natural numbers infinite sequences bits  indexed reals unit interval       packed densely able write conventionally nonetheless form well-defined indexed families  imagine coloring every point interval       either black white independently  black points form arbitrary subset        from bit vector viewpoint  concrete boolean algebra defined equivalently nonempty set bit vectors length  generally  indexed set  closed bit vector operations bitwise                                                            bit vector realizations intersection  union  complement respectively     the prototypical boolean algebra    the set       boolean operations treated understood special case bit vectors length one  identification bit vectors subsets also understood two subsets one-element set  we call prototypical boolean algebra  justified following observation the laws satisfied nondegenerate concrete boolean algebras coincide satisfied prototypical boolean algebra this observation easily proved follows  certainly law satisfied concrete boolean algebras satisfied prototypical one since concrete  conversely law fails concrete boolean algebra must failed particular bit position  case position furnishes one-bit counterexample law  nondegeneracy ensures existence least one bit position one empty bit vector the final goal next section understood eliminating  concrete  observation  we shall however reach goal via surprisingly stronger observation  isomorphism  boolean algebras concrete     boolean algebras  definition    the boolean algebras seen far concrete  consisting bit vectors equivalently subsets set  such boolean algebra consists set operations set shown satisfy laws boolean algebra instead showing boolean laws satisfied  instead postulate set x  two binary operations x  one unary operation  require operations satisfy laws boolean algebra  the elements x need bit vectors subsets anything all  this leads general abstract definition a boolean algebra set binary operations     unary operation   thereon satisfying boolean laws for purposes definition irrelevant operations came satisfy laws  whether fiat proof  all concrete boolean algebras satisfy laws  proof rather fiat   whence every concrete boolean algebra boolean algebra according definitions  this axiomatic definition boolean algebra set certain operations satisfying certain laws axioms fiat entirely analogous abstract definitions group  ring  field etc  characteristic modern abstract algebra given complete axiomatization boolean algebra  axioms complemented distributive lattice  sufficient condition algebraic structure kind satisfy boolean laws satisfy axioms  the following therefore equivalent definition a boolean algebra complemented distributive lattice the section axiomatization lists axiomatizations  made basis equivalent definition     representable boolean algebras    although every concrete boolean algebra boolean algebra  every boolean algebra need concrete  let n square-free positive integer  one divisible square integer  example        the operations greatest common divisor  least common multiple  division n    x   n x   shown satisfy boolean laws arguments range positive divisors n  hence divisors form boolean algebra  these divisors subsets set  making divisors n boolean algebra concrete according definitions however  represent divisor n set prime factors  find nonconcrete boolean algebra isomorphic concrete boolean algebra consisting sets prime factors n  union corresponding least common multiple  intersection greatest common divisor  complement division n  so example technically concrete least  morally  concrete via representation  called isomorphism  this example instance following notion a boolean algebra called representable isomorphic concrete boolean algebra the obvious next question answered positively follows every boolean algebra representable that  isomorphism  abstract concrete boolean algebras thing  this quite nontrivial result depends boolean prime ideal theorem  choice principle slightly weaker axiom choice  treated detail article stone representation theorem boolean algebras  this strong relationship implies weaker result strengthening observation previous subsection following easy consequence representability the laws satisfied boolean algebras coincide satisfied prototypical boolean algebra it weaker sense imply representability  boolean algebras special  example relation algebra boolean algebra additional structure case every relation algebra representable sense appropriate relation algebras    axiomatizing boolean algebra   the definition abstract boolean algebra set operations satisfying   boolean laws raises question  laws   a simple-minded answer  boolean laws   defined equations hold boolean algebra      since infinitely many laws terribly satisfactory answer practice  leading next question  suffice require finitely many laws hold in case boolean algebras answer yes  in particular finitely many equations listed suffice  we say boolean algebra finitely axiomatizable finitely based can list made shorter yet  again answer yes  to begin  laws implied others  a sufficient subset laws consists pairs associativity  commutativity  absorption laws  distributivity      distributivity law one suffices   two complement laws  in fact traditional axiomatization boolean algebra complemented distributive lattice by introducing additional laws listed becomes possible shorten list yet  instance  vertical bar representing sheffer stroke operation  single axiom                                                       b                          c                                                                                     c                                                            c                displaystyle   mid b  mid c  mid  mid   mid c  mid   c    sufficient completely axiomatize boolean algebra  it also possible find longer single axioms using conventional operations  see minimal axioms boolean algebra    propositional logic   propositional logic logical system intimately connected boolean algebra   many syntactic concepts boolean algebra carry propositional logic minor changes notation terminology  semantics propositional logic defined via boolean algebras way tautologies  theorems  propositional logic correspond equational theorems boolean algebra syntactically  every boolean term corresponds propositional formula propositional logic  in translation boolean algebra propositional logic  boolean variables x y    become propositional variables  atoms  p q      boolean terms x become propositional formulas p q    becomes false      becomes true t  it convenient referring generic propositions use greek letters          metavariables  variables outside language propositional calculus  used talking propositional calculus  denote propositions the semantics propositional logic rely truth assignments  the essential idea truth assignment propositional variables mapped elements fixed boolean algebra  truth value propositional formula using letters element boolean algebra obtained computing value boolean term corresponding formula  in classical semantics  two-element boolean algebra used  boolean-valued semantics arbitrary boolean algebras considered  a tautology propositional formula assigned truth value   every truth assignment propositional variables arbitrary boolean algebra   equivalently  every truth assignment two element boolean algebra  these semantics permit translation tautologies propositional logic equational theorems boolean algebra  every tautology   propositional logic expressed boolean equation        theorem boolean algebra  conversely every theorem       boolean algebra corresponds tautologies                                  if   language last tautologies also written                two separate theorems            available single tautology       used     applications    one motivating application propositional calculus analysis propositions deductive arguments natural language  whereas proposition  x     x        depends meanings symbols      proposition  x     x       true merely virtue structure  remains true whether  x      replaced  x       moon made green cheese    the generic abstract form tautology  p p   language boolean algebra   p   p  replacing p x     proposition called instantiation p proposition  the result instantiating p abstract proposition called instance proposition   thus  x       x      tautology virtue instance abstract tautology  p   p   all occurrences instantiated variable must instantiated proposition  avoid nonsense p   x     x       x     propositional calculus restricts attention abstract propositions  built propositional variables using boolean operations  instantiation still possible within propositional calculus  instantiating propositional variables abstract propositions  instantiating q q p p  q p  yield instance p   q p  p   the availability instantiation part machinery propositional calculus avoids need metavariables within language propositional calculus  since ordinary propositional variables considered within language denote arbitrary propositions  the metavariables outside reach instantiation  part language propositional calculus rather part language talking sentence written  need able distinguish propositional variables instantiations distinct syntactic entities      deductive systems propositional logic    an axiomatization propositional calculus set tautologies called axioms one inference rules producing new tautologies old  a proof axiom system a finite nonempty sequence propositions either instance axiom a follows rule a propositions appearing earlier proof  thereby disallowing circular reasoning   the last proposition theorem proved proof  every nonempty initial segment proof proof  whence every proposition proof theorem  an axiomatization sound every theorem tautology  complete every tautology theorem      sequent calculus     propositional calculus commonly organized hilbert system  whose operations boolean algebra whose theorems boolean tautologies  boolean terms equal boolean constant    another form sequent calculus  two sorts  propositions ordinary propositional calculus  pairs lists propositions called sequents  a b  a c                                          displaystyle  vdash     a  b c      the two halves sequent called antecedent succedent respectively  the customary metavariable denoting antecedent part thereof    succedent    thus   a                                      displaystyle  vdash       would denote sequent whose succedent list   whose antecedent list   additional proposition a appended it  the antecedent interpreted conjunction propositions  succedent disjunction propositions  sequent entailment succedent antecedent entailment differs implication whereas latter binary operation returns value boolean algebra  former binary relation either holds hold  in sense entailment external form implication  meaning external boolean algebra  thinking reader sequent also external interpreting comparing antecedents succedents boolean algebra  the natural interpretation                                      displaystyle  vdash       partial order boolean algebra defined x   x   y  this ability mix external implication                                      displaystyle  vdash     internal implication   one logic among essential differences sequent calculus propositional calculus    applications   boolean algebra calculus two values fundamental computer circuits  computer programming  mathematical logic  also used areas mathematics set theory statistics     computers    in early   th century  several electrical engineers intuitively recognized boolean algebra analogous behavior certain types electrical circuits  claude shannon formally proved behavior logically equivalent boolean algebra      master thesis  a symbolic analysis relay switching circuits today  modern general purpose computers perform functions using two-value boolean logic   electrical circuits physical manifestation two-value boolean logic  they achieve various ways  voltages wires high-speed circuits capacitive storage devices  orientations magnetic domain ferromagnetic storage devices  holes punched cards paper tape  on   some early computers used decimal circuits mechanisms instead two-valued logic circuits  of course  possible code two symbols given medium  for example  one might use respectively            volts code four-symbol alphabet wire  holes different sizes punched card  in practice  tight constraints high speed  small size  low power combine make noise major factor  this makes hard distinguish symbols several possible symbols could occur single site  rather attempting distinguish four voltages one wire  digital designers settled two voltages per wire  high low computers use two-value boolean circuits reasons  the common computer architectures use ordered sequences boolean values  called bits        values  e g                                    when programming machine code  assembly language  certain programming languages  programmers work low-level digital structure data registers  these registers operate voltages  zero volts represents boolean    reference voltage  often    v       v       v  represents boolean    such languages support numeric operations logical operations  in context   numeric  means computer treats sequences bits binary numbers  base two numbers  executes arithmetic operations like add  subtract  multiply  divide   logical  refers boolean logical operations disjunction  conjunction  negation two sequences bits  bit one sequence simply compared counterpart sequence  programmers therefore option working applying rules either numeric algebra boolean algebra needed  a core differentiating feature families operations existence carry operation first second     two-valued logic    other areas two values good choice law mathematics  in everyday relaxed conversation  nuanced complex answers  maybe   weekend  acceptable  in focused situations court law theorem-based mathematics however deemed advantageous frame questions admit simple yes-or-no answer defendant guilty guilty  proposition true false disallow answer  however much straitjacket might prove practice respondent  principle simple yes-no question become central feature judicial mathematical logic  making two-valued logic deserving organization study right a central concept set theory membership  now organization may permit multiple degrees membership  novice  associate  full  with sets however element either out  the candidates membership set work like wires digital computer  candidate either member nonmember  wire either high low algebra fundamental tool area amenable mathematical treatment  considerations combine make algebra two values fundamental importance computer hardware  mathematical logic  set theory two-valued logic extended multi-valued logic  notably replacing boolean domain        unit interval        case rather taking values      value including     assumed  algebraically  negation  not  replaced     x  conjunction  and  replaced multiplication                      x                       displaystyle xy      disjunction  or  defined via de morgan law  interpreting values logical truth values yields multi-valued logic  forms basis fuzzy logic probabilistic logic  in interpretations  value interpreted  degree  truth   extent proposition true  probability proposition true     boolean operations    the original application boolean operations mathematical logic  combines truth values  true false  individual formulas      natural language     natural languages english words several boolean operations  particular conjunction    disjunction    negation    implication  implies   but synonymous not  when used combine situational assertions  block table   cats drink milk   naively either true false  meanings logical connectives often meaning logical counterparts  however  descriptions behavior  jim walked door   one starts notice differences failure commutativity  example conjunction  jim opened door   jim walked door  order equivalent conjunction order  since usually means cases  questions similar  order  is sky blue  sky blue   makes sense reverse order  conjunctive commands behavior like behavioral assertions  get dressed go school  disjunctive commands love leave fish cut bait tend asymmetric via implication one alternative less preferable  conjoined nouns tea milk generally describe aggregation set union tea milk choice  however context reverse senses  choices coffee tea usually means choices coffee tea  alternatives   double negation  i like milk  rarely means literally  i like milk  rather conveys sort hedging  though imply third possibility   not p  loosely interpreted  surely p   although p necessarily implies  not p  converse suspect english  much intuitionistic logic  in view highly idiosyncratic usage conjunctions natural languages  boolean algebra cannot considered reliable framework interpreting them      digital logic     boolean operations used digital logic combine bits carried individual wires  thereby interpreting        when vector n identical binary gates used combine two bit vectors n bits  individual bit operations understood collectively single operation values boolean algebra  n elements      naive set theory     naive set theory interprets boolean operations acting subsets given set x  as saw earlier behavior exactly parallels coordinate-wise combinations bit vectors  union two sets corresponding disjunction two bit vectors on      video cards     the    -element free boolean algebra three generators deployed computer displays based raster graphics  use bit blit manipulate whole regions consisting pixels  relying boolean operations specify source region combined destination  typically help third region called mask  modern video cards offer           ternary operations purpose  choice operation one-byte   -bit  parameter  the constants src    xaa           dst    xcc           msk    xf           allow boolean operations  src dst  msk  meaning xor source destination and result mask  written directly constant denoting byte calculated compile time   x    src dst  msk example   x   src dst  etc  at run time video card interprets byte raster operation indicated original expression uniform way requires remarkably little hardware takes time completely independent complexity expression      modeling cad     solid modeling systems computer aided design offer variety methods building objects objects  combination boolean operations one them  in method space objects exist understood set s voxels  three-dimensional analogue pixels two-dimensional graphics  shapes defined subsets s  allowing objects combined sets via union  intersection  etc  one obvious use building complex shape simple shapes simply union latter  another use sculpting understood removal material  grinding  milling  routing  drilling operation performed physical machinery physical materials simulated computer boolean operation x    x    set theory set difference  remove elements x  thus given two shapes one machined material removed  result machining former remove latter described simply set difference      boolean searches     search engine queries also employ boolean logic  for application  web page internet may considered  element   set   the following examples use syntax supported google doublequotes used combine whitespace-separated words single search term whitespace used specify logical and  default operator joining search terms  search term     search term   the or keyword used logical or  search term    or  search term   a prefixed minus sign used logical not  search term      search term      see also      references      sources   mano  morris  ciletti  michael d          digital design  pearson  isbn    - -  -      -     further reading   j  eldon whitesitt         boolean algebra applications  courier dover publications  isbn    - -   -     -   suitable introduction students applied fields dwinger  philip         introduction boolean algebras  w rzburg  physica verlag sikorski  roman         boolean algebras    e ed    berlin  springer-verlag  isbn    - -   -     -  boche ski  j zef maria         a pr cis mathematical logic  translated french german editions otto bird  dordrecht  south holland   d  reidel     historical perspective    george boole          the calculus logic   cambridge dublin mathematical journal iii         theodore hailperin         boole logic probability  critical exposition standpoint contemporary algebra  logic  probability theory   nd ed    elsevier  isbn    - -   -     -  dov m  gabbay  john woods  ed          the rise modern logic  leibniz frege  handbook history logic     elsevier  isbn    - -   -     -    several relevant chapters hailperin  valencia  grattan-guinnesscalixto badesa         the birth model theory  l wenheim theorem frame theory relatives  princeton university press  isbn    - -   -     -    chapter     algebra classes propositional calculus burris  stanley        the algebra logic tradition  stanford encyclopedia philosophy radomir s  stankovic  jaakko astola         from boolean logic switching circuits automata  towards modern information technology  springer  isbn    - -   -     -     external links   boolean algebra chapter all about circuitshow stuff works   boolean logicscience technology - boolean algebra archived     -  -   wayback machine contains list proof boolean theorems laws 
a mathematical model description  system using mathematical concepts language  the process developing mathematical model termed mathematical modeling  mathematical models used natural sciences  physics  biology  earth science  chemistry  engineering disciplines  computer science  electrical engineering   well non-physical systems social sciences  economics  psychology  sociology  political science   the use mathematical models solve problems business military operations large part field operations research   mathematical models also used music  linguistics philosophy  example  intensively analytic philosophy   religion  example  recurring uses numbers            bible  a model may help explain system study effects different components  make predictions behavior    elements mathematical model   mathematical models take many forms  including dynamical systems  statistical models  differential equations  game theoretic models   these types models overlap  given model involving variety abstract structures  in general  mathematical models may include logical models   in many cases  quality scientific field depends well mathematical models developed theoretical side agree results repeatable experiments   lack agreement theoretical mathematical models experimental measurements often leads important advances better theories developed in physical sciences  traditional mathematical model contains following elements governing equationssupplementary sub-modelsdefining equationsconstitutive equationsassumptions constraintsinitial boundary conditionsclassical constraints kinematic equations   classifications   mathematical models usually composed relationships variables  relationships described operators  algebraic operators  functions  differential operators  etc  variables abstractions system parameters interest  quantified  several classification criteria used mathematical models according structure linear vs  nonlinear  if operators mathematical model exhibit linearity  resulting mathematical model defined linear  a model considered nonlinear otherwise  the definition linearity nonlinearity dependent context  linear models may nonlinear expressions them   for example  statistical linear model  assumed relationship linear parameters  may nonlinear predictor variables   similarly  differential equation said linear written linear differential operators  still nonlinear expressions it   in mathematical programming model  objective functions constraints represented entirely linear equations  model regarded linear model   if one objective functions constraints represented nonlinear equation  model known nonlinear model linear structure implies problem decomposed simpler parts treated independently analyzed different scale results obtained remain valid initial problem recomposed rescaled nonlinearity  even fairly simple systems  often associated phenomena chaos irreversibility   although exceptions  nonlinear systems models tend difficult study linear ones   a common approach nonlinear problems linearization  problematic one trying study aspects irreversibility  strongly tied nonlinearity static vs  dynamic  a dynamic model accounts time-dependent changes state system  static  steady-state  model calculates system equilibrium  thus time-invariant   dynamic models typically represented differential equations difference equations explicit vs  implicit  if input parameters overall model known  output parameters calculated finite series computations  model said explicit  but sometimes output parameters known  corresponding inputs must solved iterative procedure  newton method broyden method  in case model said implicit  for example  jet engine physical properties turbine nozzle throat areas explicitly calculated given design thermodynamic cycle  air fuel flow rates  pressures  temperatures  specific flight condition power setting  engine operating cycles flight conditions power settings cannot explicitly calculated constant physical properties discrete vs  continuous  a discrete model treats objects discrete  particles molecular model states statistical model  continuous model represents objects continuous manner  velocity field fluid pipe flows  temperatures stresses solid  electric field applies continuously entire model due point charge deterministic vs  probabilistic  stochastic   a deterministic model one every set variable states uniquely determined parameters model sets previous states variables  therefore  deterministic model always performs way given set initial conditions  conversely  stochastic model usually called  statistical model  randomness present  variable states described unique values  rather probability distributions deductive  inductive  floating  a deductive model logical structure based theory  an inductive model arises empirical findings generalization them  the floating model rests neither theory observation  merely invocation expected structure  application mathematics social sciences outside economics criticized unfounded models  application catastrophe theory science characterized floating model strategic vs non-strategic models used game theory different sense model agents incompatible incentives  competing species bidders auction  strategic models assume players autonomous decision makers rationally choose actions maximize objective function  a key challenge using strategic models defining computing solution concepts nash equilibrium  an interesting property strategic models separate reasoning rules game reasoning behavior players    construction   in business engineering  mathematical models may used maximize certain output  the system consideration require certain inputs  the system relating inputs outputs depends variables  decision variables  state variables  exogenous variables  random variables decision variables sometimes known independent variables   exogenous variables sometimes known parameters constants the variables independent state variables dependent decision  input  random  exogenous variables   furthermore  output variables dependent state system  represented state variables  objectives constraints system users represented functions output variables state variables   the objective functions depend perspective model user   depending context  objective function also known index performance  measure interest user   although limit number objective functions constraints model  using optimizing model becomes involved  computationally  number increases for example  economists often apply linear algebra using input-output models  complicated mathematical models many variables may consolidated use vectors one symbol represents several variables     a priori information    mathematical modeling problems often classified black box white box models  according much priori information system available  a black-box model system priori information available  a white-box model  also called glass box clear box  system necessary information available  practically systems somewhere black-box white-box models  concept useful intuitive guide deciding approach take usually preferable use much priori information possible make model accurate  therefore  white-box models usually considered easier  used information correctly  model behave correctly  often priori information comes forms knowing type functions relating different variables  for example  make model medicine works human system  know usually amount medicine blood exponentially decaying function  but still left several unknown parameters  rapidly medicine amount decay  initial amount medicine blood  this example therefore completely white-box model  these parameters estimated means one use model in black-box models one tries estimate functional form relations variables numerical parameters functions  using priori information could end  example  set functions probably could describe system adequately  if priori information would try use functions general possible cover different models  an often used approach black-box models neural networks usually make assumptions incoming data  alternatively narmax  nonlinear autoregressive moving average model exogenous inputs  algorithms developed part nonlinear system identification used select model terms  determine model structure  estimate unknown parameters presence correlated nonlinear noise  the advantage narmax models compared neural networks narmax produces models written related underlying process  whereas neural networks produce approximation opaque      subjective information     sometimes useful incorporate subjective information mathematical model   this done based intuition  experience  expert opinion  based convenience mathematical form  bayesian statistics provides theoretical framework incorporating subjectivity rigorous analysis  specify prior probability distribution  subjective   update distribution based empirical data an example approach would necessary situation experimenter bends coin slightly tosses  recording whether comes heads  given task predicting probability next flip comes heads   after bending coin  true probability coin come heads unknown  experimenter would need make decision  perhaps looking shape coin  prior distribution use   incorporation subjective information might important get accurate estimate probability     complexity    in general  model complexity involves trade-off simplicity accuracy model  occam razor principle particularly relevant modeling  essential idea among models roughly equal predictive power  simplest one desirable  while added complexity usually improves realism model  make model difficult understand analyze  also pose computational problems  including numerical instability  thomas kuhn argues science progresses  explanations tend become complex paradigm shift offers radical simplification for example  modeling flight aircraft  could embed mechanical part aircraft model would thus acquire almost white-box model system  however  computational cost adding huge amount detail would effectively inhibit usage model  additionally  uncertainty would increase due overly complex system  separate part induces amount variance model  it therefore usually appropriate make approximations reduce model sensible size  engineers often accept approximations order get robust simple model  for example  newton classical mechanics approximated model real world  still  newton model quite sufficient ordinary-life situations   long particle speeds well speed light  study macro-particles only note better accuracy necessarily mean better model  statistical models prone overfitting means model fitted data much lost ability generalize new events observed before     training tuning    any model pure white-box contains parameters used fit model system intended describe  if modeling done artificial neural network machine learning  optimization parameters called training  optimization model hyperparameters called tuning often uses cross-validation  in conventional modeling explicitly given mathematical functions  parameters often determined curve fitting     model evaluation    a crucial part modeling process evaluation whether given mathematical model describes system accurately   this question difficult answer involves several different types evaluation      fit empirical data     usually  easiest part model evaluation checking whether model fits experimental measurements empirical data   in models parameters  common approach test fit split data two disjoint subsets  training data verification data  the training data used estimate model parameters   an accurate model closely match verification data even though data used set model parameters  this practice referred cross-validation statistics defining metric measure distances observed predicted data useful tool assessing model fit   in statistics  decision theory  economic models  loss function plays similar role while rather straightforward test appropriateness parameters  difficult test validity general mathematical form model   in general  mathematical tools developed test fit statistical models models involving differential equations   tools nonparametric statistics sometimes used evaluate well data fit known distribution come general model makes minimal assumptions model mathematical form      scope model     assessing scope model   determining situations model applicable  less straightforward   if model constructed based set data  one must determine systems situations known data  typical  set data the question whether model describes well properties system data points called interpolation  question events data points outside observed data called extrapolation as example typical limitations scope model  evaluating newtonian classical mechanics  note newton made measurements without advanced equipment  could measure properties particles travelling speeds close speed light   likewise  measure movements molecules small particles  macro particles only  it surprising model extrapolate well domains  even though model quite sufficient ordinary life physics      philosophical considerations     many types modeling implicitly involve claims causality   this usually  always  true models involving differential equations   as purpose modeling increase understanding world  validity model rests fit empirical observations  also ability extrapolate situations data beyond originally described model  one think differentiation qualitative quantitative predictions  one also argue model worthless unless provides insight goes beyond already known direct investigation phenomenon studied an example criticism argument mathematical models optimal foraging theory offer insight goes beyond common-sense conclusions evolution basic principles ecology    significance natural sciences   mathematical models great importance natural sciences  particularly physics  physical theories almost invariably expressed using mathematical models throughout history  more accurate mathematical models developed  newton laws accurately describe many everyday phenomena  certain limits theory relativity quantum mechanics must used  it common use idealized models physics simplify things  massless ropes  point particles  ideal gases particle box among many simplified models used physics  the laws physics represented simple equations newton laws  maxwell equations schr dinger equation  these laws basis making mathematical models real situations  many real situations complex thus modeled approximate computer  model computationally feasible compute made basic laws approximate models made basic laws  for example  molecules modeled molecular orbital models approximate solutions schr dinger equation  in engineering  physics models often made mathematical methods finite element analysis different mathematical models use different geometries necessarily accurate descriptions geometry universe  euclidean geometry much used classical physics  special relativity general relativity examples theories use geometries euclidean    some applications   often engineers analyze system controlled optimized  use mathematical model  in analysis  engineers build descriptive model system hypothesis system could work  try estimate unforeseeable event could affect system  similarly  control system  engineers try different control approaches simulations a mathematical model usually describes system set variables set equations establish relationships variables  variables may many types  real integer numbers  boolean values strings  example  the variables represent properties system  example  measured system outputs often form signals  timing data  counters  event occurrence  yes   the actual model set functions describe relations different variables    examples   one popular examples computer science mathematical models various machines  example deterministic finite automaton  dfa  defined abstract mathematical concept  due deterministic nature dfa  implementable hardware software solving various specific problems  for example  following dfa m binary alphabet  requires input contains even number  s m    q        q   f  whereq    s   s              q    s  f    s     defined following state transition table the state s  represents even number  input far  s  signifies odd number  a   input change state automaton  when input ends  state show whether input contained even number  not  if input contain even number   m finish state s   accepting state  input string accepted the language recognized m regular language given regular expression                           kleene star  e g      denotes non-negative number  possibly zero  symbols     many everyday activities carried without thought uses mathematical models  a geographical map projection region earth onto small  plane surface model used many purposes planning travel another simple activity predicting position vehicle initial position  direction speed travel  using equation distance traveled product time speed  this known dead reckoning used formally  mathematical modeling way necessarily require formal mathematics  animals shown use dead reckoning population growth  a simple  though approximate  model population growth malthusian growth model  a slightly realistic largely used population growth model logistic function  extensions model particle potential-field  in model consider particle point mass describes trajectory space modeled function giving coordinates space function time  the potential field given function                     v                                               r                                                                                      r                        displaystyle v    mathbb  r         rightarrow  mathbb  r      trajectory  function                               r                                           r                                               r                                                                   displaystyle  mathbf  r      mathbb  r   rightarrow  mathbb  r           solution differential equation                                                                                                                                                                                                                  r                                                                                                                                                                                                                                                                                                                                   v                                             r                                                                                                                             x                                                                          x                                                                                                                 v                                             r                                                                                                                                                                                                                                                                                                                      v                                             r                                                                                                                             z                                                                          z                                                                      displaystyle -  frac   mathrm        mathbf  r      mathrm          frac   partial v  mathbf  r       partial x   mathbf   hat  x      frac   partial v  mathbf  r       partial   mathbf   hat       frac   partial v  mathbf  r       partial z   mathbf   hat  z       written also                                                                                                                                                                                                                r                                                                                                                                                                                                                                                                                           v                           r                                                                   displaystyle  frac   mathrm        mathbf  r      mathrm         - nabla v  mathbf  r        note model assumes particle point mass  certainly known false many cases use model  example  model planetary motion model rational behavior consumer   in model assume consumer faces choice n commodities labeled         n market price p   p       pn  the consumer assumed ordinal utility function u  ordinal sense sign differences two utilities  level utility  meaningful   depending amounts commodities x   x       xn consumed   the model assumes consumer budget m used purchase vector x   x       xn way maximize u x   x       xn    the problem rational behavior model becomes mathematical optimization problem                      max        u                           x                                                                    x                                                                                      x                      n                                           displaystyle  max u x     x      ldots  x  n     subject                                                                                                               n                                    p                                                         x                                                        m                         displaystyle  sum       n p  x   leq m                                  x                                                                                                                                                                                 n                         displaystyle x   geq         forall        ldots  n     this model used wide variety economic contexts  general equilibrium theory show existence pareto efficiency economic equilibria neighbour-sensing model model explains mushroom formation initially chaotic fungal network in computer science  mathematical models may used simulate computer networks in mechanics  mathematical models may used analyze movement rocket model    see also      references      further reading       books    aris  rutherford                    mathematical modelling techniques  new york  dover  isbn  -   -     - bender  e a                     an introduction mathematical modeling  new york  dover  isbn  -   -     -xgary chartrand        graphs mathematical models  prindle  webber   schmidt isbn           dubois  g          modeling simulation   taylor   francis  crc press gershenfeld  n         the nature mathematical modeling  cambridge university press isbn  -   -     -   lin  c c    segel  l a            mathematics applied deterministic problems natural sciences  philadelphia  siam  isbn  -     -   -     specific applications    papadimitriou  fivos          mathematical modelling spatial-ecological complex systems  evaluation  geography  environment  sustainability         -    doi              -    -    - - -  -  peierls  r           model-making physics   contemporary physics            bibcode     conph         p  doi                           an introduction infectious disease modelling emilia vynnycky richard g white    external links   general referencepatrone  f  introduction modeling via differential equations  critical remarks plus teacher student package  mathematical modelling  brings together articles mathematical modeling plus magazine  online mathematics magazine produced millennium mathematics project university cambridge philosophicalfrigg  r  s  hartmann  models science   the stanford encyclopedia philosophy   spring      edition griffiths  e  c         what model 
number theory  arithmetic higher arithmetic older usage  branch pure mathematics devoted primarily study integers integer-valued functions  german mathematician carl friedrich gauss             said   mathematics queen sciences number theory queen mathematics   number theorists study prime numbers well properties mathematical objects made integers  example  rational numbers  defined generalizations integers  example  algebraic integers   integers considered either solutions equations  diophantine geometry   questions number theory often best understood study analytical objects  example  riemann zeta function  encode properties integers  primes number-theoretic objects fashion  analytic number theory   one may also study real numbers relation rational numbers  example  approximated latter  diophantine approximation  the older term number theory arithmetic  by early twentieth century  superseded  number theory    the word  arithmetic  used general public mean  elementary calculations   also acquired meanings mathematical logic  peano arithmetic  computer science  floating point arithmetic   the use term arithmetic number theory regained ground second half   th century  arguably part due french influence  in particular  arithmetical commonly preferred adjective number-theoretic    history       origins         dawn arithmetic     the earliest historical find arithmetical nature fragment table  broken clay tablet plimpton      larsa  mesopotamia  ca       bce  contains list  pythagorean triples    integers                                              b                 c                         displaystyle  b c                                                                                                      b                                                                    c                                                         displaystyle     b     c        the triples many large obtained brute force  the heading first column reads   the takiltum diagonal subtracted width    the table layout suggests constructed means amounts  modern language  identity                                                                                                                                                                                                                          x                                                                                                      x                                                                                                                                                                                                                                                                                                                                                                                                          x                                                                                                      x                                                                                                                                                                                          displaystyle  left   frac         left x-  frac     x   right  right         left   frac         left x   frac     x   right  right         implicit routine old babylonian exercises  if method used  triples first constructed reordered                     c                                                  displaystyle c     presumably actual use  table   example  view applications it known applications may  whether could  babylonian astronomy  example  truly came later  it suggested instead table source numerical examples school problems while babylonian number theory survives babylonian mathematics called thus consists single  striking fragment  babylonian algebra  secondary-school sense  algebra   exceptionally well developed  late neoplatonic sources state pythagoras learned mathematics babylonians  much earlier sources state thales pythagoras traveled studied egypt euclid ix       probably pythagorean  simple material   odd times even even    odd number measures    divides  even number  also measures    divides  half    needed prove                                                                              displaystyle   sqrt        irrational  pythagorean mystics gave great importance odd even the discovery                                                                              displaystyle   sqrt         irrational credited early pythagoreans  pre-theodorus   by revealing  modern terms  numbers could irrational  discovery seems provoked first foundational crisis mathematical history  proof divulgation sometimes credited hippasus  expelled split pythagorean sect  this forced distinction numbers  integers rationals subjects arithmetic   one hand  lengths proportions  would identify real numbers  whether rational   hand the pythagorean tradition spoke also so-called polygonal figurate numbers  while square numbers  cubic numbers  etc   seen natural triangular numbers  pentagonal numbers  etc   study sums triangular pentagonal numbers would prove fruitful early modern period    th early   th century  we know clearly arithmetical material ancient egyptian vedic sources  though algebra each  the chinese remainder theorem appears exercise  sunzi suanjing   rd   th  th century ce    there one important step glossed sunzi solution  problem later solved  ryabha ku  aka   see below  there also numerical mysticism chinese mathematics   unlike pythagoreans  seems led nowhere  like pythagoreans  perfect numbers  magic squares passed superstition recreation      classical greece early hellenistic period     aside fragments  mathematics classical greece known us either reports contemporary non-mathematicians mathematical works early hellenistic period  in case number theory  means  large  plato euclid  respectively while asian mathematics influenced greek hellenistic learning  seems case greek mathematics also indigenous tradition eusebius  pe x  chapter   mentions pythagoras  in fact said pythagoras  busily studying wisdom nation  visited babylon  egypt  persia  instructed magi priests  addition related studied brahmans  indian philosophers   gathered astrology  others geometry  arithmetic music others  different things different nations  wise men greece get nothing  wedded poverty dearth wisdom  contrary became author instruction greeks learning procured abroad  aristotle claimed philosophy plato closely followed teachings pythagoreans  cicero repeats claim  platonem ferunt didicisse pythagorea omnia   they say plato learned things pythagorean   plato keen interest mathematics  distinguished clearly arithmetic calculation   by arithmetic meant  part  theorising number  rather arithmetic number theory come mean   it one plato dialogues namely  theaetetus know theodorus proven                                                                                                                                                                                                                     displaystyle   sqrt        sqrt       dots    sqrt          irrational  theaetetus  like plato  disciple theodorus  worked distinguishing different kinds incommensurables  thus arguably pioneer study number systems   book x euclid elements described pappus largely based theaetetus work  euclid devoted part elements prime numbers divisibility  topics belong unambiguously number theory basic  books vii ix euclid elements   in particular  gave algorithm computing greatest common divisor two numbers  euclidean algorithm  elements  prop  vii    first known proof infinitude primes  elements  prop  ix     in       lessing published epigram found manuscript work librarian  claimed letter sent archimedes eratosthenes  the epigram proposed become known asarchimedes cattle problem  solution  absent manuscript  requires solving indeterminate quadratic equation  reduces would later misnamed pell equation   as far know  equations first successfully treated indian school  it known whether archimedes method solution      diophantus     very little known diophantus alexandria  probably lived third century ce   five hundred years euclid  six thirteen books diophantus arithmetica survive original greek four survive arabic translation  the arithmetica collection worked-out problems task invariably find rational solutions system polynomial equations  usually form                     f                 x                                                    z                                                         displaystyle f x  z                            f                 x                                 z                                    w                                                         displaystyle f x z  w         thus  nowadays  speak diophantine equations speak polynomial equations rational integer solutions must found one may say diophantus studying rational points   points whose coordinates rational curves algebraic varieties  however  unlike greeks classical period  would call basic algebra geometrical terms  diophantus would call basic algebraic geometry purely algebraic terms  in modern language  diophantus find rational parametrizations varieties   given equation form  say                     f                           x                                                                    x                                                                    x                                                                                    displaystyle f x     x     x            aim find  essence  three rational functions                               g                                                                    g                                                                    g                                                         displaystyle g     g     g         values                     r                displaystyle r                                       displaystyle     setting                              x                                                                  g                                                        r                                         displaystyle x   g   r                                                                                              displaystyle          gives solution                     f                           x                                                                    x                                                                    x                                                                                     displaystyle f x     x     x           diophantus also studied equations non-rational curves  rational parametrisation possible  he managed find rational points curves  elliptic curves  happens  seems first known occurrence  means amounts tangent construction  translated coordinate geometry exist diophantus time   method would visualised drawing tangent curve known rational point  finding point intersection tangent curve  point new rational point   diophantus also resorted could called special case secant construction  while diophantus concerned largely rational solutions  assumed results integer numbers  particular every integer sum four squares  though never stated much explicitly        ryabha  brahmagupta  bh skara     while greek astronomy probably influenced indian learning  point introducing trigonometry  seems case indian mathematics otherwise indigenous tradition  particular  evidence euclid elements reached india   th century  ryabha          ce  showed pairs simultaneous congruences                     n                                                                                                 mod                                                                                                        displaystyle n equiv      bmod                                n                                                                                                 mod                                                                                                        displaystyle n equiv      bmod           could solved method called ku  aka  pulveriser  procedure close  generalisation  euclidean algorithm  probably discovered independently india   ryabha seems mind applications astronomical calculations brahmagupta      ce  started systematic study indefinite quadratic equations particular  misnamed pell equation  archimedes may first interested  start solved west time fermat euler  later sanskrit authors would follow  using brahmagupta technical terminology  a general procedure  chakravala   cyclic method   solving pell equation finally found jayadeva  cited eleventh century  work otherwise lost   earliest surviving exposition appears bh skara ii b ja-ga ita  twelfth century  indian mathematics remained largely unknown europe late eighteenth century  brahmagupta bh skara work translated english      henry colebrooke      arithmetic islamic golden age     in early ninth century  caliph al-ma mun ordered translations many greek mathematical works least one sanskrit work  sindhind may  may brahmagupta br hmasphu asiddh nta  diophantus main work  arithmetica  translated arabic qusta ibn luqa           part treatise al-fakhri  al-karaj         ca        builds extent  according rashed roshdi  al-karaj  contemporary ibn al-haytham knew would later called wilson theorem      western europe middle ages     other treatise squares arithmetic progression fibonacci traveled studied north africa constantinople number theory speak done western europe middle ages  matters started change europe late renaissance  thanks renewed study works greek antiquity  a catalyst textual emendation translation latin diophantus  arithmetica     early modern number theory         fermat     pierre de fermat             never published writings  particular  work number theory contained almost entirely letters mathematicians private marginal notes  in notes letters  scarcely wrote proofs - models area over lifetime  fermat made following contributions field one fermat first interests perfect numbers  appear euclid  elements ix  amicable numbers  topics led work integer divisors  beginning among subjects correspondence       onwards  put touch mathematical community day in       fermat claimed  without proof  whole numbers expressed sum four squares fewer fermat little theorem         divisible prime p                                                     p                                                                                mod                      p                                           displaystyle  p-   equiv    bmod  p      if b coprime                                                                                                   b                                                         displaystyle     b        divisible prime congruent    modulo    every prime congruent   modulo   written form                                                                                                  b                                                         displaystyle     b         these two statements also date             fermat stated huygens proven latter statement method infinite descent in       fermat posed problem solving                               x                                                          n                                                                                            displaystyle x    -ny          challenge english mathematicians  the problem solved months wallis brouncker  fermat considered solution valid  pointed provided algorithm without proof  jayadeva bhaskara  though fermat aware   he stated proof could found infinite descent fermat stated proved  infinite descent  appendix observations diophantus  obs  xlv                                x                                                                                                                                       z                                                         displaystyle x         z        non-trivial solutions integers  fermat also mentioned correspondents                               x                                                                                                                                       z                                                         displaystyle x         z        non-trivial solutions  could also proven infinite descent  the first known proof due euler        indeed infinite descent  fermat claimed  fermat last theorem  shown solutions                               x                      n                                                                  n                                             z                      n                                  displaystyle x  n   n  z  n                         n                                  displaystyle n geq       claim appears annotations margins copy diophantus      euler     the interest leonhard euler             number theory first spurred       friend  amateur goldbach  pointed towards fermat work subject  this called  rebirth  modern number theory  fermat relative lack success getting contemporaries  attention subject  euler work number theory includes following proofs fermat statements  this includes fermat little theorem  generalised euler non-prime moduli   fact                     p                           x                                                                                                                            displaystyle p x                                p                                    mod                                                         displaystyle p equiv    bmod          initial work towards proof every integer sum four squares  first complete proof joseph-louis lagrange         soon improved euler   lack non-zero integer solutions                               x                                                                                                                                       z                                                         displaystyle x         z         implying case n   fermat last theorem  case n   euler also proved related method  pell equation  first misnamed euler  he wrote link continued fractions pell equation first steps towards analytic number theory  in work sums four squares  partitions  pentagonal numbers  distribution prime numbers  euler pioneered use seen analysis  particular  infinite series  number theory  since lived development complex analysis  work restricted formal manipulation power series  he  however  notable  though fully rigorous  early work would later called riemann zeta function quadratic forms  following fermat lead  euler research question primes expressed form                               x                                                          n                                                                          displaystyle x     ny         prefiguring quadratic reciprocity  diophantine equations  euler worked diophantine equations genus      in particular  studied diophantus work  tried systematise  time yet ripe endeavour algebraic geometry still infancy  he notice connection diophantine problems elliptic integrals  whose study initiated      lagrange  legendre  gauss     joseph-louis lagrange             first give full proofs fermat euler work observations instance  four-square theorem basic theory misnamed  pell equation   algorithmic solution found fermat contemporaries  also jayadeva bhaskara ii them   he also studied quadratic forms full generality  opposed                                      x                                                          n                  y                                                         displaystyle mx     ny         defining equivalence relation  showing put reduced form  etc adrien-marie legendre             first state law quadratic reciprocity  he alsoconjectured amounts prime number theorem dirichlet theorem arithmetic progressions  he gave full treatment equation                                      x                                                          b                                                                           c                  z                                                                           displaystyle ax         cz          worked quadratic forms along lines later developed fully gauss  in old age  first prove fermat last theorem                     n                                  displaystyle n       completing work peter gustav lejeune dirichlet  crediting sophie germain  in disquisitiones arithmeticae         carl friedrich gauss             proved law quadratic reciprocity developed theory quadratic forms  particular  defining composition   he also introduced basic notation  congruences  devoted section computational matters  including primality tests  the last section disquisitiones established link roots unity number theory the theory division circle   which treated sec    belongby arithmetic  principles drawn higher arithmetic in way  gauss arguably made first foray towards  variste galois work algebraic number theory     maturity division subfields    starting early nineteenth century  following developments gradually took place the rise self-consciousness number theory  higher arithmetic  field study the development much modern mathematics necessary basic modern number theory  complex analysis  group theory  galois theory accompanied greater rigor analysis abstraction algebra the rough subdivision number theory modern subfields particular  analytic algebraic number theory algebraic number theory may said start study reciprocity cyclotomy  truly came development abstract algebra early ideal theory valuation theory  see below  a conventional starting point analytic number theory dirichlet theorem arithmetic progressions          whose proof introduced l-functions involved asymptotic analysis limiting process real variable  the first use analytic ideas number theory actuallygoes back euler         used formal power series non-rigorous  implicit  limiting arguments  the use complex analysis number theory comes later  work bernhard riemann        zeta function canonical starting point  jacobi four-square theorem         predates  belongs initially different strand taken leading role analytic number theory  modular forms  the history subfield briefly addressed section  see main article subfield fuller treatments  many interesting questions area remain open actively worked on    main subdivisions       elementary number theory    the term elementary generally denotes method use complex analysis  for example  prime number theorem first proven using complex analysis       elementary proof found      erd selberg  the term somewhat ambiguous  example  proofs based complex tauberian theorems  example  wiener ikehara  often seen quite enlightening elementary  spite using fourier analysis  rather complex analysis such  here elsewhere  elementary proof may longer difficult readers non-elementary one number theory reputation field many whose results stated layperson  at time  proofs results particularly accessible  part range tools use  anything  unusually broad within mathematics     analytic number theory    analytic number theory may definedin terms tools  study integers means tools real complex analysis  orin terms concerns  study within number theory estimates size density  opposed identities some subjects generally considered part analytic number theory  example  sieve theory  better covered second rather first definition  sieve theory  instance  uses little analysis  yet belong analytic number theory the following examples problems analytic number theory  prime number theorem  goldbach conjecture  twin prime conjecture  hardy littlewood conjectures   waring problem riemann hypothesis  some important tools analytic number theory circle method  sieve methods l-functions   rather  study properties   the theory modular forms   generally  automorphic forms  also occupies increasingly central place toolbox analytic number theory one may ask analytic questions algebraic numbers  use analytic means answer questions  thus algebraic analytic number theory intersect  for example  one may define prime ideals  generalizations prime numbers field algebraic numbers  ask many prime ideals certain size  this question answered means examination dedekind zeta functions  generalizations riemann zeta function  key analytic object roots subject  this example general procedure analytic number theory  deriving information distribution sequence   prime ideals prime numbers  analytic behavior appropriately constructed complex-valued function     algebraic number theory    an algebraic number complex number solution polynomial equation                     f                 x                                           displaystyle f x       rational coefficients  example  every solution                     x                displaystyle x                                  x                                                                                                                                    x                                                                             x                                                                                             displaystyle x           x    - x             say  algebraic number  fields algebraic numbers also called algebraic number fields  shortly number fields  algebraic number theory studies algebraic number fields  thus  analytic algebraic number theory overlap  former defined methods  latter objects study it could argued simplest kind number fields  viz   quadratic fields  already studied gauss  discussion quadratic forms disquisitiones arithmeticae restated terms ideals andnorms quadratic fields   a quadratic field consists allnumbers form                                     b                                                               displaystyle b  sqrt                                          displaystyle                        b                displaystyle b    rational numbers                                    displaystyle   fixed rational number whose square root rational  for matter    th-century chakravala method amounts modern terms algorithm finding units real quadratic number field  however  neither bh skara gauss knew number fields such the grounds subject know set late nineteenth century  ideal numbers  theory ideals valuation theory developed  three complementary ways dealing lack unique factorisation algebraic number fields   for example  field generated rationalsand                                                                                           displaystyle   sqrt  -        number                                      displaystyle      factorised                                                                          displaystyle     cdot                                                                                                                                                                                                                                                       displaystyle        sqrt  -      -  sqrt  -                                              displaystyle                                            displaystyle                                                                                                                   displaystyle     sqrt  -                                                                                                                  displaystyle  -  sqrt  -      irreducible  thus  na sense  analogous primes among integers   the initial impetus development ideal numbers  kummer  seems come study higher reciprocity laws   generalisations quadratic reciprocity number fields often studied extensions smaller number fields  field l said extension field k l contains k  for example  complex numbers c extension reals r  reals r extension rationals q  classifying possible extensions given number field difficult partially open problem  abelian extensions  extensions l k galois group gal l k  l k abelian group relatively well understood their classification object programme class field theory  initiated late   th century  partly kronecker eisenstein  carried largely           an example active area research algebraic number theory iwasawa theory  the langlands program  one main current large-scale research plans mathematics  sometimes described attempt generalise class field theory non-abelian extensions number fields     diophantine geometry    the central problem diophantine geometry determine diophantine equation solutions   many  the approach taken think solutions equation geometric object for example  equation two variables defines curve plane  more generally  equation  system equations  two variables defines curve  surface object n-dimensional space  in diophantine geometry  one asks whether rational points  points whose coordinates rationals  orintegral points  points whose coordinates integers  curve surface  if points  next step ask many distributed  a basic question direction finitelyor infinitely many rational points given curve  surface  in pythagorean equation                               x                                                                                                                                                       displaystyle x              would like study rational solutions   solutions                             x                                         displaystyle  x     thatx rational  this asking integer solutionsto                                                                                                  b                                                                    c                                                         displaystyle     b     c         solution latter equation givesus solution                     x                                                   c                displaystyle x c                                         b                                   c                displaystyle b c    former  it also thesame asking points rational coordinates curvedescribed                               x                                                                                                                                              displaystyle x                this curve happens circle radius   around origin  the rephrasing questions equations terms points curves turns felicitous  the finiteness number rational integer points algebraic curve  rational integer solutions equation                     f                 x                                                           displaystyle f x                            f                displaystyle f    polynomial two variables turns depend crucially genus curve  the genus defined follows  allow variables                     f                 x                                                           displaystyle f x       complex numbers                      f                 x                                                           displaystyle f x       defines  -dimensional surface  projective   -dimensional space  since two complex variables decomposed four real variables   four dimensions   if count number  doughnut  holes surface  call number genus                     f                 x                                                           displaystyle f x        other geometrical notions turn crucial there also closely linked area diophantine approximations  given number                     x                displaystyle x     finding well approximated rationals   we looking approximations good relative amount space takes write rational  call                                                       q                displaystyle q                         gcd                                 q                                           displaystyle  gcd q        good approximation                     x                displaystyle x                                                   x                                                   q                                                                                             q                              c                                                            displaystyle  x-a q    frac     q  c                            c                displaystyle c    large   this question special interest                     x                displaystyle x    algebraic number  if                     x                displaystyle x    cannot well approximated  equations integer rational solutions  moreover  several concepts  especially height  turn critical diophantine geometry study diophantine approximations  this question also special interest transcendental number theory  number better approximated algebraic number  transcendental number  it argument   e shown transcendental diophantine geometry confused geometry numbers  collection graphical methods answering certain questions algebraic number theory  arithmetic geometry  however  contemporary termfor much domain covered term diophantine geometry  the term arithmetic geometry arguably usedmost often one wishes emphasise connections modern algebraic geometry   instance  faltings theorem  rather techniques diophantine approximations    other subfields   the areas date earlier mid-twentieth century  even based older material  for example  explained  matter algorithms number theory old  sense older concept proof  time  modern study computability dates          computational complexity theory     s     probabilistic number theory    much probabilistic number theory seen important special case study variables almost  quite  mutually independent  for example  event random integer one million divisible two event divisible three almost independent  quite it sometimes said probabilistic combinatorics uses fact whatever happens probability greater                                      displaystyle      must happen sometimes  one may say equal justice many applications probabilistic number theory hinge fact whatever unusual must rare  if certain algebraic objects  say  rational integer solutions certain equations  shown tail certain sensibly defined distributions  follows must  concrete non-probabilistic statement following probabilistic one at times  non-rigorous  probabilistic approach leads number heuristic algorithms open problems  notably cram r conjecture     arithmetic combinatorics    if begin fairly  thick  infinite set                     a                displaystyle a     contain many elements arithmetic progression                                     displaystyle                                        b                                          b                                          b                                                             b                displaystyle b  b  b  ldots    b     say  should possible write large integers sums elements                     a                displaystyle a    these questions characteristic arithmetic combinatorics  this presently coalescing field  subsumes additive number theory  concerns certain specific sets                     a                displaystyle a    arithmetic significance  primes squares   arguably  geometry numbers together rapidly developing new material  its focus issues growth distribution accounts part developing links ergodic theory  finite group theory  model theory  fields  the term additive combinatorics also used  however  sets                     a                displaystyle a    studied need sets integers  rather subsets non-commutative groups  multiplication symbol  addition symbol  traditionally used  also subsets rings  case growth                     a                 a                displaystyle a a                        a                displaystyle a                        a                displaystyle a    may becompared     computational number theory    while word algorithm goes back certain readers al-khw rizm   careful descriptions methods solution older proofs  methods   algorithms  old recognisable mathematics ancient egyptian  babylonian  vedic  chinese whereas proofs appeared greeks classical period an early case call euclidean algorithm  in basic form  namely  algorithm computing greatest common divisor  appears proposition   book vii elements  together proof correctness  however  form often used number theory  namely  algorithm finding integer solutions equation                            x                 b                        c                displaystyle ax c      finding quantities whose existence assured chinese remainder theorem  first appears works  ryabha   th  th century ce  algorithm calledku  aka   pulveriser    without proof correctness there two main questions   can compute    can compute rapidly   anyone test whether number prime   split prime factors  rapidly another matter  we know fast algorithms testing primality   spite much work  theoretical practical   truly fast algorithm factoring the difficulty computation useful  modern protocols encrypting messages  example  rsa  depend functions known  whose inverses known chosen  would take one long time figure one own  for example  functions inverses computed certain large integers factorized  while many difficult computational problems outside number theory known  working encryption protocols nowadays based difficulty number-theoretical problems some things may computable  fact  proven instances  for instance        proven  solution hilbert   th problem  turing machine solve diophantine equations  in particular  means  given computably enumerable set axioms  diophantine equations proof  starting axioms  whether set equations integer solutions   we would necessarily speaking diophantine equations integer solutions  since  given diophantine equation least one solution  solution provides proof fact solution exists  we cannot prove particular diophantine equation kind  since would imply solutions     applications   the number-theorist leonard dickson             said  thank god number theory unsullied application   such view longer applicable number theory  in       donald knuth said     virtually every theorem elementary number theory arises natural  motivated way connection problem making computers high-speed numerical calculations  elementary number theory taught discrete mathematics courses computer scientists  hand  number theory also applications continuous numerical analysis  as well well-known applications cryptography  also applications many areas mathematics    prizes   the american mathematical society awards cole prize number theory  moreover number theory one three mathematical subdisciplines rewarded fermat prize    see also   algebraic function fieldfinite fieldp-adic number   notes      references      sources   this article incorporates material citizendium article  number theory   licensed creative commons attribution-sharealike     unported license gfdl    further reading   two popular introductions subject g h  hardy  e m  wright                an introduction theory numbers  rev  d r  heath-brown j h  silverman   th ed    oxford university press  isbn    - -  -      -   retrieved     -  -   vinogradov  i m                 elements number theory  reprint      ed    mineola  ny  dover publications hardy wright book comprehensive classic  though clarity sometimes suffers due authors  insistence elementary methods  apostol n d   vinogradov main attraction consists set problems  quickly lead vinogradov research interests  text basic close minimal  other popular first introductions ivan m  niven  herbert s  zuckerman  hugh l  montgomery                an introduction theory numbers  reprint  th edition      ed    john wiley   sons  isbn    -  -   -    -   retrieved     -  -   kenneth h  rosen         elementary number theory   th ed    pearson education  isbn    - -   -     -   retrieved     -  -   popular choices second textbook include borevich  a  i   shafarevich  igor r          number theory  pure applied mathematics      boston  ma  academic press  isbn    - -  -      -   mr         serre  jean-pierre                a course arithmetic  graduate texts mathematics     springer  isbn    - -   -     -     external links    media related number theory wikimedia commonsnumber theory entry encyclopedia mathematicsnumber theory web
an integer    latin integer meaning  whole   colloquially defined number written without fractional component  for example                  integers                  not the set integers consists zero      positive natural numbers                 also called whole numbers counting numbers  additive inverses  negative integers  i e                     the set integers often denoted boldface  z  blackboard bold                                        z                                 displaystyle   mathbb  z       letter  z  standing originally german word zahlen   numbers                                 z                        displaystyle  mathbb  z      subset set rational numbers                               q                        displaystyle  mathbb  q       turn subset real numbers                               r                        displaystyle  mathbb  r        like natural numbers                                z                        displaystyle  mathbb  z      countably infinite the integers form smallest group smallest ring containing natural numbers  in algebraic number theory  integers sometimes qualified rational integers distinguish general algebraic integers  in fact   rational  integers algebraic integers also rational numbers    symbol   the symbol                               z                        displaystyle  mathbb  z      annotated denote various sets  varying usage amongst different authors                                            z                                                                   displaystyle  mathbb  z                                                    z                                                                   displaystyle  mathbb  z                                                    z                                                                   displaystyle  mathbb  z          positive integers                                            z                                                                                displaystyle  mathbb  z                                                     z                                                                   displaystyle  mathbb  z     geq      non-negative integers                                            z                                                                   displaystyle  mathbb  z     neq      non-zero integers  some authors use                                           z                                                                   displaystyle  mathbb  z          non-zero integers  others use non-negative integers           additionally                                            z                                p                                  displaystyle  mathbb  z    p     used denote either set integers modulo p  i e   set congruence classes integers   set p-adic integers    algebraic properties   like natural numbers                                z                        displaystyle  mathbb  z      closed operations addition multiplication   sum product two integers integer  however  inclusion negative natural numbers  importantly                                    z                        displaystyle  mathbb  z       unlike natural numbers  also closed subtraction the integers form unital ring basic one  following sense  unital ring  unique ring homomorphism integers ring  this universal property  namely initial object category rings  characterizes ring                               z                        displaystyle  mathbb  z                                    z                        displaystyle  mathbb  z      closed division  since quotient two integers  e g     divided    need integer  although natural numbers closed exponentiation  integers  since result fraction exponent negative  the following table lists basic properties addition multiplication integers  b c the first five properties listed addition say                               z                        displaystyle  mathbb  z       addition  abelian group  it also cyclic group  since every non-zero integer written finite sum                                           in fact                                z                        displaystyle  mathbb  z      addition infinite cyclic group sense infinite cyclic group isomorphic                               z                        displaystyle  mathbb  z      the first four properties listed multiplication say                               z                        displaystyle  mathbb  z      multiplication commutative monoid  however  every integer multiplicative inverse  case number     means                               z                        displaystyle  mathbb  z      multiplication group all rules property table  except last   taken together  say                               z                        displaystyle  mathbb  z      together addition multiplication commutative ring unity  it prototype objects algebraic structure  only equalities expressions true                               z                        displaystyle  mathbb  z      values variables  true unital commutative ring  certain non-zero integers map zero certain rings the lack zero divisors integers  last property table  means commutative ring                               z                        displaystyle  mathbb  z      integral domain the lack multiplicative inverses  equivalent fact                               z                        displaystyle  mathbb  z      closed division  means                               z                        displaystyle  mathbb  z      field  the smallest field containing integers subring field rational numbers  the process constructing rationals integers mimicked form field fractions integral domain  and back  starting algebraic number field  extension rational numbers   ring integers extracted  includes                               z                        displaystyle  mathbb  z      subring although ordinary division defined                               z                        displaystyle  mathbb  z       division  remainder  defined them  it called euclidean division  possesses following important property  given two integers b b      exist unique integers q r   q   b   r     r     b    b  denotes absolute value b  the integer q called quotient r called remainder division b  the euclidean algorithm computing greatest common divisors works sequence euclidean divisions the says                               z                        displaystyle  mathbb  z      euclidean domain  this implies                               z                        displaystyle  mathbb  z      principal ideal domain  positive integer written products primes essentially unique way  this fundamental theorem arithmetic    order-theoretic properties                                 z                        displaystyle  mathbb  z      totally ordered set without upper lower bound  the ordering                               z                        displaystyle  mathbb  z      given                                        an integer positive greater zero  negative less zero  zero defined neither negative positive the ordering integers compatible algebraic operations following way   b c      c   b   dif   b     c  ac   bc thus follows                               z                        displaystyle  mathbb  z      together ordering ordered ring the integers nontrivial totally ordered abelian group whose positive elements well-ordered  this equivalent statement noetherian valuation ring either field discrete valuation ring    construction   in elementary school teaching  integers often intuitively defined  positive  natural numbers  zero  negations natural numbers  however  style definition leads many different cases  arithmetic operation needs defined combination types integer  makes tedious prove integers obey various laws arithmetic  therefore  modern set-theoretic mathematics  abstract construction allowing one define arithmetical operations without case distinction often used instead  the integers thus formally constructed equivalence classes ordered pairs natural numbers  b  the intuition  b  stands result subtracting b a  to confirm expectation             denote number  define equivalence relation   pairs following rule                                              b                                   c                                         displaystyle  b  sim  c    precisely                                                    b                 c                         displaystyle b c    addition multiplication integers defined terms equivalent operations natural numbers  using   b   denote equivalence class  b  member  one                                                       b                                                     c                                                                                      c                 b                                                           displaystyle   b     c      c b                                                            b                                                     c                                                                             c                 b                                               b        c                                           displaystyle   b   cdot   c      ac bd ad bc      the negation  additive inverse  integer obtained reversing order pair                                                                b                                                      b                                                           displaystyle -  b      b      hence subtraction defined addition additive inverse                                                       b                                                     c                                                                                                      b                 c                                           displaystyle   b  -  c      b c      the standard ordering integers given                                                       b                                                     c                                                  displaystyle   b     c                                                          b                 c                         displaystyle b c    it easily verified definitions independent choice representatives equivalence classes every equivalence class unique member form  n       n     the natural number n identified class   n      i e   natural numbers embedded integers map sending n   n       class     n   denoted  n  covers remaining classes  gives class         second time since        thus    b   denoted                                                                                                                                           b                                                                                                                                                                                                           b                                                                                                                    b                                                                                                                                                                                                                                                                  b                                                                                                           displaystyle   begin cases a-b    mbox   geq b  - b-a     mbox   b  end cases     if natural numbers identified corresponding integers  using embedding mentioned   convention creates ambiguity this notation recovers familiar representation integers                              some examplesk                                 kk                                                                   kk                                 kk                                                                   kk                                 k                                                                                                                                                 displaystyle   begin aligned                       cdots      k k                          cdots      k   k    -                      cdots      k k                            cdots      k   k    -                      cdots      k k      end aligned     in theoretical computer science  approaches construction integers used automated theorem provers term rewrite engines integers represented algebraic terms built using basic operations  e g    zero  succ  pred   possibly  using natural numbers  assumed already constructed  using  say  peano approach  there exist least ten constructions signed integers  these constructions differ several ways  number basic operations used construction  number  usually       types arguments accepted operations  presence absence natural numbers arguments operations  fact operations free constructors  i e   integer represented using one many algebraic terms the technique construction integers presented section corresponds particular case single basic operation pair                             x                                         displaystyle  x     takes arguments two natural numbers                     x                displaystyle x                                       displaystyle     returns integer  equal                     x                                displaystyle x-y      this operation free since integer   written pair       pair       pair       etc  this technique construction used proof assistant isabelle  however  many tools use alternative construction techniques  notable based upon free constructors  simpler implemented efficiently computers    computer science   an integer often primitive data type computer languages  however  integer data types represent subset integers  since practical computers finite capacity  also  common two complement representation  inherent definition sign distinguishes  negative   non-negative  rather  negative  positive       it  however  certainly possible computer determine whether integer value truly positive   fixed length integer approximation data types  subsets  denoted int integer several programming languages  algol    c  java  delphi  etc   variable-length representations integers  bignums  store integer fits computer memory  other integer data types implemented fixed size  usually number bits power              etc   memorable number decimal digits  e g            cardinality   the cardinality set integers equal     aleph-null   this readily demonstrated construction bijection   function injective surjective                               z                        displaystyle  mathbb  z                                    n                                                                                                                                             displaystyle  mathbb  n                     such function may defined                    f                 x                                                                                                                                                   x                                                                                                                                                                       x                                                                                                                                       x                                                                                                                                                                                                             x                                                                                                                                                 displaystyle f x    begin cases - x    mbox   x leq     x-     mbox   x    end cases     graph  set pairs                              x                 f                 x                                  displaystyle  x f x                                                                           its inverse function defined                                                                                                       g                                                        x                                                                           x                                                                              g                                                        x                                                                                              x                                                                                                           displaystyle   begin cases g  x  -x  g  x-   x  end cases     graph                                                            see also   canonical factorization positive integerhyperintegerinteger complexityinteger latticeinteger partinteger sequenceinteger-valued functionmathematical symbolsparity  mathematics profinite integer   footnotes      references      sources   bell  e t   men mathematics  new york  simon   schuster         hardcover  isbn  -   -     -    paperback  isbn  -   -     -  herstein  i n   topics algebra  wiley    edition  june            isbn  -   -     -  mac lane  saunders  garrett birkhoff  algebra  american mathematical society   rd edition         isbn  -    -    -     external links    integer   encyclopedia mathematics  ems press             the positive integers   divisor tables numeral representation toolson-line encyclopedia integer sequences cf oeisweisstein  eric w   integer   mathworld this article incorporates material integer planetmath  licensed creative commons attribution share-alike license 
cryptography  cryptology  ancient greek           romanized  krypt  hidden  secret           graphein   write   -      -logia   study   respectively   practice study techniques secure communication presence adversarial behavior  more generally  cryptography constructing analyzing protocols prevent third parties public reading private messages  various aspects information security data confidentiality  data integrity  authentication  non-repudiation central modern cryptography  modern cryptography exists intersection disciplines mathematics  computer science  electrical engineering  communication science  physics  applications cryptography include electronic commerce  chip-based payment cards  digital currencies  computer passwords  military communications cryptography prior modern age effectively synonymous encryption  converting information readable state unintelligible nonsense  the sender encrypted message shares decoding technique intended recipients preclude access adversaries  the cryptography literature often uses names alice   a   sender  bob   b   intended recipient  eve   eavesdropper   adversary  since development rotor cipher machines world war i advent computers world war ii  cryptography methods become increasingly complex applications varied modern cryptography heavily based mathematical theory computer science practice  cryptographic algorithms designed around computational hardness assumptions  making algorithms hard break actual practice adversary  while theoretically possible break well-designed system  infeasible actual practice so  such schemes  well designed  therefore termed  computationally secure   theoretical advances  e g   improvements integer factorization algorithms  faster computing technology require designs continually reevaluated  necessary  adapted  there exist information-theoretically secure schemes provably cannot broken even unlimited computing power  one-time pad  schemes much difficult use practice best theoretically breakable computationally secure schemes the growth cryptographic technology raised number legal issues information age  cryptography potential use tool espionage sedition led many governments classify weapon limit even prohibit use export  in jurisdictions use cryptography legal  laws permit investigators compel disclosure encryption keys documents relevant investigation  cryptography also plays major role digital rights management copyright infringement disputes regard digital media    terminology   the first use term cryptograph  opposed cryptogram  dates back   th century originating the gold-bug  story edgar allan poe until modern times  cryptography referred almost exclusively encryption  process converting ordinary information  called plaintext  unintelligible form  called ciphertext   decryption reverse  words  moving unintelligible ciphertext back plaintext  a cipher  cypher  pair algorithms carry encryption reversing decryption  the detailed operation cipher controlled algorithm  instance   key   the key secret  ideally known communicants   usually string characters  ideally short remembered user   needed decrypt ciphertext   in formal mathematical terms   cryptosystem  ordered list elements finite possible plaintexts  finite possible cyphertexts  finite possible keys  encryption decryption algorithms correspond key   keys important formally actual practice  ciphers without variable keys trivially broken knowledge cipher used therefore useless  even counter-productive  purposes historically  ciphers often used directly encryption decryption without additional procedures authentication integrity checks  there  generally  two kinds cryptosystems  symmetric asymmetric  in symmetric systems  ones known      key  secret key  used encrypt decrypt message  data manipulation symmetric systems faster asymmetric systems part generally use shorter key lengths  asymmetric systems use  public key  encrypt message related  private key  decrypt it  the use asymmetric systems enhances security communication  largely relation two keys hard discover  examples asymmetric systems include rsa  rivest shamir adleman   ecc  elliptic curve cryptography   quality symmetric algorithms include commonly used aes  advanced encryption standard  replaced older des  data encryption standard    not high quality symmetric algorithms include assorted children language tangling schemes pig latin cant  indeed effectively cryptographic schemes  however seriously intended  source prior invention one-time pad early   th century in colloquial use  term  code  often used mean method encryption concealment meaning  however  cryptography  code specific meaning  replacement unit plaintext  i e   meaningful word phrase  code word  example   wallaby  replaces  attack dawn     a cypher  contrast  scheme changing substituting element level  letter  syllable pair letters      order produce cyphertext cryptanalysis term used study methods obtaining meaning encrypted information without access key normally required  i e   study  crack  encryption algorithms implementations some use terms cryptography cryptology interchangeably english  others  including us military practice generally  use cryptography refer specifically use practice cryptographic techniques cryptology refer combined study cryptography cryptanalysis  english flexible several languages cryptology  done cryptologists  always used second sense above  rfc      advises steganography sometimes included cryptology the study characteristics languages application cryptography cryptology  e g  frequency data  letter combinations  universal patterns  etc   called cryptolinguistics    history cryptography cryptanalysis   before modern era  cryptography focused message confidentiality  i e   encryption  conversion messages comprehensible form incomprehensible one back end  rendering unreadable interceptors eavesdroppers without secret knowledge  namely key needed decryption message   encryption attempted ensure secrecy communications  spies  military leaders  diplomats  in recent decades  field expanded beyond confidentiality concerns include techniques message integrity checking  sender receiver identity authentication  digital signatures  interactive proofs secure computation  among others     classic cryptography    the main classical cipher types transposition ciphers  rearrange order letters message  e g    hello world  becomes  ehlol owrdl  trivially simple rearrangement scheme   substitution ciphers  systematically replace letters groups letters letters groups letters  e g    fly  becomes  gmz bu podf  replacing letter one following latin alphabet   simple versions either never offered much confidentiality enterprising opponents  an early substitution cipher caesar cipher  letter plaintext replaced letter fixed number positions alphabet  suetonius reports julius caesar used shift three communicate generals  atbash example early hebrew cipher  the earliest known use cryptography carved ciphertext stone egypt  ca      bce   may done amusement literate observers rather way concealing information the greeks classical times said known ciphers  e g   scytale transposition cipher claimed used spartan military   steganography  i e   hiding even existence message keep confidential  also first developed ancient times  an early example  herodotus  message tattooed slave shaved head concealed regrown hair  more modern examples steganography include use invisible ink  microdots  digital watermarks conceal information in india      -year-old kamasutra v tsy yana speaks two different kinds ciphers called kautiliyam mulavediya  in kautiliyam  cipher letter substitutions based phonetic relations  vowels becoming consonants  in mulavediya  cipher alphabet consists pairing letters using reciprocal ones in sassanid persia  two secret scripts  according muslim author ibn al-nadim    h-dab r ya  literally  king script   used official correspondence  r z-sahar ya used communicate secret messages countries david kahn notes the codebreakers modern cryptology originated among arabs  first people systematically document cryptanalytic methods  al-khalil           wrote book cryptographic messages  contains first use permutations combinations list possible arabic words without vowels ciphertexts produced classical cipher  modern ciphers  reveal statistical information plaintext  information often used break cipher  after discovery frequency analysis  perhaps arab mathematician polymath al-kindi  also known alkindus   th century  nearly ciphers could broken informed attacker  such classical ciphers still enjoy popularity today  though mostly puzzles  see cryptogram   al-kindi wrote book cryptography entitled risalah fi istikhraj al-mu amma  manuscript deciphering cryptographic messages   described first known use frequency analysis cryptanalysis techniques language letter frequencies may offer little help extended historical encryption techniques homophonic cipher tend flatten frequency distribution  for ciphers  language letter group  n-gram  frequencies may provide attack essentially ciphers remained vulnerable cryptanalysis using frequency analysis technique development polyalphabetic cipher  clearly leon battista alberti around year       though indication already known al-kindi  alberti innovation use different ciphers  i e   substitution alphabets  various parts message  perhaps successive plaintext letter limit   he also invented probably first automatic cipher device  wheel implemented partial realization invention  in vigen cipher  polyalphabetic cipher  encryption uses key word  controls letter substitution depending letter key word used  in mid-  th century charles babbage showed vigen cipher vulnerable kasiski examination  first published ten years later friedrich kasiski although frequency analysis powerful general technique many ciphers  encryption still often effective practice  many would-be cryptanalyst unaware technique  breaking message without using frequency analysis essentially required knowledge cipher used perhaps key involved  thus making espionage  bribery  burglary  defection  etc   attractive approaches cryptanalytically uninformed  it finally explicitly recognized   th century secrecy cipher algorithm sensible practical safeguard message security  fact  realized adequate cryptographic scheme  including ciphers  remain secure even adversary fully understands cipher algorithm itself  security key used alone sufficient good cipher maintain confidentiality attack  this fundamental principle first explicitly stated      auguste kerckhoffs generally called kerckhoffs principle  alternatively bluntly  restated claude shannon  inventor information theory fundamentals theoretical cryptography  shannon maxim  enemy knows system  different physical devices aids used assist ciphers  one earliest may scytale ancient greece  rod supposedly used spartans aid transposition cipher  in medieval times  aids invented cipher grille  also used kind steganography  with invention polyalphabetic ciphers came sophisticated aids alberti cipher disk  johannes trithemius  tabula recta scheme  thomas jefferson wheel cypher  publicly known  reinvented independently bazeries around        many mechanical encryption decryption devices invented early   th century  several patented  among rotor machines famously including enigma machine used german government military late     world war ii  the ciphers implemented better quality examples machine designs brought substantial increase cryptanalytic difficulty wwi     computer era    prior early   th century  cryptography mainly concerned linguistic lexicographic patterns  since emphasis shifted  cryptography makes extensive use mathematics  including aspects information theory  computational complexity  statistics  combinatorics  abstract algebra  number theory  finite mathematics generally  cryptography also branch engineering  unusual one since deals active  intelligent  malevolent opposition  kinds engineering  e g   civil chemical engineering  need deal neutral natural forces  there also active research examining relationship cryptographic problems quantum physics just development digital computers electronics helped cryptanalysis  made possible much complex ciphers  furthermore  computers allowed encryption kind data representable binary format  unlike classical ciphers encrypted written language texts  new significant  computer use thus supplanted linguistic cryptography  cipher design cryptanalysis  many computer ciphers characterized operation binary bit sequences  sometimes groups blocks   unlike classical mechanical schemes  generally manipulate traditional characters  i e   letters digits  directly  however  computers also assisted cryptanalysis  compensated extent increased cipher complexity  nonetheless  good modern ciphers stayed ahead cryptanalysis  typically case use quality cipher efficient  i e   fast requiring resources  memory cpu capability   breaking requires effort many orders magnitude larger  vastly larger required classical cipher  making cryptanalysis inefficient impractical effectively impossible     advent modern cryptography    cryptanalysis new mechanical devices proved difficult laborious  in united kingdom  cryptanalytic efforts bletchley park wwii spurred development efficient means carrying repetitious tasks  this culminated development colossus  world first fully electronic  digital  programmable computer  assisted decryption ciphers generated german army lorenz sz      machine extensive open academic research cryptography relatively recent  began mid-    s  in recent times  ibm personnel designed algorithm became federal  i e   us  data encryption standard  whitfield diffie martin hellman published key agreement algorithm  rsa algorithm published martin gardner scientific american column  since  cryptography become widely used tool communications  computer networks  computer security generally some modern cryptographic techniques keep keys secret certain mathematical problems intractable  integer factorization discrete logarithm problems  deep connections abstract mathematics  there cryptosystems proven unconditionally secure  the one-time pad one  proven claude shannon  there important algorithms proven secure certain assumptions  for example  infeasibility factoring extremely large integers basis believing rsa secure  systems  even  proof unbreakability unavailable since underlying mathematical problem remains open  in practice  widely used  believed unbreakable practice competent observers   there systems similar rsa  one michael o  rabin provably secure provided factoring  n   pq impossible   quite unusable practice  the discrete logarithm problem basis believing cryptosystems secure   related  less practical systems provably secure relative solvability insolvability discrete log problem as well aware cryptographic history  cryptographic algorithm system designers must also sensibly consider probable future developments working designs  for instance  continuous improvements computer processing power increased scope brute-force attacks  specifying key lengths  required key lengths similarly advancing  the potential effects quantum computing already considered cryptographic system designers developing post-quantum cryptography  announced imminence small implementations machines may making need preemptive caution rather merely speculative    modern cryptography       symmetric-key cryptography    symmetric-key cryptography refers encryption methods sender receiver share key   less commonly  keys different  related easily computable way   this kind encryption publicly known june      symmetric key ciphers implemented either block ciphers stream ciphers  a block cipher enciphers input blocks plaintext opposed individual characters  input form used stream cipher the data encryption standard  des  advanced encryption standard  aes  block cipher designs designated cryptography standards us government  though des designation finally withdrawn aes adopted   despite deprecation official standard  des  especially still-approved much secure triple-des variant  remains quite popular  used across wide range applications  atm encryption e-mail privacy secure remote access  many block ciphers designed released  considerable variation quality  many  even designed capable practitioners  thoroughly broken  feal stream ciphers  contrast  block  type  create arbitrarily long stream key material  combined plaintext bit-by-bit character-by-character  somewhat like one-time pad  in stream cipher  output stream created based hidden internal state changes cipher operates  that internal state initially set using secret key material  rc  widely used stream cipher  block ciphers used stream ciphers generating blocks keystream  place pseudorandom number generator  applying xor operation bit plaintext bit keystream message authentication codes  macs  much like cryptographic hash functions  except secret key used authenticate hash value upon receipt  additional complication blocks attack scheme bare digest algorithms  thought worth effort  cryptographic hash functions third type cryptographic algorithm  they take message length input  output short  fixed-length hash  used  example  digital signature  for good hash functions  attacker cannot find two messages produce hash  md  long-used hash function broken  md   strengthened variant md   also widely used broken practice  the us national security agency developed secure hash algorithm series md -like hash functions  sha-  flawed algorithm agency withdrew  sha-  widely deployed secure md   cryptanalysts identified attacks  sha-  family improves sha-   vulnerable clashes       us standards authority thought  prudent  security perspective develop new standard  significantly improve robustness nist overall hash algorithm toolkit   thus  hash function design competition meant select new u s  national standard  called sha-         the competition ended october          nist announced keccak would new sha-  hash algorithm  unlike block stream ciphers invertible  cryptographic hash functions produce hashed output cannot used retrieve original input data  cryptographic hash functions used verify authenticity data retrieved untrusted source add layer security message authentication codes  macs  much like cryptographic hash functions  except secret key used authenticate hash value upon receipt  additional complication blocks attack scheme bare digest algorithms  thought worth effort     public-key cryptography    symmetric-key cryptosystems use key encryption decryption message  although message group messages different key others  a significant disadvantage symmetric ciphers key management necessary use securely  each distinct pair communicating parties must  ideally  share different key  perhaps ciphertext exchanged well  the number keys required increases square number network members  quickly requires complex key management schemes keep consistent secret in groundbreaking      paper  whitfield diffie martin hellman proposed notion public-key  also  generally  called asymmetric key  cryptography two different mathematically related keys used public key private key  a public key system constructed calculation one key   private key   computationally infeasible   public key    even though necessarily related  instead  keys generated secretly  interrelated pair  the historian david kahn described public-key cryptography  revolutionary new concept field since polyalphabetic substitution emerged renaissance  in public-key cryptosystems  public key may freely distributed  paired private key must remain secret  in public-key encryption system  public key used encryption  private secret key used decryption  while diffie hellman could find system  showed public-key cryptography indeed possible presenting diffie hellman key exchange protocol  solution widely used secure communications allow two parties secretly agree shared encryption key the x     standard defines commonly used format public key certificates diffie hellman publication sparked widespread academic efforts finding practical public-key encryption system  this race finally      ronald rivest  adi shamir  len adleman  whose solution since become known rsa algorithm the diffie hellman rsa algorithms  addition first publicly known examples high-quality public-key algorithms  among widely used  other asymmetric-key algorithms include cramer shoup cryptosystem  elgamal encryption  various elliptic curve techniques a document published      government communications headquarters  gchq   british intelligence organization  revealed cryptographers gchq anticipated several academic developments  reportedly  around       james h  ellis conceived principles asymmetric key cryptography  in       clifford cocks invented solution similar design rationale rsa  in       malcolm j  williamson claimed developed diffie hellman key exchange public-key cryptography also used implementing digital signature schemes  a digital signature reminiscent ordinary signature  characteristic easy user produce  difficult anyone else forge  digital signatures also permanently tied content message signed  cannot  moved  one document another  attempt detectable  in digital signature schemes  two algorithms  one signing  secret key used process message  hash message    one verification  matching public key used message check validity signature  rsa dsa two popular digital signature schemes  digital signatures central operation public key infrastructures many network security schemes  e g   ssl tls  many vpns  etc   public-key algorithms often based computational complexity  hard  problems  often number theory  for example  hardness rsa related integer factorization problem  diffie hellman dsa related discrete logarithm problem  the security elliptic curve cryptography based number theoretic problems involving elliptic curves  because difficulty underlying problems  public-key algorithms involve operations modular multiplication exponentiation  much computationally expensive techniques used block ciphers  especially typical key sizes  as result  public-key cryptosystems commonly hybrid cryptosystems  fast high-quality symmetric-key encryption algorithm used message  relevant symmetric key sent message  encrypted using public-key algorithm  similarly  hybrid signature schemes often used  cryptographic hash function computed  resulting hash digitally signed     cryptographic hash functions    cryptographic hash functions cryptographic algorithms ways generate utilize specific keys encrypt data either symmetric asymmetric encryption  functions may viewed keys themselves  they take message length input  output short  fixed-length hash  used  example  digital signature  for good hash functions  attacker cannot find two messages produce hash  md  long-used hash function broken  md   strengthened variant md   also widely used broken practice  the us national security agency developed secure hash algorithm series md -like hash functions  sha-  flawed algorithm agency withdrew  sha-  widely deployed secure md   cryptanalysts identified attacks  sha-  family improves sha-   vulnerable clashes       us standards authority thought  prudent  security perspective develop new standard  significantly improve robustness nist overall hash algorithm toolkit   thus  hash function design competition meant select new u s  national standard  called sha-         the competition ended october          nist announced keccak would new sha-  hash algorithm  unlike block stream ciphers invertible  cryptographic hash functions produce hashed output cannot used retrieve original input data  cryptographic hash functions used verify authenticity data retrieved untrusted source add layer security     cryptanalysis    the goal cryptanalysis find weakness insecurity cryptographic scheme  thus permitting subversion evasion it common misconception every encryption method broken  in connection wwii work bell labs  claude shannon proved one-time pad cipher unbreakable  provided key material truly random  never reused  kept secret possible attackers  equal greater length message  most ciphers  apart one-time pad  broken enough computational effort brute force attack  amount effort needed may exponentially dependent key size  compared effort needed make use cipher  in cases  effective security could achieved proven effort required  i e    work factor   shannon terms  beyond ability adversary  this means must shown efficient method  opposed time-consuming brute force method  found break cipher  since proof found date  one-time-pad remains theoretically unbreakable cipher  although well-implemented one-time-pad encryption cannot broken  traffic analysis still possible there wide variety cryptanalytic attacks  classified several ways  a common distinction turns eve  attacker  knows capabilities available  in ciphertext-only attack  eve access ciphertext  good modern cryptosystems usually effectively immune ciphertext-only attacks   in known-plaintext attack  eve access ciphertext corresponding plaintext  many pairs   in chosen-plaintext attack  eve may choose plaintext learn corresponding ciphertext  perhaps many times   example gardening  used british wwii  in chosen-ciphertext attack  eve may able choose ciphertexts learn corresponding plaintexts  finally man-in-the-middle attack eve gets alice  sender  bob  recipient   accesses modifies traffic forwards recipient  also important  often overwhelmingly  mistakes  generally design use one protocols involved  cryptanalysis symmetric-key ciphers typically involves looking attacks block ciphers stream ciphers efficient attack could perfect cipher  for example  simple brute force attack des requires one known plaintext     decryptions  trying approximately half possible keys  reach point chances better even key sought found  but may enough assurance  linear cryptanalysis attack des requires     known plaintexts  corresponding ciphertexts  approximately     des operations  this considerable improvement brute force attacks public-key algorithms based computational difficulty various problems  the famous difficulty integer factorization semiprimes difficulty calculating discrete logarithms  yet proven solvable polynomial time using classical turing-complete computer  much public-key cryptanalysis concerns designing algorithms p solve problems  using technologies  quantum computers  for instance  best-known algorithms solving elliptic curve-based version discrete logarithm much time-consuming best-known algorithms factoring  least problems less equivalent size  thus  things equal  achieve equivalent strength attack resistance  factoring-based encryption techniques must use larger keys elliptic curve techniques  for reason  public-key cryptosystems based elliptic curves become popular since invention mid-    s while pure cryptanalysis uses weaknesses algorithms  attacks cryptosystems based actual use algorithms real devices  called side-channel attacks  if cryptanalyst access  example  amount time device took encrypt number plaintexts report error password pin character  may able use timing attack break cipher otherwise resistant analysis  an attacker might also study pattern length messages derive valuable information  known traffic analysis quite useful alert adversary  poor administration cryptosystem  permitting short keys  make system vulnerable  regardless virtues  social engineering attacks humans  e g   bribery  extortion  blackmail  espionage  torture       usually employed due cost-effective feasible perform reasonable amount time compared pure cryptanalysis high margin     cryptographic primitives    much theoretical work cryptography concerns cryptographic primitives algorithms basic cryptographic properties relationship cryptographic problems  more complicated cryptographic tools built basic primitives  these primitives provide fundamental properties  used develop complex tools called cryptosystems cryptographic protocols  guarantee one high-level security properties  note  however  distinction cryptographic primitives cryptosystems  quite arbitrary  example  rsa algorithm sometimes considered cryptosystem  sometimes primitive  typical examples cryptographic primitives include pseudorandom functions  one-way functions  etc     cryptosystems    one cryptographic primitives often used develop complex algorithm  called cryptographic system  cryptosystem  cryptosystems  e g   el-gamal encryption  designed provide particular functionality  e g   public key encryption  guaranteeing certain security properties  e g   chosen-plaintext attack  cpa  security random oracle model   cryptosystems use properties underlying cryptographic primitives support system security properties  as distinction primitives cryptosystems somewhat arbitrary  sophisticated cryptosystem derived combination several primitive cryptosystems  in many cases  cryptosystem structure involves back forth communication among two parties space  e g   sender secure message receiver  across time  e g   cryptographically protected backup data   such cryptosystems sometimes called cryptographic protocols some widely known cryptosystems include rsa encryption  schnorr signature  el-gamal encryption  pgp  etc  more complex cryptosystems include electronic cash systems  signcryption systems  etc  some  theoretical  cryptosystems include interactive proof systems   like zero-knowledge proofs   systems secret sharing  etc     lightweight cryptography    lightweight cryptography  lwc  concerns cryptographic algorithms developed strictly constrained environment  the growth internet things  iot  spiked research development lightweight algorithms better suited environment  an iot environment requires strict constraints power consumption  processing power  security  algorithms present  aes  speck examples many lwc algorithms developed achieve standard set national institute standards technology    legal issues       prohibitions    cryptography long interest intelligence gathering law enforcement agencies  secret communications may criminal even treasonous  because facilitation privacy  diminution privacy attendant prohibition  cryptography also considerable interest civil rights supporters  accordingly  history controversial legal issues surrounding cryptography  especially since advent inexpensive computers made widespread access high-quality cryptography possible in countries  even domestic use cryptography   restricted  until       france significantly restricted use cryptography domestically  though since relaxed many rules  in china iran  license still required use cryptography  many countries tight restrictions use cryptography  among restrictive laws belarus  kazakhstan  mongolia  pakistan  singapore  tunisia  vietnam in united states  cryptography legal domestic use  much conflict legal issues related cryptography  one particularly important issue export cryptography cryptographic software hardware  probably importance cryptanalysis world war ii expectation cryptography would continue important national security  many western governments  point  strictly regulated export cryptography  after world war ii  illegal us sell distribute encryption technology overseas  fact  encryption designated auxiliary military equipment put united states munitions list  until development personal computer  asymmetric key algorithms  i e   public key techniques   internet  especially problematic  however  internet grew computers became widely available  high-quality encryption techniques became well known around globe     export controls    in      several challenges us export regulation cryptography  after source code philip zimmermann pretty good privacy  pgp  encryption program found way onto internet june       complaint rsa security  called rsa data security  inc   resulted lengthy criminal investigation zimmermann us customs service fbi  though charges ever filed  daniel j  bernstein  graduate student uc berkeley  brought lawsuit us government challenging aspects restrictions based free speech grounds  the      case bernstein v  united states ultimately resulted      decision printed source code cryptographic algorithms systems protected free speech united states constitution in       thirty-nine countries signed wassenaar arrangement  arms control treaty deals export arms  dual-use  technologies cryptography  the treaty stipulated use cryptography short key-lengths    -bit symmetric encryption     -bit rsa  would longer export-controlled  cryptography exports us became less strictly regulated consequence major relaxation       longer many restrictions key sizes us-exported mass-market software  since relaxation us export restrictions  personal computers connected internet include us-sourced web browsers firefox internet explorer  almost every internet user worldwide potential access quality cryptography via browsers  e g   via transport layer security   the mozilla thunderbird microsoft outlook e-mail client programs similarly transmit receive emails via tls  send receive email encrypted s mime  many internet users realize basic application software contains extensive cryptosystems  these browsers email programs ubiquitous even governments whose intent regulate civilian use cryptography generally find practical much control distribution use cryptography quality  even laws force  actual enforcement often effectively impossible     nsa involvement    another contentious issue connected cryptography united states influence national security agency cipher development policy  the nsa involved design des development ibm consideration national bureau standards possible federal standard cryptography  des designed resistant differential cryptanalysis  powerful general cryptanalytic technique known nsa ibm  became publicly known rediscovered late     s  according steven levy  ibm discovered differential cryptanalysis  kept technique secret nsa request  the technique became publicly known biham shamir re-discovered announced years later  the entire affair illustrates difficulty determining resources knowledge attacker might actually have another instance nsa involvement      clipper chip affair  encryption microchip intended part capstone cryptography-control initiative  clipper widely criticized cryptographers two reasons  the cipher algorithm  called skipjack  classified  declassified       long clipper initiative lapsed   the classified cipher caused concerns nsa deliberately made cipher weak order assist intelligence efforts  the whole initiative also criticized based violation kerckhoffs principle  scheme included special escrow key held government use law enforcement  i e  wiretapping      digital rights management    cryptography central digital rights management  drm   group techniques technologically controlling use copyrighted material  widely implemented deployed behest copyright holders  in       u s  president bill clinton signed digital millennium copyright act  dmca   criminalized production  dissemination  use certain cryptanalytic techniques technology  known later discovered   specifically  could used circumvent drm technological schemes  this noticeable impact cryptography research community since argument made cryptanalytic research violated dmca  similar statutes since enacted several countries regions  including implementation eu copyright directive  similar restrictions called treaties signed world intellectual property organization member-states the united states department justice fbi enforced dmca rigorously feared  law  nonetheless  remains controversial one  niels ferguson  well-respected cryptography researcher  publicly stated release research intel security design fear prosecution dmca  cryptologist bruce schneier argued dmca encourages vendor lock-in  inhibiting actual measures toward cyber-security  both alan cox  longtime linux kernel developer  edward felten  students princeton  encountered problems related act  dmitry sklyarov arrested visit us russia  jailed five months pending trial alleged violations dmca arising work done russia  work legal  in       cryptographic keys responsible blu-ray hd dvd content scrambling discovered released onto internet  in cases  motion picture association america sent numerous dmca takedown notices  massive internet backlash triggered perceived impact notices fair use free speech     forced disclosure encryption keys    in united kingdom  regulation investigatory powers act gives uk police powers force suspects decrypt files hand passwords protect encryption keys  failure comply offense right  punishable conviction two-year jail sentence five years cases involving national security  successful prosecutions occurred act  first        resulted term    months  imprisonment  similar forced disclosure laws australia  finland  france  india compel individual suspects investigation hand encryption keys passwords criminal investigation in united states  federal criminal case united states v  fricosu addressed whether search warrant compel person reveal encryption passphrase password  the electronic frontier foundation  eff  argued violation protection self-incrimination given fifth amendment  in       court ruled all writs act  defendant required produce unencrypted hard drive court in many jurisdictions  legal status forced disclosure remains unclear the      fbi apple encryption dispute concerns ability courts united states compel manufacturers  assistance unlocking cell phones whose contents cryptographically protected as potential counter-measure forced disclosure cryptographic software supports plausible deniability  encrypted data indistinguishable unused random data  example drive securely wiped     see also   outline cryptography   overview topical guide cryptographylist cryptographers   wikipedia list articlelist important publications cryptography   wikipedia list articlelist multiple discoveries   wikipedia list articlelist unsolved problems computer science   wikipedia list articlesyllabical steganographical table   eighteenth-century work believed first cryptography chart   first cryptography chartcomparison cryptography librariescrypto warsencyclopedia cryptography security   book technische universiteit eindhovenglobal surveillance   mass surveillance across national bordersindistinguishability obfuscation   cryptographic algorithminformation theory   scientific study digital informationstrong cryptographyworld wide web consortium web cryptography api   world wide web consortium cryptography standardcollision attack   references      further reading      external links    the dictionary definition cryptography wiktionary media related cryptography wikimedia commonscryptography in our time bbccrypto glossary dictionary technical cryptographynsa cryptokids overview applications cryptology cryptool team  pdf      mb  july     a course cryptography raphael pass   abhi shelat   offered cornell form lecture notes for use cryptographic elements fiction  see  dooley  john f   william marilyn ingersoll professor computer science  knox college     august         cryptology fiction   archived original    july       retrieved    february      the george fabyan collection library congress early editions works seventeenth-century english literature  publications relating cryptography 
artificial intelligence  ai  intelligence demonstrated machines  opposed natural intelligence displayed animals including humans leading ai textbooks define field study  intelligent agents   system perceives environment takes actions maximize chance achieving goals some popular accounts use term  artificial intelligence  describe machines mimic  cognitive  functions humans associate human mind   learning   problem solving   however  definition rejected major ai researchers ai applications include advanced web search engines  i e  google   recommendation systems  used youtube  amazon netflix   understanding human speech  siri alexa   self-driving cars  e g  tesla   automated decision-making competing highest level strategic game systems  chess go  as machines become increasingly capable  tasks considered require  intelligence  often removed definition ai  phenomenon known ai effect   for instance  optical character recognition frequently excluded things considered ai  become routine technology artificial intelligence founded academic discipline       years since experienced several waves optimism  followed disappointment loss funding  known  ai winter    followed new approaches  success renewed funding  ai research tried discarded many different approaches since founding  including simulating brain  modeling human problem solving  formal logic  large databases knowledge imitating animal behavior  in first decades   st century  highly mathematical statistical machine learning dominated field  technique proved highly successful  helping solve many challenging problems throughout industry academia the various sub-fields ai research centered around particular goals use particular tools  the traditional goals ai research include reasoning  knowledge representation  planning  learning  natural language processing  perception  ability move manipulate objects  general intelligence  ability solve arbitrary problem  among field long-term goals  to solve problems  ai researchers adapted integrated wide range problem-solving techniques -- including search mathematical optimization  formal logic  artificial neural networks  methods based statistics  probability economics  ai also draws upon computer science  psychology  linguistics  philosophy  many fields the field founded assumption human intelligence  precisely described machine made simulate  this raises philosophical arguments mind ethics creating artificial beings endowed human-like intelligence  these issues explored myth  fiction  philosophy since antiquity science fiction futurology also suggested  enormous potential power  ai may become existential risk humanity    history   artificial beings intelligence appeared storytelling devices antiquity common fiction  mary shelley frankenstein karel  apek r u r  these characters fates raised many issues discussed ethics artificial intelligence the study mechanical  formal  reasoning began philosophers mathematicians antiquity  the study mathematical logic led directly alan turing theory computation  suggested machine  shuffling symbols simple          could simulate conceivable act mathematical deduction  this insight digital computers simulate process formal reasoning known church turing thesis the church-turing thesis  along concurrent discoveries neurobiology  information theory cybernetics  led researchers consider possibility building electronic brain the first work generally recognized ai mccullouch pitts       formal design turing-complete  artificial neurons  when access digital computers became possible mid-     ai research began explore possibility human intelligence could reduced step-by-step symbol manipulation  known symbolic ai gofai  approaches based cybernetics artificial neural networks abandoned pushed background the field ai research born workshop dartmouth college      the attendees became founders leaders ai research they students produced programs press described  astonishing  computers learning checkers strategies  solving word problems algebra  proving logical theorems speaking english by middle      research u s  heavily funded department defenseand laboratories established around world researchers         convinced symbolic approaches would eventually succeed creating machine artificial general intelligence considered goal field herbert simon predicted   machines capable  within twenty years  work man  marvin minsky agreed  writing   within generation     problem creating  artificial intelligence  substantially solved  they failed recognize difficulty remaining tasks  progress slowed       response criticism sir james lighthilland ongoing pressure us congress fund productive projects  u s  british governments cut exploratory research ai  the next years would later called  ai winter   period obtaining funding ai projects difficult in early      ai research revived commercial success expert systems form ai program simulated knowledge analytical skills human experts  by       market ai reached billion dollars  at time  japan fifth generation computer project inspired u s british governments restore funding academic research however  beginning collapse lisp machine market       ai fell disrepute  second  longer-lasting winter began many researchers began doubt symbolic approach would able imitate processes human cognition  especially perception  robotics  learning pattern recognition  a number researchers began look  sub-symbolic  approaches specific ai problems  robotics researchers  rodney brooks  rejected symbolic ai focused basic engineering problems would allow robots move  survive  learn environment interest neural networks  connectionism  revived geoffrey hinton  david rumelhart others middle     s soft computing tools developed    neural networks  fuzzy systems  grey system theory  evolutionary computation many tools drawn statistics mathematical optimization ai gradually restored reputation late     early   st century finding specific solutions specific problems  the narrow focus allowed researchers produce verifiable results  exploit  mathematical methods  collaborate fields  statistics  economics mathematics  by       solutions developed ai researchers widely used  although     rarely described  artificial intelligence  faster computers  algorithmic improvements  access large amounts data enabled advances machine learning perception  data-hungry deep learning methods started dominate accuracy benchmarks around      according bloomberg jack clark       landmark year artificial intelligence  number software projects use ai within google increased  sporadic usage             projects  he attributes increase affordable neural networks  due rise cloud computing infrastructure increase research tools datasets  in      survey  one five companies reported  incorporated ai offerings processes   the amount research ai  measured total publications  increased     years           numerous academic researchers became concerned ai longer pursuing original goal creating versatile  fully intelligent machines  much current research involves statistical ai  overwhelmingly used solve specific problems  even highly successful techniques deep learning  this concern led subfield artificial general intelligence   agi    several well-funded institutions     s    goals   the general problem simulating  creating  intelligence broken sub-problems  these consist particular traits capabilities researchers expect intelligent system display  the traits described received attention     reasoning  problem solving    early researchers developed algorithms imitated step-by-step reasoning humans use solve puzzles make logical deductions by late          ai research developed methods dealing uncertain incomplete information  employing concepts probability economics many algorithms proved insufficient solving large reasoning problems experienced  combinatorial explosion   became exponentially slower problems grew larger even humans rarely use step-by-step deduction early ai research could model  they solve problems using fast  intuitive judgments     knowledge representation    knowledge representation knowledge engineeringallow ai programs answer questions intelligently make deductions real world facts a representation  exists  ontology  set objects  relations  concepts  properties formally described software agents interpret them the general ontologies called upper ontologies  attempt provide foundation knowledge act mediators domain ontologies cover specific knowledge particular knowledge domain  field interest area concern   a truly intelligent program would also need access commonsense knowledge  set facts average person knows  the semantics ontology typically represented description logic  web ontology language ai research developed tools represent specific domains   objects  properties  categories relations objects situations  events  states time causes effects knowledge knowledge  know people know   default reasoning  things humans assume true told differently remain true even facts changing  well domains  among difficult problems ai  breadth commonsense knowledge  number atomic facts average person knows enormous  sub-symbolic form commonsense knowledge  much people know represented  facts   statements  could express verbally  formal knowledge representations used content-based indexing retrieval scene interpretation clinical decision support knowledge discovery  mining  interesting  actionable inferences large databases  areas     planning    an intelligent agent plan makes representation state world  makes predictions actions change makes choices maximize utility   value   available choices in classical planning problems  agent assume system acting world  allowing agent certain consequences actions however  agent actor  requires agent reason uncertainty  continuously re-assess environment adapt multi-agent planning uses cooperation competition many agents achieve given goal  emergent behavior used evolutionary algorithms swarm intelligence     learning    machine learning  ml   fundamental concept ai research since field inception study computer algorithms improve automatically experience unsupervised learning finds patterns stream input  supervised learning requires human label input data first  comes two main varieties  classification numerical regression  classification used determine category something belongs -- program sees number examples things several categories learn classify new inputs  regression attempt produce function describes relationship inputs outputs predicts outputs change inputs change  both classifiers regression learners viewed  function approximators  trying learn unknown  possibly implicit  function  example  spam classifier viewed learning function maps text email one two categories   spam   spam  in reinforcement learning agent rewarded good responses punished bad ones  the agent classifies responses form strategy operating problem space transfer learning knowledge gained one problem applied new problem computational learning theory assess learners computational complexity  sample complexity  much data required   notions optimization     natural language processing    natural language processing  nlp allows machines read understand human language  a sufficiently powerful natural language processing system would enable natural-language user interfaces acquisition knowledge directly human-written sources  newswire texts  some straightforward applications nlp include information retrieval  question answering machine translation symbolic ai used formal syntax translate deep structure sentences logic  this failed produce useful applications  due intractability logic breadth commonsense knowledge  modern statistical techniques include co-occurrence frequencies  often one word appears near another    keyword spotting   searching particular word retrieve information   transformer-based deep learning  finds patterns text   others  they achieved acceptable accuracy page paragraph level         could generate coherent text     perception    machine perceptionis ability use input sensors  cameras  microphones  wireless signals  active lidar  sonar  radar  tactile sensors  deduce aspects world  applications include speech recognition facial recognition  object recognition computer vision ability analyze visual input     motion manipulation    ai heavily used robotics localization robot knows location map environment  when given small  static  visible environment  easy  however  dynamic environments   endoscopy  interior patient breathing body  pose greater challenge motion planning process breaking movement task  primitives  individual joint movements  such movement often involves compliant motion  process movement requires maintaining physical contact object  robots learn experience move efficiently despite presence friction gear slippage     social intelligence    affective computing interdisciplinary umbrella comprises systems recognize  interpret  process  simulate human feeling  emotion mood  for example  virtual assistants programmed speak conversationally even banter humorously  makes appear sensitive emotional dynamics human interaction  otherwise facilitate human computer interaction however  tends give na users unrealistic conception intelligent existing computer agents actually are moderate successes related affective computing include textual sentiment analysis  recently  multimodal sentiment analysis   wherein ai classifies affects displayed videotaped subject     general intelligence    a machine general intelligence solve wide variety problems breadth versatility similar human intelligence  there several competing ideas develop artificial general intelligence  hans moravec marvin minsky argue work different individual domains incorporated advanced multi-agent system cognitive architecture general intelligence pedro domingos hopes conceptually straightforward  mathematically difficult   master algorithm  could lead agi others believe anthropomorphic features like artificial brainor simulated child developmentwill someday reach critical point general intelligence emerges    tools       search optimization    many problems ai solved theoretically intelligently searching many possible solutions reasoning reduced performing search  for example  logical proof viewed searching path leads premises conclusions  step application inference rule planning algorithms search trees goals subgoals  attempting find path target goal  process called means-ends analysis robotics algorithms moving limbs grasping objects use local searches configuration space simple exhaustive searchesare rarely sufficient real-world problems  search space  number places search  quickly grows astronomical numbers  the result search slow never completes  the solution  many problems  use  heuristics   rules thumb  prioritize choices favor likely reach goal shorter number steps  in search methodologies heuristics also serve eliminate choices unlikely lead goal  called  pruning search tree    heuristics supply program  best guess  path solution lies heuristics limit search solutions smaller sample size a different kind search came prominence      based mathematical theory optimization  for many problems  possible begin search form guess refine guess incrementally refinements made  these algorithms visualized blind hill climbing  begin search random point landscape   jumps steps  keep moving guess uphill  reach top  other optimization algorithms simulated annealing  beam search random optimization evolutionary computation uses form optimization search  for example  may begin population organisms  guesses  allow mutate recombine  selecting fittest survive generation  refining guesses   classic evolutionary algorithms include genetic algorithms  gene expression programming  genetic programming alternatively  distributed search processes coordinate via swarm intelligence algorithms  two popular swarm algorithms used search particle swarm optimization  inspired bird flocking  ant colony optimization  inspired ant trails      logic    logicis used knowledge representation problem solving  applied problems well  for example  satplan algorithm uses logic planningand inductive logic programming method learning several different forms logic used ai research  propositional logic involves truth functions      first-order logicadds quantifiers predicates  express facts objects  properties  relations other  fuzzy logic assigns  degree truth        vague statements  alice old   rich  tall  hungry   linguistically imprecise completely true false default logics  non-monotonic logics circumscription forms logic designed help default reasoning qualification problem several extensions logic designed handle specific domains knowledge   description logics situation calculus  event calculus fluent calculus  representing events time  causal calculus belief calculus  belief revision   modal logics logics model contradictory inconsistent statements arising multi-agent systems also designed  paraconsistent logics     probabilistic methods uncertain reasoning    many problems ai  reasoning  planning  learning  perception  robotics  require agent operate incomplete uncertain information  ai researchers devised number powerful tools solve problems using methods probability theory economics bayesian networksare general tool used various problems  reasoning  using bayesian inference algorithm  learning  using expectation-maximization algorithm  planning  using decision networks  perception  using dynamic bayesian networks  probabilistic algorithms also used filtering  prediction  smoothing finding explanations streams data  helping perception systems analyze processes occur time  e g   hidden markov models kalman filters  a key concept science economics  utility   measure valuable something intelligent agent  precise mathematical tools developed analyze agent make choices plan  using decision theory  decision analysis information value theory  these tools include models markov decision processes  dynamic decision networks  game theory mechanism design     classifiers statistical learning methods    the simplest ai applications divided two types  classifiers   shiny diamond   controllers   diamond pick    controllers  however  also classify conditions inferring actions  therefore classification forms central part many ai systems  classifiers functions use pattern matching determine closest match  they tuned according examples  making attractive use ai  these examples known observations patterns  in supervised learning  pattern belongs certain predefined class  a class decision made  all observations combined class labels known data set  when new observation received  observation classified based previous experience a classifier trained various ways  many statistical machine learning approaches the decision tree simplest widely used symbolic machine learning algorithm k-nearest neighbor algorithm widely used analogical ai mid-    s kernel methods support vector machine  svm  displaced k-nearest neighbor     s the naive bayes classifier reportedly  widely used learner  google  due part scalability neural networks also used classification classifier performance depends greatly characteristics data classified  dataset size  distribution samples across classes  dimensionality  level noise  model-based classifiers perform well assumed model extremely good fit actual data  otherwise  matching model available  accuracy  rather speed scalability  sole concern  conventional wisdom discriminative classifiers  especially svm  tend accurate model-based classifiers  naive bayes  practical data sets     artificial neural networks    neural networkswere inspired architecture neurons human brain  a simple  neuron  n accepts input neurons   activated   fired    casts weighted  vote  whether neuron n activate  learning requires algorithm adjust weights based training data  one simple algorithm  dubbed  fire together  wire together   increase weight two connected neurons activation one triggers successful activation another  neurons continuous spectrum activation  addition  neurons process inputs nonlinear way rather weighing straightforward votes modern neural networks model complex relationships inputs outputs find patterns data  they learn continuous functions even digital logical operations  neural networks viewed type mathematical optimization   perform gradient descent multi-dimensional topology created training network  the common training technique backpropagation algorithm other learning techniques neural networks hebbian learning   fire together  wire together    gmdh competitive learning the main categories networks acyclic feedforward neural networks  signal passes one direction  recurrent neural networks  allow feedback short-term memories previous input events   among popular feedforward networks perceptrons  multi-layer perceptrons radial basis networks      deep learning      deep learninguses several layers neurons network inputs outputs  the multiple layers progressively extract higher-level features raw input  for example  image processing  lower layers may identify edges  higher layers may identify concepts relevant human digits letters faces  deep learning drastically improved performance programs many important subfields artificial intelligence  including computer vision  speech recognition  image classification others deep learning often uses convolutional neural networks many layers  in convolutional layer  neuron receives input restricted area previous layer called neuron receptive field  this substantially reduce number weighted connections neurons  creates hierarchy similar organization animal visual cortex in recurrent neural network signal propagate layer  thus  rnn example deep learning rnns trained gradient descent however long-term gradients back-propagated  vanish    tend zero   explode    tend infinity   known vanishing gradient problem the long short term memory  lstm  technique prevent cases     specialized languages hardware    specialized languages artificial intelligence developed  lisp  prolog  tensorflow many others  hardware developed ai includes ai accelerators neuromorphic computing    applications   ai relevant intellectual task modern artificial intelligence techniques pervasive numerous list here frequently  technique reaches mainstream use  longer considered artificial intelligence  phenomenon described ai effect in      ai applications heart commercially successful areas computing  become ubiquitous feature daily life  ai used search engines  google search  targeting online advertisements recommendation systems  offered netflix  youtube amazon  driving internet traffic targeted advertising  adsense  facebook  virtual assistants  siri alexa  autonomous vehicles  including drones self-driving cars  automatic language translation  microsoft translator  google translate  facial recognition  apple face id microsoft deepface  image labeling  used facebook  apple iphoto tiktok spam filtering there also thousands successful ai applications used solve problems specific industries institutions  a examples  energy storage deepfakes medical diagnosis  military logistics  supply chain management game playing test ai strength since     s  deep blue became first computer chess-playing system beat reigning world chess champion  garry kasparov     may       in       jeopardy  quiz show exhibition match  ibm question answering system  watson  defeated two greatest jeopardy  champions  brad rutter ken jennings  significant margin  in march       alphago     games go match go champion lee sedol  becoming first computer go-playing system beat professional go player without handicaps other programs handle imperfect-information games  poker superhuman level  pluribusand cepheus deepmind     developed  generalized artificial intelligence  could learn many diverse atari games own by       natural language processing systems enormous gpt-   far largest artificial neural network  matching human performance pre-existing benchmarks  albeit without system attaining commonsense understanding contents benchmarks deepmind alphafold          demonstrated ability determine  hours rather months   d structure protein other applications predict result judicial decisions  create art  poetry painting  prove mathematical theorems    philosophy       defining artificial intelligence         thinking vs  acting  turing test     alan turing wrote       i propose consider question  machines think   he advised changing question whether machine  thinks    whether possible machinery show intelligent behaviour   the thing visible behavior machine  matter machine conscious  mind  whether intelligence merely  simulation   real thing    he noted also know things people  extend  polite convention  actually  thinking   this idea forms basis turing test      acting humanly vs  acting intelligently  intelligent agents     ai founder john mccarthy said   artificial intelligence  definition  simulation human intelligence   russell norvig agree criticize turing test  they wrote   aeronautical engineering texts define goal field  making machines fly exactly like pigeons fool pigeons    other researchers analysts disagree argued ai simulate natural intelligence studying psychology neurobiology the intelligent agent paradigmdefines intelligent behavior general  without reference human beings  an intelligent agent system perceives environment takes actions maximize chances success  any system goal-directed behavior analyzed intelligent agent  something simple thermostat  complex human  well large systems firms  biomes nations  the intelligent agent paradigm became widely accepted      currently serves definition field the paradigm advantages ai  it provides reliable scientific way test programs  researchers directly compare even combine different approaches isolated problems  asking agent best maximizing given  goal function    it also gives common language communicate fields   mathematical optimization  defined terms  goals   economics  uses definition  rational agent       evaluating approaches ai    no established unifying theory paradigm guided ai research history  the unprecedented success statistical machine learning     eclipsed approaches  much sources  especially business world  use term  artificial intelligence  mean  machine learning neural networks    this approach mostly sub-symbolic  neat  soft narrow  see   critics argue questions may revisited future generations ai researchers       symbolic ai limits     symbolic ai   gofai   simulated high-level conscious reasoning people use solve puzzles  express legal reasoning mathematics  they highly successful  intelligent  tasks algebra iq tests  in      newell simon proposed physical symbol systems hypothesis   a physical symbol system necessary sufficient means general intelligent action  however  symbolic approach failed dismally many tasks humans solve easily  learning  recognizing object commonsense reasoning  moravec paradox discovery high-level  intelligent  tasks easy ai  low level  instinctive  tasks extremely difficult philosopher hubert dreyfus argued since     human expertise depends unconscious instinct rather conscious symbol manipulation   feel  situation  rather explicit symbolic knowledge although arguments ridiculed ignored first presented  eventually ai research came agree the issue resolved  sub-symbolic reasoning make many inscrutable mistakes human intuition  algorithmic bias  critics noam chomsky argue continuing research symbolic ai still necessary attain general intelligence  part sub-symbolic ai move away explainable ai  difficult impossible understand modern statistical ai program made particular decision      neat vs  scruffy      neats  hope intelligent behavior described using simple  elegant principles  logic  optimization  neural networks    scruffies  expect necessarily requires solving large number unrelated problems  this issue actively discussed         mathematical methods solid scientific standards became norm  transition russell norvig termed  victory neats       soft vs  hard computing     finding provably correct optimal solution intractable many important problems  soft computing set techniques  including genetic algorithms  fuzzy logic neural networks  tolerant imprecision  uncertainty  partial truth approximation  soft computing introduced late   successful ai programs   st century examples soft computing neural networks      narrow vs  general ai     ai researchers divided whether pursue goals artificial general intelligence superintelligence  general ai  directly  solve many specific problems possible  narrow ai  hopes solutions lead indirectly field long-term goalsgeneral intelligence difficult define difficult measure  modern ai verifiable successes focussing specific problems specific solutions  the experimental sub-field artificial general intelligence studies area exclusively     machine consciousness  sentience mind    the philosophy mind know whether machine mind  consciousness mental states  sense human beings do  this issue considers internal experiences machine  rather external behavior  mainstream ai research considers issue irrelevant  effect goals field  stuart russell peter norvig observe ai researchers  care  philosophy ai    long program works  care whether call simulation intelligence real intelligence   however  question become central philosophy mind  it also typically central question issue artificial intelligence fiction      consciousness     david chalmers identified two problems understanding mind  named  hard   easy  problems consciousness  the easy problem understanding brain processes signals  makes plans controls behavior  the hard problem explaining feels feel like anything all  human information processing easy explain  however human subjective experience difficult explain  for example  easy imagine color blind person learned identify objects field view red  clear would required person know red looks like      computationalism functionalism     computationalism position philosophy mind human mind information processing system thinking form computing  computationalism argues relationship mind body similar identical relationship software hardware thus may solution mind-body problem  this philosophical position inspired work ai researchers cognitive scientists     originally proposed philosophers jerry fodor hilary putnam philosopher john searle characterized position  strong ai    the appropriately programmed computer right inputs outputs would thereby mind exactly sense human beings minds  searle counters assertion chinese room argument  attempts show  even machine perfectly simulates human behavior  still reason suppose also mind      robot rights     if machine mind subjective experience  may also sentience  ability feel    could also suffer  thus would entitled certain rights any hypothetical robot rights would lie spectrum animal rights human rights this issue considered fiction centuries considered  example  california institute future  however critics argue discussion premature    future       superintelligence    a superintelligence  hyperintelligence  superhuman intelligence  hypothetical agent would possess intelligence far surpassing brightest gifted human mind  superintelligence may also refer form degree intelligence possessed agent if research artificial general intelligence produced sufficiently intelligent software  might able reprogram improve itself  the improved software would even better improving  leading recursive self-improvement its intelligence would increase exponentially intelligence explosion could dramatically surpass humans  science fiction writer vernor vinge named scenario  singularity  because difficult impossible know limits intelligence capabilities superintelligent machines  technological singularity occurrence beyond events unpredictable even unfathomable robot designer hans moravec  cyberneticist kevin warwick  inventor ray kurzweil predicted humans machines merge future cyborgs capable powerful either  this idea  called transhumanism  roots aldous huxley robert ettinger edward fredkin argues  artificial intelligence next stage evolution   idea first proposed samuel butler  darwin among machines  far back       expanded upon george dyson book name          risks         technological unemployment     in past technology tended increase rather reduce total employment  economists acknowledge  uncharted territory  ai a survey economists showed disagreement whether increasing use robots ai cause substantial increase long-term unemployment  generally agree could net benefit  productivity gains redistributed subjective estimates risk vary widely  example  michael osborne carl benedikt frey estimate     u s  jobs  high risk  potential automation  oecd report classifies    u s  jobs  high risk  unlike previous waves automation  many middle-class jobs may eliminated artificial intelligence  the economist states  worry ai could white-collar jobs steam power blue-collar ones industrial revolution   worth taking seriously  jobs extreme risk range paralegals fast food cooks  job demand likely increase care-related professions ranging personal healthcare clergy      bad actors weaponized ai     ai provides number tools particularly useful authoritarian governments  smart spyware  face recognition voice recognition allow widespread surveillance  surveillance allows machine learning classify potential enemies state prevent hiding  recommendation systems precisely target propaganda misinformation maximum effect  deepfakes aid producing misinformation  advanced ai make centralized decision making competitive liberal decentralized systems markets terrorists  criminals rogue states may use forms weaponized ai advanced digital warfare lethal autonomous weapons  by       fifty countries reported researching battlefield robots      algorithmic bias     ai programs become biased learning real world data  it typically introduced system designers  learned program  thus programmers often unaware bias exists bias inadvertently introduced way training data selected it also emerge correlations  ai used classify individuals groups make predictions assuming individual resemble members group  in cases  assumption may unfair an example compas  commercial program widely used u s  courts assess likelihood defendant becoming recidivist  propublica claims compas-assigned recidivism risk level black defendants far likely overestimate white defendants  despite fact program told races defendants  other examples algorithmic bias lead unfair outcomes ai used credit rating hiring      existential risk     superintelligent ai may able improve point humans could control it  this could  physicist stephen hawking puts   spell end human race   philosopher nick bostrom argues sufficiently intelligent ai  chooses actions based achieving goal  exhibit convergent behavior acquiring resources protecting shut down  if ai goals fully reflect humanity  might need harm humanity order acquire resources prevent shut  ultimately better achieve goal  he concludes ai poses risk mankind  however humble  friendly  stated goals might be political scientist charles t  rubin argues  sufficiently advanced benevolence may indistinguishable malevolence   humans assume machines robots would treat us favorably priori reason believe would share system morality the opinion experts industry insiders mixed  sizable fractions concerned unconcerned risk eventual superhumanly-capable ai stephen hawking  microsoft founder bill gates  history professor yuval noah harari  spacex founder elon musk expressed serious misgivings future ai prominent tech titans including peter thiel  amazon web services  musk committed    billion nonprofit companies champion responsible ai development  openai future life institute mark zuckerberg  ceo  facebook  said artificial intelligence helpful current form continue assist humans other experts argue risks far enough future worth researching humans valuable perspective superintelligent machine rodney brooks  particular  said  malevolent  ai still centuries away     ethical machines    friendly ai machines designed beginning minimize risks make choices benefit humans  eliezer yudkowsky  coined term  argues developing friendly ai higher research priority  may require large investment must completed ai becomes existential risk machines intelligence potential use intelligence make ethical decisions  the field machine ethics provides machines ethical principles procedures resolving ethical dilemmas machine ethics also called machine morality  computational ethics computational morality founded aaai symposium      others approaches include wendell wallach  artificial moral agents stuart j  russell three principles developing provably beneficial machines     regulation    the regulation artificial intelligence development public sector policies laws promoting regulating artificial intelligence  ai   therefore related broader regulation algorithms the regulatory  policy landscape ai emerging issue jurisdictions globally between               countries adopted dedicated strategies ai most eu member states released national ai strategies  canada  china  india  japan  mauritius  russian federation  saudi arabia  united arab emirates  usa viet nam  others process elaborating ai strategy  including bangladesh  malaysia tunisia the global partnership artificial intelligence launched june       stating need ai developed accordance human rights democratic values  ensure public confidence trust technology    in fiction   thought-capable artificial beings appeared storytelling devices since antiquity persistent theme science fiction a common trope works began mary shelley frankenstein  human creation becomes threat masters  this includes works arthur c  clarke stanley kubrick       a space odyssey         hal       murderous computer charge discovery one spaceship  well the terminator        the matrix         in contrast  rare loyal robots gort the day earth stood still        bishop aliens        less prominent popular culture isaac asimov introduced three laws robotics many books stories  notably  multivac  series super-intelligent computer name  asimov laws often brought lay discussions machine ethics almost artificial intelligence researchers familiar asimov laws popular culture  generally consider laws useless many reasons  one ambiguity transhumanism  merging humans machines  explored manga ghost shell science-fiction series dune several works use ai force us confront fundamental question makes us human  showing us artificial beings ability feel  thus suffer  this appears karel  apek r u r   films a i  artificial intelligence ex machina  well novel do androids dream electric sheep   philip k  dick  dick considers idea understanding human subjectivity altered technology created artificial intelligence    see also      explanatory notes      citations      references       ai textbooks    these four widely used ai textbooks          history ai        other sources    werbos  p  j           generalization backpropagation application recurrent gas market model   neural networks                  doi             -             -xgers  felix a   schraudolph  nicol n   schraudolph  j rgen          learning precise timing lstm recurrent networks   pdf   journal machine learning research              retrieved    june      deng  l   yu  d           deep learning  methods applications   pdf   foundations trends signal processing                  doi                     archived  pdf  original    march       retrieved    october      schulz  hannes  behnke  sven    november         deep learning   ki - k nstliche intelligenz                   doi             -   -    -z  issn     -      s cid           fukushima  k           neocognitron   scholarpedia               bibcode     schpj         f  doi         scholarpedia        ref  introduced kunihiko fukushima      habibi  aghdam  hamed     may        guide convolutional neural networks   practical application traffic-sign detection classification  heravi  elnaz jahani  cham  switzerland  isbn                oclc           ciresan  d   meier  u   schmidhuber  j           multi-column deep neural networks image classification        ieee conference computer vision pattern recognition  pp             arxiv            doi         cvpr               isbn    - -    -    -   s cid         schmidhuber  j           deep learning neural networks  an overview   neural networks              arxiv            doi         j neunet              pmid           s cid           from working neural networking   the economist        archived original    december       retrieved    april      thompson  derek     january         what jobs will robots take    the atlantic  archived original    april       retrieved    april      scassellati  brian          theory mind humanoid robot   autonomous robots                 doi         a                s cid         sample  ian     march         google deepmind makes ai program learn like human   the guardian  archived original    april       retrieved    april      heath  nick     december         what ai  everything need know artificial intelligence   zdnet  retrieved   march      bowling  michael  burch  neil  johanson  michael  tammelin  oskari    january         heads-up limit hold em poker solved   science                       bibcode     sci           b  doi         science          issn     -      pmid           s cid         solly  meilan     july         this poker-playing a i  knows when hold  em when fold  em   smithsonian  artificial intelligence  google alphago beats go master lee se-dol   bbc news     march       archived original    august       retrieved   october        ref rowinski  dan     january         virtual personal assistants   the future of your smartphone  infographic    readwrite  archived original    december      markoff  john     february         computer wins  jeopardy    trivial  it not   the new york times  archived original    october       retrieved    october      anadiotis  george    october         the state ai       democratization  industrialization  way artificial general intelligence   zdnet  retrieved   march      goertzel  ben  lian  ruiting  arel  itamar  de garis  hugo  chen  shuo  december         a world survey artificial brain projects  part ii  biologically inspired cognitive architectures   neurocomputing                   doi         j neucom             robinson  a  j   fallside  f           the utility driven dynamic error propagation network    technical report cued f-infeng tr    cambridge university engineering departmenthochreiter  sepp         untersuchungen zu dynamischen neuronalen netzen  pdf   diploma thesis   munich  institut f  informatik  technische univ  archived   march      wayback machinewilliams  r  j   zipser  d           gradient-based learning algorithms recurrent networks computational complexity   back-propagation  theory  architectures applications  hillsdale  nj  erlbaumhochreiter  sepp  schmidhuber  j rgen          long short-term memory   neural computation                    doi         neco                pmid          s cid        goodfellow  ian  bengio  yoshua  courville  aaron         deep learning  mit press  archived    april      wayback machinehinton  g   deng  l   yu  d   dahl  g   mohamed  a   jaitly  n   senior  a   vanhoucke  v   nguyen  p   sainath  t   kingsbury  b           deep neural networks acoustic modeling speech recognition   the shared views four research groups   ieee signal processing magazine                 bibcode     ispm          h  doi         msp               s cid           schmidhuber  j          deep learning neural networks  an overview   neural networks              arxiv            doi         j neunet              pmid           s cid          linnainmaa  seppo         the representation cumulative rounding error algorithm taylor expansion local rounding errors  thesis   finnish   univ  helsinki       griewank  andreas          who invented reverse mode differentiation  optimization stories   documenta matematica  extra volume ismp          werbos  paul         beyond regression  new tools prediction analysis behavioral sciences  ph d  thesis   harvard university werbos  paul          beyond regression  new tools prediction analysis behavioral sciences   pdf   system modeling optimization  applications advances nonlinear sensitivity analysis  berlin  heidelberg  springer  archived    april      wayback machine what  fuzzy logic   are computers inherently fuzzy apply usual binary logic    scientific american     october       retrieved   may      merkle  daniel  middendorf  martin          swarm intelligence    in burke  edmund k   kendall  graham  eds    search methodologies  introductory tutorials optimization decision support techniques  springer science   business media  isbn    - -    -    -  van der walt  christiaan  bernard  etienne          data characteristics determine classifier performance   pdf   archived original  pdf     march       retrieved   august      hutter  marcus         universal artificial intelligence  berlin  springer  isbn    - -   -     -  howe  j   november         artificial intelligence edinburgh university  perspective   archived original    may       retrieved    august      galvan  jill    january         entering posthuman collective philip k  dick  do androids dream electric sheep     science fiction studies                   jstor         mccauley  lee          ai armageddon three laws robotics   ethics information technology                  citeseerx                 doi             -   -    -   s cid          buttazzo  g   july         artificial consciousness  utopia real possibility    computer                 doi                  anderson  susan leigh          asimov  three laws robotics  machine metaethics   ai   society                   doi             -   -    -   s cid         yudkowsky  e          artificial intelligence positive negative factor global risk   pdf   global catastrophic risks  oxford university press        bibcode     gcr  book     ymcgaughey  e         will robots automate your job away  full employment  basic income  economic democracy  p  ssrn part       ssrn         archived    may      wayback machineigm chicago     june         robots artificial intelligence   www igmchicago org  archived original   may       retrieved   july      lohr  steve          robots will take jobs  not fast some fear  new report says   the new york times  archived original    january       retrieved    january      frey  carl benedikt  osborne  michael a    january         the future employment  how susceptible jobs computerisation    technological forecasting social change                citeseerx                 doi         j techfore              issn     -     arntz  melanie  gregory  terry  zierahn  ulrich          the risk automation jobs oecd countries  a comparative analysis   oecd social  employment  migration working papers    morgenstern  michael    may         automation anxiety   the economist  archived original    january       retrieved    january      mahdawi  arwa     june         what jobs still around    years  read prepare future   the guardian  archived original    january       retrieved    january      rubin  charles  spring         artificial intelligence human nature   the new atlantis             archived original    june      bostrom  nick         superintelligence  paths  dangers  strategies  oxford university press brooks  rodney     november         artificial intelligence tool  threat   archived original    november      sainato  michael     august         stephen hawking  elon musk  bill gates warn about artificial intelligence   observer  archived original    october       retrieved    october      harari  yuval noah  october         why technology favors tyranny   the atlantic robitzski  dan    september         five experts share scares ai   archived original   december       retrieved   december      goffrey  andrew          algorithm    in fuller  matthew  ed    software studies  lexicon  cambridge  mass   mit press  pp         isbn    - -    -    -  lipartito  kenneth    january         the narrative algorithm  genres credit reporting nineteenth century today   pdf   submitted manuscript   doi         ssrn          s cid            goodman  bryce  flaxman  seth          eu regulations algorithmic decision-making  right explanation    ai magazine              arxiv             doi         aimag v         s cid         cna     january         commentary  bad news  artificial intelligence biased   cna  archived original    january       retrieved    june      larson  jeff  angwin  julia     may         how we analyzed compas recidivism algorithm   propublica  archived original    april       retrieved    june      m ller  vincent c   bostrom  nick          future progress artificial intelligence  a poll among experts   pdf   ai matters               doi                          s cid          archived  pdf  original    january      cellan-jones  rory    december         stephen hawking warns artificial intelligence could end mankind   bbc news  archived original    october       retrieved    october      rawlinson  kevin     january         microsoft bill gates insists ai threat   bbc news  archived original    january       retrieved    january      holley  peter     january         bill gates dangers artificial intelligence   i understand people concerned    the washington post  issn     -      archived original    october       retrieved    october      gibbs  samuel     october         elon musk  artificial intelligence biggest existential threat   the guardian  archived original    october       retrieved    october      churm  philip andrew     may         yuval noah harari talks politics  technology migration   euronews  archived original    may       retrieved    november      bostrom  nick          what happens computers get smarter    ted  conference   archived original    july       retrieved    january      post  washington          tech titans like elon musk spending    billion save terminators   chicago tribune  archived original   june      del prado  guia marie    october         the mysterious artificial intelligence company elon musk invested developing game-changing smart computers   tech insider  archived original    october       retrieved    october      fastcompany     january         elon musk is donating    m of his own money to artificial intelligence research   fast company  archived original    october       retrieved    october      thibodeau  patrick     march         oracle ceo mark hurd sees reason fear erp ai   searcherp  archived original   may       retrieved   may      bhardwaj  prachi     may         mark zuckerberg responds elon musk paranoia ai   ai going to    help keep communities safe     business insider  archived original   may       retrieved   may      geist  edward moore    august         is artificial intelligence really existential threat humanity    bulletin atomic scientists  archived original    october       retrieved    october      madrigal  alexis c      february         the case killer robots  guy actually working artificial intelligence   fusion net  archived original   february       retrieved    january      lee  timothy b      august         will artificial intelligence destroy humanity  here   reasons worry   vox  archived original    october       retrieved    october      law library congress  u s    global legal research directorate  issuing body          regulation artificial intelligence selected jurisdictions  lccn             oclc            unesco science report  race against time smarter development  paris  unesco     june       isbn    -  - -      -  berryhill  jamie  heang  k vin kok  clogher  rob  mcbride  keegan         hello  world  artificial intelligence use public sector  pdf   paris  oecd observatory public sector innovation  archived  pdf  original    december       retrieved   august      barfield  woodrow  pagallo  ugo         research handbook law artificial intelligence  cheltenham  uk  isbn    - -     -   -   oclc            iphofen  ron  kritikos  mihalis    january         regulating artificial intelligence robotics  ethics design digital society   contemporary social science                   doi                                issn     -      s cid          wirtz  bernd w   weyerer  jan c   geyer  carolin     july         artificial intelligence public sector   applications challenges   international journal public administration                   doi                                issn     -      s cid            archived original    august       retrieved    august      buiten  miriam c          towards intelligent regulation artificial intelligence   european journal risk regulation                 doi         err         issn     -   x wallach  wendell         moral machines  oxford university press brown  eileen    november         half americans believe deepfake news could target online   zdnet  archived original   november       retrieved   december      frangoul  anmar     june         a californian business using a i  change way think energy storage   cnbc  archived original    july       retrieved   november       the economist explains  why firms piling artificial intelligence   the economist     march       archived original   may       retrieved    may      lohr  steve     february         the promise artificial intelligence unfolds small steps   the new york times  archived original    february       retrieved    february      smith  mark     july         so think chose read article    bbc news  archived original    july      aletras  n   tsarapatsanis  d   preotiuc-pietro  d   lampos  v           predicting judicial decisions european court human rights  natural language processing perspective   peerj computer science     e    doi         peerj-cs    cadena  cesar  carlone  luca  carrillo  henry  latif  yasir  scaramuzza  davide  neira  jose  reid  ian  leonard  john j   december         past  present  future simultaneous localization mapping  toward robust-perception age   ieee transactions robotics                     arxiv             bibcode     arxiv         c  doi         tro               s cid         cambria  erik  white  bebo  may         jumping nlp curves  a review natural language processing research  review article    ieee computational intelligence magazine                doi         mci               s cid           vincent  james    november         openai published text-generating ai said dangerous share   the verge  archived original    june       retrieved    june      jordan  m  i   mitchell  t  m      july         machine learning  trends  perspectives  prospects   science                       bibcode     sci           j  doi         science aaa      pmid           s cid        maschafilm          content  plug   pray film   artificial intelligence   robots -   plugandpray-film de  archived original    february      evans  woody          posthuman rights  dimensions transhuman worlds   teknokultura          doi         rev tk      v   n        waddell  kaveh          chatbots have entered uncanny valley   the atlantic  archived original    april       retrieved    april      poria  soujanya  cambria  erik  bajpai  rajiv  hussain  amir  september         a review affective computing  from unimodal analysis multimodal fusion   information fusion              doi         j inffus              hdl             robots could demand legal rights   bbc news     december       archived original    october       retrieved   february      horst  steven          the computational theory mind   the stanford encyclopedia philosophy omohundro  steve         the nature self-improving artificial intelligence  presented distributed      singularity summit  san francisco  ca ford  martin  colvin  geoff    september         will robots create jobs destroy    the guardian  archived original    june       retrieved    january      white paper  on artificial intelligence   a european approach excellence trust  pdf   brussels  european commission        archived  pdf  original    february       retrieved    february      anderson  michael  anderson  susan leigh         machine ethics  cambridge university press  machine ethics   aaai org  archived original    november      russell  stuart    october        human compatible  artificial intelligence problem control  united states  viking  isbn    - -   -     -   oclc             ai set exceed human brain power   cnn    august       archived original    february       robots could demand legal rights   bbc news     december       archived original    october       retrieved   february       kismet   mit artificial intelligence laboratory  humanoid robotics group  archived original    october       retrieved    october      smoliar  stephen w   zhang  hongjiang          content based video indexing retrieval   ieee multimedia                doi                    s cid          neumann  bernd  m ller  ralf  january         on scene interpretation description logics   image vision computing                  doi         j imavis             kuperman  g  j   reichley  r  m   bailey  t  c     july         using commercial knowledge bases clinical decision support  opportunities  hurdles  recommendations   journal american medical informatics association                   doi         jamia m      pmc          pmid          mcgarry  ken    december         a survey interestingness measures knowledge discovery   the knowledge engineering review                 doi         s                  s cid          bertini  m  del bimbo  a  torniai  c          automatic annotation semantic retrieval video sequences using multimedia ontologies   mm     proceedings   th acm international conference multimedia    th acm international conference multimedia  santa barbara  acm  pp          kahneman  daniel     october        thinking  fast slow  macmillan  isbn    - -    -    -   retrieved   april      turing  alan          machine intelligence    copeland  b  jack  ed    the essential turing  the ideas gave birth computer age  oxford  oxford university press  p       isbn    - -  -      - domingos  pedro     september        the master algorithm  how quest ultimate learning machine will remake our world  basic books  isbn    -           minsky  marvin         the society mind  simon schusterpinker  steven    september               the language instinct  perennial modern classics  harper  isbn    - -  -      - chalmers  david          facing problem consciousness   journal consciousness studies                  archived original   march       retrieved    october      roberts  jacob          thinking machines  the search artificial intelligence   distillations  vol    no     pp         archived original    august       retrieved    march      pennachin  c   goertzel  b           contemporary approaches artificial general intelligence   artificial general intelligence  cognitive technologies  berlin  heidelberg  springer  doi            - -   -     -     isbn    - -   -     -   ask ai experts  what driving today progress ai    mckinsey   company  archived original    april       retrieved    april       reshaping business with artificial intelligence   mit sloan management review  archived original    may       retrieved   may      lorica  ben     december         the state ai adoption   o reilly media  archived original   may       retrieved   may       alphago   google deepmind   archived original    october      asada  m   hosoda  k   kuniyoshi  y   ishiguro  h   inui  t   yoshikawa  y   ogino  m   yoshida  c           cognitive developmental robotics  survey   ieee transactions autonomous mental development                doi         tamd               s cid          ashok       september         how ai is getting groundbreaking changes in talent management and hr tech   hackernoon  archived original    september       retrieved    february      berlinski  david         the advent algorithm  harcourt books  isbn    - -  -      -   oclc           archived original    july       retrieved    august      brooks  rodney          elephants don play chess   pdf   robotics autonomous systems                 citeseerx                  doi         s    -             -   archived  pdf  original   august      butler  samuel     june         darwin among machines   letters editor  the press  christchurch  new zealand  archived original    september       retrieved    october        via victoria university wellington clark  jack    july        musk-backed group probes risks behind artificial intelligence   bloomberg com  archived original    october       retrieved    october      clark  jack    december     b    why      was breakthrough year artificial intelligence   bloomberg com  archived original    november       retrieved    november      dennett  daniel         consciousness explained  the penguin press  isbn    - -    -    -  dreyfus  hubert         what computers can do  new york  mit press  isbn    - -  -      -  dreyfus  hubert  dreyfus  stuart         mind machine  the power human intuition expertise era computer  oxford  uk  blackwell  isbn    - -  -      -   archived original    july       retrieved    august      dyson  george         darwin among machines  allan lane science  isbn    - -    -    -   archived original    july       retrieved    august      edelson  edward         the nervous system  new york  chelsea house  isbn    - -    -    -   archived original    july       retrieved    november      fearn  nicholas         the latest answers oldest questions  a philosophical adventure world greatest thinkers  new york  grove press  isbn    - -    -    -  haugeland  john         artificial intelligence  the very idea  cambridge  mass   mit press  isbn    - -   -     -  hawkins  jeff  blakeslee  sandra         on intelligence  new york  owl books  isbn    - -    -    -  henderson  mark     april         human rights robots  we getting carried away   the times online  london  archived original    may       retrieved    may      kahneman  daniel  slovic  d   tversky  amos         judgment uncertainty  heuristics biases  science       new york  cambridge university press  pp             doi         science                isbn    - -   -     -   pmid           s cid           katz  yarden    november         noam chomsky where artificial intelligence went wrong   the atlantic  archived original    february       retrieved    october      kurzweil  ray         the singularity near  penguin books  isbn    - -   -     -  langley  pat          the changing science machine learning   machine learning                   doi             -   -    -y legg  shane  hutter  marcus     june        a collection definitions intelligence  technical report   idsia  arxiv            bibcode     arxiv         l    -   lenat  douglas  guha  r  v          building large knowledge-based systems  addison-wesley  isbn    - -   -     -  lighthill  james          artificial intelligence  a general survey   artificial intelligence  paper symposium  science research council lombardo  p  boehm  i  nairz  k          radiocomics   santa claus future radiology   eur j radiol                   doi         j ejrad              pmid          lungarella  m   metta  g   pfeifer  r   sandini  g           developmental robotics  survey   connection science                   citeseerx                 doi                               s cid         maker  meg houston          ai     ai past  present  future   dartmouth college  archived original   january       retrieved    october      mccarthy  john  minsky  marvin  rochester  nathan  shannon  claude          a proposal dartmouth summer research project artificial intelligence   archived original    august       retrieved    august      minsky  marvin         computation  finite infinite machines  englewood cliffs  n j   prentice-hall  isbn    - -  -      -   archived original    july       retrieved    november      moravec  hans         mind children  harvard university press  isbn    - -   -     -   archived original    july       retrieved    november      nrc  united states national research council           developments artificial intelligence   funding revolution  government support computing research  national academy press newell  allen  simon  h  a           computer science empirical inquiry  symbols search   communications acm                   doi                        nilsson  nils          artificial intelligence prepares        pdf   ai magazine         archived  pdf  original    august       retrieved    august       presidential address association advancement artificial intelligence oudeyer  p-y           on impact robotics behavioral cognitive sciences  insect navigation human cognitive development   pdf   ieee transactions autonomous mental development               doi         tamd               s cid          archived  pdf  original   october       retrieved   june      schank  roger c           where ai   ai magazine  vol     no    searle  john          minds  brains programs   pdf   behavioral brain sciences                  doi         s       x          archived  pdf  original    march       retrieved    august      searle  john         mind  language society  new york  basic books  isbn    - -   -     -   oclc            archived original    july       retrieved    august      simon  h  a          the shape automation men management  new york  harper   row  archived original    july       retrieved    november      solomonoff  ray         an inductive inference machine  pdf   dartmouth summer research conference artificial intelligence  archived  pdf  original    april       retrieved    march        via std com  pdf scanned copy original  later published assolomonoff  ray          an inductive inference machine   ire convention record  section information theory  part    pp        spadafora  anthony     october         stephen hawking believes ai could mankind last accomplishment   betanews  archived original    august      tao  jianhua  tan  tieniu         affective computing intelligent interaction  affective computing  a review  lncs       springer  pp           doi                  tecuci  gheorghe  march april         artificial intelligence   wiley interdisciplinary reviews  computational statistics                  doi         wics     thro  ellen         robotics  the marriage computers machines  new york  facts file  isbn    - -    -    -   archived original    july       retrieved    august      turing  alan  october         computing machinery intelligence   mind  lix                 doi         mind lix          issn     -     vinge  vernor          the coming technological singularity  how survive post-human era   vision     interdisciplinary science engineering era cyberspace      bibcode     vise nasa     v  archived original   january       retrieved    november      wason  p  c   shapiro  d           reasoning    in foss  b  m   ed    new horizons psychology  harmondsworth  penguin  archived original    july       retrieved    november      weng  j   mcclelland  pentland  a   sporns  o   stockman  i   sur  m   thelen  e           autonomous mental development robots animals   pdf   science                       doi         science               pmid           s cid           archived  pdf  original   september       retrieved   june        via msu edu    further reading      external links    artificial intelligence   internet encyclopedia philosophy thomason  richmond   logic artificial intelligence    in zalta  edward n   ed    stanford encyclopedia philosophy artificial intelligence  bbc radio   discussion john agar  alison adam   igor aleksander  in our time  dec             sources    this article incorporates text free content work   licensed c-by-sa     igo text taken unesco science report  race against time smarter development    schneegans  s   t  straza j  lewis  eds   unesco  to learn add open license text wikipedia articles  please see how-to page  for information reusing text wikipedia  please see terms use 
in mathematics computer science  algorithm    listen   finite sequence well-defined instructions  typically used solve class specific problems perform computation  algorithms used specifications performing calculations  data processing  automated reasoning  automated decision-making tasks  in contrast  heuristic  technique used problem solving uses practical methods various estimates order produce solutions may optimal sufficient given circumstances as effective method  algorithm expressed within finite amount space time  well-defined formal language calculating function  starting initial state initial input  perhaps empty   instructions describe computation  executed  proceeds finite number well-defined successive states  eventually producing  output  terminating final ending state  the transition one state next necessarily deterministic  algorithms  known randomized algorithms  incorporate random input    history   the concept algorithm existed since antiquity  arithmetic algorithms  division algorithm  used ancient babylonian mathematicians c       bc egyptian mathematicians c       bc  greek mathematicians later used algorithms     bc sieve eratosthenes finding prime numbers  euclidean algorithm finding greatest common divisor two numbers  arabic mathematicians al-kindi  th century used cryptographic algorithms code-breaking  based frequency analysis the word algorithm derived name  th-century persian mathematician mu ammad ibn m  al-khw rizm   whose nisba  identifying khwarazm  latinized algoritmi  arabized persian           c           mu ammad ibn m  al-khw rizm  mathematician  astronomer  geographer  scholar house wisdom baghdad  whose name means  native khwarazm   region part greater iran uzbekistan  about      al-khwarizmi wrote arabic language treatise hindu arabic numeral system  translated latin   th century  the manuscript starts phrase dixit algorizmi   thus spake al-khwarizmi     algorizmi  translator latinization al-khwarizmi name  al-khwarizmi widely read mathematician europe late middle ages  primarily another books  algebra  in late medieval latin  algorismus  english  algorism   corruption name  simply meant  decimal number system   in   th century  influence greek word          arithmos    number   cf   arithmetic    latin word altered algorithmus  corresponding english term  algorithm  first attested   th century  modern sense introduced   th century in english  first used      chaucer       english adopted french term  late   th century  algorithm  took meaning modern english another early use word       manual titled carmen de algorismo composed alexandre de villedieu  it begins haec algorismus ars praesens dicitur  qua   talibus indorum fruimur bis quinque figuris which translates algorism art present use indian figures  number two times five the poem hundred lines long summarizes art calculating new styled indian dice  tali indorum   hindu numerals a partial formalization modern concept algorithm began attempts solve entscheidungsproblem   decision problem  posed david hilbert       later formalizations framed attempts define  effective calculability   effective method   those formalizations included g del herbrand kleene recursive functions                  alonzo church lambda calculus       emil post formulation         alan turing turing machines                 informal definition   an informal definition could  set rules precisely defines sequence operations   would include computer programs  including programs perform numeric calculations    example  prescribed bureaucratic procedureor cook-book recipe in general  program algorithm stops eventually even though infinite loops may sometimes prove desirable a prototypical example algorithm euclidean algorithm  used determine maximum common divisor two integers  example  others  described flowchart example later section boolos  jeffrey              offer informal meaning word  algorithm  following quotation no human write fast enough  long enough  small enough      smaller smaller without limit   trying write molecules  atoms  electrons   list members enumerably infinite set writing names  one another  notation  but humans something equally useful  case certain enumerably infinite sets  they give explicit instructions determining nth member set  arbitrary finite n  such instructions given quite explicitly  form could followed computing machine  human capable carrying elementary operations symbols an  enumerably infinite set  one whose elements put one-to-one correspondence integers  thus boolos jeffrey saying algorithm implies instructions process  creates  output integers arbitrary  input  integer integers  theory  arbitrarily large  for example  algorithm algebraic equation     n  i e   two arbitrary  input variables  n produce output   various authors  attempts define notion indicate word implies much  something order  addition example  precise instructions  language understood  computer   fast  efficient   good  process specifies  moves   computer   machine human  equipped necessary internally contained information capabilities  find  decode  process arbitrary input integers symbols n  symbols        effectively  produce   reasonable  time  output-integer specified place specified format the concept algorithm also used define notion decidability notion central explaining formal systems come starting small set axioms rules  in logic  time algorithm requires complete cannot measured  apparently related customary physical dimension  from uncertainties  characterize ongoing work  stems unavailability definition algorithm suits concrete  sense  abstract usage term    formalization   algorithms essential way computers process data  many computer programs contain algorithms detail specific instructions computer perform specific order carry specified task  calculating employees  paychecks printing students  report cards  thus  algorithm considered sequence operations simulated turing-complete system  authors assert thesis include minsky         savage        gurevich         minsky   but also maintain  turing   procedure could  naturally  called effective   fact  realized  simple  machine  although may seem extreme  arguments   favor hard refute   gurevich     turing informal argument favor thesis justifies stronger thesis  every algorithm simulated turing machine   according savage         algorithm computational process defined turing machine  turing machines define computational processes terminate  the informal definitions algorithms generally require algorithm always terminates  this requirement renders task deciding whether formal procedure algorithm impossible general case due major theorem computability theory known halting problem typically  algorithm associated processing information  data read input source  written output device stored processing  stored data regarded part internal state entity performing algorithm  in practice  state stored one data structures for computational processes  algorithm must rigorously defined  specified way applies possible circumstances could arise  this means conditional steps must systematically dealt  case-by-case  criteria case must clear  computable  because algorithm precise list precise steps  order computation always crucial functioning algorithm  instructions usually assumed listed explicitly  described starting  top  going  bottom  idea described formally flow control so far  discussion formalization algorithm assumed premises imperative programming  this common conception one attempts describe task discrete   mechanical  means  unique conception formalized algorithms assignment operation  sets value variable  it derives intuition  memory  scratchpad  an example assignment found below for alternate conceptions constitutes algorithm  see functional programming logic programming    expressing algorithms   algorithms expressed many kinds notation  including natural languages  pseudocode  flowcharts  drakon-charts  programming languages control tables  processed interpreters   natural language expressions algorithms tend verbose ambiguous  rarely used complex technical algorithms  pseudocode  flowcharts  drakon-charts control tables structured ways express algorithms avoid many ambiguities common statements based natural language  programming languages primarily intended expressing algorithms form executed computer  also often used way define document algorithms there wide variety representations possible one express given turing machine program sequence machine tables  see finite-state machine  state transition table control table   flowcharts drakon-charts  see state diagram   form rudimentary machine code assembly code called  sets quadruples   see turing machine  representations algorithms classed three accepted levels turing machine description  follows   high-level description  prose describe algorithm  ignoring implementation details  at level  need mention machine manages tape head    implementation description  prose used define way turing machine uses head way stores data tape  at level  give details states transition function    formal descriptionmost detailed   lowest level   gives turing machine  state table  for example simple algorithm  add n  described three levels  see algorithm examples    design   algorithm design refers method mathematical process problem-solving engineering algorithms  the design algorithms part many solution theories operation research  dynamic programming divide-and-conquer  techniques designing implementing algorithm designs also called algorithm design patterns  examples including template method pattern decorator pattern one important aspects algorithm design resource  run-time  memory usage  efficiency  big o notation used describe e g  algorithm run-time growth size input increases typical steps development algorithms problem definitiondevelopment modelspecification algorithmdesigning algorithmchecking correctness algorithmanalysis algorithmimplementation algorithmprogram testingdocumentation preparation   implementation   most algorithms intended implemented computer programs  however  algorithms also implemented means  biological neural network  example  human brain implementing arithmetic insect looking food   electrical circuit  mechanical device    computer algorithms   in computer systems  algorithm basically instance logic written software software developers  effective intended  target  computer  produce output given  perhaps null  input  an optimal algorithm  even running old hardware  would produce faster results non-optimal  higher time complexity  algorithm purpose  running efficient hardware  algorithms  like computer hardware  considered technology  elegant   compact  programs   good   fast  programs   the notion  simplicity elegance  appears informally knuth precisely chaitin knuth      want good algorithms loosely defined aesthetic sense  one criterion   length time taken perform algorithm    other criteria adaptability algorithm computers  simplicity elegance  etc chaitin      program  elegant   i mean smallest possible program producing output chaitin prefaces definition   i show prove program  elegant   proof would solve halting problem  ibid  algorithm versus function computable algorithm  for given function multiple algorithms may exist  this true  even without expanding available instruction set available programmer  rogers observes  it     important distinguish notion algorithm  i e  procedure notion function computable algorithm  i e  mapping yielded procedure  the function may several different algorithms  unfortunately  may tradeoff goodness  speed  elegance  compactness  elegant program may take steps complete computation one less elegant  an example uses euclid algorithm appears below computers  computors   models computation  a computer  human  computor   restricted type machine   discrete deterministic mechanical device  blindly follows instructions  melzak lambek primitive models reduced notion four elements    discrete  distinguishable locations   ii  discrete  indistinguishable counters  iii  agent   iv  list instructions effective relative capability agent minsky describes congenial variation lambek  abacus  model  very simple bases computability   minsky machine proceeds sequentially five  six  depending one counts  instructions unless either conditional if-then goto unconditional goto changes program flow sequence  besides halt  minsky machine includes three assignment  replacement  substitution  operations  zero  e g  contents location replaced    l       successor  e g  l   l     decrement  e g  l   l       rarely must programmer write  code  limited instruction set  but minsky shows  melzak lambek  machine turing complete four general types instructions  conditional goto  unconditional goto  assignment replacement substitution  halt   however  different assignment instructions  e g  decrement  increment  zero clear empty minsky machine  also required turing-completeness  exact specification somewhat designer  the unconditional goto convenience  constructed initializing dedicated location zero e g  instruction   z        thereafter instruction if z   then goto xxx unconditional simulation algorithm  computer  computor  language  knuth advises reader  best way learn algorithm try       immediately take pen paper work example   but simulation execution real thing  the programmer must translate algorithm language simulator computer computor effectively execute  stone gives example  computing roots quadratic equation computor must know take square root  if  algorithm  effective  must provide set rules extracting square root this means programmer must know  language  effective relative target computing agent  computer computor  but model used simulation  van emde boas observes  even base complexity theory abstract instead concrete machines  arbitrariness choice model remains  it point notion simulation enters   when speed measured  instruction set matters  for example  subprogram euclid algorithm compute remainder would execute much faster programmer  modulus  instruction available rather subtraction  worse  minsky  decrement   structured programming  canonical structures  per church turing thesis  algorithm computed model known turing complete  per minsky demonstrations  turing completeness requires four instruction types conditional goto  unconditional goto  assignment  halt  kemeny kurtz observe   undisciplined  use unconditional gotos conditional if-then gotos result  spaghetti code   programmer write structured programs using instructions  hand  also possible  hard  write badly structured programs structured language   tausworthe augments three b hm-jacopini canonical structures  sequence  if-then-else  while-do  two  do-while case  an additional benefit structured program lends proofs correctness using mathematical induction canonical flowchart symbols  the graphical aide called flowchart  offers way describe document algorithm  computer program one   like program flow minsky machine  flowchart always starts top page proceeds down  its primary symbols four  directed arrow showing program flow  rectangle  sequence  goto   diamond  if-then-else   dot  or-tie   the b hm jacopini canonical structures made primitive shapes  sub-structures  nest  rectangles  single exit occurs superstructure  the symbols  use build canonical structures shown diagram    examples       algorithm example    one simplest algorithms find largest number list numbers random order  finding solution requires looking every number list  from follows simple algorithm  stated high-level description english prose  high-level description if numbers set highest number assume first number set largest number set for remaining number set  number larger current largest number  consider number largest number set when numbers left set iterate  consider current largest number largest number set  quasi- formal description written prose much closer high-level language computer program  following formal coding algorithm pseudocode pidgin code     euclid algorithm    in mathematics  euclidean algorithm  euclid algorithm  efficient method computing greatest common divisor  gcd  two integers  numbers   largest number divides without remainder  it named ancient greek mathematician euclid  first described elements  c      bc   it one oldest algorithms common use  it used reduce fractions simplest form  part many number-theoretic cryptographic calculations  euclid poses problem thus   given two numbers prime one another  find greatest common measure   he defines  a number   multitude composed units   counting number  positive integer including zero  to  measure  place shorter measuring length successively  q times  along longer length l remaining portion r less shorter length s  in modern words  remainder r   l   q  q quotient  remainder r  modulus   integer-fractional part left division for euclid method succeed  starting lengths must satisfy two requirements    lengths must zero  and  ii  subtraction must  proper   i e   test must guarantee smaller two numbers subtracted larger  two equal subtraction yields zero  euclid original proof adds third requirement  two lengths must prime one another  euclid stipulated could construct reductio ad absurdum proof two numbers  common measure fact greatest  while nicomachus  algorithm euclid  numbers prime one another  yields number     common measure  so  precise  following really nicomachus  algorithm      computer language euclid algorithm     only instruction types required execute euclid algorithm logical tests  conditional goto   unconditional goto  assignment  replacement   subtraction a location symbolized upper case letter   e g  s  a  etc the varying quantity  number  location written lower case letter   usually  associated location name  for example  location l start might contain number l             an inelegant program euclid algorithm     the following algorithm framed knuth four-step version euclid nicomachus    rather using division find remainder  uses successive subtractions shorter length remaining length r r less s  the high-level description  shown boldface  adapted knuth          input    into two locations l s put numbers l represent two lengths    input l  s   initialize r  make remaining length r equal starting initial input length l    r   le    ensure r   s     ensure smaller two numbers s larger r    if r   s then    contents l larger number skip exchange-steps            goto step    else    swap contents r s     l   r  first step redundant  useful later discussion      r   s    s   le    find remainder   until remaining length r r less shorter length s  repeatedly subtract measuring number s remaining length r r   if s   r then    done measuring    goto     else    measure     r   r   s     remainder-loop      goto   e    is remainder zero    either   last measure exact  remainder r zero  program halt  or  ii  algorithm must continue  last measure left remainder r less measuring number s    if r     then     done     goto step      else     continue to step    e    interchange r   the nut euclid algorithm  use remainder r measure previously smaller number  l serves temporary location     l   r    r   s    s   l     repeat measuring process      goto  output     done  s contains greatest common divisor     print sdone    halt  end  stop      an elegant program euclid algorithm     the following version euclid algorithm requires six core instructions thirteen required  inelegant   worse   inelegant  requires types instructions  the flowchart  elegant  found top article  in  unstructured  basic language  steps numbered  instruction let         assignment instruction symbolized   how  elegant  works  in place outer  euclid loop    elegant  shifts back forth two  co-loops   a   b loop computes a   a   b  b   a loop computes b   b   a  this works  last minuend m less equal subtrahend s  difference   minuend   subtrahend   minuend become  new measuring length  subtrahend become new r  length measured   words  sense  subtraction reverses the following version used programming languages c-family     testing euclid algorithms    does algorithm author wants  a test cases usually give confidence core functionality  but tests enough  for test cases  one source uses           knuth suggested               another interesting case two relatively prime numbers            but  exceptional cases  must identified tested  will  inelegant  perform properly r   s  s   r  r   s  ditto  elegant   b   a  a   b  a   b   yes   what happens one number zero  numbers zero    inelegant  computes forever cases   elegant  computes forever a       what happens negative numbers entered  fractional numbers  if input numbers  i e  domain function computed algorithm program  include positive integers including zero  failures zero indicate algorithm  program instantiates  partial function rather total function  a notable failure due exceptions ariane   flight     rocket failure  june          proof program correctness use mathematical induction  knuth demonstrates application mathematical induction  extended  version euclid algorithm  proposes  general method applicable proving validity algorithm   tausworthe proposes measure complexity program length correctness proof     measuring improving euclid algorithms    elegance  compactness  versus goodness  speed   with six core instructions   elegant  clear winner  compared  inelegant  thirteen instructions  however   inelegant  faster  arrives halt fewer steps   algorithm analysis indicates case   elegant  two conditional tests every subtraction loop  whereas  inelegant  one  as algorithm  usually  requires many loop-throughs  average much time wasted  b       test needed remainder computed can algorithms improved   once programmer judges program  fit   effective   computes function intended author question becomes  improved the compactness  inelegant  improved elimination five steps  but chaitin proved compacting algorithm cannot automated generalized algorithm  rather  done heuristically  i e   exhaustive search  examples found busy beaver   trial error  cleverness  insight  application inductive reasoning  etc  observe steps        repeated steps            comparison  elegant  provides hint steps  together steps      eliminated  this reduces number core instructions thirteen eight  makes  elegant   elegant   nine steps the speed  elegant  improved moving  b     test outside two subtraction loops  this change calls addition three instructions  b       a       goto   now  elegant  computes example-numbers faster  whether always case given a  b  r  s would require detailed analysis    algorithmic analysis   it frequently important know much particular resource  time storage  theoretically required given algorithm  methods developed analysis algorithms obtain quantitative answers  estimates   example  sorting algorithm time requirement o n   using big o notation n length list  at times algorithm needs remember two values  largest number found far  current position input list  therefore  said space requirement o     space required store input numbers counted  o n  counted different algorithms may complete task different set instructions less time  space   effort  others  for example  binary search algorithm  cost o log n    outperforms sequential search  cost o n    used table lookups sorted lists arrays     formal versus empirical    the analysis  study algorithms discipline computer science  often practiced abstractly without use specific programming language implementation  in sense  algorithm analysis resembles mathematical disciplines focuses underlying properties algorithm specifics particular implementation  usually pseudocode used analysis simplest general representation  however  ultimately  algorithms usually implemented particular hardware software platforms algorithmic efficiency eventually put test using real code  for solution  one  problem  efficiency particular algorithm may significant consequences  unless n extremely large  algorithms designed fast interactive  commercial long life scientific usage may critical  scaling small n large n frequently exposes inefficient algorithms otherwise benign empirical testing useful may uncover unexpected interactions affect performance  benchmarks may used compare potential improvements algorithm program optimization empirical tests cannot replace formal analysis  though  trivial perform fair manner     execution efficiency    to illustrate potential improvements possible even well-established algorithms  recent significant innovation  relating fft algorithms  used heavily field image processing   decrease processing time       times applications like medical imaging  in general  speed improvements depend special properties problem  common practical applications  speedups magnitude enable computing devices make extensive use image processing  like digital cameras medical equipment  consume less power    classification   there various ways classify algorithms  merits     by implementation    one way classify algorithms implementation means recursiona recursive algorithm one invokes  makes reference  repeatedly certain condition  also known termination condition  matches  method common functional programming  iterative algorithms use repetitive constructs like loops sometimes additional data structures like stacks solve given problems  some problems naturally suited one implementation other  for example  towers hanoi well understood using recursive implementation  every recursive version equivalent  possibly less complex  iterative version  vice versa logicalan algorithm may viewed controlled logical deduction  this notion may expressed  algorithm   logic   control  the logic component expresses axioms may used computation control component determines way deduction applied axioms  this basis logic programming paradigm  in pure logic programming languages  control component fixed algorithms specified supplying logic component  the appeal approach elegant semantics  change axioms produces well-defined change algorithm serial  parallel distributedalgorithms usually discussed assumption computers execute one instruction algorithm time  those computers sometimes called serial computers  an algorithm designed environment called serial algorithm  opposed parallel algorithms distributed algorithms  parallel algorithms take advantage computer architectures several processors work problem time  whereas distributed algorithms utilize multiple machines connected computer network  parallel distributed algorithms divide problem symmetrical asymmetrical subproblems collect results back together  the resource consumption algorithms processor cycles processor also communication overhead processors  some sorting algorithms parallelized efficiently  communication overhead expensive  iterative algorithms generally parallelizable  some problems parallel algorithms called inherently serial problems deterministic non-deterministicdeterministic algorithms solve problem exact decision every step algorithm whereas non-deterministic algorithms solve problems via guessing although typical guesses made accurate use heuristics exact approximatewhile many algorithms reach exact solution  approximation algorithms seek approximation closer true solution  the approximation reached either using deterministic random strategy  such algorithms practical value many hard problems  one examples approximate algorithm knapsack problem  set given items  its goal pack knapsack get maximum total value  each item weight value  total weight carried fixed number x  so  solution must consider weights items well value quantum algorithmthey run realistic model quantum computation  the term usually used algorithms seem inherently quantum  use essential feature quantum computing quantum superposition quantum entanglement     by design paradigm    another way classifying algorithms design methodology paradigm  there certain number paradigms  different other  furthermore  categories includes many different types algorithms  some common paradigms brute-force exhaustive searchthis naive method trying every possible solution see best divide conquera divide conquer algorithm repeatedly reduces instance problem one smaller instances problem  usually recursively  instances small enough solve easily  one example divide conquer merge sorting  sorting done segment data dividing data segments sorting entire data obtained conquer phase merging segments  a simpler variant divide conquer called decrease conquer algorithm  solves identical subproblem uses solution subproblem solve bigger problem  divide conquer divides problem multiple subproblems conquer stage complex decrease conquer algorithms  an example decrease conquer algorithm binary search algorithm search enumerationmany problems  playing chess  modeled problems graphs  a graph exploration algorithm specifies rules moving around graph useful problems  this category also includes search algorithms  branch bound enumeration backtracking randomized algorithmsuch algorithms make choices randomly  pseudo-randomly   they useful finding approximate solutions problems finding exact solutions impractical  see heuristic method   for problems  known fastest approximations must involve randomness  whether randomized algorithms polynomial time complexity fastest algorithms problems open question known p versus np problem  there two large classes algorithms monte carlo algorithms return correct answer high-probability  e g  rp subclass run polynomial time las vegas algorithms always return correct answer  running time probabilistically bound  e g  zpp reduction complexitythis technique involves solving difficult problem transforming better-known problem  hopefully  asymptotically optimal algorithms  the goal find reducing algorithm whose complexity dominated resulting reduced algorithm s  for example  one selection algorithm finding median unsorted list involves first sorting list  expensive portion  pulling middle element sorted list  cheap portion   this technique also known transform conquer back trackingin approach  multiple solutions built incrementally abandoned determined cannot lead valid full solution     optimization problems    for optimization problems specific classification algorithms  algorithm problems may fall one general categories described well one following linear programmingwhen searching optimal solutions linear function bound linear equality inequality constraints  constraints problem used directly producing optimal solutions  there algorithms solve problem category  popular simplex algorithm  problems solved linear programming include maximum flow problem directed graphs  if problem additionally requires one unknowns must integer classified integer programming  a linear programming algorithm solve problem proved restrictions integer values superficial  i e   solutions satisfy restrictions anyway  in general case  specialized algorithm algorithm finds approximate solutions used  depending difficulty problem dynamic programmingwhen problem shows optimal substructures meaning optimal solution problem constructed optimal solutions subproblems overlapping subproblems  meaning subproblems used solve many different problem instances  quicker approach called dynamic programming avoids recomputing solutions already computed  for example  floyd warshall algorithm  shortest path goal vertex weighted graph found using shortest path goal adjacent vertices  dynamic programming memoization go together  the main difference dynamic programming divide conquer subproblems less independent divide conquer  whereas subproblems overlap dynamic programming  the difference dynamic programming straightforward recursion caching memoization recursive calls  when subproblems independent repetition  memoization help  hence dynamic programming solution complex problems  by using memoization maintaining table subproblems already solved  dynamic programming reduces exponential nature many problems polynomial complexity the greedy methoda greedy algorithm similar dynamic programming algorithm works examining substructures  case problem given solution  such algorithms start solution  may given constructed way  improve making small modifications  for problems find optimal solution others stop local optima   solutions cannot improved algorithm optimum  the popular use greedy algorithms finding minimal spanning tree finding optimal solution possible method  huffman tree  kruskal  prim  sollin greedy algorithms solve optimization problem the heuristic methodin optimization problems  heuristic algorithms used find solution close optimal solution cases finding optimal solution impractical  these algorithms work getting closer closer optimal solution progress  in principle  run infinite amount time  find optimal solution  their merit find solution close optimal solution relatively short time  such algorithms include local search  tabu search  simulated annealing  genetic algorithms  some  like simulated annealing  non-deterministic algorithms others  like tabu search  deterministic  when bound error non-optimal solution known  algorithm categorized approximation algorithm     by field study    every field science problems needs efficient algorithms  related problems one field often studied together  some example classes search algorithms  sorting algorithms  merge algorithms  numerical algorithms  graph algorithms  string algorithms  computational geometric algorithms  combinatorial algorithms  medical algorithms  machine learning  cryptography  data compression algorithms parsing techniques fields tend overlap  algorithm advances one field may improve  sometimes completely unrelated  fields  for example  dynamic programming invented optimization resource consumption industry used solving broad range problems many fields     by complexity    algorithms classified amount time need complete compared input size constant time  time needed algorithm  regardless input size  e g  access array element logarithmic time  time logarithmic function input size  e g  binary search algorithm linear time  time proportional input size  e g  traverse list polynomial time  time power input size  e g  bubble sort algorithm quadratic time complexity exponential time  time exponential function input size  e g  brute-force search some problems may multiple algorithms differing complexity  problems might algorithms known efficient algorithms  there also mappings problems problems  owing  found suitable classify problems instead algorithms equivalence classes based complexity best possible algorithms them    continuous algorithms   the adjective  continuous  applied word  algorithm  mean an algorithm operating data represents continuous quantities  even though data represented discrete approximations algorithms studied numerical analysis  oran algorithm form differential equation operates continuously data  running analog computer    legal issues   algorithms   usually patentable  in united states  claim consisting solely simple manipulations abstract concepts  numbers  signals constitute  processes   uspto        hence algorithms patentable  gottschalk v  benson   however practical applications algorithms sometimes patentable  for example  diamond v  diehr  application simple feedback algorithm aid curing synthetic rubber deemed patentable  the patenting software highly controversial  highly criticized patents involving algorithms  especially data compression algorithms  unisys  lzw patent additionally  cryptographic algorithms export restrictions  see export cryptography     history  development notion  algorithm        ancient near east    the earliest  evidence algorithms found babylonian mathematics ancient mesopotamia  modern iraq   a sumerian clay tablet found shuruppak near baghdad dated circa      bc described earliest division algorithm  during hammurabi dynasty circa     -     bc  babylonian clay tablets described algorithms computing formulas  algorithms also used babylonian astronomy  babylonian clay tablets describe employ algorithmic procedures compute time place significant astronomical events algorithms arithmetic also found ancient egyptian mathematics  dating back rhind mathematical papyrus circa      bc  algorithms later used ancient hellenistic mathematics  two examples sieve eratosthenes  described introduction arithmetic nicomachus   ch      euclidean algorithm  first described euclid elements  c      bc    ch         discrete distinguishable symbols    tally-marks  to keep track flocks  sacks grain money ancients used tallying  accumulating stones marks scratched sticks making discrete symbols clay  through babylonian egyptian use marks symbols  eventually roman numerals abacus evolved  dilson  p          tally marks appear prominently unary numeral system arithmetic used turing machine post turing machine computations     manipulation symbols  place holders  numbers  algebra    muhammad ibn m  al-khw rizm   persian mathematician  wrote al-jabr  th century  the terms  algorism   algorithm  derived name al-khw rizm   term  algebra  derived book al-jabr  in europe  word  algorithm  originally used refer sets rules techniques used al-khwarizmi solve algebraic equations  later generalized refer set rules techniques  this eventually culminated leibniz notion calculus ratiocinator  ca       a good century half ahead time  leibniz proposed algebra logic  algebra would specify rules manipulating logical concepts manner ordinary algebra specifies rules manipulating numbers     cryptographic algorithms    the first cryptographic algorithm deciphering encrypted code developed al-kindi   th-century arab mathematician  a manuscript on deciphering cryptographic messages  he gave first description cryptanalysis frequency analysis  earliest codebreaking algorithm     mechanical contrivances discrete states    the clock  bolter credits invention weight-driven clock  the key invention  europe middle ages    particular  verge escapement provides us tick tock mechanical clock   the accurate automatic machine  led immediately  mechanical automata  beginning   th century finally  computational machines  difference engine analytical engines charles babbage countess ada lovelace  mid-  th century  lovelace credited first creation algorithm intended processing computer babbage analytical engine  first device considered real turing-complete computer instead calculator sometimes called  history first programmer  result  though full implementation babbage second device would realized decades lifetime logical machines        stanley jevons   logical abacus   logical machine   the technical problem reduce boolean equations presented form similar known karnaugh maps  jevons        describes first simple  abacus   slips wood furnished pins  contrived part class  logical  combinations picked mechanically     more recently  however  i reduced system completely mechanical form  thus embodied whole indirect process inference may called logical machine  his machine came equipped  certain moveable wooden rods   foot    keys like piano  etc        with machine could analyze  syllogism simple logical argument  this machine displayed      fellows royal society  another logician john venn  however       symbolic logic  turned jaundiced eye effort   i high estimate interest importance sometimes called logical machines     seem contrivances present known likely discovered really deserve name logical machines   see algorithm characterizations  but outdone presented  plan somewhat analogous  i apprehend  prof  jevon abacus      and   gain  corresponding prof  jevons logical machine  following contrivance may described  i prefer call merely logical-diagram machine     i suppose could completely rationally expected logical machine  jacquard loom  hollerith punch cards  telegraphy telephony   electromechanical relay  bell newell        indicate jacquard loom         precursor hollerith cards  punch cards          telephone switching technologies  roots tree leading development first computers  by mid-  th century telegraph  precursor telephone  use throughout world  discrete distinguishable encoding letters  dots dashes  common sound  by late   th century ticker tape  ca      use  use hollerith cards      u s  census  then came teleprinter  ca        punched-paper use baudot code tape telephone-switching networks electromechanical relays  invented       behind work george stibitz         inventor digital adding device  as worked bell laboratories  observed  burdensome  use mechanical calculators gears   he went home one evening      intending test idea    when tinkering  stibitz constructed binary adding device  davis        observes particular importance electromechanical relay  two  binary states  open closed  it development  beginning      electromechanical calculators using electrical relays  machines built scope babbage envisioned      mathematics   th century mid-  th century    symbols rules  in rapid succession  mathematics george boole               gottlob frege         giuseppe peano             reduced arithmetic sequence symbols manipulated rules  peano the principles arithmetic  presented new method         first attempt axiomatization mathematics symbolic language  but heijenoort gives frege        kudos  frege  perhaps important single work ever written logic      see    formula language   lingua characterica  language written special symbols   pure thought    free rhetorical embellishments     constructed specific symbols manipulated according definite rules   the work frege simplified amplified alfred north whitehead bertrand russell principia mathematica             the paradoxes  at time number disturbing paradoxes appeared literature  particular  burali-forti paradox         russell paradox            richard paradox  the resultant considerations led kurt g del paper        specifically cites paradox liar completely reduces rules recursion numbers effective calculability  in effort solve entscheidungsproblem defined precisely hilbert       mathematicians first set define meant  effective method   effective calculation   effective calculability   i e   calculation would succeed   in rapid succession following appeared  alonzo church  stephen kleene j b  rosser  -calculus finely honed definition  general recursion  work g del acting suggestions jacques herbrand  cf  g del princeton lectures       subsequent simplifications kleene  church proof entscheidungsproblem unsolvable  emil post definition effective calculability worker mindlessly following list instructions move left right sequence rooms either mark erase paper observe paper make yes-no decision next instruction  alan turing proof entscheidungsproblem unsolvable use  a-  automatic-  machine  effect almost identical post  formulation   j  barkley rosser definition  effective method  terms  machine   kleene proposal precursor  church thesis  called  thesis i   years later kleene renaming thesis  church thesis  proposing  turing thesis      emil post        alan turing                    emil post        described actions  computer   human  follows     two concepts involved  symbol space work leading problem answer carried  fixed unalterable set directions his symbol space would two-way infinite sequence spaces boxes    the problem solver worker move work symbol space  capable  operating one box time     box admit two possible conditions  i e   empty unmarked  single mark  say vertical stroke  one box singled called starting point     a specific problem given symbolic form finite number boxes  i e   input  marked stroke  likewise  answer  i e   output  given symbolic form configuration marked boxes    a set directions applicable general problem sets deterministic process applied specific problem  this process terminates comes direction type  c    i e   stop    see post turing machinealan turing work preceded stibitz         unknown whether stibitz knew work turing  turing biographer believed turing use typewriter-like model derived youthful interest   alan dreamt inventing typewriters boy  mrs  turing typewriter  could well begun asking meant calling typewriter  mechanical    given prevalence morse code telegraphy  ticker tape machines  teletypewriters might conjecture influences turing model computation called turing machine begins  post  analysis human computer whittles simple set basic motions  states mind   but continues step creates machine model computation numbers  computing normally done writing certain symbols paper  we may suppose paper divided squares like child arithmetic book   i assume computation carried one-dimensional paper  i e   tape divided squares  i shall also suppose number symbols may printed finite    the behavior computer moment determined symbols observing   state mind  moment  we may suppose bound b number symbols squares computer observe one moment  if wishes observe  must use successive observations  we also suppose number states mind need taken account finite    let us imagine operations performed computer split  simple operations  elementary easy imagine divided  turing reduction yields following  the simple operations must therefore include    changes symbol one observed squares  b  changes one squares observed another square within l squares one previously observed squares  it may change necessarily invoke change state mind  the general single operation must  therefore  taken one following   a  a possible change   symbol together possible change state mind   b  a possible change  b  observed squares  together possible change state mind  we may construct machine work computer  a years later  turing expanded analysis  thesis  definition  forceful expression  a function said  effectively calculable  values found purely mechanical process  though fairly easy get intuitive grasp idea  nevertheless desirable definite  mathematical expressible definition      discusses history definition pretty much presented respect g del  herbrand  kleene  church  turing  post      we may take statement literally  understanding purely mechanical process one could carried machine  it possible give mathematical description  certain normal form  structures machines  the development ideas leads author definition computable function  identification computability   effective calculability         we shall use expression  computable function  mean function calculable machine  let  effectively calculable  refer intuitive idea without particular identification one definitions      j b  rosser        s c  kleene           j  barkley rosser defined  effective  mathematical  method  following manner  italicization added    effective method  used rather special sense method step precisely determined certain produce answer finite number steps  with special meaning  three different precise definitions given date   footnote     see discussion immediately   the simplest state  due post turing  says essentially effective method solving certain sets problems exists one build machine solve problem set human intervention beyond inserting question  later  reading answer  all three definitions equivalent  matter one used  moreover  fact three equivalent strong argument correctness one    rosser              rosser footnote no    references work     church kleene definition  -definability  particular church use an unsolvable problem elementary number theory             herbrand g del use recursion particular g del use famous paper on formally undecidable propositions principia mathematica related systems i             post        turing           mechanism-models computation stephen c  kleene defined now-famous  thesis i  known church turing thesis  but following context  boldface original       algorithmic theories    in setting complete algorithmic theory  describe procedure  performable set values independent variables  procedure necessarily terminates manner outcome read definite answer   yes     question   predicate value true     kleene              history         a number efforts directed toward refinement definition  algorithm   activity on-going issues surrounding  particular  foundations mathematics  especially church turing thesis  philosophy mind  especially arguments artificial intelligence   for  see algorithm characterizations    see also      notes      bibliography      further reading      external links    algorithm   encyclopedia mathematics  ems press             algorithms curlieweisstein  eric w   algorithm   mathworld dictionary algorithms data structures   national institute standards technologyalgorithm repositoriesthe stony brook algorithm repository   state university new york stony brookcollected algorithms acm   association computing machinerythe stanford graphbase   stanford university
in computer science  data structure data organization  management  storage format enables efficient access modification  more precisely  data structure collection data values  relationships among  functions operations applied data  i e   algebraic structure data    usage   data structures serve basis abstract data types  adt   the adt defines logical form data type  the data structure implements physical form data type different types data structures suited different kinds applications  highly specialized specific tasks  for example  relational databases commonly use b-tree indexes data retrieval  compiler implementations usually use hash tables look identifiers data structures provide means manage large amounts data efficiently uses large databases internet indexing services  usually  efficient data structures key designing efficient algorithms  some formal design methods programming languages emphasize data structures  rather algorithms  key organizing factor software design  data structures used organize storage retrieval information stored main memory secondary memory    implementation   data structures generally based ability computer fetch store data place memory  specified pointer bit string  representing memory address  stored memory manipulated program  thus  array record data structures based computing addresses data items arithmetic operations  linked data structures based storing addresses data items within structure itself  the implementation data structure usually requires writing set procedures create manipulate instances structure  the efficiency data structure cannot analyzed separately operations  this observation motivates theoretical concept abstract data type  data structure defined indirectly operations may performed  mathematical properties operations  including space time cost     examples   there numerous types data structures  generally built upon simpler primitive data types a byte smallest amount data computer cpu copy memory register back single instruction byte stream efficient way copy big data computer  ref an array number elements specific order  typically type  depending language  individual elements may either forced type  may almost type   elements accessed using integer index specify element required  typical implementations allocate contiguous memory words elements arrays  always necessity   arrays may fixed-length resizable a linked list  also called list  linear collection data elements type  called nodes  node value  points next node linked list  the principal advantage linked list array values always efficiently inserted removed without relocating rest list  certain operations  random access certain element  however slower lists arrays a record  also called tuple struct  aggregate data structure  a record value contains values  typically fixed number sequence typically indexed names  the elements records usually called fields members a union data structure specifies number permitted primitive types may stored instances  e g  float long integer  contrast record  could defined contain float integer  whereas union  one value time  enough space allocated contain widest member data-type a tagged union  also called variant  variant record  discriminated union  disjoint union  contains additional field indicating current type  enhanced type safety an object data structure contains data fields  like record  well various methods operate data contents  an object in-memory instance class taxonomy  in context object-oriented programming  records known plain old data structures distinguish objects in addition  hashes  graphs binary trees commonly used data structures    language support   most assembly languages low-level languages  bcpl  basic combined programming language   lack built-in support data structures  on hand  many high-level programming languages higher-level assembly languages  masm  special syntax built-in support certain data structures  records arrays  for example  c  direct descendant bcpl  pascal languages support structs records  respectively  addition vectors  one-dimensional arrays  multi-dimensional arrays most programming languages feature sort library mechanism allows data structure implementations reused different programs  modern languages usually come standard libraries implement common data structures  examples c   standard template library  java collections framework  microsoft  net framework modern languages also generally support modular programming  separation interface library module implementation  some provide opaque data types allow clients hide implementation details  object-oriented programming languages  c    java  smalltalk  typically use classes purpose many known data structures concurrent versions allow multiple computing threads access single concrete instance data structure simultaneously    see also      references      bibliography   peter brass  advanced data structures  cambridge university press        isbn    -          donald knuth  the art computer programming  vol     addison-wesley   rd edition        isbn    -          dinesh mehta sartaj sahni  handbook data structures applications  chapman hall crc press        isbn           niklaus wirth  algorithms data structures  prentice hall        isbn    -             further reading   alfred aho  john hopcroft  jeffrey ullman  data structures algorithms  addison-wesley        isbn  -   -     - g  h  gonnet r  baeza-yates  handbook algorithms data structures - pascal c  second edition  addison-wesley        isbn  -   -     - ellis horowitz sartaj sahni  fundamentals data structures pascal  computer science press        isbn  -      -  -    external links   descriptions dictionary algorithms data structuresdata structures coursean examination data structures  net perspectiveschaffer  c  data structures algorithm analysis
in computer science  particular knowledge representation reasoning metalogic  area automated reasoning dedicated understanding different aspects reasoning  the study automated reasoning helps produce computer programs allow computers reason completely  nearly completely  automatically  although automated reasoning considered sub-field artificial intelligence  also connections theoretical computer science philosophy the developed subareas automated reasoning automated theorem proving  less automated pragmatic subfield interactive theorem proving  automated proof checking  viewed guaranteed correct reasoning fixed assumptions   extensive work also done reasoning analogy using induction abduction other important topics include reasoning uncertainty non-monotonic reasoning  an important part uncertainty field argumentation  constraints minimality consistency applied top standard automated deduction  john pollock oscar system example automated argumentation system specific automated theorem prover tools techniques automated reasoning include classical logics calculi  fuzzy logic  bayesian inference  reasoning maximal entropy many less formal ad hoc techniques    early years   the development formal logic played big role field automated reasoning  led development artificial intelligence  a formal proof proof every logical inference checked back fundamental axioms mathematics  all intermediate logical steps supplied  without exception  no appeal made intuition  even translation intuition logic routine  thus  formal proof less intuitive less susceptible logical errors some consider cornell summer meeting       brought together many logicians computer scientists  origin automated reasoning  automated deduction  others say began      logic theorist program newell  shaw simon  martin davis       implementation presburger decision procedure  proved sum two even numbers even  automated reasoning  although significant popular area research  went  ai winter  eighties early nineties  the field subsequently revived  however  for example        microsoft started using verification technology many internal projects planning include logical specification checking language      version visual c    significant contributions   principia mathematica milestone work formal logic written alfred north whitehead bertrand russell  principia mathematica - also meaning principles mathematics - written purpose derive mathematical expressions  terms symbolic logic  principia mathematica initially published three volumes                 logic theorist  lt  first ever program developed      allen newell  cliff shaw herbert a  simon  mimic human reasoning  proving theorems demonstrated fifty-two theorems chapter two principia mathematica  proving thirty-eight them  in addition proving theorems  program found proof one theorems elegant one provided whitehead russell  after unsuccessful attempt publishing results  newell  shaw  herbert reported publication       the next advance operation research  there world machines think  learn create  moreover  ability things going increase rapidly  visible future  range problems handle co- extensive range human mind applied   examples formal proofs   proof systems   boyer-moore theorem prover  nqthm the design nqthm influenced john mccarthy woody bledsoe  started      edinburgh  scotland  fully automatic theorem prover built using pure lisp  the main aspects nqthm use lisp working logic the reliance principle definition total recursive functions the extensive use rewriting  symbolic evaluation  an induction heuristic based failure symbolic evaluation hol lightwritten ocaml  hol light designed simple clean logical foundation uncluttered implementation  it essentially another proof assistant classical higher order logic coqdeveloped france  coq another automated proof assistant  automatically extract executable programs specifications  either objective caml haskell source code  properties  programs proofs formalized language called calculus inductive constructions  cic     applications   automated reasoning commonly used build automated theorem provers  oftentimes  however  theorem provers require human guidance effective generally qualify proof assistants  in cases provers come new approaches proving theorem  logic theorist good example this  the program came proof one theorems principia mathematica efficient  requiring fewer steps  proof provided whitehead russell  automated reasoning programs applied solve growing number problems formal logic  mathematics computer science  logic programming  software hardware verification  circuit design  many others  the tptp  sutcliffe suttner       library problems updated regular basis  there also competition among automated theorem provers held regularly cade conference  pelletier  sutcliffe suttner        problems competition selected tptp library    see also   automated machine learning  automl automated theorem provingreasoning systemsemantic reasonerprogram analysis  computer science applications artificial intelligenceoutline artificial intelligencecasuistry   case-based reasoningabductive reasoninginference enginecommonsense reasoning    conferences workshops    international joint conference automated reasoning  ijcar conference automated deduction  cade international conference automated reasoning analytic tableaux related methods    journals    journal automated reasoning    communities    association automated reasoning  aar    references      external links   international workshop implementation logicsworkshop series empirically successful topics automated reasoning
a prologue prolog  greek          pr logos      pr           l gos   word   opening story establishes context gives background details  often earlier story ties main one  miscellaneous information  the ancient greek pr logos included modern meaning prologue  wider significance  like meaning preface  the importance  therefore  prologue greek drama great  sometimes almost took place romance   episode  play succeeded    latin   on latin stage prologue often elaborate athens  careful composition poems plautus prefixes plays see importance gave portion entertainment  sometimes  preface rudens  plautus rises height genius adroit romantic prologues  usually placed mouths persons make appearance play itself moli revived plautian prologue introduction amphitryon  racine introduced piety speaker prologue opened choral tragedy esther the tradition ancients vividly affected early dramatists  not mystery plays miracles middle ages begun homily  drama modern sense inaugurated reign elizabeth  prologue came  directly adapted practice euripides terence  sackville  lord buckhurst  prepared sort prologue dumb show gorboduc       also wrote famous induction   practically  prologue  miscellany short romantic epics diverse hands    elizabethan   prologues renaissance drama often served specific function transition clarification audience  a direct address made one actor  prologue acted appeal audience attention sympathy  providing historical context  guide themes play  occasionally  disclaimer        in mode  prologue  like scripted performance  would exist text  actor speaks text  presentation language spoken      in ushering audience reality world play  prologue straddles boundaries audience  actors  characters  playwrights basically  creates distinction imaginary space within play outside world      ben jonson often noted using prologue remind audience complexities aspects performance the actor reciting prologue would appear dressed black  stark contrast elaborate costumes used play  the prologue removed hat wore makeup  he may carried book  scroll  placard displaying title play       he introduced three short trumpet calls  third entered took position downstage  he made three bows current fashion court  addressed audience         the elizabethan prologue unique incorporating aspects classical medieval traditions       in classical tradition  prologue conformed one four subgenres  sustatikos  recommends either play poet  epitimetikos  curse given rival  thanks given audience  dramatikos  plot play explained  mixtos  contains things       in medieval tradition  expressions morality modesty seen       well meta-theatrical self-consciousness  unabashed awareness financial contract engaged upon paid actors playwrights  paying audience         use fiction   prologues long used non-dramatic fiction  since least time geoffrey chaucer canterbury tales  although chaucer prologues many tales  rather one front book the museum eterna novel argentine writer macedonio fernandez    prologues author  their style varies metaphysical  humoristic  psychological  discussions art novel  etc    see also   epigraphepilogueforewordinterludeintroductionloaprefaceprolegomena   references       attribution    this article incorporates text publication public domain  chisholm  hugh  ed           prologue   encyclop dia britannica    th ed    cambridge university press 
automated theorem proving  also known atp automated deduction  subfield automated reasoning mathematical logic dealing proving mathematical theorems computer programs   automated reasoning mathematical proof major impetus development computer science    logical foundations   while roots formalised logic go back aristotle  end   th early   th centuries saw development modern logic formalised mathematics  frege begriffsschrift        introduced complete propositional calculus essentially modern predicate logic   his foundations arithmetic  published       expressed  parts  mathematics formal logic  this approach continued russell whitehead influential principia mathematica  first published            revised second edition       russell whitehead thought could derive mathematical truth using axioms inference rules formal logic  principle opening process automatisation  in       thoralf skolem simplified previous result leopold l wenheim  leading l wenheim skolem theorem        notion herbrand universe herbrand interpretation allowed  un satisfiability first-order formulas  hence validity theorem  reduced  potentially infinitely many  propositional satisfiability problems in       moj esz presburger showed theory natural numbers addition equality  called presburger arithmetic honor  decidable gave algorithm could determine given sentence language true false however  shortly positive result  kurt g del published on formally undecidable propositions principia mathematica related systems         showing sufficiently strong axiomatic system true statements cannot proved system  this topic developed     alonzo church alan turing  one hand gave two independent equivalent definitions computability  gave concrete examples undecidable questions    first implementations   shortly world war ii  first general purpose computers became available  in       martin davis programmed presburger algorithm johnniac vacuum tube computer institute advanced study princeton  new jersey  according davis   its great triumph prove sum two even numbers even   more ambitious logic theory machine       deduction system propositional logic principia mathematica  developed allen newell  herbert a  simon j  c  shaw  also running johnniac  logic theory machine constructed proofs small set propositional axioms three deduction rules  modus ponens   propositional  variable substitution  replacement formulas definition  the system used heuristic guidance  managed prove    first    theorems principia the  heuristic  approach logic theory machine tried emulate human mathematicians  could guarantee proof could found every valid theorem even principle   in contrast   systematic algorithms achieved  least theoretically  completeness first-order logic  initial approaches relied results herbrand skolem convert first-order formula successively larger sets propositional formulae instantiating variables terms herbrand universe  the propositional formulas could checked unsatisfiability using number methods  gilmore program used conversion disjunctive normal form  form satisfiability formula obvious    decidability problem   depending underlying logic  problem deciding validity formula varies trivial impossible  for frequent case propositional logic  problem decidable co-np-complete  hence exponential-time algorithms believed exist general proof tasks  for first order predicate calculus  g del completeness theorem states theorems  provable statements  exactly logically valid well-formed formulas  identifying valid formulas recursively enumerable  given unbounded resources  valid formula eventually proven  however  invalid formulas  entailed given theory   cannot always recognized the applies first order theories  peano arithmetic  however  specific model may described first order theory  statements may true undecidable theory used describe model  for example  g del incompleteness theorem  know theory whose proper axioms true natural numbers cannot prove first order statements true natural numbers  even list proper axioms allowed infinite enumerable  it follows automated theorem prover fail terminate searching proof precisely statement investigated undecidable theory used  even true model interest  despite theoretical limit  practice  theorem provers solve many hard problems  even models fully described first order theory  integers     related problems   a simpler  related  problem proof verification  existing proof theorem certified valid  for  generally required individual proof step verified primitive recursive function program  hence problem always decidable since proofs generated automated theorem provers typically large  problem proof compression crucial various techniques aiming making prover output smaller  consequently easily understandable checkable  developed proof assistants require human user give hints system  depending degree automation  prover essentially reduced proof checker  user providing proof formal way  significant proof tasks performed automatically  interactive provers used variety tasks  even fully automatic systems proved number interesting hard theorems  including least one eluded human mathematicians long time  namely robbins conjecture  however  successes sporadic  work hard problems usually requires proficient user another distinction sometimes drawn theorem proving techniques  process considered theorem proving consists traditional proof  starting axioms producing new inference steps using rules inference   other techniques would include model checking   simplest case  involves brute-force enumeration many possible states  although actual implementation model checkers requires much cleverness  simply reduce brute force  there hybrid theorem proving systems use model checking inference rule  there also programs written prove particular theorem   usually informal  proof program finishes certain result  theorem true  a good example machine-aided proof four color theorem  controversial first claimed mathematical proof essentially impossible verify humans due enormous size program calculation  proofs called non-surveyable proofs    another example program-assisted proof one shows game connect four always first player    industrial uses   commercial use automated theorem proving mostly concentrated integrated circuit design verification   since pentium fdiv bug  complicated floating point units modern microprocessors designed extra scrutiny  amd  intel others use automated theorem proving verify division operations correctly implemented processors    first-order theorem proving   in late     agencies funding research automated deduction began emphasize need practical applications  one first fruitful areas program verification whereby first-order theorem provers applied problem verifying correctness computer programs languages pascal  ada  etc  notable among early program verification systems stanford pascal verifier developed david luckham stanford university  this based stanford resolution prover also developed stanford using john alan robinson resolution principle  this first automated deduction system demonstrate ability solve mathematical problems announced notices american mathematical society solutions formally published first-order theorem proving one mature subfields automated theorem proving  the logic expressive enough allow specification arbitrary problems  often reasonably natural intuitive way  on hand  still semi-decidable  number sound complete calculi developed  enabling fully automated systems  more expressive logics  higher-order logics  allow convenient expression wider range problems first order logic  theorem proving logics less well developed    benchmarks  competitions  sources   the quality implemented systems benefited existence large library standard benchmark examples   thousands problems theorem provers  tptp  problem library    well cade atp system competition  casc   yearly competition first-order systems many important classes first-order problems some important systems  least one casc competition division  listed below e high-performance prover full first-order logic  built purely equational calculus  originally developed automated reasoning group technical university munich direction wolfgang bibel  baden-w rttemberg cooperative state university stuttgart otter  developed argonne national laboratory  based first-order resolution paramodulation  otter since replaced prover   paired mace  setheo high-performance system based goal-directed model elimination calculus  originally developed team direction wolfgang bibel  e setheo combined  systems  composite theorem prover e-setheo vampire originally developed implemented manchester university andrei voronkov krystof hoder  it developed growing international team  it fof division  among divisions  cade atp system competition regularly since      waldmeister specialized system unit-equational first-order logic developed arnim buch thomas hillenbrand  it casc ueq division fourteen consecutive years             spass first order logic theorem prover equality  this developed research group automation logic  max planck institute computer science the theorem prover museum initiative conserve sources theorem prover systems future analysis  since important cultural scientific artefacts  it sources many systems mentioned above    popular techniques   first-order resolution unificationmodel eliminationmethod analytic tableauxsuperposition term rewritingmodel checkingmathematical inductionbinary decision diagramsdpllhigher-order unification   software systems       free software    alt-ergoautomathcvcegkcg del machineiproverisaplannerked theorem proverleancopleo iilcflogictools online theorem proverlotrecmetaprlmizarnuprlparadoxprover simplifyspark  programming language twelfz  theorem prover    proprietary software    acumen rulemanager  commercial product alligator  cc by-nc-sa     uk carinekiv  freely available plugin eclipse prover plug-in  commercial proof engine product proverboxwolfram mathematicaresearchcycspear modular arithmetic theorem prover   see also      notes      references   chin-liang chang  richard char-tung lee         symbolic logic mechanical theorem proving  academic press loveland  donald w          automated theorem proving  a logical basis  fundamental studies computer science volume    north-holland publishing luckham  david         programming specifications  an introduction anna  a language specifying ada programs  springer-verlag texts monographs computer science      pp  isbn    -           gallier  jean h          logic computer science  foundations automatic theorem proving  harper   row publishers  available free download  duffy  david a          principles automated theorem proving  john wiley   sons wos  larry  overbeek  ross  lusk  ewing  boyle  jim         automated reasoning  introduction applications   nd ed    mcgraw hill alan robinson  andrei voronkov  eds          handbook automated reasoning volume i   ii  elsevier mit press fitting  melvin         first-order logic automated theorem proving   nd ed    springer    external links   a list theorem proving tools
a theory rational type abstract thinking phenomenon  results thinking  the process contemplative rational thinking often associated processes observational study research  theories may scientific  belong non-scientific discipline  discipline all  depending context  theory assertions might  example  include generalized explanations nature works  the word roots ancient greek  modern use taken several related meanings in modern science  term  theory  refers scientific theories  well-confirmed type explanation nature  made way consistent scientific method  fulfilling criteria required modern science  such theories described way scientific tests able provide empirical support  empirical contradiction   falsify   it  scientific theories reliable  rigorous  comprehensive form scientific knowledge  contrast common uses word  theory  imply something unproven speculative  formal terms better characterized word hypothesis   scientific theories distinguished hypotheses  individual empirically testable conjectures  scientific laws  descriptive accounts way nature behaves certain conditions theories guide enterprise finding facts rather reaching goals  neutral concerning alternatives among values        a theory body knowledge  may may associated particular explanatory models  to theorize develop body knowledge      the word theory  theory  sometimes used erroneously people explain something individually experience test before  in instances  semantically  substituted another concept  hypothesis  instead using word  hypothetically   replaced phrase   theory   in instances theory credibility could contested calling  theory   implying idea even tested   hence  word  theory  often contrasted  practice   greek praxis          greek term  opposed theory  a  classical example  distinction  theoretical   practical  uses discipline medicine  medical theory involves trying understand causes nature health sickness  practical side medicine trying make people healthy  these two things related independent  possible research health sickness without curing specific patients  possible cure patient without knowing cure worked    ancient usage   the english word theory derives technical term philosophy ancient greek  as everyday word  theoria          meant  looking  viewing  beholding   technical contexts came refer contemplative speculative understandings natural things  natural philosophers  opposed practical ways knowing things  like skilled orators artisans  english-speakers used word theory since least late   th century  modern uses word theory derive original definition  taken new shades meaning  still based idea theory thoughtful rational explanation general nature things although mundane meanings greek  word        apparently developed special uses early recorded history greek language  in book from religion philosophy  francis cornford suggests orphics used word theoria mean  passionate sympathetic contemplation   pythagoras changed word mean  passionless contemplation rational  unchanging truth  mathematical knowledge  considered intellectual pursuit way reach highest plane existence  pythagoras emphasized subduing emotions bodily desires help intellect function higher plane theory  thus  pythagoras gave word theory specific meaning led classical modern concept distinction theory  uninvolved  neutral thinking  practice aristotle terminology  already mentioned  contrasts theory praxis practice  contrast exists till today  for aristotle  practice theory involve thinking  aims different  theoretical contemplation considers things humans move change  nature  human aim apart knowledge helps create  on hand  praxis involves thinking  always aim desired actions  whereby humans cause change movement ends  any human movement involves conscious choice thinking could example praxis doing    formality   theories analytical tools understanding  explaining  making predictions given subject matter  there theories many varied fields study  including arts sciences  a formal theory syntactic nature meaningful given semantic component applying content  e g   facts relationships actual historical world unfolding   theories various fields study expressed natural language  always constructed way general form identical theory expressed formal language mathematical logic  theories may expressed mathematically  symbolically  common language  generally expected follow principles rational thought logic theory constructed set sentences entirely true statements subject consideration  however  truth one statements always relative whole theory  therefore  statement may true respect one theory  true respect another  this  ordinary language  statements  he terrible person  cannot judged true false without reference interpretation  he  matter  terrible person  theory sometimes two theories exactly explanatory power make predictions  a pair theories called indistinguishable observationally equivalent  choice reduces convenience philosophical preference the form theories studied formally mathematical logic  especially model theory  when theories studied mathematics  usually expressed formal language statements closed application certain procedures called rules inference  a special case  axiomatic theory  consists axioms  axiom schemata  rules inference  a theorem statement derived axioms application rules inference  theories used applications abstractions observed phenomena resulting theorems provide solutions real-world problems  obvious examples include arithmetic  abstracting concepts number   geometry  concepts space   probability  concepts randomness likelihood  g del incompleteness theorem shows consistent  recursively enumerable theory   one whose theorems form recursively enumerable set  concept natural numbers expressed  include true statements them  as result  domains knowledge cannot formalized  accurately completely  mathematical theories   here  formalizing accurately completely means true propositions true propositions derivable within mathematical system   this limitation  however  way precludes construction mathematical theories formalize large bodies scientific knowledge     underdetermination    a theory underdetermined  also called indeterminacy data theory  rival  inconsistent theory least consistent evidence  underdetermination epistemological issue relation evidence conclusions a theory lacks supporting evidence generally  properly  referred hypothesis     intertheoretic reduction elimination    if new theory better explains predicts phenomenon old theory  i e   explanatory power   justified believing newer theory describes reality correctly  this called intertheoretic reduction terms old theory reduced terms new one  for instance  historical understanding sound   light  heat reduced wave compressions rarefactions  electromagnetic waves  molecular kinetic energy  respectively  these terms  identified  called intertheoretic identities  when old new theory parallel way  conclude new one describes reality  completely when new theory uses new terms reduce terms older theory  rather replace misrepresent reality  called intertheoretic elimination  for instance  obsolete scientific theory put forward understanding heat transfer terms movement caloric fluid eliminated theory heat energy replaced it  also  theory phlogiston substance released burning rusting material eliminated new understanding reactivity oxygen     versus theorems    theories distinct theorems  a theorem derived deductively axioms  basic assumptions  according formal system rules  sometimes end sometimes first step toward tested applied concrete situation  theorems said true sense conclusions theorem logical consequences axioms  theories abstract conceptual  supported challenged observations world  they  rigorously tentative   meaning proposed true expected satisfy careful examination account possibility faulty inference incorrect observation  sometimes theories incorrect  meaning explicit set observations contradicts fundamental objection application theory  often theories corrected conform new observations  restricting class phenomena theory applies changing assertions made  an example former restriction classical mechanics phenomena involving macroscopic length scales particle speeds much lower speed light    the theory-practice gap   theory often distinguished practice  the question whether theoretical models work relevant work interest scholars professions medicine  engineering  law  management       this gap theory practice framed knowledge transfer task translating research knowledge application practice  ensuring practictioners made aware academics criticized attempting transfer knowledge produce practitioners         another framing supposes theory knowledge seek understand different problems model world different words  using different ontologies epistemologies    another framing says research produce theory relevant practice       in context management  van de van johnson propose form engaged scholarship scholars examine problems occur practice  interdisciplinary fashion  producing results create new practical results well new theoretical models  targeting theoretical results shared academic fashion        they use metaphor  arbitrage  ideas disciplines  distinguishing collaboration          scientific   in science  term  theory  refers  well-substantiated explanation aspect natural world  based body facts repeatedly confirmed observation experiment   theories must also meet requirements  ability make falsifiable predictions consistent accuracy across broad area scientific inquiry  production strong evidence favor theory multiple independent sources  consilience  the strength scientific theory related diversity phenomena explain  measured ability make falsifiable predictions respect phenomena  theories improved  replaced better theories  evidence gathered  accuracy prediction improves time  increased accuracy corresponds increase scientific knowledge  scientists use theories foundation gain scientific knowledge  well accomplish goals inventing technology curing diseases     definitions scientific organizations    the united states national academy sciences defines scientific theories follows the formal scientific definition  theory  quite different everyday meaning word  it refers comprehensive explanation aspect nature supported vast body evidence  many scientific theories well established new evidence likely alter substantially  for example  new evidence demonstrate earth orbit around sun  heliocentric theory   living things made cells  cell theory   matter composed atoms  surface earth divided solid plates moved geological timescales  theory plate tectonics      one useful properties scientific theories used make predictions natural events phenomena yet observed from american association advancement science a scientific theory well-substantiated explanation aspect natural world  based body facts repeatedly confirmed observation experiment  such fact-supported theories  guesses  reliable accounts real world  the theory biological evolution  theory   it factual explanation universe atomic theory matter germ theory disease  our understanding gravity still work progress  but phenomenon gravity  like evolution  accepted fact the term theory appropriate describing scientific models untested  intricate hypotheses     philosophical views    the logical positivists thought scientific theories deductive theories theory content based formal system logic basic axioms  in deductive theory  sentence logical consequence one axioms also sentence theory  this called received view theories in semantic view theories   largely replaced received view  theories viewed scientific models  a model logical framework intended represent reality   model reality    similar way map graphical model represents territory city country  in approach  theories specific category models fulfill necessary criteria   see theories models discussion      in physics    in physics term theory generally used mathematical framework derived small set basic postulates  usually symmetries  like equality locations space time  identity electrons  etc   capable producing experimental predictions given category physical systems  one good example classical electromagnetism  encompasses results derived gauge symmetry  sometimes called gauge invariance  form equations called maxwell equations  the specific mathematical aspects classical electromagnetic theory termed  laws electromagnetism   reflecting level consistent reproducible evidence supports them  within electromagnetic theory generally  numerous hypotheses electromagnetism applies specific situations  many hypotheses already considered adequately tested  new ones always making perhaps untested     regarding term  theoretical     certain tests may infeasible technically difficult  as result  theories may make predictions confirmed proven incorrect  these predictions may described informally  theoretical   they tested later  incorrect  may lead revision  invalidation  rejection theory    mathematical   in mathematics use term theory different  necessarily  since mathematics contains explanations natural phenomena  per se  even though may help provide insight natural systems inspired them  in general sense  mathematical theory branch topic mathematics  set theory  number theory  group theory  probability theory  game theory  control theory  perturbation theory  etc   might appropriate single textbook in sense  specifically  word theory extensive  structured collection theorems  organized proof theorem requires theorems axioms preceded  circular proofs   occurs early feasible sequence  postponed proofs   whole succinct possible  redundant proofs   ideally  sequence theorems presented easy understand possible  although illuminating branch mathematics purpose textbooks  rather mathematical theory might written cover    philosophical   a theory either descriptive science  prescriptive  normative  philosophy  the latter whose subject matter consists empirical data  rather ideas  at least elementary theorems philosophical theory statements whose truth cannot necessarily scientifically tested empirical observation a field study sometimes named  theory  basis initial set assumptions describing field approach subject  these assumptions elementary theorems particular theory  thought axioms field  some commonly known examples include set theory number theory  however literary theory  critical theory  music theory also form     metatheory    one form philosophical theory metatheory meta-theory  a metatheory theory whose subject matter theory set theories  in words  theory theories  statements made metatheory theory called metatheorems    political   a political theory ethical theory law government  often term  political theory  refers general view  specific ethic  political belief attitude  thought politics    jurisprudential   in social science  jurisprudence philosophical theory law  contemporary philosophy law addresses problems internal law legal systems  problems law particular social institution    examples   most following scientific theories  some  rather encompass body knowledge art  music theory visual arts theories anthropology  carneiro circumscription theoryastronomy  alpher bethe gamow theory   b fh theory   copernican theory   giant impact hypothesis   newton theory gravitation   hubble law   kepler laws planetary motion   nebular hypothesis   ptolemaic theorycosmology  big bang theory   cosmic inflation   loop quantum gravity   superstring theory   supergravity   supersymmetric theory   multiverse theory   holographic principle   quantum gravity   m-theorybiology  cell theory   evolution   germ theorychemistry  molecular theory   kinetic theory gases   molecular orbital theory   valence bond theory   transition state theory   rrkm theory   chemical graph theory   flory huggins solution theory   marcus theory   lewis theory  successor br nsted lowry acid base theory    hsab theory   debye h ckel theory   thermodynamic theory polymer elasticity   reptation theory   polymer field theory   m ller plesset perturbation theory   density functional theory   frontier molecular orbital theory   polyhedral skeletal electron pair theory   baeyer strain theory   quantum theory atoms molecules   collision theory   ligand field theory  successor crystal field theory    variational transition-state theory   benson group increment theory   specific ion interaction theoryclimatology  climate change theory  general study climate changes  anthropogenic climate change  acc   global warming  agw  theories  due human activity economics  macroeconomic theory   microeconomic theory   law supply demandeducation  constructivist theory   critical pedagogy theory   education theory   multiple intelligence theory   progressive education theoryengineering  circuit theory   control theory   signal theory   systems theory   information theoryfilm  film theorygeology  plate tectonicshumanities  critical theoryjurisprudence  legal theory   natural law   legal positivism   legal realism   critical legal studieslaw  see jurisprudence  also case theorylinguistics  x-bar theory   government binding   principles parameters   universal grammarliterature  literary theorymathematics  approximation theory   arakelov theory   asymptotic theory   bifurcation theory   catastrophe theory   category theory   chaos theory   choquet theory   coding theory   combinatorial game theory   computability theory   computational complexity theory   deformation theory   dimension theory   ergodic theory   field theory   galois theory   game theory   graph theory   group theory   hodge theory   homology theory   homotopy theory   ideal theory   intersection theory   invariant theory   iwasawa theory   k-theory   kk-theory   knot theory   l-theory   lie theory   littlewood paley theory   matrix theory   measure theory   model theory   morse theory   nevanlinna theory   number theory   obstruction theory   operator theory   pcf theory   perturbation theory   potential theory   probability theory   ramsey theory   rational choice theory   representation theory   ring theory   set theory   shape theory   small cancellation theory   spectral theory   stability theory   stable theory   sturm liouville theory   twistor theorymusic  music theoryphilosophy  proof theory   speculative reason   theory truth   type theory   value theory   virtue theoryphysics  acoustic theory   antenna theory   atomic theory   bcs theory   dirac hole theory   dynamo theory   landau theory   m-theory   perturbation theory   theory relativity  successor classical mechanics    quantum field theory   scattering theory   string theory   quantum information theorypsychology  theory mind   cognitive dissonance theory   attachment theory   object permanence   poverty stimulus   attribution theory   self-fulfilling prophecy   stockholm syndromepublic budgeting  incrementalism   zero-based budgetingpublic administration  organizational theorysemiotics  intertheoricity - transferogenesissociology  critical theory   engaged theory   social theory   sociological theory - social capital theorystatistics  extreme value theorytheatre  performance theoryvisual art  aesthetics   art educational theory   architecture   composition   anatomy   color theory   perspective   visual perception   geometry   manifoldsother  obsolete scientific theories   see also      notes      references       citations        sources       external links    how science works  even theories change   understanding science university california museum paleontology what theory 
soft computing set algorithms  including neural networks  fuzzy logic  genetic algorithms these algorithms tolerant imprecision  uncertainty  partial truth approximation it contrasted hard computing  algorithms finds provably correct optimal solutions problems     history   the theory techniques related soft computing first introduced     s  the term  soft computing  coined lotfi a  zadeh    see also   emergencesynthetic intelligencewatson  computer    notable journals   soft computingapplied soft computing   references   
in computer science  evolutionary computation family algorithms global optimization inspired biological evolution  subfield artificial intelligence soft computing studying algorithms  in technical terms  family population-based trial error problem solvers metaheuristic stochastic optimization character in evolutionary computation  initial set candidate solutions generated iteratively updated  each new generation produced stochastically removing less desired solutions  introducing small random changes  in biological terminology  population solutions subjected natural selection  artificial selection  mutation  as result  population gradually evolve increase fitness  case chosen fitness function algorithm evolutionary computation techniques produce highly optimized solutions wide range problem settings  making popular computer science  many variants extensions exist  suited specific families problems data structures  evolutionary computation also sometimes used evolutionary biology silico experimental procedure study common aspects general evolutionary processes    history   the use evolutionary principles automated problem solving originated     s  it     three distinct interpretations idea started developed three different places evolutionary programming introduced lawrence j  fogel us  john henry holland called method genetic algorithm  in germany ingo rechenberg hans-paul schwefel introduced evolution strategies  these areas developed separately    years  from early nineties unified different representatives   dialects   one technology  called evolutionary computing  also early nineties  fourth stream following general ideas emerged   genetic programming  since      nature-inspired algorithms becoming increasingly significant part evolutionary computation these terminologies denote field evolutionary computing consider evolutionary programming  evolution strategies  genetic algorithms  genetic programming sub-areas the earliest computational simulations evolution using evolutionary algorithms artificial life techniques performed nils aall barricelli       first results published       another pioneer     alex fraser  published series papers simulation artificial selection  artificial evolution became widely recognised optimisation method result work ingo rechenberg     early      used evolution strategies solve complex engineering problems  genetic algorithms particular became popular writing john holland  as academic interest grew  dramatic increases power computers allowed practical applications  including automatic evolution computer programs  evolutionary algorithms used solve multi-dimensional problems efficiently software produced human designers  also optimise design systems    techniques   evolutionary computing techniques mostly involve metaheuristic optimization algorithms  broadly speaking  field includes agent-based modelingant colony optimizationartificial immune systemsartificial life  also see digital organism cultural algorithmsdifferential evolutiondual-phase evolutionestimation distribution algorithmsevolutionary algorithmsevolutionary programmingevolution strategygene expression programminggenetic algorithmgenetic programminggrammatical evolutionlearnable evolution modellearning classifier systemsmemetic algorithmsneuroevolutionparticle swarm optimizationself-organization self-organizing maps  competitive learningswarm intelligence   evolutionary algorithms   evolutionary algorithms form subset evolutionary computation generally involve techniques implementing mechanisms inspired biological evolution reproduction  mutation  recombination  natural selection survival fittest  candidate solutions optimization problem play role individuals population  cost function determines environment within solutions  live   see also fitness function   evolution population takes place repeated application operators in process  two main forces form basis evolutionary systems   recombination mutation crossover create necessary diversity thereby facilitate novelty  selection acts force increasing quality many aspects evolutionary process stochastic  changed pieces information due recombination mutation randomly chosen  on hand  selection operators either deterministic  stochastic  in latter case  individuals higher fitness higher chance selected individuals lower fitness  typically even weak individuals chance become parent survive    evolutionary algorithms biology   genetic algorithms deliver methods model biological systems systems biology linked theory dynamical systems  since used predict future states system  this vivid  perhaps misleading  way drawing attention orderly  well-controlled highly structured character development biology however  use algorithms informatics  particular computational theory  beyond analogy dynamical systems  also relevant understand evolution itself this view merit recognizing central control development  organisms develop result local interactions within cells  the promising ideas program-development parallels seem us ones point apparently close analogy processes within cells  low-level operation modern computers  thus  biological systems like computational machines process input information compute next states  biological systems closer computation classical dynamical system furthermore  following concepts computational theory  micro processes biological organisms fundamentally incomplete undecidable  completeness  logic    implying  crude metaphor behind analogy cells computers the analogy computation extends also relationship inheritance systems biological structure  often thought reveal one pressing problems explaining origins life evolutionary automata  generalization evolutionary turing machines  introduced order investigate precisely properties biological evolutionary computation  in particular  allow obtain new results expressiveness evolutionary computation  this confirms initial result undecidability natural evolution evolutionary algorithms processes  evolutionary finite automata  simplest subclass evolutionary automata working terminal mode accept arbitrary languages given alphabet  including non-recursively enumerable  e g   diagonalization language  recursively enumerable recursive languages  e g   language universal turing machine      notable practitioners   the list active researchers naturally dynamic non-exhaustive  a network analysis community published      kalyanmoy debkenneth a de jongpeter j  flemingdavid b  fogelstephanie forrestdavid e  goldbergjohn henry hollandtheo jansenjohn kozazbigniew michalewiczmelanie mitchellpeter nordinriccardo poliingo rechenberghans-paul schwefel   conferences   the main conferences evolutionary computation area include acm genetic evolutionary computation conference  gecco  ieee congress evolutionary computation  cec  evostar  comprises four conferences  eurogp  evoapplications  evocop evomusart parallel problem solving nature  ppsn     see also      external links   article stanford encyclopedia philosophy biological information  english    bibliography   th  b ck  d b  fogel  z  michalewicz  editors   handbook evolutionary computation        isbn           th  b ck h -p  schwefel  an overview evolutionary algorithms parameter optimization  evolutionary computation                  w  banzhaf  p  nordin  r e  keller  f d  francone  genetic programming   an introduction  morgan kaufmann       s  cagnoni  et al   real-world applications evolutionary computing  springer-verlag lecture notes computer science  berlin       r  chiong  th  weise  z  michalewicz  editors   variants evolutionary algorithms real-world applications  springer        isbn           k  a  de jong  evolutionary computation  unified approach  mit press  cambridge ma      a  e  eiben j e  smith  from evolutionary computation evolution things  nature         -     doi         nature           a  e  eiben j e  smith  introduction evolutionary computing  springer  first edition        second edition      d  b  fogel  evolutionary computation  toward new philosophy machine intelligence  ieee press  piscataway  nj       l  j  fogel  a  j  owens  m  j  walsh  artificial intelligence simulated evolution  new york  john wiley       d  e  goldberg  genetic algorithms search  optimization machine learning  addison wesley       j  h  holland  adaptation natural artificial systems  university michigan press  ann arbor       p  hingston  l  barone  z  michalewicz  editors   design evolution  natural computing series        springer  isbn           j  r  koza  genetic programming  on programming computers means natural evolution  mit press  massachusetts       f j  lobo  c f  lima  z  michalewicz  editors   parameter setting evolutionary algorithms  springer        isbn           z  michalewicz  genetic algorithms   data structures   evolution programs        springer  isbn           z  michalewicz d b  fogel  how solve it  modern heuristics  springer        isbn    - -   -     - i  rechenberg  evolutionstrategie  optimierung technischer systeme nach prinzipien des biologischen evolution  fromman-hozlboog verlag  stuttgart         german h -p  schwefel  numerical optimization computer models  john wiley   sons  new-york                nd edition d  simon  evolutionary optimization algorithms  wiley       m  sipper  w  fu  k  ahuja  j  h  moore          investigating parameter space evolutionary algorithms   biodata mining         doi             -   -    -x  pmc          pmid          cs  maint  uses authors parameter  link y  zhang s  li           psa  a novel optimization algorithm based survival rules porcellio scaber   arxiv             cs ne  cs  maint  uses authors parameter  link    references   
natural language processing  nlp  subfield linguistics  computer science  artificial intelligence concerned interactions computers human language  particular program computers process analyze large amounts natural language data   the goal computer capable  understanding  contents documents  including contextual nuances language within them  the technology accurately extract information insights contained documents well categorize organize documents themselves challenges natural language processing frequently involve speech recognition  natural language understanding  natural language generation    history   natural language processing roots     s  already       alan turing published article titled  computing machinery intelligence  proposed called turing test criterion intelligence  task involves automated interpretation generation natural language  time articulated problem separate artificial intelligence     symbolic nlp        early         the premise symbolic nlp well-summarized john searle chinese room experiment  given collection rules  e g   chinese phrasebook  questions matching answers   computer emulates natural language understanding  nlp tasks  applying rules data confronted with      the georgetown experiment      involved fully automatic translation sixty russian sentences english  the authors claimed within three five years  machine translation would solved problem   however  real progress much slower  alpac report       found ten-year-long research failed fulfill expectations  funding machine translation dramatically reduced   little research machine translation conducted late     first statistical machine translation systems developed      some notably successful natural language processing systems developed     shrdlu  natural language system working restricted  blocks worlds  restricted vocabularies  eliza  simulation rogerian psychotherapist  written joseph weizenbaum             using almost information human thought emotion  eliza sometimes provided startlingly human-like interaction  when  patient  exceeded small knowledge base  eliza might provide generic response  example  responding  my head hurts   why say head hurts        during      many programmers began write  conceptual ontologies   structured real-world information computer-understandable data   examples margie  schank         sam  cullingford         pam  wilensky         talespin  meehan         qualm  lehnert         politics  carbonell         plot units  lehnert         during time  first many chatterbots written  e g   parry       the     early     mark hey-day symbolic methods nlp  focus areas time included research rule-based parsing  e g   development hpsg computational operationalization generative grammar   morphology  e g   two-level morphology   semantics  e g   lesk algorithm   reference  e g   within centering theory  areas natural language understanding  e g   rhetorical structure theory   other lines research continued  e g   development chatterbots racter jabberwacky  an important development  eventually led statistical turn      rising importance quantitative evaluation period     statistical nlp              up      natural language processing systems based complex sets hand-written rules   starting late      however  revolution natural language processing introduction machine learning algorithms language processing   this due steady increase computational power  see moore law  gradual lessening dominance chomskyan theories linguistics  e g  transformational grammar   whose theoretical underpinnings discouraged sort corpus linguistics underlies machine-learning approach language processing      many notable early successes statistical methods nlp occurred field machine translation  due especially work ibm research   these systems able take advantage existing multilingual textual corpora produced parliament canada european union result laws calling translation governmental proceedings official languages corresponding systems government   however  systems depended corpora specifically developed tasks implemented systems   often continues  major limitation success systems  as result  great deal research gone methods effectively learning limited amounts data      with growth web  increasing amounts raw  unannotated  language data become available since mid-    s  research thus increasingly focused unsupervised semi-supervised learning algorithms   such algorithms learn data hand-annotated desired answers using combination annotated non-annotated data   generally  task much difficult supervised learning  typically produces less accurate results given amount input data   however  enormous amount non-annotated data available  including  among things  entire content world wide web   often make inferior results algorithm used low enough time complexity practical     neural nlp  present     in      representation learning deep neural network-style machine learning methods became widespread natural language processing  due part flurry results showing techniques achieve state-of-the-art results many natural language tasks  example language modeling  parsing  many others  this increasingly important medicine healthcare  nlp used analyze notes text electronic health records would otherwise inaccessible study seeking improve care    methods  rules  statistics  neural networks   in early days  many language-processing systems designed symbolic methods  i e   hand-coding set rules  coupled dictionary lookup  writing grammars devising heuristic rules stemming more recent systems based machine-learning algorithms many advantages hand-produced rules  the learning procedures used machine learning automatically focus common cases  whereas writing rules hand often obvious effort directed automatic learning procedures make use statistical inference algorithms produce models robust unfamiliar input  e g  containing words structures seen  erroneous input  e g  misspelled words words accidentally omitted   generally  handling input gracefully handwritten rules   generally  creating systems handwritten rules make soft decisions  extremely difficult  error-prone time-consuming systems based automatically learning rules made accurate simply supplying input data  however  systems based handwritten rules made accurate increasing complexity rules  much difficult task  in particular  limit complexity systems based handwritten rules  beyond systems become more unmanageable  however  creating data input machine-learning systems simply requires corresponding increase number man-hours worked  generally without significant increases complexity annotation process despite popularity machine learning nlp research  symbolic methods still        commonly used amount training data insufficient successfully apply machine learning methods  e g   machine translation low-resource languages provided apertium system preprocessing nlp pipelines  e g   tokenization  orfor postprocessing transforming output nlp pipelines  e g   knowledge extraction syntactic parses     statistical methods    since so-called  statistical revolution  late     mid-     much natural language processing research relied heavily machine learning  the machine-learning paradigm calls instead using statistical inference automatically learn rules analysis large corpora  plural form corpus  set documents  possibly human computer annotations  typical real-world examples many different classes machine-learning algorithms applied natural-language-processing tasks  these algorithms take input large set  features  generated input data  increasingly  however  research focused statistical models  make soft  probabilistic decisions based attaching real-valued weights input feature  complex-valued embeddings  neural networks general also proposed  e g  speech   such models advantage express relative certainty many different possible answers rather one  producing reliable results model included component larger system some earliest-used machine learning algorithms  decision trees  produced systems hard if-then rules similar existing hand-written rules   however  part-of-speech tagging introduced use hidden markov models natural language processing  increasingly  research focused statistical models  make soft  probabilistic decisions based attaching real-valued weights features making input data  the cache language models upon many speech recognition systems rely examples statistical models   such models generally robust given unfamiliar input  especially input contains errors  common real-world data   produce reliable results integrated larger system comprising multiple subtasks since neural turn  statistical methods nlp research largely replaced neural networks  however  continue relevant contexts statistical interpretability transparency required     neural networks    a major drawback statistical methods require elaborate feature engineering  since       field thus largely abandoned statistical methods shifted neural networks machine learning  popular techniques include use word embeddings capture semantic properties words  increase end-to-end learning higher-level task  e g   question answering  instead relying pipeline separate intermediate tasks  e g   part-of-speech tagging dependency parsing   in areas  shift entailed substantial changes nlp systems designed  deep neural network-based approaches may viewed new paradigm distinct statistical natural language processing  for instance  term neural machine translation  nmt  emphasizes fact deep learning-based approaches machine translation directly learn sequence-to-sequence transformations  obviating need intermediate steps word alignment language modeling used statistical machine translation  smt   latest works tend use non-technical structure given task build proper neural network    common nlp tasks   the following list commonly researched tasks natural language processing  some tasks direct real-world applications  others commonly serve subtasks used aid solving larger tasks though natural language processing tasks closely intertwined  subdivided categories convenience  a coarse division given below     text speech processing    optical character recognition  ocr given image representing printed text  determine corresponding text speech recognitiongiven sound clip person people speaking  determine textual representation speech   this opposite text speech one extremely difficult problems colloquially termed  ai-complete   see    in natural speech hardly pauses successive words  thus speech segmentation necessary subtask speech recognition  see   in spoken languages  sounds representing successive letters blend process termed coarticulation  conversion analog signal discrete characters difficult process  also  given words language spoken people different accents  speech recognition software must able recognize wide variety input identical terms textual equivalent speech segmentationgiven sound clip person people speaking  separate words   a subtask speech recognition typically grouped it text-to-speechgiven text  transform units produce spoken representation  text-to-speech used aid visually impaired word segmentation  tokenization separate chunk continuous text separate words  for language like english  fairly trivial  since words usually separated spaces  however  written languages like chinese  japanese thai mark word boundaries fashion  languages text segmentation significant task requiring knowledge vocabulary morphology words language  sometimes process also used cases like bag words  bow  creation data mining     morphological analysis    lemmatizationthe task removing inflectional endings return base dictionary form word also known lemma  lemmatization another technique reducing words normalized form  but case  transformation actually uses dictionary map words actual form morphological segmentationseparate words individual morphemes identify class morphemes  the difficulty task depends greatly complexity morphology  i e   structure words  language considered  english fairly simple morphology  especially inflectional morphology  thus often possible ignore task entirely simply model possible forms word  e g    open  opens  opened  opening   separate words  in languages turkish meitei  highly agglutinated indian language  however  approach possible  dictionary entry thousands possible word forms part-of-speech tagginggiven sentence  determine part speech  pos  word  many words  especially common ones  serve multiple parts speech  for example   book  noun   book table   verb   book flight     set  noun  verb adjective    least five different parts speech stemmingthe process reducing inflected  sometimes derived  words base form  e g    close  root  closed    closing    close    closer  etc    stemming yields similar results lemmatization  grounds rules  dictionary     syntactic analysis    grammar inductiongenerate formal grammar describes language syntax sentence breaking  also known  sentence boundary disambiguation  given chunk text  find sentence boundaries  sentence boundaries often marked periods punctuation marks  characters serve purposes  e g   marking abbreviations  parsingdetermine parse tree  grammatical analysis  given sentence  the grammar natural languages ambiguous typical sentences multiple possible analyses  perhaps surprisingly  typical sentence may thousands potential parses  seem completely nonsensical human   there two primary types parsing  dependency parsing constituency parsing  dependency parsing focuses relationships words sentence  marking things like primary objects predicates   whereas constituency parsing focuses building parse tree using probabilistic context-free grammar  pcfg   see also stochastic grammar      lexical semantics  individual words context     lexical semanticswhat computational meaning individual words context distributional semanticshow learn semantic representations data named entity recognition  ner given stream text  determine items text map proper names  people places  type name  e g  person  location  organization   although capitalization aid recognizing named entities languages english  information cannot aid determining type named entity  case  often inaccurate insufficient   for example  first letter sentence also capitalized  named entities often span several words  capitalized   furthermore  many languages non-western scripts  e g  chinese arabic  capitalization  even languages capitalization may consistently use distinguish names  for example  german capitalizes nouns  regardless whether names  french spanish capitalize names serve adjectives sentiment analysis  see also multimodal sentiment analysis extract subjective information usually set documents  often using online reviews determine  polarity  specific objects  it especially useful identifying trends public opinion social media  marketing terminology extractionthe goal terminology extraction automatically extract relevant terms given corpus word sense disambiguation  wsd many words one meaning  select meaning makes sense context   for problem  typically given list words associated word senses  e g  dictionary online resource wordnet entity linkingmany words - typically proper names - refer named entities  select entity  famous individual  location  company  etc   referred context     relational semantics  semantics individual sentences     relationship extractiongiven chunk text  identify relationships among named entities  e g  married  semantic parsinggiven piece text  typically sentence   produce formal representation semantics  either graph  e g   amr parsing  accordance logical formalism  e g   drt parsing   this challenge typically includes aspects several elementary nlp tasks semantics  e g   semantic role labelling  word sense disambiguation  extended include full-fledged discourse analysis  e g   discourse analysis  coreference  see natural language understanding  semantic role labelling  see also implicit semantic role labelling given single sentence  identify disambiguate semantic predicates  e g   verbal frames   identify classify frame elements  semantic roles      discourse  semantics beyond individual sentences     coreference resolutiongiven sentence larger chunk text  determine words   mentions   refer objects   entities    anaphora resolution specific example task  specifically concerned matching pronouns nouns names refer  the general task coreference resolution also includes identifying so-called  bridging relationships  involving referring expressions  for example  sentence  he entered john house front door    front door  referring expression bridging relationship identified fact door referred front door john house  rather structure might also referred  discourse analysisthis rubric includes several related tasks   one task discourse parsing  i e   identifying discourse structure connected text  i e  nature discourse relationships sentences  e g  elaboration  explanation  contrast    another possible task recognizing classifying speech acts chunk text  e g  yes-no question  content question  statement  assertion  etc   implicit semantic role labellinggiven single sentence  identify disambiguate semantic predicates  e g   verbal frames  explicit semantic roles current sentence  see semantic role labelling   then  identify semantic roles explicitly realized current sentence  classify arguments explicitly realized elsewhere text specified  resolve former local text  a closely related task zero anaphora resolution  i e   extension coreference resolution pro-drop languages recognizing textual entailmentgiven two text fragments  determine one true entails  entails negation  allows either true false topic segmentation recognitiongiven chunk text  separate segments devoted topic  identify topic segment argument miningthe goal argument mining automatic extraction identification argumentative structures natural language text aid computer programs  such argumentative structures include premise  conclusions  argument scheme relationship main subsidiary argument  main counter-argument within discourse     higher-level nlp applications    automatic summarization  text summarization produce readable summary chunk text   often used provide summaries text known type  research papers  articles financial section newspaper book generationnot nlp task proper extension natural language generation nlp tasks creation full-fledged books  the first machine-generated book created rule-based system       racter  the policeman beard half-constructed   the first published work neural network published         road  marketed novel  contains sixty million words  both systems basically elaborate non-sensical  semantics-free  language models  the first machine-generated science book published       beta writer  lithium-ion batteries  springer  cham   unlike racter   road  grounded factual knowledge based text summarization dialogue managementcomputer systems intended converse human document aia document ai platform sits top nlp technology enabling users prior experience artificial intelligence  machine learning nlp quickly train computer extract specific data need different document types  nlp-powered document ai enables non-technical teams quickly access information hidden documents  example  lawyers  business analysts accountants grammatical error correctiongrammatical error detection correction involves great band-width problems levels linguistic analysis  phonology orthography  morphology  syntax  semantics  pragmatics   grammatical error correction impactful since affects hundreds millions people use acquire english second language  it thus subject number shared tasks since       as far orthography  morphology  syntax certain aspects semantics concerned  due development powerful neural language models gpt-          considered largely solved problem marketed various commercial applications machine translationautomatically translate text one human language another   this one difficult problems  member class problems colloquially termed  ai-complete   i e  requiring different types knowledge humans possess  grammar  semantics  facts real world  etc   solve properly natural language generation  nlg  convert information computer databases semantic intents readable human language natural language understanding  nlu convert chunks text formal representations first-order logic structures easier computer programs manipulate  natural language understanding involves identification intended semantic multiple possible semantics derived natural language expression usually takes form organized notations natural language concepts  introduction creation language metamodel ontology efficient however empirical solutions  an explicit formalization natural language semantics without confusions implicit assumptions closed-world assumption  cwa  vs  open-world assumption  subjective yes no vs  objective true false expected construction basis semantics formalization question answeringgiven human-language question  determine answer  typical questions specific right answer   what capital canada     sometimes open-ended questions also considered   what meaning life       general tendencies  possible  future directions   based long-standing trends field  possible extrapolate future directions nlp  as       three trends among topics long-standing series conll shared tasks observed interest increasingly abstract   cognitive  aspects natural language      -      shallow parsing      -    named entity recognition      -       -    dependency syntax      -       -   semantic role labelling      -   coreference      -    discourse parsing        semantic parsing  increasing interest multilinguality   potentially  multimodality  english since       spanish  dutch since       german since       bulgarian  danish  japanese  portuguese  slovenian  swedish  turkish since       basque  catalan  chinese  greek  hungarian  italian  turkish since       czech since       arabic since                 languages                 languages elimination symbolic representations  rule-based supervised towards weakly supervised methods  representation learning end-to-end systems     cognition nlp    most higher-level nlp applications involve aspects emulate intelligent behaviour apparent comprehension natural language  more broadly speaking  technical operationalization increasingly advanced aspects cognitive behaviour represents one developmental trajectories nlp  see trends among conll shared tasks  cognition refers  mental action process acquiring knowledge understanding thought  experience  senses   cognitive science interdisciplinary  scientific study mind processes  cognitive linguistics interdisciplinary branch linguistics  combining knowledge research psychology linguistics  especially age symbolic nlp  area computational linguistics maintained strong ties cognitive studies as example  george lakoff offers methodology build natural language processing  nlp  algorithms perspective cognitive science  along findings cognitive linguistics  two defining aspects apply theory conceptual metaphor  explained lakoff  understanding one idea  terms another  provides idea intent author  for example  consider english word  big   when used comparison   that big tree    author intent imply tree  physically large  relative trees authors experience   when used metaphorically   tomorrow big day    author intent imply  importance    the intent behind usages  like  she big person  remain somewhat ambiguous person cognitive nlp algorithm alike without additional information assign relative measures meaning word  phrase  sentence piece text based information presented piece text analyzed  e g   means probabilistic context-free grammar  pcfg   the mathematical equation algorithms presented us patent                                        r          m          m                                       k          e                      n                          n                                                                    p          m          m                                       k          e                      n                          n                                                                                                                                                                                                                                                                                                                                                                                                                          p              m              m                                                       k              e                              n                                  n                                                                                                                                      p              f                                                       k              e                              n                                  n                                                                                     k              e                              n                                  n                                                                                                                                                                                                                                          displaystyle  rmm token  n     pmm token  n    times   frac        left  sum   -d      pmm token  n-     times  pf token  n  token  n-        right    where rmm  relative measure meaningtoken  block text  sentence  phrase wordn  number tokens analyzedpmm  probable measure meaning based corporad  location token along sequence n-  tokenspf  probability function specific languageties cognitive linguistics part historical heritage nlp  less frequently addressed since statistical turn     s  nevertheless  approaches develop cognitive models towards technically operationalizable frameworks pursued context various frameworks  e g   cognitive grammar  functional grammar  construction grammar  computational psycholinguistics cognitive neuroscience  e g   act-r   however  limited uptake mainstream nlp  measured presence major conferences acl   more recently  ideas cognitive nlp revived approach achieve explainability  e g   notion  cognitive ai   likewise  ideas cognitive nlp inherent neural models multimodal nlp  although rarely made explicit     see also      references      further reading      external link    media related natural language processing wikimedia commons
robotics interdisciplinary branch computer science engineering  robotics involves design  construction  operation  use robots  the goal robotics design machines help assist humans  robotics integrates fields mechanical engineering  electrical engineering  information engineering  mechatronics  electronics  bioengineering  computer engineering  control engineering  software engineering  mathematics  etc robotics develops machines substitute humans replicate human actions  robots used many situations many purposes  today many used dangerous environments  including inspection radioactive materials  bomb detection deactivation   manufacturing processes  humans cannot survive  e g  space  underwater  high heat  clean containment hazardous materials radiation   robots take form  made resemble humans appearance  this claimed help acceptance robots certain replicative behaviors usually performed people  such robots attempt replicate walking  lifting  speech  cognition  human activity  many today robots inspired nature  contributing field bio-inspired robotics certain robots require user input operate robots function autonomously  the concept creating robots operate autonomously dates back classical times  research functionality potential uses robots grow substantially   th century  throughout history  frequently assumed various scholars  inventors  engineers  technicians robots one day able mimic human behavior manage tasks human-like fashion  today  robotics rapidly growing field  technological advances continue  researching  designing  building new robots serve various practical purposes  whether domestically  commercially  militarily  many robots built jobs hazardous people  defusing bombs  finding survivors unstable ruins  exploring mines shipwrecks  robotics also used stem  science  technology  engineering  mathematics  teaching aid    etymology   the word robotics derived word robot  introduced public czech writer karel  apek play r u r   rossum universal robots   published       the word robot comes slavic word robota  means work job  the play begins factory makes artificial people called robots  creatures mistaken humans   similar modern ideas androids  karel  apek coin word  he wrote short letter reference etymology oxford english dictionary named brother josef  apek actual originator according oxford english dictionary  word robotics first used print isaac asimov  science fiction short story  liar    published may      astounding science fiction  asimov unaware coining term  since science technology electrical devices electronics  assumed robotics already referred science technology robots  in asimov works  states first use word robotics short story runaround  astounding science fiction  march        introduced concept the three laws robotics  however  original publication  liar   predates  runaround  ten months  former generally cited word origin    history   in       norbert wiener formulated principles cybernetics  basis practical robotics fully autonomous robots appeared second half   th century  the first digitally operated programmable robot  unimate  installed      lift hot pieces metal die casting machine stack them  commercial industrial robots widespread today used perform jobs cheaply  accurately reliably  humans  they also employed jobs dirty  dangerous  dull suitable humans  robots widely used manufacturing  assembly  packing packaging  mining  transport  earth space exploration  surgery  weaponry  laboratory research  safety  mass production consumer industrial goods    robotic aspects   there many types robots  used many different environments many different uses  although diverse application form  share three basic similarities comes construction robots kind mechanical construction  frame  form shape designed achieve particular task  for example  robot designed travel across heavy dirt mud  might use caterpillar tracks  the mechanical aspect mostly creator solution completing assigned task dealing physics environment around it  form follows function robots electrical components power control machinery  for example  robot caterpillar tracks would need kind power move tracker treads  that power comes form electricity  travel wire originate battery  basic electrical circuit  even petrol powered machines get power mainly petrol still require electric current start combustion process petrol powered machines like cars  batteries  the electrical aspect robots used movement  motors   sensing  electrical signals used measure things like heat  sound  position  energy status  operation  robots need level electrical energy supplied motors sensors order activate perform basic operations all robots contain level computer programming code  a program robot decides something  in caterpillar track example  robot needs move across muddy road may correct mechanical construction receive correct amount power battery  would go anywhere without program telling move  programs core essence robot  could excellent mechanical electrical construction  program poorly constructed performance poor  may perform   there three different types robotic programs  remote control  artificial intelligence hybrid  a robot remote control programming preexisting set commands perform receives signal control source  typically human remote control  it perhaps appropriate view devices controlled primarily human commands falling discipline automation rather robotics  robots use artificial intelligence interact environment without control source  determine reactions objects problems encounter using preexisting programming  hybrid form programming incorporates ai rc functions them    applications   as more robots designed specific tasks  method classification becomes relevant  for example  many robots designed assembly work  may readily adaptable applications  they termed  assembly robots   for seam welding  suppliers provide complete welding systems robot i e  welding equipment along material handling facilities like turntables  etc  integrated unit  such integrated robotic system called  welding robot  even though discrete manipulator unit could adapted variety tasks  some robots specifically designed heavy load manipulation  labeled  heavy-duty robots  current potential applications include military robots industrial robots  robots increasingly used manufacturing  since       according robotic industries association us data       automotive industry main customer industrial robots     total sales  in auto industry  amount half  labor   there even  lights  factories ibm keyboard manufacturing factory texas fully automated early      cobots  collaborative robots  construction robots  construction robots separated three types  traditional robots  robotic arm  robotic exoskeleton agricultural robots  agrobots   the use robots agriculture closely linked concept ai-assisted precision agriculture drone usage      -     research also proved robots perform herding task medical robots various types  da vinci surgical system hospi  kitchen automation  commercial examples kitchen automation flippy  burgers   zume pizza  pizza   cafe x  coffee   makr shakr  cocktails   frobot  frozen yogurts  sally  salads   home examples rotimatic  flatbreads baking  boris  dishwasher loading  robot combat sport   hobby sport event two robots fight arena disable other  this developed hobby     several tv series worldwide cleanup contaminated areas  toxic waste nuclear facilities domestic robots nanorobots swarm robotics autonomous drones sports field line marking    components       power source    at present  mostly  lead acid  batteries used power source  many different types batteries used power source robots  they range lead acid batteries  safe relatively long shelf lives rather heavy compared silver cadmium batteries much smaller volume currently much expensive  designing battery-powered robot needs take account factors safety  cycle lifetime weight  generators  often type internal combustion engine  also used  however  designs often mechanically complex need fuel  require heat dissipation relatively heavy  a tether connecting robot power supply would remove power supply robot entirely  this advantage saving weight space moving power generation storage components elsewhere  however  design come drawback constantly cable connected robot  difficult manage  potential power sources could pneumatic  compressed gases solar power  using sun energy converting electrical power hydraulics  liquids flywheel energy storageorganic garbage  anaerobic digestion nuclear    actuation    actuators  muscles  robot  parts convert stored energy movement  by far popular actuators electric motors rotate wheel gear  linear actuators control industrial robots factories  there recent advances alternative types actuators  powered electricity  chemicals  compressed air      electric motors     the vast majority robots use electric motors  often brushed brushless dc motors portable robots ac motors industrial robots cnc machines  these motors often preferred systems lighter loads  predominant form motion rotational      linear actuators     various types linear actuators move instead spinning  often quicker direction changes  particularly large forces needed industrial robotics  they typically powered compressed oxidized air  pneumatic actuator  oil  hydraulic actuator  linear actuators also powered electricity usually consists motor leadscrew  another common type mechanical linear actuator turned hand  rack pinion car      series elastic actuators     series elastic actuation  sea  relies idea introducing intentional elasticity motor actuator load robust force control  due resultant lower reflected inertia  series elastic actuation improves safety robot interacts environment  e g   humans workpiece  collisions   furthermore  also provides energy efficiency shock absorption  mechanical filtering  reducing excessive wear transmission mechanical components  this approach successfully employed various robots  particularly advanced manufacturing robots walking humanoid robots the controller design series elastic actuator often performed within passivity framework ensures safety interaction unstructured environments  despite remarkable stability robustness  framework suffers stringent limitations imposed controller may trade-off performance  the reader referred following survey summarizes common controller architectures sea along corresponding sufficient passivity conditions  one recent study derived necessary sufficient passivity conditions one common impedance control architectures  namely velocity-sourced sea  this work particular importance drives non-conservative passivity bounds sea scheme first time allows larger selection control gains      air muscles     pneumatic artificial muscles also known air muscles  special tubes expand  typically      air forced inside them  they used robot applications      muscle wire     muscle wire  also known shape memory alloy  nitinol  flexinol  wire  material contracts      electricity applied  they used small robot applications      electroactive polymers     eaps epams plastic material contract substantially       activation strain  electricity  used facial muscles arms humanoid robots  enable new robots float  fly  swim walk      piezo motors     recent alternatives dc motors piezo motors ultrasonic motors  these work fundamentally different principle  whereby tiny piezoceramic elements  vibrating many thousands times per second  cause linear rotary motion  there different mechanisms operation  one type uses vibration piezo elements step motor circle straight line  another type uses piezo elements cause nut vibrate drive screw  the advantages motors nanometer resolution  speed  available force size  these motors already available commercially  used robots      elastic nanotubes     elastic nanotubes promising artificial muscle technology early-stage experimental development  the absence defects carbon nanotubes enables filaments deform elastically several percent  energy storage levels perhaps    j cm  metal nanotubes  human biceps could replaced   mm diameter wire material  such compact  muscle  might allow future robots outrun outjump humans     sensing    sensors allow robots receive information certain measurement environment  internal components  this essential robots perform tasks  act upon changes environment calculate appropriate response  they used various forms measurements  give robots warnings safety malfunctions  provide real-time information task performing      touch     current robotic prosthetic hands receive far less tactile information human hand  recent research developed tactile sensor array mimics mechanical properties touch receptors human fingertips  the sensor array constructed rigid core surrounded conductive fluid contained elastomeric skin  electrodes mounted surface rigid core connected impedance-measuring device within core  when artificial skin touches object fluid path around electrodes deformed  producing impedance changes map forces received object  the researchers expect important function artificial fingertips adjusting robotic grip held objects scientists several european countries israel developed prosthetic hand       called smarthand  functions like real one allowing patients write  type keyboard  play piano perform fine movements  the prosthesis sensors enable patient sense real feeling fingertips      vision     computer vision science technology machines see  as scientific discipline  computer vision concerned theory behind artificial systems extract information images  the image data take many forms  video sequences views cameras in practical computer vision applications  computers pre-programmed solve particular task  methods based learning becoming increasingly common computer vision systems rely image sensors detect electromagnetic radiation typically form either visible light infra-red light  the sensors designed using solid-state physics  the process light propagates reflects surfaces explained using optics  sophisticated image sensors even require quantum mechanics provide complete understanding image formation process  robots also equipped multiple vision sensors better able compute sense depth environment  like human eyes  robots   eyes  must also able focus particular area interest  also adjust variations light intensities there subfield within computer vision artificial systems designed mimic processing behavior biological system  different levels complexity  also  learning-based methods developed within computer vision background biology      other     other common forms sensing robotics use lidar  radar  sonar  lidar measures distance target illuminating target laser light measuring reflected light sensor  radar uses radio waves determine range  angle  velocity objects  sonar uses sound propagation navigate  communicate detect objects surface water     manipulation    a definition robotic manipulation provided matt mason   manipulation refers agent control environment selective contact  robots need manipulate objects  pick  modify  destroy  otherwise effect  thus functional end robot arm intended make effect  whether hand  tool  often referred end effectors   arm  referred manipulator  most robot arms replaceable end-effectors  allowing perform small range tasks  some fixed manipulator cannot replaced  one general purpose manipulator  example  humanoid hand      mechanical grippers     one common types end-effectors  grippers   in simplest manifestation  consists two fingers open close pick let go range small objects  fingers  example  made chain metal wire run it  hands resemble work like human hand include shadow hand robonaut hand  hands mid-level complexity include delft hand  mechanical grippers come various types  including friction encompassing jaws  friction jaws use force gripper hold object place using friction  encompassing jaws cradle object place  using less friction      suction end-effectors     suction end-effectors  powered vacuum generators  simple astrictive devices hold large loads provided prehension surface smooth enough ensure suction pick place robots electronic components large objects like car windscreens  often use simple vacuum end-effectors suction highly used type end-effector industry  part natural compliance soft suction end-effectors enable robot robust presence imperfect robotic perception   as example  consider case robot vision system estimates position water bottle    centimeter error   while may cause rigid mechanical gripper puncture water bottle  soft suction end-effector may bend slightly conform shape water bottle surface      general purpose effectors     some advanced robots beginning use fully humanoid hands  like shadow hand  manus  schunk hand  these highly dexterous manipulators  many    degrees freedom hundreds tactile sensors     locomotion         rolling robots     for simplicity  mobile robots four wheels number continuous tracks  some researchers tried create complex wheeled robots one two wheels  these certain advantages greater efficiency reduced parts  well allowing robot navigate confined places four-wheeled robot would able to       two-wheeled balancing robots      balancing robots generally use gyroscope detect much robot falling drive wheels proportionally direction  counterbalance fall hundreds times per second  based dynamics inverted pendulum  many different balancing robots designed  while segway commonly thought robot  thought component robot  used segway refer rmp  robotic mobility platform   an example use nasa robonaut mounted segway       one-wheeled balancing robots      a one-wheeled balancing robot extension two-wheeled balancing robot move  d direction using round ball wheel  several one-wheeled balancing robots designed recently  carnegie mellon university  ballbot  approximate height width person  tohoku gakuin university  ballip   because long  thin shape ability maneuver tight spaces  potential function better robots environments people       spherical orb robots      several attempts made robots completely inside spherical ball  either spinning weight inside ball  rotating outer shells sphere  these also referred orb bot ball bot       six-wheeled robots      using six wheels instead four wheels give better traction grip outdoor terrain rocky dirt grass       tracked robots      tank tracks provide even traction six-wheeled robot  tracked wheels behave made hundreds wheels  therefore common outdoor military robots  robot must drive rough terrain  however  difficult use indoors carpets smooth floors  examples include nasa urban robot  urbie       walking applied robots     walking difficult dynamic problem solve  several robots made walk reliably two legs  however  none yet made robust human  there much study human inspired walking  amber lab established      mechanical engineering department texas a m university  many robots built walk two legs  due robots significantly easier construct  walking robots used uneven terrains  would provide better mobility energy efficiency locomotion methods  typically  robots two legs walk well flat floors occasionally walk stairs  none walk rocky  uneven terrain  some methods tried       zmp technique      the zero moment point  zmp  algorithm used robots honda asimo  the robot onboard computer tries keep total inertial forces  combination earth gravity acceleration deceleration walking   exactly opposed floor reaction force  force floor pushing back robot foot   in way  two forces cancel  leaving moment  force causing robot rotate fall   however  exactly human walks  difference obvious human observers  pointed asimo walks needs lavatory  asimo walking algorithm static  dynamic balancing used  see   however  still requires smooth surface walk on       hopping      several robots  built     marc raibert mit leg laboratory  successfully demonstrated dynamic walking  initially  robot one leg  small foot could stay upright simply hopping  the movement person pogo stick  as robot falls one side  would jump slightly direction  order catch itself  soon  algorithm generalised two four legs  a bipedal robot demonstrated running even performing somersaults  a quadruped also demonstrated could trot  run  pace  bound  for full list robots  see mit leg lab robots page       dynamic balancing  controlled falling       a advanced way robot walk using dynamic balancing algorithm  potentially robust zero moment point technique  constantly monitors robot motion  places feet order maintain stability  this technique recently demonstrated anybots  dexter robot  stable  even jump  another example tu delft flame       passive dynamics      perhaps promising approach utilizes passive dynamics momentum swinging limbs used greater efficiency  it shown totally unpowered humanoid mechanisms walk gentle slope  using gravity propel themselves  using technique  robot need supply small amount motor power walk along flat surface little walk hill  this technique promises make walking robots least ten times efficient zmp walkers  like asimo      other methods locomotion           flying      a modern passenger airliner essentially flying robot  two humans manage it  the autopilot control plane stage journey  including takeoff  normal flight  even landing  other flying robots uninhabited known unmanned aerial vehicles  uavs   they smaller lighter without human pilot board  fly dangerous territory military surveillance missions  some even fire targets command  uavs also developed fire targets automatically  without need command human  other flying robots include cruise missiles  entomopter  epson micro helicopter robot  robots air penguin  air ray  air jelly lighter-than-air bodies  propelled paddles  guided sonar       snaking      several snake robots successfully developed  mimicking way real snakes move  robots navigate confined spaces  meaning may one day used search people trapped collapsed buildings  the japanese acm-r  snake robot even navigate land water       skating      a small number skating robots developed  one multi-mode walking skating device  it four legs  unpowered wheels  either step roll  another robot  plen  use miniature skateboard roller-skates  skate across desktop       climbing      several different approaches used develop robots ability climb vertical surfaces  one approach mimics movements human climber wall protrusions  adjusting center mass moving limb turn gain leverage  an example capuchin  built dr  ruixiang zhang stanford university  california  another approach uses specialized toe pad method wall-climbing geckoes  run smooth surfaces vertical glass  examples approach include wallbot stickybot china technology daily reported    november       dr  li hiu yeung research group new concept aircraft  zhuhai  co   ltd  successfully developed bionic gecko robot named  speedy freelander   according dr  yeung  gecko robot could rapidly climb variety building walls  navigate ground wall fissures  walk upside-down ceiling  it also able adapt surfaces smooth glass  rough  sticky dusty walls well various types metallic materials  it could also identify circumvent obstacles automatically  its flexibility speed comparable natural gecko  a third approach mimic motion snake climbing pole       swimming  piscine       it calculated swimming fish achieve propulsive efficiency greater      furthermore  accelerate maneuver far better man-made boat submarine  produce less noise water disturbance  therefore  many researchers studying underwater robots would like copy type locomotion  notable examples essex university computer science robotic fish g   robot tuna built institute field robotics  analyze mathematically model thunniform motion  the aqua penguin  designed built festo germany  copies streamlined shape propulsion front  flippers  penguins  festo also built aqua ray aqua jelly  emulate locomotion manta ray  jellyfish  respectively in      isplash-ii developed phd student richard james clapham prof  huosheng hu essex university  it first robotic fish capable outperforming real carangiform fish terms average maximum velocity  measured body lengths  second  endurance  duration top speed maintained  this build attained swimming speeds     bl  i e        the first build  isplash-i        first robotic platform apply full-body length carangiform swimming motion found increase swimming speed     traditional approach posterior confined waveform       sailing      sailboat robots also developed order make measurements surface ocean  a typical sailboat robot vaimos built ifremer ensta-bretagne  since propulsion sailboat robots uses wind  energy batteries used computer  communication actuators  tune rudder sail   if robot equipped solar panels  robot could theoretically navigate forever  the two main competitions sailboat robots wrsc  takes place every year europe  sailbot     environmental interaction navigation    though significant percentage robots commission today either human controlled operate static environment  increasing interest robots operate autonomously dynamic environment  these robots require combination navigation hardware software order traverse environment  in particular  unforeseen events  e g  people obstacles stationary  cause problems collisions  some highly advanced robots asimo mein  robot particularly good robot navigation hardware software  also  self-controlled cars  ernst dickmanns  driverless car  entries darpa grand challenge  capable sensing environment well subsequently making navigational decisions based information  including swarm autonomous robots  most robots employ gps navigation device waypoints  along radar  sometimes combined sensory data lidar  video cameras  inertial guidance systems better navigation waypoints     human-robot interaction    the state art sensory intelligence robots progress several orders magnitude want robots working homes go beyond vacuum-cleaning floors  if robots work effectively homes non-industrial environments  way instructed perform jobs  especially told stop critical importance  the people interact may little training robotics  interface need extremely intuitive  science fiction authors also typically assume robots eventually capable communicating humans speech  gestures  facial expressions  rather command-line interface  although speech would natural way human communicate  unnatural robot  it probably long time robots interact naturally fictional c- po  data star trek  next generation  even though current state robotics cannot meet standards robots science-fiction  robotic media characters  e g   wall-e  r -d   elicit audience sympathies increase people willingness accept actual robots future  acceptance social robots also likely increase people meet social robot appropriate conditions  studies shown interacting robot looking  touching  even imagining interacting robot reduce negative feelings people robots interacting them  however  pre-existing negative sentiments especially strong  interacting robot increase negative feelings towards robots      speech recognition     interpreting continuous flow sounds coming human  real time  difficult task computer  mostly great variability speech  the word  spoken person may sound different depending local acoustics  volume  previous word  whether speaker cold  etc   it becomes even harder speaker different accent  nevertheless  great strides made field since davis  biddulph  balashek designed first  voice input system  recognized  ten digits spoken single user      accuracy        currently  best systems recognize continuous  natural speech      words per minute  accuracy      with help artificial intelligence  machines nowadays use people voice identify emotions satisfied angry     robotic voice     other hurdles exist allowing robot use voice interacting humans  for social reasons  synthetic voice proves suboptimal communication medium  making necessary develop emotional component robotic voice various techniques  an advantage diphonic branching emotion robot programmed project  carried voice tape  phoneme  already pre-programmed onto voice media  one earliest examples teaching robot named leachim developed      michael j  freeman  leachim able convert digital memory rudimentary verbal speech pre-recorded computer discs  it programmed teach students the bronx  new york      gestures     one imagine  future  explaining robot chef make pastry  asking directions robot police officer  in cases  making hand gestures would aid verbal descriptions  in first case  robot would recognizing gestures made human  perhaps repeating confirmation  in second case  robot police officer would gesture indicate  road  turn right   it likely gestures make part interaction humans robots  a great many systems developed recognize human hand gestures      facial expression     facial expressions provide rapid feedback progress dialog two humans  soon may able humans robots  robotic faces constructed hanson robotics using elastic polymer called frubber  allowing large number facial expressions due elasticity rubber facial coating embedded subsurface motors  servos   the coating servos built metal skull  a robot know approach human  judging facial expression body language  whether person happy  frightened  crazy-looking affects type interaction expected robot  likewise  robots like kismet recent addition  nexi produce range facial expressions  allowing meaningful social exchanges humans      artificial emotions     artificial emotions also generated  composed sequence facial expressions gestures  as seen movie final fantasy  the spirits within  programming artificial emotions complex requires large amount human observation  to simplify programming movie  presets created together special software program  this decreased amount time needed make film  these presets could possibly transferred use real-life robots  an example robot artificial emotions robin robot developed armenian it company expper technologies  uses ai-based peer-to-peer interaction  its main task achieving emotional well-being  i e  overcome stress anxiety  robin trained analyze facial expressions use face display emotions given context  the robot tested kids us clinics  observations show robin increased appetite cheerfulness children meeting talking      personality     many robots science fiction personality  something may may desirable commercial robots future  nevertheless  researchers trying create robots appear personality  i e  use sounds  facial expressions  body language try convey internal state  may joy  sadness  fear  one commercial example pleo  toy robot dinosaur  exhibit several apparent emotions      social intelligence     the socially intelligent machines lab georgia institute technology researches new concepts guided teaching interaction robots  the aim projects social robot learns task goals human demonstrations without prior knowledge high-level concepts  these new concepts grounded low-level continuous sensor data unsupervised learning  task goals subsequently learned using bayesian approach  these concepts used transfer knowledge future tasks  resulting faster learning tasks  the results demonstrated robot curi scoop pasta pot onto plate serve sauce top    control   the mechanical structure robot must controlled perform tasks  the control robot involves three distinct phases   perception  processing  action  robotic paradigms   sensors give information environment robot  e g  position joints end effector   this information processed stored transmitted calculate appropriate signals actuators  motors  move mechanical the processing phase range complexity  at reactive level  may translate raw sensor information directly actuator commands  sensor fusion may first used estimate parameters interest  e g  position robot gripper  noisy sensor data  an immediate task  moving gripper certain direction  inferred estimates  techniques control theory convert task commands drive actuators at longer time scales sophisticated tasks  robot may need build reason  cognitive  model  cognitive models try represent robot  world  interact  pattern recognition computer vision used track objects  mapping techniques used build maps world  finally  motion planning artificial intelligence techniques may used figure act  for example  planner may figure achieve task without hitting obstacles  falling  etc     autonomy levels    control systems may also varying levels autonomy direct interaction used haptic teleoperated devices  human nearly complete control robot motion operator-assist modes operator commanding medium-to-high-level tasks  robot automatically figuring achieve them an autonomous robot may go without human interaction extended periods time   higher levels autonomy necessarily require complex cognitive capabilities  for example  robots assembly plants completely autonomous operate fixed pattern another classification takes account interaction human control machine motions teleoperation  a human controls movement  machine actuator change specified operator supervisory  a human specifies general moves position changes machine decides specific movements actuators task-level autonomy  the operator specifies task robot manages complete it full autonomy  the machine create complete tasks without human interaction    research   much research robotics focuses specific industrial tasks  investigations new types robots  alternative ways think design robots  new ways manufacture them  other investigations  mit cyberflora project  almost wholly academic a first particular new innovation robot design open sourcing robot-projects  to describe level advancement robot  term  generation robots  used  this term coined professor hans moravec  principal research scientist carnegie mellon university robotics institute describing near future evolution robot technology  first generation robots  moravec predicted       intellectual capacity comparable perhaps lizard become available       because first generation robot would incapable learning  however  moravec predicts second generation robot would improvement first become available       intelligence maybe comparable mouse  the third generation robot intelligence comparable monkey  though fourth generation robots  robots human intelligence  professor moravec predicts  would become possible  predict happening around           the second evolutionary robots  this methodology uses evolutionary computation help design robots  especially body form  motion behavior controllers  in similar way natural evolution  large population robots allowed compete way  ability perform task measured using fitness function  those perform worst removed population replaced new set  new behaviors based winners  over time population improves  eventually satisfactory robot may appear  this happens without direct programming robots researchers  researchers use method create better robots  explore nature evolution  because process often requires many generations robots simulated  technique may run entirely mostly simulation  using robot simulator software package  tested real robots evolved algorithms good enough  currently     million industrial robots toiling around world  japan top country high density utilizing robots manufacturing industry     dynamics kinematics    the study motion divided kinematics dynamics  direct kinematics forward kinematics refers calculation end effector position  orientation  velocity  acceleration corresponding joint values known  inverse kinematics refers opposite case required joint values calculated given end effector values  done path planning  some special aspects kinematics include handling redundancy  different possibilities performing movement   collision avoidance  singularity avoidance  once relevant positions  velocities  accelerations calculated using kinematics  methods field dynamics used study effect forces upon movements  direct dynamics refers calculation accelerations robot applied forces known  direct dynamics used computer simulations robot  inverse dynamics refers calculation actuator forces necessary create prescribed end-effector acceleration  this information used improve control algorithms robot in area mentioned  researchers strive develop new concepts strategies  improve existing ones  improve interaction areas  to  criteria  optimal  performance ways optimize design  structure  control robots must developed implemented     bionics biomimetics    bionics biomimetics apply physiology methods locomotion animals design robots   for example  design bionickangaroo based way kangaroos jump     quantum computing    there research whether robotics algorithms run quickly quantum computers run digital computers  this area referred quantum robotics    education training   robotics engineers design robots  maintain  develop new applications  conduct research expand potential robotics  robots become popular educational tool middle high schools  particularly parts usa  well numerous youth summer camps  raising interest programming  artificial intelligence  robotics among students     career training    universities  like worcester polytechnic institute  wpi  offer bachelors  masters  doctoral degrees field robotics  vocational schools offer robotics training aimed careers robotics     certification    the robotics certification standards alliance  rcsa  international robotics certification authority confers various industry- educational-related robotics certifications     summer robotics camp    several national summer camp programs include robotics part core curriculum  in addition  youth summer robotics programs frequently offered celebrated museums institutions     robotics competitions    there many competitions around globe  the seaperch curriculum aimed students ages  this short list competition examples  complete list see robot competition      competitions younger children     the first organization offers first lego league jr  competitions younger children  this competition goal offer younger children opportunity start learning science technology  children competition build lego models option using lego wedo robotics kit      competitions children ages  -       one important competitions fll first lego league  the idea specific competition kids start developing knowledge getting robotics playing lego since nine years old  this competition associated national instruments  children use lego mindstorms solve autonomous robotics challenges competition      competitions teenagers     the first tech challenge designed intermediate students  transition first lego league first robotics competition the first robotics competition focuses mechanical design  specific game played year  robots built specifically year game  in match play  robot moves autonomously first    seconds game  although certain years      deep space change rule   manually operated rest match      competitions older students     the various robocup competitions include teams teenagers university students   these competitions focus soccer competitions different types robots  dance competitions  urban search rescue competitions  all robots competitions must autonomous  some competitions focus simulated robots auvsi runs competitions flying robots  robot boats  underwater robots the student auv competition europe  sauc-e  mainly attracts undergraduate graduate student teams  as auvsi competitions  robots must fully autonomous participating competition the microtransat challenge competition sail boat across atlantic ocean      competitions open anyone     robogames open anyone wishing compete    categories robot competitions federation international robot-soccer association holds fira world cup competitions  there flying robot competitions  robot soccer competitions  challenges  including weightlifting barbells made dowels cds     robotics afterschool programs    many schools across country beginning add robotics programs school curriculum  some major programs afterschool robotics include first robotics competition  botball b e s t  robotics  robotics competitions often include aspects business marketing well engineering design the lego company began program children learn get excited robotics young age     decolonial educational robotics    decolonial educational robotics branch decolonial technology  decolonial a i   practiced various places around world  this methodology summarized pedagogical theories practices pedagogy oppressed montessori methods  and aims teaching robotics local culture  pluralize mix technological knowledge    employment   robotics essential component many modern manufacturing environments  as factories increase use robots  number robotics related jobs grow observed steadily rising  the employment robots industries increased productivity efficiency savings typically seen long-term investment benefactors  a paper michael osborne carl benedikt frey found    per cent us jobs risk automation  unspecified number years   these claims criticized ground social policy  ai  causes unemployment  in      article the guardian  stephen hawking stated  the automation factories already decimated jobs traditional manufacturing  rise artificial intelligence likely extend job destruction deep middle classes  caring  creative supervisory roles remaining  according globaldata september      report  robotics industry worth    bn             grown compound annual growth rate  cagr          bn  driving jobs robotics related industries    occupational safety health implications   a discussion paper drawn eu-osha highlights spread robotics presents opportunities challenges occupational safety health  osh  the greatest osh benefits stemming wider use robotics substitution people working unhealthy dangerous environments  in space  defence  security  nuclear industry  also logistics  maintenance  inspection  autonomous robots particularly useful replacing human workers performing dirty  dull unsafe tasks  thus avoiding workers  exposures hazardous agents conditions reducing physical  ergonomic psychosocial risks  for example  robots already used perform repetitive monotonous tasks  handle radioactive material work explosive atmospheres  in future  many highly repetitive  risky unpleasant tasks performed robots variety sectors like agriculture  construction  transport  healthcare  firefighting cleaning services despite advances  certain skills humans better suited machines time come question achieve best combination human robot skills  the advantages robotics include heavy-duty jobs precision repeatability  whereas advantages humans include creativity  decision-making  flexibility  adaptability  this need combine optimal skills resulted collaborative robots humans sharing common workspace closely led development new approaches standards guarantee safety  man-robot merger   some european countries including robotics national programmes trying promote safe flexible co-operation robots operators achieve better productivity  for example  german federal institute occupational safety health  baua  organises annual workshops topic  human-robot collaboration  in future  co-operation robots humans diversified  robots increasing autonomy human-robot collaboration reaching completely new forms  current approaches technical standards aiming protect employees risk working collaborative robots revised    see also      references      further reading   r  andrew russell         robot tactile sensing  new york  prentice hall  isbn    - -  -      -  e mcgaughey   will robots automate your job away  full employment  basic income  economic democracy         ssrn  part     dh autor   why are there still so many jobs  the history future workplace automation               journal economic perspectives  tooze  adam   democracy its discontents   the new york review books  vol  lxvi  no        june        pp                  democracy clear answer mindless operation bureaucratic technological power   we may indeed witnessing extension form artificial intelligence robotics   likewise  decades dire warning  environmental problem remains fundamentally unaddressed     bureaucratic overreach environmental catastrophe precisely kinds slow-moving existential challenges democracies deal badly     finally  threat du jour  corporations technologies promote     pp            external links   robotics curlieieee robotics automation societyinvestigation social robots   robots mimic human behaviors gestures wired guide     best robots ever   mix robots fiction  hal  r d   k   real robots  roomba  mobot  aibo  
a computer network set computers sharing resources located provided network nodes  the computers use common communication protocols digital interconnections communicate other  these interconnections made telecommunication network technologies  based physically wired  optical  wireless radio-frequency methods may arranged variety network topologies the nodes computer network may include personal computers  servers  networking hardware  specialised general-purpose hosts  they identified network addresses  may  hostnames  hostnames serve memorable labels nodes  rarely changed initial assignment  network addresses serve locating identifying nodes communication protocols internet protocol computer networks may classified many criteria  including transmission medium used carry signals   bandwidth  communications protocols organize network traffic  network size  topology  traffic control mechanism  organizational intent computer networks support many applications services  access world wide web  digital video  digital audio  shared use application storage servers  printers  fax machines  use email instant messaging applications    history   computer networking may considered branch computer science  computer engineering  telecommunications  since relies theoretical practical application related disciplines  computer networking influenced wide array technology developments historical milestones in late      network computers built u s  military semi-automatic ground environment  sage  radar system using bell     modem  it first commercial modem computers  released at t corporation       the modem allowed digital data transmitted regular unconditioned telephone lines speed     bits per second  bit  in       christopher strachey filed patent application time-sharing john mccarthy initiated first project implement time-sharing user programs mit  stratchey passed concept j  c  r  licklider inaugural unesco information processing conference paris year  mccarthy instrumental creation three earliest time-sharing systems  compatible time-sharing system       bbn time-sharing system       dartmouth time sharing system       in       anatoly kitov proposed central committee communist party soviet union detailed plan re-organisation control soviet armed forces soviet economy basis network computing centres in       commercial airline reservation system semi-automatic business research environment  sabre  went online two connected mainframes in       j  c  r  licklider sent memorandum office colleagues discussing concept  intergalactic computer network   computer network intended allow general communications among computer users throughout      paul baran donald davies independently developed concept packet switching transfer information computers network  davies pioneered implementation concept  the npl network  local area network national physical laboratory  united kingdom  used line speed     kbit later high-speed t  links        mbit line rate  in       western electric introduced first widely used telephone switch implemented computer control switching fabric in       first four nodes arpanet connected using    kbit circuits university california los angeles  stanford research institute  university california santa barbara  university utah  in early      leonard kleinrock carried mathematical work model performance packet-switched networks  underpinned development arpanet  his theoretical work hierarchical routing late     student farouk kamoun remains critical operation internet today in       commercial services first deployed public data networks europe  began using x    late     spread across globe  the underlying infrastructure used expanding tcp ip networks     s in       french cyclades network first make hosts responsible reliable delivery data  rather centralized service network itself in       robert metcalfe wrote formal memo xerox parc describing ethernet  networking system based aloha network  developed     norman abramson colleagues university hawaii  in july       robert metcalfe david boggs published paper  ethernet  distributed packet switching local computer networks  collaborated several patents received           in       vint cerf  yogen dalal  carl sunshine published transmission control protocol  tcp  specification  rfc      coining term internet shorthand internetworking in       john murphy datapoint corporation created arcnet  token-passing network first used share storage devices in       first long-distance fiber network deployed gte long beach  california in       xerox network systems  xns  developed robert metcalfe yogen dalal xerox in       robert metcalfe pursued making ethernet open standard in       ethernet upgraded original      mbit protocol    mbit protocol  developed ron crane  bob garner  roy ogus  yogen dalal in       transmission speed capacity ethernet increased    mbit     mbit s  by       ethernet supported transmission speeds   gbit s  subsequently  higher speeds     gbit added         the scaling ethernet contributing factor continued use    use   a computer network extends interpersonal communications electronic means various technologies  email  instant messaging  online chat  voice video telephone calls  video conferencing  a network allows sharing network computing resources  users may access use resources provided devices network  printing document shared network printer use shared storage device  a network allows sharing files  data  types information giving authorized users ability access information stored computers network  distributed computing uses computing resources across network accomplish tasks    network packet   most modern computer networks use protocols based packet-mode transmission  a network packet formatted unit data carried packet-switched network packets consist two types data  control information user data  payload   the control information provides data network needs deliver user data  example  source destination network addresses  error detection codes  sequencing information  typically  control information found packet headers trailers  payload data between with packets  bandwidth transmission medium better shared among users network circuit switched  when one user sending packets  link filled packets users  cost shared  relatively little interference  provided link overused  often route packet needs take network immediately available  in case  packet queued waits link free the physical link technologies packet network typically limit size packets certain maximum transmission unit  mtu   a longer message may fragmented transferred packets arrive  reassembled construct original message    network topology   network topology layout  pattern  organizational hierarchy interconnection network hosts  contrast physical geographic location  typically  diagrams describing networks arranged topology  the network topology affect throughput  reliability often critical  with many technologies  bus star networks  single failure cause network fail entirely  in general  interconnections  robust network  expensive install common layouts bus network  nodes connected common medium along medium  this layout used original ethernet  called   base    base   this still common topology data link layer  although modern physical layer variants use point-to-point links instead star network  nodes connected special central node  this typical layout found wireless lan  wireless client connects central wireless access point ring network  node connected left right neighbour node  nodes connected node reach node traversing nodes left- rightwards  the fiber distributed data interface  fddi  made use topology mesh network  node connected arbitrary number neighbours way least one traversal node other fully connected network  node connected every node network tree network  nodes arranged hierarchically the physical layout nodes network may necessarily reflect network topology  as example  fddi  network topology ring  physical topology often star  neighboring connections routed via central physical location  physical layout completely irrelevant  however  common ducting equipment locations represent single points failure due issues like fires  power failures flooding     overlay network    an overlay network virtual network built top another network  nodes overlay network connected virtual logical links   each link corresponds path  perhaps many physical links  underlying network  the topology overlay network may  often  differ underlying one  for example  many peer-to-peer networks overlay networks   they organized nodes virtual system links run top internet overlay networks around since invention networking computer systems connected telephone lines using modems data network existed the striking example overlay network internet itself  the internet initially built overlay telephone network  even today  internet node communicate virtually underlying mesh sub-networks wildly different topologies technologies  address resolution routing means allow mapping fully connected ip overlay network underlying network another example overlay network distributed hash table  maps keys nodes network  in case  underlying network ip network  overlay network table  actually map  indexed keys overlay networks also proposed way improve internet routing  quality service guarantees achieve higher-quality streaming media  previous proposals intserv  diffserv  ip multicast seen wide acceptance largely require modification routers network   on hand  overlay network incrementally deployed end-hosts running overlay protocol software  without cooperation internet service providers   the overlay network control packets routed underlying network two overlay nodes  control  example  sequence overlay nodes message traverses reaches destination for example  akamai technologies manages overlay network provides reliable  efficient content delivery  kind multicast    academic research includes end system multicast  resilient routing quality service studies  among others    network links   the transmission media  often referred literature physical medium  used link devices form computer network include electrical cable  optical fiber  free space  in osi model  software handle media defined layers       physical layer data link layer a widely adopted family uses copper fiber media local area network  lan  technology collectively known ethernet  the media protocol standards enable communication networked devices ethernet defined ieee         wireless lan standards use radio waves  others use infrared signals transmission medium  power line communication uses building power cabling transmit data     wired    the following classes wired technologies used computer networking coaxial cable widely used cable television systems  office buildings  work-sites local area networks  transmission speed ranges     million bits per second     million bits per second itu-t g hn technology uses existing home wiring  coaxial cable  phone lines power lines  create high-speed local area network twisted pair cabling used wired ethernet standards  it typically consists   pairs copper cabling utilized voice data transmission  the use two wires twisted together helps reduce crosstalk electromagnetic induction  the transmission speed ranges   mbit    gbit s  twisted pair cabling comes two forms  unshielded twisted pair  utp  shielded twisted-pair  stp   each form comes several category ratings  designed use various scenarios an optical fiber glass fiber  it carries pulses light represent data via lasers optical amplifiers  some advantages optical fibers metal wires low transmission loss immunity electrical interference  using dense wave division multiplexing  optical fibers simultaneously carry multiple streams data different wavelengths light  greatly increases rate data sent trillions bits per second  optic fibers used long runs cable carrying high data rates  used undersea cables interconnect continents  there two basic types fiber optics  single-mode optical fiber  smf  multi-mode optical fiber  mmf    single-mode fiber advantage able sustain coherent signal dozens even hundred kilometers  multimode fiber cheaper terminate limited hundred even dozens meters  depending data rate cable grade     wireless    network connections established wirelessly using radio electromagnetic means communication  terrestrial microwave   terrestrial microwave communication uses earth-based transmitters receivers resembling satellite dishes  terrestrial microwaves low gigahertz range  limits communications line-of-sight  relay stations spaced approximately    miles     km  apart communications satellites   satellites also communicate via microwave  the satellites stationed space  typically geosynchronous orbit        km         mi  equator  these earth-orbiting systems capable receiving relaying voice  data  tv signals cellular networks use several radio communications technologies  the systems divide region covered multiple geographic areas  each area served low-power transceiver radio spread spectrum technologies   wireless lans use high-frequency radio technology similar digital cellular  wireless lans use spread spectrum technology enable communication multiple devices limited area  ieee        defines common flavor open-standards wireless radio-wave technology known wi-fi free-space optical communication uses visible invisible light communications  in cases  line-of-sight propagation used  limits physical positioning communicating devices extending internet interplanetary dimensions via radio waves optical means  interplanetary internet ip avian carriers humorous april fool request comments  issued rfc       it implemented real life      the last two cases large round-trip delay time  gives slow two-way communication prevent sending large amounts information  high throughput     network nodes   apart physical transmission media  networks built additional basic system building blocks  network interface controllers  nics   repeaters  hubs  bridges  switches  routers  modems  firewalls  any particular piece equipment frequently contain multiple building blocks may perform multiple functions     network interfaces    a network interface controller  nic  computer hardware connects computer network media ability process low-level network information  for example  nic may connector accepting cable  aerial wireless transmission reception  associated circuitry in ethernet networks  network interface controller unique media access control  mac  address usually stored controller permanent memory  to avoid address conflicts network devices  institute electrical electronics engineers  ieee  maintains administers mac address uniqueness  the size ethernet mac address six octets  the three significant octets reserved identify nic manufacturers  these manufacturers  using assigned prefixes  uniquely assign three least-significant octets every ethernet interface produce     repeaters hubs    a repeater electronic device receives network signal  cleans unnecessary noise regenerates it  the signal retransmitted higher power level  side obstruction signal cover longer distances without degradation  in twisted pair ethernet configurations  repeaters required cable runs longer     meters  with fiber optics  repeaters tens even hundreds kilometers apart repeaters work physical layer osi model still require small amount time regenerate signal  this cause propagation delay affects network performance may affect proper function  as result  many network architectures limit number repeaters used network  e g   ethernet  - -  rule an ethernet repeater multiple ports known ethernet hub  in addition reconditioning distributing network signals  repeater hub assists collision detection fault isolation network  hubs repeaters lans largely obsoleted modern network switches     bridges switches    network bridges network switches distinct hub forward frames ports involved communication whereas hub forwards ports  bridges two ports switch thought multi-port bridge  switches normally numerous ports  facilitating star topology devices  cascading additional switches bridges switches operate data link layer  layer    osi model bridge traffic two network segments form single local network  both devices forward frames data ports based destination mac address frame they learn association physical ports mac addresses examining source addresses received frames forward frame necessary  if unknown destination mac targeted  device broadcasts request ports except source  discovers location reply bridges switches divide network collision domain maintain single broadcast domain  network segmentation bridging switching helps break large  congested network aggregation smaller  efficient networks     routers    a router internetworking device forwards packets networks processing addressing routing information included packet   the routing information often processed conjunction routing table   a router uses routing table determine forward packets require broadcasting packets inefficient big networks     modems    modems  modulator-demodulator  used connect network nodes via wire originally designed digital network traffic  wireless  to one carrier signals modulated digital signal produce analog signal tailored give required properties transmission  early modems modulated audio signals sent standard voice telephone line  modems still commonly used telephone lines  using digital subscriber line technology cable television systems using docsis technology     firewalls    a firewall network device software controlling network security access rules  firewalls inserted connections secure internal networks potentially insecure external networks internet  firewalls typically configured reject access requests unrecognized sources allowing actions recognized ones  the vital role firewalls play network security grows parallel constant increase cyber attacks    communication protocols   a communication protocol set rules exchanging information network  communication protocols various characteristics   they may connection-oriented connectionless  may use circuit mode packet switching  may use hierarchical addressing flat addressing in protocol stack  often constructed per osi model  communications functions divided protocol layers  layer leverages services layer lowest layer controls hardware sends information across media  the use protocol layering ubiquitous across field computer networking  an important example protocol stack http  world wide web protocol  running tcp ip  internet protocols  ieee         wi-fi protocol   this stack used wireless router home user personal computer user surfing web there many communication protocols  described below     common protocols         internet protocol suite     the internet protocol suite  also called tcp ip  foundation modern networking  it offers connection-less connection-oriented services inherently unreliable network traversed datagram transmission using internet protocol  ip   at core  protocol suite defines addressing  identification  routing specifications internet protocol version    ipv   ipv   next generation protocol much enlarged addressing capability  the internet protocol suite defining set protocols internet      ieee         ieee     family ieee standards dealing local area networks metropolitan area networks  the complete ieee     protocol suite provides diverse set networking capabilities  the protocols flat addressing scheme  they operate mostly layers     osi model for example  mac bridging  ieee      d  deals routing ethernet packets using spanning tree protocol  ieee      q describes vlans  ieee      x defines port-based network access control protocol  forms basis authentication mechanisms used vlans  also found wlans    home user sees user enter  wireless access key        ethernet      ethernet family technologies used wired lans  it described set standards together called ieee       published institute electrical electronics engineers       wireless lan      wireless lan based ieee        standards  also widely known wlan wifi  probably well-known member ieee     protocol family home users today  ieee        shares many properties wired ethernet      sonet sdh     synchronous optical networking  sonet  synchronous digital hierarchy  sdh  standardized multiplexing protocols transfer multiple digital bit streams optical fiber using lasers  they originally designed transport circuit mode communications variety different sources  primarily support real-time  uncompressed  circuit-switched voice encoded pcm  pulse-code modulation  format  however  due protocol neutrality transport-oriented features  sonet sdh also obvious choice transporting asynchronous transfer mode  atm  frames      asynchronous transfer mode     asynchronous transfer mode  atm  switching technique telecommunication networks   it uses asynchronous time-division multiplexing encodes data small  fixed-sized cells  this differs protocols internet protocol suite ethernet use variable sized packets frames  atm similarities circuit packet switched networking   this makes good choice network must handle traditional high-throughput data traffic  real-time  low-latency content voice video  atm uses connection-oriented model virtual circuit must established two endpoints actual data exchange begins while role atm diminishing favor next-generation networks  still plays role last mile  connection internet service provider home user      cellular standards     there number different digital cellular standards  including  global system mobile communications  gsm   general packet radio service  gprs   cdmaone  cdma      evolution-data optimized  ev-do   enhanced data rates gsm evolution  edge   universal mobile telecommunications system  umts   digital enhanced cordless telecommunications  dect   digital amps  is-    tdma   integrated digital enhanced network  iden      routing    routing process selecting network paths carry network traffic  routing performed many kinds networks  including circuit switching networks packet switched networks in packet-switched networks  routing protocols direct packet forwarding  transit logically addressed network packets source toward ultimate destination   intermediate nodes  intermediate nodes typically network hardware devices routers  bridges  gateways  firewalls  switches  general-purpose computers also forward packets perform routing  though specialized hardware may suffer limited performance  the routing process usually directs forwarding basis routing tables  maintain record routes various network destinations  thus  constructing routing tables  held router memory  important efficient routing there usually multiple routes taken  choose  different elements considered decide routes get installed routing table   sorted priority  prefix-length  longer subnet masks preferred  independent within routing protocol different routing protocol metric  lower metric cost preferred  valid within one routing protocol administrative distance  lower distance preferred  valid different routing protocols most routing algorithms use one network path time  multipath routing techniques enable use multiple alternative paths routing  narrow sense term  often contrasted bridging assumption network addresses structured similar addresses imply proximity within network  structured addresses allow single routing table entry represent route group devices   in large networks  structured addressing  routing  narrow sense  outperforms unstructured addressing  bridging   routing become dominant form addressing internet  bridging still widely used within localized environments    geographic scale   networks may characterized many properties features  physical capacity  organizational purpose  user authorization  access rights  others  another distinct classification method physical extent geographic scale nanoscale networka nanoscale communication network key components implemented nanoscale including message carriers leverages physical principles differ macroscale communication mechanisms  nanoscale communication extends communication small sensors actuators found biological systems also tends operate environments would harsh classical communication personal area networka personal area network  pan  computer network used communication among computers different information technological devices close one person  some examples devices used pan personal computers  printers  fax machines  telephones  pdas  scanners  even video game consoles  a pan may include wired wireless devices  the reach pan typically extends    meters  a wired pan usually constructed usb firewire connections technologies bluetooth infrared communication typically form wireless pan local area networka local area network  lan  network connects computers devices limited geographical area home  school  office building  closely positioned group buildings  each computer device network node   wired lans likely based ethernet technology   newer standards itu-t g hn also provide way create wired lan using existing wiring  coaxial cables  telephone lines  power lines the defining characteristics lan  contrast wide area network  wan   include higher data transfer rates  limited geographic range  lack reliance leased lines provide connectivity  current ethernet ieee       lan technologies operate data transfer rates     gbit  standardized ieee       currently      gbit ethernet developed a lan connected wan using router home area networka home area network  han  residential lan used communication digital devices typically deployed home  usually small number personal computers accessories  printers mobile computing devices  an important function sharing internet access  often broadband service cable tv digital subscriber line  dsl  provider storage area networka storage area network  san  dedicated network provides access consolidated  block-level data storage  sans primarily used make storage devices  disk arrays  tape libraries  optical jukeboxes  accessible servers devices appear like locally attached devices operating system  a san typically network storage devices generally accessible local area network devices  the cost complexity sans dropped early     levels allowing wider adoption across enterprise small medium-sized business environments campus area networka campus area network  can  made interconnection lans within limited geographical area  the networking equipment  switches  routers  transmission media  optical fiber  copper plant  cat  cabling  etc   almost entirely owned campus tenant owner  enterprise  university  government  etc   for example  university campus network likely link variety campus buildings connect academic colleges departments  library  student residence halls backbone networka backbone network part computer network infrastructure provides path exchange information different lans subnetworks   a backbone tie together diverse networks within building  across different buildings  wide area for example  large company might implement backbone network connect departments located around world  the equipment ties together departmental networks constitutes network backbone   when designing network backbone  network performance network congestion critical factors take account   normally  backbone network capacity greater individual networks connected it another example backbone network internet backbone  massive  global system fiber-optic cable optical networking carry bulk data wide area networks  wans   metro  regional  national transoceanic networks metropolitan area networka metropolitan area network  man  large computer network usually spans city large campus wide area networka wide area network  wan  computer network covers large geographic area city  country  spans even intercontinental distances   a wan uses communications channel combines many types media telephone lines  cables  airwaves  a wan often makes use transmission facilities provided common carriers  telephone companies  wan technologies generally function lower three layers osi reference model  physical layer  data link layer  network layer enterprise private networkan enterprise private network network single organization builds interconnect office locations  e g   production sites  head offices  remote offices  shops  share computer resources virtual private networka virtual private network  vpn  overlay network links nodes carried open connections virtual circuits larger network  e g   internet  instead physical wires  the data link layer protocols virtual network said tunneled larger network case  one common application secure communications public internet  vpn need explicit security features  authentication content encryption  vpns  example  used separate traffic different user communities underlying network strong security features vpn may best-effort performance may defined service level agreement  sla  vpn customer vpn service provider  generally  vpn topology complex point-to-point global area networka global area network  gan  network used supporting mobile across arbitrary number wireless lans  satellite coverage areas  etc  the key challenge mobile communications handing user communications one local coverage area next  in ieee project      involves succession terrestrial wireless lans    organizational scope   networks typically managed organizations them  private enterprise networks may use combination intranets extranets  they may also provide network access internet  single owner permits virtually unlimited global connectivity     intranet    an intranet set networks control single administrative entity   the intranet uses ip protocol ip-based tools web browsers file transfer applications  the administrative entity limits use intranet authorized users  most commonly  intranet internal lan organization  a large intranet typically least one web server provide users organizational information  an intranet also anything behind router local area network     extranet    an extranet network also administrative control single organization supports limited connection specific external network   for example  organization may provide access aspects intranet share data business partners customers   these entities necessarily trusted security standpoint   network connection extranet often  always  implemented via wan technology     internet    an internetwork connection multiple different types computer networks form single computer network layering top different networking software connecting together using routers the internet largest example internetwork  it global system interconnected governmental  academic  corporate  public  private computer networks  it based networking technologies internet protocol suite  it successor advanced research projects agency network  arpanet  developed darpa united states department defense  the internet utilizes copper communications optical networking backbone enable world wide web  www   internet things  video transfer  broad range information services participants internet use diverse array methods several hundred documented  often standardized  protocols compatible internet protocol suite addressing system  ip addresses  administered internet assigned numbers authority address registries  service providers large enterprises exchange information reachability address spaces border gateway protocol  bgp   forming redundant worldwide mesh transmission paths     darknet    a darknet overlay network  typically running internet  accessible specialized software  a darknet anonymizing network connections made trusted peers   sometimes called  friends   f f    using non-standard protocols ports darknets distinct distributed peer-to-peer networks sharing anonymous   ip addresses publicly shared   therefore users communicate little fear governmental corporate interference    network service   network services applications hosted servers computer network  provide functionality members users network  help network operate the world wide web  e-mail  printing network file sharing examples well-known network services  network services dns  domain name system  give names ip mac addresses  people remember names like  nm lan  better numbers like                   dhcp ensure equipment network valid ip address services usually based service protocol defines format sequencing messages clients servers network service    network performance       bandwidth    bandwidth bit may refer consumed bandwidth  corresponding achieved throughput goodput  i e   average rate successful data transfer communication path  the throughput affected technologies bandwidth shaping  bandwidth management  bandwidth throttling  bandwidth cap  bandwidth allocation  example bandwidth allocation protocol dynamic bandwidth allocation   etc  a bit stream bandwidth  proportional average consumed signal bandwidth hertz  average spectral bandwidth analog signal representing bit stream  studied time interval     network delay    network delay design performance characteristic telecommunications network  it specifies latency bit data travel across network one communication endpoint another  it typically measured multiples fractions second  delay may differ slightly  depending location specific pair communicating endpoints  engineers usually report maximum average delay  divide delay several parts processing delay    time takes router process packet headerqueuing delay    time packet spends routing queuestransmission delay    time takes push packet bits onto linkpropagation delay    time signal propagate mediaa certain minimum level delay experienced signals due time takes transmit packet serially link  this delay extended variable levels delay due network congestion  ip network delays range milliseconds several hundred milliseconds     quality service    depending installation requirements  network performance usually measured quality service telecommunications product  the parameters affect typically include throughput  jitter  bit error rate latency the following list gives examples network performance measures circuit-switched network one type packet-switched network  viz  atm circuit-switched networks  in circuit switched networks  network performance synonymous grade service  the number rejected calls measure well network performing heavy traffic loads  other types performance measures include level noise echo atm  in asynchronous transfer mode  atm  network  performance measured line rate  quality service  qos   data throughput  connect time  stability  technology  modulation technique  modem enhancements there many ways measure performance network  network different nature design  performance also modeled instead measured  for example  state transition diagrams often used model queuing performance circuit-switched network  the network planner uses diagrams analyze network performs state  ensuring network optimally designed     network congestion    network congestion occurs link node subjected greater data load rated  resulting deterioration quality service  when networks congested queues become full  packets discarded  networks rely re-transmission  typical effects congestion include queueing delay  packet loss blocking new connections   a consequence latter two incremental increases offered load lead either small increase network throughput reduction network throughput network protocols use aggressive retransmissions compensate packet loss tend keep systems state network congestion even initial load reduced level would normally induce network congestion  thus  networks using protocols exhibit two stable states level load  the stable state low throughput known congestive collapse modern networks use congestion control  congestion avoidance traffic control techniques try avoid congestion collapse  i e  endpoints typically slow sometimes even stop transmission entirely network congested   these techniques include  exponential backoff protocols        csma ca original ethernet  window reduction tcp  fair queueing devices routers  another method avoid negative effects network congestion implementing priority schemes packets transmitted higher priority others  priority schemes solve network congestion  help alleviate effects congestion services  an example      p  a third method avoid network congestion explicit allocation network resources specific flows  one example use contention-free transmission opportunities  cftxops  itu-t g hn standard  provides high-speed    gbit  local area networking existing home wires  power lines  phone lines coaxial cables  for internet  rfc      addresses subject congestion control detail     network resilience    network resilience  ability provide maintain acceptable level service face faults challenges normal operation     security   computer networks also used security hackers deploy computer viruses computer worms devices connected network  prevent devices accessing network via denial-of-service attack     network security    network security consists provisions policies adopted network administrator prevent monitor unauthorized access  misuse  modification  denial computer network network-accessible resources  network security authorization access data network  controlled network administrator  users assigned id password allows access information programs within authority   network security used variety computer networks  public private  secure daily transactions communications among businesses  government agencies  individuals     network surveillance    network surveillance monitoring data transferred computer networks internet  the monitoring often done surreptitiously may done behest governments  corporations  criminal organizations  individuals  it may may legal may may require authorization court independent agency computer network surveillance programs widespread today  almost internet traffic could potentially monitored clues illegal activity surveillance useful governments law enforcement maintain social control  recognize monitor threats  prevent investigate criminal activity  with advent programs total information awareness program  technologies high-speed surveillance computers biometrics software  laws communications assistance for law enforcement act  governments possess unprecedented ability monitor activities citizens however  many civil rights privacy groups reporters without borders  electronic frontier foundation  american civil liberties union expressed concern increasing surveillance citizens may lead mass surveillance society  limited political personal freedoms  fears led numerous lawsuits hepting v  at t  the hacktivist group anonymous hacked government websites protest considers  draconian surveillance      end end encryption    end-to-end encryption  e ee  digital communications paradigm uninterrupted protection data traveling two communicating parties  it involves originating party encrypting data intended recipient decrypt  dependency third parties  end-to-end encryption prevents intermediaries  internet providers application service providers  discovering tampering communications  end-to-end encryption generally protects confidentiality integrity examples end-to-end encryption include https web traffic  pgp email  otr instant messaging  zrtp telephony  tetra radio typical server-based communications systems include end-to-end encryption  these systems guarantee protection communications clients servers  communicating parties themselves  examples non-e ee systems google talk  yahoo messenger  facebook  dropbox  some systems  example  lavabit secretink  even described offering  end-to-end  encryption not  some systems normally offer end-to-end encryption turned contain back door subverts negotiation encryption key communicating parties  example skype hushmail the end-to-end encryption paradigm directly address risks endpoints communication  technical exploitation clients  poor quality random number generators  key escrow  e ee also address traffic analysis  relates things identities endpoints times quantities messages sent     ssl tls    the introduction rapid growth e-commerce world wide web mid-    made obvious form authentication encryption needed  netscape took first shot new standard  at time  dominant web browser netscape navigator  netscape created standard called secure socket layer  ssl   ssl requires server certificate  when client requests access ssl-secured server  server sends copy certificate client  the ssl client checks certificate  web browsers come exhaustive list ca root certificates preloaded   certificate checks  server authenticated client negotiates symmetric-key cipher use session  the session secure encrypted tunnel ssl server ssl client    views networks   users network administrators typically different views networks  users share printers servers workgroup  usually means geographic location lan  whereas network administrator responsible keep network running   a community interest less connection local area thought set arbitrarily located users share set servers  possibly also communicate via peer-to-peer technologies network administrators see networks physical logical perspectives  the physical perspective involves geographic locations  physical cabling  network elements  e g   routers  bridges application layer gateways  interconnect via transmission media  logical networks  called  tcp ip architecture  subnets  map onto one transmission media  for example  common practice campus buildings make set lan cables building appear common subnet  using  virtual lan  vlan  technology both users administrators aware  varying extents  trust scope characteristics network  again using tcp ip architectural terminology  intranet community interest private administration usually enterprise  accessible authorized users  e g  employees    intranets connected internet  generally limited connection   an extranet extension intranet allows secure communications users outside intranet  e g  business partners  customers  unofficially  internet set users  enterprises  content providers interconnected internet service providers  isp   from engineering viewpoint  internet set subnets  aggregates subnets  share registered ip address space exchange information reachability ip addresses using border gateway protocol  typically  human-readable names servers translated ip addresses  transparently users  via directory function domain name system  dns  over internet   business-to-business  b b    business-to-consumer  b c  consumer-to-consumer  c c  communications  when money sensitive information exchanged  communications apt protected form communications security mechanism   intranets extranets securely superimposed onto internet  without access general internet users administrators  using secure virtual private network  vpn  technology    journals newsletters   open computer science  open access journal    see also   comparison network diagram softwarecyberspacehistory internetinformation ageinformation revolutioniso iec         international standard electrical optical cablesminimum-pairs protocolnetwork simulationnetwork planning designnetwork traffic control   references    this article incorporates public domain material general services administration document   federal standard     c     further reading   shelly  gary  et al   discovering computers       edition wendell odom  rus healy  denise donohue         ccie routing switching  indianapolis  in  cisco presskurose james f keith w  ross  computer networking  a top-down approach featuring internet  pearson education      william stallings  computer networking internet protocols technology  pearson education      important publications computer networksnetwork communication architecture protocols  osi network architecture   layers modeldimitri bertsekas  robert gallager   data networks   prentice hall          external links   networking curlieieee ethernet manufacturer informationa computer networking acronym guide
in information theory coding theory applications computer science telecommunication  error detection correction error control techniques enable reliable delivery digital data unreliable communication channels  many communication channels subject channel noise  thus errors may introduced transmission source receiver  error detection techniques allow detecting errors  error correction enables reconstruction original data many cases    definitions   error detection  detection errors caused noise impairments transmission transmitter receiver  error correction detection errors reconstruction original  error-free data    history   in classical antiquity  copyists hebrew bible paid work according number stichs  lines verse   as prose books bible hardly ever written stichs  copyists  order estimate amount work  count letters  this also helped ensure accuracy transmission text production subsequent copies  between  th   th centuries ce group jewish scribes formalized expanded create numerical masorah ensure accurate reproduction sacred text  it included counts number words line  section  book groups books  noting middle stich book  word use statistics  commentary  standards became deviation even single letter torah scroll considered unacceptable  the effectiveness error correction method verified accuracy copying centuries demonstrated discovery dead sea scrolls     -      dating c     bce-   ce the modern development error correction codes credited richard hamming       a description hamming code appeared claude shannon a mathematical theory communication quickly generalized marcel j  e  golay    introduction   all error-detection correction schemes add redundancy  i e   extra data  message  receivers use check consistency delivered message  recover data determined corrupted  error-detection correction schemes either systematic non-systematic  in systematic scheme  transmitter sends original data  attaches fixed number check bits  parity data   derived data bits deterministic algorithm  if error detection required  receiver simply apply algorithm received data bits compare output received check bits  values match  error occurred point transmission  in system uses non-systematic code  original message transformed encoded message carrying information least many bits original message good error control performance requires scheme selected based characteristics communication channel  common channel models include memoryless models errors occur randomly certain probability  dynamic models errors occur primarily bursts  consequently  error-detecting correcting codes generally distinguished random-error-detecting correcting burst-error-detecting correcting  some codes also suitable mixture random errors burst errors if channel characteristics cannot determined  highly variable  error-detection scheme may combined system retransmissions erroneous data  this known automatic repeat request  arq   notably used internet  an alternate approach error control hybrid automatic repeat request  harq   combination arq error-correction coding    types error correction   there three major types error correction     automatic repeat request  arq     automatic repeat request  arq  error control method data transmission makes use error-detection codes  acknowledgment negative acknowledgment messages  timeouts achieve reliable data transmission  an acknowledgment message sent receiver indicate correctly received data frame usually  transmitter receive acknowledgment timeout occurs  i e   within reasonable amount time sending data frame   retransmits frame either correctly received error persists beyond predetermined number retransmissions three types arq protocols stop-and-wait arq  go-back-n arq  selective repeat arq arq appropriate communication channel varying unknown capacity  case internet  however  arq requires availability back channel  results possibly increased latency due retransmissions  requires maintenance buffers timers retransmissions  case network congestion put strain server overall network capacity for example  arq used shortwave radio data links form arq-e  combined multiplexing arq-m     forward  error correction    forward error correction  fec  process adding redundant data error-correcting code  ecc  message recovered receiver even number errors  capability code used  introduced  either process transmission  storage  since receiver ask sender retransmission data  backchannel required forward error correction  therefore suitable simplex communication broadcasting  error-correcting codes frequently used lower-layer communication  well reliable storage media cds  dvds  hard disks  ram error-correcting codes usually distinguished convolutional codes block codes convolutional codes processed bit-by-bit basis  they particularly suitable implementation hardware  viterbi decoder allows optimal decoding block codes processed block-by-block basis  early examples block codes repetition codes  hamming codes multidimensional parity-check codes  they followed number efficient codes  reed solomon codes notable due current widespread use  turbo codes low-density parity-check codes  ldpc  relatively new constructions provide almost optimal efficiency shannon theorem important theorem forward error correction  describes maximum information rate reliable communication possible channel certain error probability signal-to-noise ratio  snr   this strict upper limit expressed terms channel capacity  more specifically  theorem says exist codes increasing encoding length probability error discrete memoryless channel made arbitrarily small  provided code rate smaller channel capacity  the code rate defined fraction k n k source symbols n encoded symbols the actual maximum code rate allowed depends error-correcting code used  may lower  this shannon proof existential nature  show construct codes optimal efficient encoding decoding algorithms     hybrid schemes    hybrid arq combination arq forward error correction  there two basic approaches messages always transmitted fec parity data  error-detection redundancy   a receiver decodes message using parity information  requests retransmission using arq parity data sufficient successful decoding  identified failed integrity check  messages transmitted without parity data  error-detection information   if receiver detects error  requests fec information transmitter using arq  uses reconstruct original message the latter approach particularly attractive erasure channel using rateless erasure code    error detection schemes   error detection commonly realized using suitable hash function  specifically  checksum  cyclic redundancy check algorithm   a hash function adds fixed-length tag message  enables receivers verify delivered message recomputing tag comparing one provided there exists vast variety different hash function designs  however  particularly widespread use either simplicity suitability detecting certain kinds errors  e g   cyclic redundancy check performance detecting burst errors      minimum distance coding    a random-error-correcting code based minimum distance coding provide strict guarantee number detectable errors  may protect preimage attack     repetition codes    a repetition code coding scheme repeats bits across channel achieve error-free communication  given stream data transmitted  data divided blocks bits  each block transmitted predetermined number times  for example  send bit pattern         four-bit block repeated three times  thus producing                   if twelve-bit pattern received                    first block unlike two   error occurred a repetition code inefficient  susceptible problems error occurs exactly place group  e g                    previous example would detected correct   the advantage repetition codes extremely simple  fact used transmissions numbers stations     parity bit    a parity bit bit added group source bits ensure number set bits  i e   bits value    outcome even odd  it simple scheme used detect single odd number  i e   three  five  etc   errors output  an even number flipped bits make parity bit appear correct even though data erroneous parity bits added  word  sent called transverse redundancy checks  added end stream  words  called longitudinal redundancy checks   for example  series m-bit  words  parity bit added  showing whether odd even number ones word  word single error detected  it known word error  however  if  addition  stream n words parity sum sent  bit shows whether odd even number ones bit-position sent recent group  exact position error determined error corrected  this method guaranteed effective  however    error every group n words   with error correction bits  errors detected cases corrected there also bit-grouping techniques     checksum    a checksum message modular arithmetic sum message code words fixed word length  e g   byte values   the sum may negated means ones -complement operation prior transmission detect unintentional all-zero messages checksum schemes include parity bits  check digits  longitudinal redundancy checks  some checksum schemes  damm algorithm  luhn algorithm  verhoeff algorithm  specifically designed detect errors commonly introduced humans writing remembering identification numbers     cyclic redundancy check    a cyclic redundancy check  crc  non-secure hash function designed detect accidental changes digital data computer networks  it suitable detecting maliciously introduced errors  it characterized specification generator polynomial  used divisor polynomial long division finite field  taking input data dividend  the remainder becomes result a crc properties make well suited detecting burst errors  crcs particularly easy implement hardware therefore commonly used computer networks storage devices hard disk drives the parity bit seen special-case  -bit crc     cryptographic hash function    the output cryptographic hash function  also known message digest  provide strong assurances data integrity  whether changes data accidental  e g   due transmission errors  maliciously introduced  any modification data likely detected mismatching hash value  furthermore  given hash value  typically infeasible find input data  one given  yield hash value  if attacker change message also hash value  keyed hash message authentication code  mac  used additional security  without knowing key  possible attacker easily conveniently calculate correct keyed hash value modified message     error correction code    any error-correcting code used error detection  a code minimum hamming distance   detect     errors code word  using minimum-distance-based error-correcting codes error detection suitable strict limit minimum number errors detected desired codes minimum hamming distance     degenerate cases error-correcting codes  used detect single errors  the parity bit example single-error-detecting code    applications   applications require low latency  telephone conversations  cannot use automatic repeat request  arq   must use forward error correction  fec   by time arq system discovers error re-transmits  re-sent data arrive late usable applications transmitter immediately forgets information soon sent  television cameras  cannot use arq  must use fec error occurs  original data longer available applications use arq must return channel  applications return channel cannot use arq applications require extremely low error rates  digital money transfers  must use arq due possibility uncorrectable errors fec reliability inspection engineering also make use theory error-correcting codes     internet    in typical tcp ip stack  error control performed multiple levels each ethernet frame uses crc-   error detection  frames detected errors discarded receiver hardware the ipv  header contains checksum protecting contents header  packets incorrect checksums dropped within network receiver the checksum omitted ipv  header order minimize processing costs network routing current link layer technology assumed provide sufficient error detection  see also rfc       udp optional checksum covering payload addressing information udp ip headers  packets incorrect checksums discarded network stack  the checksum optional ipv   required ipv   when omitted  assumed data-link layer provides desired level error protection tcp provides checksum protecting payload addressing information tcp ip headers  packets incorrect checksums discarded network stack  eventually get retransmitted using arq  either explicitly  three-way handshake  implicitly due timeout     deep-space telecommunications    the development error-correction codes tightly coupled history deep-space missions due extreme dilution signal power interplanetary distances  limited power availability aboard space probes  whereas early missions sent data uncoded  starting       digital error correction implemented form  sub-optimally decoded  convolutional codes reed muller codes  the reed muller code well suited noise spacecraft subject  approximately matching bell curve   implemented mariner spacecraft used missions           the voyager   voyager   missions  started       designed deliver color imaging scientific information jupiter saturn  this resulted increased coding requirements  thus  spacecraft supported  optimally viterbi-decoded  convolutional codes could concatenated outer golay           code  the voyager   craft additionally supported implementation reed solomon code  the concatenated reed solomon viterbi  rsv  code allowed powerful error correction  enabled spacecraft extended journey uranus neptune  after ecc system upgrades       crafts used v  rsv coding the consultative committee space data systems currently recommends usage error correction codes performance similar voyager   rsv code minimum  concatenated codes increasingly falling favor space missions  replaced powerful codes turbo codes ldpc codes the different kinds deep space orbital missions conducted suggest trying find one-size-fits-all error correction system ongoing problem  for missions close earth  nature noise communication channel different spacecraft interplanetary mission experiences  additionally  spacecraft increases distance earth  problem correcting noise becomes difficult     satellite broadcasting    the demand satellite transponder bandwidth continues grow  fueled desire deliver television  including new channels high-definition television  ip data  transponder availability bandwidth constraints limited growth  transponder capacity determined selected modulation scheme proportion capacity consumed fec     data storage    error detection correction codes often used improve reliability data storage media   a parity track capable detecting single-bit errors present first magnetic tape data storage       the optimal rectangular code used group coded recording tapes detects also corrects single-bit errors  some file formats  particularly archive formats  include checksum  often crc    detect corruption truncation employ redundancy parity files recover portions corrupted data  reed-solomon codes used compact discs correct errors caused scratches modern hard drives use reed solomon codes detect correct minor errors sector reads  recover corrupted data failing sectors store data spare sectors  raid systems use variety error correction techniques recover data hard drive completely fails   filesystems zfs btrfs  well raid implementations  support data scrubbing resilvering  allows bad blocks detected  hopefully  recovered used  the recovered data may re-written exactly physical location  spare blocks elsewhere piece hardware  data may rewritten onto replacement hardware     error-correcting memory    dynamic random-access memory  dram  may provide stronger protection soft errors relying error-correcting codes  such error-correcting memory  known ecc edac-protected memory  particularly desirable mission-critical applications  scientific computing  financial  medical  etc  well extraterrestrial applications due increased radiation space error-correcting memory controllers traditionally use hamming codes  although use triple modular redundancy  interleaving allows distributing effect single cosmic ray potentially upsetting multiple physically neighboring bits across multiple words associating neighboring bits different words  as long single-event upset  seu  exceed error threshold  e g   single error  particular word accesses  corrected  e g   single-bit error-correcting code   illusion error-free memory system may maintained in addition hardware providing features required ecc memory operate  operating systems usually contain related reporting facilities used provide notifications soft errors transparently recovered  one example linux kernel edac subsystem  previously known bluesmoke   collects data error-checking-enabled components inside computer system  besides collecting reporting back events related ecc memory  also supports checksumming errors  including detected pci bus  a systems also support memory scrubbing catch correct errors early become unrecoverable    see also   berger codeburst error-correcting codeecc memory  type computer data storagelink adaptationlist algorithms   error detection correctionlist hash functions   references      further reading   shu lin  daniel j  costello  jr          error control coding  fundamentals applications  prentice hall  isbn  -  -      -x softecc  a system software memory integrity checkinga tunable  software-based dram error detection correction library hpcdetection correction silent data corruption large-scale high-performance computing   external links   the on-line textbook  information theory  inference  learning algorithms  david j c  mackay  contains chapters elementary error-correcting codes  theoretical limits error-correction  latest state-of-the-art error-correcting codes  including low-density parity-check codes  turbo codes  fountain codes ecc page - implementations popular ecc encoding decoding routines
computer security  cybersecurity  information technology security  it security  protection computer systems networks information disclosure  theft damage hardware  software  electronic data  well disruption misdirection services provide the field becoming increasingly significant due continuously expanding reliance computer systems  internet wireless network standards bluetooth wi-fi  due growth  smart  devices  including smartphones  televisions  various devices constitute  internet things   cybersecurity also one significant challenges contemporary world  due complexity  terms political usage technology     history   since internet arrival digital transformation initiated recent years  notion cybersecurity become familiar subject professional personal lives  cybersecurity cyber threats constant last    years technological change  in          computer security mainly limited academia conception internet   increased connectivity  computer viruses network intrusions began take off  after spread viruses          marked institutionalization cyber threats cybersecurity finally       large-scale attacks government regulations started emerging the april      session organized willis ware spring joint computer conference  later publication ware report  foundational moments history field computer security  ware work straddled intersection material  cultural  political  social concerns a      nist publication introduced  cia triad  confidentiality  integrity  availability clear simple way describe key security goals  while still relevant  many elaborate frameworks since proposed however          grave computer threats computers internet still developing  security threats easily identifiable  most often  threats came malicious insiders gained unauthorized access sensitive documents files  although malware network breaches existed early years  use financial gain  however  second half      established computer firms like ibm started offering commercial access control systems computer security software products it started creeper       creeper experimental computer program written bob thomas bbn  it considered first computer worm  in       first anti-virus software created  called reaper  it created ray tomlinson move across arpanet delete creeper worm  between september      june       group german hackers performed first documented case cyber espionage  the group hacked american defense contractors  universities  military bases  networks sold gathered information soviet kgb  the group led markus hess  arrested    june       he convicted espionage  along two co-conspirators      feb      in       one first computer worms  called morris worm distributed via internet  it gained significant mainstream media attention  in       netscape started developing protocol ssl  shortly national center supercomputing applications  ncsa  launched mosaic      first web browser        netscape ssl version     ready       never released public due many serious security vulnerabilities  these weaknesses included replay attacks vulnerability allowed hackers alter unencrypted communications sent users  however  february       netscape launched version         failed offensive strategy    the national security agency  nsa  responsible protection u s  information systems also collecting foreign intelligence   these two duties conflict other   protecting information systems includes evaluating software  identifying security flaws  taking steps correct flaws  defensive action   collecting intelligence includes exploiting security flaws extract information  offensive action   correcting security flaws makes flaws unavailable nsa exploitation the agency analyzes commonly used software order find security flaws  reserves offensive purposes competitors united states   the agency seldom takes defensive action reporting flaws software producers eliminate security flaws the offensive strategy worked  eventually nations  including russia  iran  north korea  china acquired offensive capability  tend use united states   nsa contractors created sold  click-and-shoot  attack tools u s  agencies close allies  eventually tools made way foreign adversaries   in       nsas hacking tools hacked used russia north korea   nsas employees contractors recruited high salaries adversaries  anxious compete cyberwarfare for example        united states israel began exploiting security flaws microsoft windows operating system attack damage equipment used iran refine nuclear materials   iran responded heavily investing cyberwarfare capability  began using united states    vulnerabilities attacks   a vulnerability weakness design  implementation  operation  internal control  most vulnerabilities discovered documented common vulnerabilities exposures  cve  database  an exploitable vulnerability one least one working attack  exploit  exists  vulnerabilities researched  reverse-engineered  hunted  exploited using automated tools customized scripts  to secure computer system  important understand attacks made  threats typically classified one categories     backdoor    a backdoor computer system  cryptosystem algorithm  secret method bypassing normal authentication security controls  they may exist many reasons  including original design poor configuration  they may added authorized party allow legitimate access  attacker malicious reasons  regardless motives existence  create vulnerability   backdoors hard detect  detection backdoors usually discovered someone access application source code intimate knowledge operating system computer     denial-of-service attack    denial service attacks  dos  designed make machine network resource unavailable intended users  attackers deny service individual victims  deliberately entering wrong password enough consecutive times cause victim account locked  may overload capabilities machine network block users once  while network attack single ip address blocked adding new firewall rule  many forms distributed denial service  ddos  attacks possible  attack comes large number points   defending much difficult  such attacks originate zombie computers botnet range possible techniques  including reflection amplification attacks  innocent systems fooled sending traffic victim     direct-access attacks    an unauthorized user gaining physical access computer likely able directly copy data it  they may also compromise security making operating system modifications  installing software worms  keyloggers  covert listening devices using wireless microphone  even system protected standard security measures  may bypassed booting another operating system tool cd-rom bootable media  disk encryption trusted platform module designed prevent attacks     eavesdropping    eavesdropping act surreptitiously listening private computer  conversation   communication   typically hosts network  for instance  programs carnivore narusinsight used fbi nsa eavesdrop systems internet service providers  even machines operate closed system  i e   contact outside world  eavesdropped upon via monitoring faint electromagnetic transmissions generated hardware  tempest specification nsa referring attacks     multi-vector  polymorphic attacks    surfacing       new class multi-vector  polymorphic cyber threats combined several types attacks changed form avoid cybersecurity controls spread     phishing    phishing attempt acquiring sensitive information usernames  passwords  credit card details directly users deceiving users  phishing typically carried email spoofing instant messaging  often directs users enter details fake website whose  look   feel  almost identical legitimate one  the fake website often asks personal information  log-in details passwords  this information used gain access individual real account real website  preying victim trust  phishing classified form social engineering   attackers using creative ways gain access real accounts   a common scam attackers send fake electronic invoices individuals showing recently purchased music  apps   instructing click link purchases authorized     privilege escalation    privilege escalation describes situation attacker level restricted access able  without authorization  elevate privileges access level  for example  standard computer user may able exploit vulnerability system gain access restricted data  even become  root  full unrestricted access system     reverse engineering    reverse engineering process man-made object deconstructed reveal designs  code  architecture  extract knowledge object  similar scientific research  difference scientific research natural phenomenon         side-channel attack    any computational system affects environment form  this effect environment  includes wide range criteria  range electromagnetic radiation  residual effect ram cells consequent make cold boot attack possible  hardware implementation faults allow access guessing values normally inaccessible  in side-channel attack scenarios attacker would gather information system network guess internal state  result access information assumed victim secure     social engineering    social engineering  context computer security  aims convince user disclose secrets passwords  card numbers  etc  grant physical access  example  impersonating senior executive  bank  contractor  customer  this generally involves exploiting peoples trust  relying cognitive biases  a common scam involves emails sent accounting finance department personnel  impersonating ceo urgently requesting action  in early       fbi reported  business email compromise   bec  scams cost us businesses    billion two years in may       milwaukee bucks nba team victim type cyber scam perpetrator impersonating team president peter feigin  resulting handover team employees       w-  tax forms     spoofing    spoofing act masquerading valid entity falsification data  ip address username   order gain access information resources one otherwise unauthorized obtain  there several types spoofing  including email spoofing  attacker forges sending  from  source  address email ip address spoofing  attacker alters source ip address network packet hide identity impersonate another computing system mac spoofing  attacker modifies media access control  mac  address network interface controller obscure identity  pose another biometric spoofing  attacker produces fake biometric sample pose another user     tampering    tampering describes malicious modification alteration data  so-called evil maid attacks security services planting surveillance capability routers examples     malware    malicious software  malware  installed computer leak personal information  give control system attacker delete data permanently    information security culture   employee behavior big impact information security organizations  cultural concepts help different segments organization work effectively work effectiveness towards information security within organization  information security culture     totality patterns behavior organization contributes protection information kinds  andersson reimers        found employees often see part organization information security effort often take actions impede organizational changes  indeed  verizon data breach investigations report       examined       security breaches  discovered     cyber security incidents involved internal actors within company  research shows information security culture needs improved continuously  in  information security culture analysis change   authors commented   it never-ending process  cycle evaluation change maintenance   to manage information security culture  five steps taken  pre-evaluation  strategic planning  operative planning  implementation  post-evaluation pre-evaluation  to identify awareness information security within employees analyze current security policies strategic planning  to come better awareness program  clear targets need set  assembling team skilled professionals helpful achieve it operative planning  a good security culture established based internal communication  management-buy-in  security awareness training program implementation  four stages used implement information security culture  they commitment managementcommunication organizational memberscourses organizational memberscommitment employeespost-evaluation  to assess success planning implementation  identify unresolved areas concern    systems risk   the growth number computer systems increasing reliance upon individuals  businesses  industries  governments means increasing number systems risk     financial systems    the computer systems financial regulators financial institutions like u s  securities exchange commission  swift  investment banks  commercial banks prominent hacking targets cybercriminals interested manipulating markets making illicit gains  websites apps accept store credit card numbers  brokerage accounts  bank account information also prominent hacking targets  potential immediate financial gain transferring money  making purchases  selling information black market  in-store payment systems atms also tampered order gather customer account data pins     utilities industrial equipment    computers control functions many utilities  including coordination telecommunications  power grid  nuclear power plants  valve opening closing water gas networks  the internet potential attack vector machines connected  stuxnet worm demonstrated even equipment controlled computers connected internet vulnerable  in       computer emergency readiness team  division department homeland security  investigated    hacking incidents energy companies     aviation    the aviation industry reliant series complex systems could attacked  a simple power outage one airport cause repercussions worldwide  much system relies radio transmissions could disrupted  controlling aircraft oceans especially dangerous radar surveillance extends         miles offshore  there also potential attack within aircraft in europe   pan-european network service  newpens  us nextgen program  air navigation service providers moving create dedicated networks the consequences successful attack range loss confidentiality loss system integrity  air traffic control outages  loss aircraft  even loss life     consumer devices    desktop computers laptops commonly targeted gather passwords financial account information  construct botnet attack another target  smartphones  tablet computers  smart watches  mobile devices quantified self devices like activity trackers sensors cameras  microphones  gps receivers  compasses  accelerometers could exploited  may collect personal information  including sensitive health information  wifi  bluetooth  cell phone networks devices could used attack vectors  sensors might remotely activated successful breach the increasing number home automation devices nest thermostat also potential targets     large corporations    large corporations common targets  in many cases attacks aimed financial gain identity theft involve data breaches  examples include loss millions clients  credit card details home depot  staples  target corporation  recent breach equifax medical records targeted general identify theft  health insurance fraud  impersonating patients obtain prescription drugs recreational purposes resale  although cyber threats continue increase      organizations increase security training business      not attacks financially motivated  however  security firm hbgary federal suffered serious series attacks      hacktivist group anonymous retaliation firm ceo claiming infiltrated group  sony pictures hacked      apparent dual motive embarrassing company data leaks crippling company wiping workstations servers     automobiles    vehicles increasingly computerized  engine timing  cruise control  anti-lock brakes  seat belt tensioners  door locks  airbags advanced driver-assistance systems many models  additionally  connected cars may use wifi bluetooth communicate onboard consumer devices cell phone network  self-driving cars expected even complex  all systems carry security risk  issues gained wide attention simple examples risk include malicious compact disc used attack vector  car onboard microphones used eavesdropping  however  access gained car internal controller area network  danger much greater   widely publicized      test  hackers remotely carjacked vehicle    miles away drove ditch manufacturers reacting number ways  tesla      pushing security fixes  air  cars  computer systems  in area autonomous vehicles  september      united states department transportation announced initial safety standards  called states come uniform policies     government    government military computer systems commonly attacked activists foreign powers  local regional government infrastructure traffic light controls  police intelligence agency communications  personnel records  student records  financial systems also potential targets largely computerized  passports government id cards control access facilities use rfid vulnerable cloning     internet things physical vulnerabilities    the internet things  iot  network physical objects devices  vehicles  buildings embedded electronics  software  sensors  network connectivity enables collect exchange data  concerns raised developed without appropriate consideration security challenges involved while iot creates opportunities direct integration physical world computer-based systems also provides opportunities misuse  in particular  internet things spreads widely  cyberattacks likely become increasingly physical  rather simply virtual  threat  if front door lock connected internet  locked unlocked phone  criminal could enter home press button stolen hacked phone  people could stand lose much credit card numbers world controlled iot-enabled devices  thieves also used electronic means circumvent non-internet-connected hotel door locks an attack targets physical infrastructure human lives sometimes referred cyber-kinetic attack  as iot devices appliances gain currency  cyber-kinetic attacks become pervasive significantly damaging      medical systems     medical devices either successfully attacked potentially deadly vulnerabilities demonstrated  including in-hospital diagnostic equipment implanted devices including pacemakers insulin pumps  there many reports hospitals hospital organizations getting hacked  including ransomware attacks  windows xp exploits  viruses  data breaches sensitive data stored hospital servers  on    december      us food drug administration released recommendations medical device manufacturers maintain security internet-connected devices   structure enforcement     energy sector    in distributed generation systems  risk cyber attack real  according daily energy insider  an attack could cause loss power large area long period time  attack could severe consequences natural disaster  the district columbia considering creating distributed energy resources  der  authority within city  goal customers insight energy use giving local electric utility  pepco  chance better estimate energy demand  the d c  proposal  however  would  allow third-party vendors create numerous points energy distribution  could potentially create opportunities cyber attackers threaten electric grid     impact security breaches   serious financial damage caused security breaches  standard model estimating cost incident  data available is made public organizations involved   several computer security consulting firms produce estimates total worldwide losses attributable virus worm attacks hostile digital acts general  the      loss estimates firms range     billion  worms viruses       billion  forms covert attacks   the reliability estimates often challenged  underlying methodology basically anecdotal  however  reasonable estimates financial cost security breaches actually help organizations make rational investment decisions  according classic gordon-loeb model analyzing optimal investment level information security  one conclude amount firm spends protect information generally small fraction expected loss  i e   expected value loss resulting cyber information security breach     attacker motivation   as physical security  motivations breaches computer security vary attackers  some thrill-seekers vandals  activists  others criminals looking financial gain  state-sponsored attackers common well resourced started amateurs markus hess hacked kgb  recounted clifford stoll the cuckoo egg additionally  recent attacker motivations traced back extremist organizations seeking gain political advantage disrupt social agendas  the growth internet  mobile technologies  inexpensive computing devices led rise capabilities also risk environments deemed vital operations  all critical targeted environments susceptible compromise led series proactive studies migrate risk taking consideration motivations types actors  several stark differences exist hacker motivation nation state actors seeking attack based ideological preference a standard part threat modeling particular system identify might motivate attack system  might motivated breach it  the level detail precautions vary depending system secured  a home personal computer  bank  classified military network face different threats  even underlying technologies use similar    computer protection  countermeasures    in computer security  countermeasure action  device  procedure technique reduces threat  vulnerability  attack eliminating preventing  minimizing harm cause  discovering reporting corrective action taken some common countermeasures listed following sections     security design    security design  alternately secure design  means software designed ground secure  in case  security considered main feature some techniques approach include the principle least privilege  part system privileges needed function  that way  even attacker gains access part  limited access whole system automated theorem proving prove correctness crucial software subsystems code reviews unit testing  approaches make modules secure formal correctness proofs possible defense depth  design one subsystem needs violated compromise integrity system information holds default secure settings  design  fail secure  rather  fail insecure   see fail-safe equivalent safety engineering   ideally  secure system require deliberate  conscious  knowledgeable free decision part legitimate authorities order make insecure audit trails tracking system activity  security breach occurs  mechanism extent breach determined  storing audit trails remotely  appended  keep intruders covering tracks full disclosure vulnerabilities  ensure  window vulnerability  kept short possible bugs discovered     security architecture    the open security architecture organization defines it security architecture  design artifacts describe security controls  security countermeasures  positioned  relate overall information technology architecture  these controls serve purpose maintain system quality attributes  confidentiality  integrity  availability  accountability assurance services  techopedia defines security architecture  unified security design addresses necessities potential risks involved certain scenario environment  it also specifies apply security controls  the design process generally reproducible   the key attributes security architecture relationship different components depend other determination controls based risk assessment  good practices  finances  legal matters the standardization controls practicing security architecture provides right foundation systematically address business  it security concerns organization     security measures    a state computer  security  conceptual ideal  attained use three processes  threat prevention  detection  response  these processes based various policies system components  include following user account access controls cryptography protect systems files data  respectively firewalls far common prevention systems network security perspective  properly configured  shield access internal network services  block certain kinds attacks packet filtering  firewalls hardware- software-based intrusion detection system  ids  products designed detect network attacks in-progress assist post-attack forensics  audit trails logs serve similar function individual systems  response  necessarily defined assessed security requirements individual system may cover range simple upgrade protections notification legal authorities  counter-attacks  like  in special cases  complete destruction compromised system favored  may happen compromised resources detected today  computer security consists mainly  preventive  measures  like firewalls exit procedure  a firewall defined way filtering network data host network another network  internet  implemented software running machine  hooking network stack   case unix-based operating systems linux  built operating system kernel  provide real-time filtering blocking  another implementation so-called  physical firewall   consists separate machine filtering network traffic  firewalls common amongst machines permanently connected internet some organizations turning big data platforms  apache hadoop  extend data accessibility machine learning detect advanced persistent threats however  relatively organizations maintain computer systems effective detection systems  fewer still organized response mechanisms place  as result  reuters points   companies first time report losing electronic theft data physical stealing assets   the primary obstacle effective eradication cybercrime could traced excessive reliance firewalls automated  detection  systems  yet basic evidence gathering using packet capture appliances puts criminals behind bars in order ensure adequate security  confidentiality  integrity availability network  better known cia triad  must protected considered foundation information security  to achieve objectives  administrative  physical technical security measures employed  the amount security afforded asset determined value known     vulnerability management    vulnerability management cycle identifying  remediating mitigating vulnerabilities  especially software firmware  vulnerability management integral computer security network security vulnerabilities discovered vulnerability scanner  analyzes computer system search known vulnerabilities  open ports  insecure software configuration  susceptibility malware   in order tools effective  must kept date every new update vendors release   typically  updates scan new vulnerabilities introduced recently beyond vulnerability scanning  many organizations contract outside security auditors run regular penetration tests systems identify vulnerabilities  in sectors  contractual requirement     reducing vulnerabilities    while formal verification correctness computer systems possible  yet common  operating systems formally verified include sel   sysgo pikeos   make small percentage market two factor authentication method mitigating unauthorized access system sensitive information  it requires  something know   password pin   something   card  dongle  cellphone  another piece hardware  this increases security unauthorized person needs gain access social engineering direct computer access  physical  attacks prevented non-computer means  difficult enforce  relative sensitivity information  training often involved help mitigate risk  even highly disciplined environments  e g  military organizations   social engineering attacks still difficult foresee prevent inoculation  derived inoculation theory  seeks prevent social engineering fraudulent tricks traps instilling resistance persuasion attempts exposure similar related attempts it possible reduce attacker chances keeping systems date security patches updates  using security scanner hiring people expertise security  though none guarantee prevention attack  the effects data loss damage reduced careful backing insurance     hardware protection mechanisms    while hardware may source insecurity  microchip vulnerabilities maliciously introduced manufacturing process  hardware-based assisted computer security also offers alternative software-only computer security  using devices methods dongles  trusted platform modules  intrusion-aware cases  drive locks  disabling usb ports  mobile-enabled access may considered secure due physical access  sophisticated backdoor access  required order compromised  each covered detail below usb dongles typically used software licensing schemes unlock software capabilities  also seen way prevent unauthorized access computer device software  the dongle  key  essentially creates secure encrypted tunnel software application key  the principle encryption scheme dongle  advanced encryption standard  aes  provides stronger measure security since harder hack replicate dongle simply copy native software another machine use it  another security application dongles use accessing web-based content cloud software virtual private networks  vpns   in addition  usb dongle configured lock unlock computer trusted platform modules  tpms  secure devices integrating cryptographic capabilities onto access devices  use microprocessors  so-called computers-on-a-chip  tpms used conjunction server-side software offer way detect authenticate hardware devices  preventing unauthorized network data access computer case intrusion detection refers device  typically push-button switch  detects computer case opened  the firmware bios programmed show alert operator computer booted next time drive locks essentially software tools encrypt hard drives  making inaccessible thieves  tools exist specifically encrypting external drives well disabling usb ports security option preventing unauthorized malicious access otherwise secure computer  infected usb dongles connected network computer inside firewall considered magazine network world common hardware threat facing computer networks disconnecting disabling peripheral devices   like camera  gps  removable storage etc    use mobile-enabled access devices growing popularity due ubiquitous nature cell phones  built-in capabilities bluetooth  newer bluetooth low energy  le   near field communication  nfc  non-ios devices biometric validation thumb print readers  well qr code reader software designed mobile devices  offer new  secure ways mobile phones connect access control systems  these control systems provide computer security also used controlling access secure buildings     secure operating systems    one use term  computer security  refers technology used implement secure operating systems  in      united states department defense  dod  used  orange book  standards  current international standard iso iec         common criteria  defines number progressively stringent evaluation assurance levels  many common operating systems meet eal  standard  methodically designed  tested reviewed   formal verification required highest levels means uncommon  an example eal    semiformally verified design tested   system integrity-   b  used airbus a   several military jets     secure coding    in software engineering  secure coding aims guard accidental introduction security vulnerabilities  it also possible create software designed ground secure  such systems  secure design   beyond  formal verification aims prove correctness algorithms underlying system important cryptographic protocols example     capabilities access control lists    within computer systems  two main security models capable enforcing privilege separation access control lists  acls  role-based access control  rbac  an access-control list  acl   respect computer file system  list permissions associated object  an acl specifies users system processes granted access objects  well operations allowed given objects role-based access control approach restricting system access authorized users   used majority enterprises     employees  implement mandatory access control  mac  discretionary access control  dac  a approach  capability-based security mostly restricted research operating systems  capabilities  however  also implemented language level  leading style programming essentially refinement standard object-oriented design  an open-source project area e language     end user security training    the end-user widely recognized weakest link security chain estimated     security incidents breaches involve kind human error  among commonly recorded forms errors misjudgment poor password management  sending emails containing sensitive data attachments wrong recipient  inability recognize misleading urls identify fake websites dangerous email attachments   a common mistake users make saving user id password browsers make easier log banking sites   this gift attackers obtained access machine means   the risk may mitigated use two-factor authentication as human component cyber risk particularly relevant determining global cyber risk organization facing  security awareness training  levels  provides formal compliance regulatory industry mandates considered essential reducing cyber risk protecting individuals companies great majority cyber threats the focus end-user represents profound cultural change many security practitioners  traditionally approached cybersecurity exclusively technical perspective  moves along lines suggested major security centers develop culture cyber awareness within organization  recognizing security-aware user provides important line defense cyber attacks     digital hygiene    related end-user training  digital hygiene cyber hygiene fundamental principle relating information security  analogy personal hygiene shows  equivalent establishing simple routine measures minimize risks cyber threats  the assumption good cyber hygiene practices give networked users another layer protection  reducing risk one vulnerable node used either mount attacks compromise another node network  especially common cyberattacks  cyber hygiene also mistaken proactive cyber defence  military term as opposed purely technology-based defense threats  cyber hygiene mostly regards routine measures technically simple implement mostly dependent discipline education  it thought abstract list tips measures demonstrated positive effect personal collective digital security  as  measures performed laypeople  security experts cyber hygiene relates personal hygiene computer viruses relate biological viruses  pathogens   however  term computer virus coined almost simultaneously creation first working computer viruses  term cyber hygiene much later invention  perhaps late      internet pioneer vint cerf  it since adopted congress senate united states  fbi  eu institutions heads state     response breaches    responding attempted security breaches often difficult variety reasons  including identifying attackers difficult  may operate proxies  temporary anonymous dial-up accounts  wireless connections  anonymizing procedures make back-tracing difficult -  often located another jurisdiction  if successfully breach security  also often gained enough administrative access enable delete logs cover tracks the sheer number attempted attacks  often automated vulnerability scanners computer worms  large organizations cannot spend time pursuing each law enforcement officers often lack skills  interest budget pursue attackers  in addition  identification attackers across network may require logs various points network many countries  may difficult time-consuming obtain where attack succeeds breach occurs  many jurisdictions place mandatory security breach notification laws     types security privacy       incident response planning   incident response organized approach addressing managing aftermath computer security incident compromise goal preventing breach thwarting cyberattack  an incident identified managed time intrusion typically escalates damaging event data breach system failure  the intended outcome computer security incident response plan contain incident  limit damage assist recovery business usual  responding compromises quickly mitigate exploited vulnerabilities  restore services processes minimize losses incident response planning allows organization establish series best practices stop intrusion causes damage  typical incident response plans contain set written instructions outline organization response cyberattack  without documented plan place  organization may successfully detect intrusion compromise stakeholders may understand roles  processes procedures escalation  slowing organization response resolution there four key components computer security incident response plan preparation  preparing stakeholders procedures handling computer security incidents compromisesdetection analysis  identifying investigating suspicious activity confirm security incident  prioritizing response based impact coordinating notification incidentcontainment  eradication recovery  isolating affected systems prevent escalation limit impact  pinpointing genesis incident  removing malware  affected systems bad actors environment restoring systems data threat longer remainspost incident activity  post mortem analysis incident  root cause organization response intent improving incident response plan future response efforts    notable attacks breaches   some illustrative examples different types computer security breaches given below     robert morris first computer worm    in              computers connected internet  mainframes  minicomputers professional workstations  on   november       many started slow  running malicious code demanded processor time spread computers   first internet  computer worm   the software traced back   -year-old cornell university graduate student robert tappan morris said  wanted count many machines connected internet      rome laboratory    in       hundred intrusions made unidentified crackers rome laboratory  us air force main command research facility  using trojan horses  hackers able obtain unrestricted access rome networking systems remove traces activities  the intruders able obtain classified files  air tasking order systems data furthermore able penetrate connected networks national aeronautics space administration goddard space flight center  wright-patterson air force base  defense contractors  private sector organizations  posing trusted rome center user     tjx customer credit card details    in early       american apparel home goods company tjx announced victim unauthorized computer systems intrusion hackers accessed system stored data credit card  debit card  check  merchandise return transactions     stuxnet attack    in       computer worm known stuxnet reportedly ruined almost one-fifth iran nuclear centrifuges  it disrupting industrial programmable logic controllers  plcs  targeted attack  this generally believed launched israel united states disrupt iranian nuclear program   although neither publicly admitted this     global surveillance disclosures    in early       documents provided edward snowden published the washington post the guardian exposing massive scale nsa global surveillance  there also indications nsa may inserted backdoor nist standard encryption  this standard later withdrawn due widespread criticism  the nsa additionally revealed tapped links google data centers     target home depot breaches    in            ukrainian hacker known rescator broke target corporation computers       stealing roughly    million credit cards  home depot computers       stealing       million credit card numbers  warnings delivered corporations  ignored  physical security breaches using self checkout machines believed played large role   the malware utilized absolutely unsophisticated uninteresting   says jim walter  director threat intelligence operations security technology company mcafee   meaning heists could easily stopped existing antivirus software administrators responded warnings  the size thefts resulted major attention state federal united states authorities investigation ongoing     office personnel management data breach    in april       office personnel management discovered hacked year earlier data breach  resulting theft approximately      million personnel records handled office  the office personnel management hack described federal officials among largest breaches government data history united states  data targeted breach included personally identifiable information social security numbers  names  dates places birth  addresses  fingerprints current former government employees well anyone undergone government background check  it believed hack perpetrated chinese hackers     ashley madison breach    in july       hacker group known  the impact team  successfully breached extramarital relationship website ashley madison  created avid life media  the group claimed taken company data user data well  after breach  the impact team dumped emails company ceo  prove point  threatened dump customer data unless website taken permanently   when avid life media take site offline group released two compressed files  one    gb second   gb  after second data dump  avid life media ceo noel biderman resigned  website remained functioning     colonial pipeline ransomware attack    in june       cyber attack took largest fuel pipeline u s  led shortages across east coast     legal issues global regulation   international legal issues cyber attacks complicated nature  there global base common rules judge  eventually punish  cybercrimes cybercriminals - security firms agencies locate cybercriminal behind creation particular piece malware form cyber attack  often local authorities cannot take action due lack laws prosecute  proving attribution cybercrimes cyberattacks also major problem law enforcement agencies   computer viruses switch one country another  one jurisdiction another   moving around world  using fact capability globally police operations like this  so internet someone   given free plane tickets online criminals world   the use techniques dynamic dns  fast flux bullet proof servers add difficulty investigation enforcement    role government   the role government make regulations force companies organizations protect systems  infrastructure information cyberattacks  also protect national infrastructure national power-grid the government regulatory role cyberspace complicated  for  cyberspace seen virtual space remain free government intervention  seen many today libertarian blockchain bitcoin discussions many government officials experts think government crucial need improved regulation  mainly due failure private sector solve efficiently cybersecurity problem  r  clarke said panel discussion rsa security conference san francisco  believes  industry responds threaten regulation  if industry respond  threat   follow through   on hand  executives private sector agree improvements necessary  think government intervention would affect ability innovate efficiently  daniel r  mccarthy analyzed public-private partnership cybersecurity reflected role cybersecurity broader constitution political order on    may       un security council held second ever informal meeting cybersecurity focus cyber challenges international peace  according un secretary-general ant nio guterres  new technologies often used violate rights    international actions   many different teams organizations exist  including the forum incident response security teams  first  global association csirts  the us-cert  at t  apple  cisco  mcafee  microsoft members international team the council europe helps protect societies worldwide threat cybercrime convention cybercrime the purpose messaging anti-abuse working group  maawg  bring messaging industry together work collaboratively successfully address various forms messaging abuse  spam  viruses  denial-of-service attacks messaging exploitations  france telecom  facebook  at t  apple  cisco  sprint members maawg enisa   the european network information security agency  enisa  agency european union objective improve network information security european union     europe    on    april      european parliament council european union adopted the general data protection regulation  gdpr   eu            gdpr  became enforceable beginning    may       provides data protection privacy individuals within european union  eu  european economic area  eea   gdpr requires business processes handle personal data built data protection design default  gdpr also requires certain organizations appoint data protection officer  dpo     national actions       computer emergency response teams    most countries computer emergency response team protect network security      canada     since       canada cybersecurity strategy  this functions counterpart document national strategy action plan critical infrastructure  the strategy three main pillars  securing government systems  securing vital private cyber systems  helping canadians secure online  there also cyber incident management framework provide coordinated response event cyber incident the canadian cyber incident response centre  ccirc  responsible mitigating responding threats canada critical infrastructure cyber systems  it provides support mitigate cyber threats  technical support respond   recover targeted cyber attacks  provides online tools members canada critical infrastructure sectors  it posts regular cybersecurity bulletins   operates online reporting tool individuals organizations report cyber incident to inform general public protect online  public safety canada partnered stop think connect  coalition non-profit  private sector  government organizations  launched cyber security cooperation program  they also run getcybersafe portal canadian citizens  cyber security awareness month october public safety canada aims begin evaluation canada cybersecurity strategy early           china     china central leading group internet security informatization  chinese                  established    february       this leading small group  lsg  chinese communist party headed general secretary xi jinping staffed relevant party state decision-makers  the lsg created overcome incoherent policies overlapping responsibilities characterized china former cyberspace decision-making mechanisms  the lsg oversees policy-making economic  political  cultural  social military fields relate network security it strategy  this lsg also coordinates major policy initiatives international arena promote norms standards favored chinese government emphasizes principle national sovereignty cyberspace      germany     berlin starts national cyber defense initiative  on    june       german minister home affairs  officially opened new german ncaz  national center cyber defense  nationales cyber-abwehrzentrum located bonn  the ncaz closely cooperates bsi  federal office information security  bundesamt f r sicherheit der informationstechnik  bka  federal police organisation  bundeskriminalamt  deutschland   bnd  federal intelligence service  bundesnachrichtendienst  mad  military intelligence service  amt f r den milit rischen abschirmdienst national organizations germany taking care national security aspects  according minister  primary task new organization founded    february       detect prevent attacks national infrastructure mentioned incidents like stuxnet  germany also established largest research institution it security europe  center research security privacy  crisp  darmstadt      india     some provisions cybersecurity incorporated rules framed information technology act      the national cyber security policy      policy framework ministry electronics information technology  meity  aims protect public private infrastructure cyberattacks  safeguard  information  personal information  web users   financial banking information sovereign data   cert- in nodal agency monitors cyber threats country  the post national cyber security coordinator also created prime minister office  pmo  the indian companies act      also introduced cyber law cybersecurity obligations part indian directors  some provisions cybersecurity incorporated rules framed information technology act      update           south korea     following cyber attacks first half       government  news media  television station  bank websites compromised  national government committed training       new cybersecurity experts       the south korean government blamed northern counterpart attacks  well incidents occurred                   pyongyang denies accusations      united states           legislation      the         u s c          computer fraud abuse act key legislation  it prohibits unauthorized access damage  protected computers  defined    u s c         e      although various measures proposed   none succeeded in       executive order       improving critical infrastructure cybersecurity signed  prompted creation nist cybersecurity framework in response colonial pipeline ransomware attack president joe biden signed executive order       may           increase software security standards sales government  tighten detection security existing systems  improve information sharing training  establish cyber safety review board  improve incident response       standardized government testing services      the general services administration  gsa  standardized  penetration test  service pre-vetted support service  rapidly address potential vulnerabilities  stop adversaries impact us federal  state local governments  these services commonly referred highly adaptive cybersecurity services  hacs        agencies      the department homeland security dedicated division responsible response system  risk management program requirements cybersecurity united states called national cyber security division  the division home us-cert operations national cyber alert system  the national cybersecurity communications integration center brings together government organizations responsible protecting computer networks networked infrastructure the third priority federal bureau investigation  fbi    protect united states cyber-based attacks high-technology crimes    along national white collar crime center  nw c   bureau justice assistance  bja  part multi-agency task force  the internet crime complaint center  also known ic  in addition specific duties  fbi participates alongside non-profit organizations infragard the computer crime intellectual property section  ccips  operates united states department justice criminal division  the ccips charge investigating computer crime intellectual property crime specialized search seizure digital evidence computers networks  in       ccips published a framework vulnerability disclosure program online systems help organizations  clearly describe authorized vulnerability disclosure discovery conduct  thereby substantially reducing likelihood described activities result civil criminal violation law computer fraud abuse act     u s c           the united states cyber command  also known uscybercom   mission direct  synchronize  coordinate cyberspace planning operations defend advance national interests collaboration domestic international partners   it role protection civilian networks the u s  federal communications commission role cybersecurity strengthen protection critical communications infrastructure  assist maintaining reliability networks disasters  aid swift recovery  ensure first responders access effective communications services the food drug administration issued guidance medical devices  national highway traffic safety administration concerned automotive cybersecurity  after criticized government accountability office  following successful attacks airports claimed attacks airplanes  federal aviation administration devoted funding securing systems board planes private manufacturers  aircraft communications addressing reporting system  concerns also raised future next generation air transportation system       computer emergency readiness team       computer emergency response team  name given expert groups handle computer security incidents  in us  two distinct organization exist  although work closely together us-cert  part national cyber security division united states department homeland security cert cc  created defense advanced research projects agency  darpa  run software engineering institute  sei     modern warfare   there growing concern cyberspace become next theater warfare  as mark clayton the christian science monitor wrote      article titled  the new cyber arms race  in future  wars fought soldiers guns planes drop bombs  they also fought click mouse half world away unleashes carefully weaponized computer programs disrupt destroy critical industries like utilities  transportation  communications  energy  such attacks could also disable military networks control movement troops  path jet fighters  command control warships this led new terms cyberwarfare cyberterrorism  the united states cyber command created      many countries similar forces there critical voices question whether cybersecurity significant threat made be    careers   cybersecurity fast-growing field it concerned reducing organizations  risk hack data breach  according research enterprise strategy group      organizations say  problematic shortage  cybersecurity skills                 commercial  government non-governmental organizations employ cybersecurity professionals  the fastest increases demand cybersecurity workers industries managing increasing volumes consumer data finance  health care  retail  however  use term  cybersecurity  prevalent government job descriptions typical cybersecurity job titles descriptions include     security analyst    analyzes assesses vulnerabilities infrastructure  software  hardware  networks   investigates using available tools countermeasures remedy detected vulnerabilities recommends solutions best practices  analyzes assesses damage data infrastructure result security incidents  examines available recovery tools processes  recommends solutions  tests compliance security policies procedures  may assist creation  implementation  management security solutions     security engineer    performs security monitoring  security data logs analysis  forensic analysis  detect security incidents  mounts incident response  investigates utilizes new technologies processes enhance security capabilities implement improvements  may also review code perform security engineering methodologies     security architect    designs security system major components security system  may head security design team building new security system     security administrator    installs manages organization-wide security systems  this position may also include taking tasks security analyst smaller organizations     chief information security officer  ciso     a high-level management position responsible entire information security division staff  the position may include hands-on technical work     chief security officer  cso     a high-level management position responsible entire security division staff  a newer position deemed needed security risks grow     data protection officer  dpo     a dpo tasked monitoring compliance uk gdpr data protection laws  data protection policies  awareness-raising  training  audits     security consultant specialist intelligence    broad titles encompass one roles titles tasked protecting computers  networks  software  data information systems viruses  worms  spyware  malware  intrusion detection  unauthorized access  denial-of-service attacks  ever-increasing list attacks hackers acting individuals part organized crime foreign governments student programs also available people interested beginning career cybersecurity  meanwhile  flexible effective option information security professionals experience levels keep studying online security training  including webcasts  a wide range certified courses also available in united kingdom  nationwide set cybersecurity forums  known u k cyber security forum  established supported government cybersecurity strategy order encourage start-ups innovation address skills gap identified u k government in singapore  cyber security agency issued singapore operational technology  ot  cybersecurity competency framework  otccf   the framework defines emerging cybersecurity roles operational technology  the otccf endorsed infocomm media development authority  imda   it outlines different ot cybersecurity job positions well technical skills core competencies necessary  it also depicts many career paths available  including vertical lateral advancement opportunities     terminology   the following terms used regards computer security explained access authorization restricts access computer group users use authentication systems  these systems protect either whole computer  interactive login screen  individual services  ftp server  there many methods identifying authenticating users  passwords  identification cards  smart cards  biometric systems anti-virus software consists computer programs attempt identify  thwart  eliminate computer viruses malicious software  malware  applications executable code  general practice disallow users power install  install known reputable   reduce attack surface installing possible  they typically run least privilege  robust process place identify  test install released security patches updates them authentication techniques used ensure communication end-points say are automated theorem proving verification tools used enable critical algorithms code used secure systems mathematically proven meet specifications backups one copies kept important computer files  typically  multiple copies kept different locations copy stolen damaged  copies still exist capability access control list techniques used ensure privilege separation mandatory access control  capabilities vs  acls discusses use chain trust techniques used attempt ensure software loaded certified authentic system designers confidentiality nondisclosure information except another authorized person cryptographic techniques used defend data transit systems  reducing probability data exchange systems intercepted modified cyberwarfare internet-based conflict involves politically motivated attacks information information systems  such attacks  example  disable official websites networks  disrupt disable essential services  steal alter classified data  cripple financial systems data integrity accuracy consistency stored data  indicated absence alteration data two updates data record encryption used protect confidentiality message  cryptographically secure ciphers designed make practical attempt breaking infeasible  symmetric-key ciphers suitable bulk encryption using shared keys  public-key encryption using digital certificates provide practical solution problem securely communicating key shared advance endpoint security software aids networks preventing malware infection data theft network entry points made vulnerable prevalence potentially infected devices laptops  mobile devices  usb drives firewalls serve gatekeeper system networks  allowing traffic matches defined rules  they often include detailed logging  may include intrusion detection intrusion prevention features  they near-universal company local area networks internet  also used internally impose traffic rules networks network segmentation configured a hacker someone seeks breach defenses exploit weaknesses computer system network honey pots computers intentionally left vulnerable attack crackers  they used catch crackers identify techniques intrusion-detection systems devices software applications monitor networks systems malicious activity policy violations a microkernel approach operating system design near-minimum amount code running privileged level   runs elements operating system device drivers  protocol stacks file systems  safer  less privileged user space pinging  the standard  ping  application used test ip address use  if  attackers may try port scan detect services exposed a port scan used probe ip address open ports identify accessible network services applications a key logger spyware silently captures stores keystroke user types computer keyboard social engineering use deception manipulate individuals breach security logic bombs type malware added legitimate program lies dormant triggered specific event zero trust security means one trusted default inside outside network  verification required everyone trying gain access resources network    notable scholars      see also      references      further reading   branch  j           what name  metaphors cybersecurity   international organization costigan  sean  hennessy  michael         cybersecurity  a generic reference curriculum  pdf   nato  isbn    -           fuller  christopher j   the roots united states  cyber  in security   diplomatic history                       onlinekim  peter         the hacker playbook  practical guide to penetration testing  seattle  createspace independent publishing platform  isbn    -           lee  newton         counterterrorism cybersecurity  total information awareness   nd ed    springer  isbn    -           montagnani  maria lill  cavallo  mirta antonella     july         cybersecurity liability big data world   ssrn singer  p  w   friedman  allan         cybersecurity cyberwar  what everyone needs know  oxford university press  isbn    -           wu  chwan-hwa  john   irwin  j  david         introduction computer networks cybersecurity  boca raton  crc press  isbn    -           m  shariati et al    procedia computer science                   enterprise information security  review architectures frameworks interoperability perspective   external links   computer security curliecybersecurity websites cybersecurity   information systems information analysis center  csiac 
cryptanalysis  greek krypt   hidden   anal ein   analyze   refers process analyzing information systems order understand hidden aspects systems   cryptanalysis used breach cryptographic security systems gain access contents encrypted messages  even cryptographic key unknown in addition mathematical analysis cryptographic algorithms  cryptanalysis includes study side-channel attacks target weaknesses cryptographic algorithms  instead exploit weaknesses implementation even though goal  methods techniques cryptanalysis changed drastically history cryptography  adapting increasing cryptographic complexity  ranging pen-and-paper methods past  machines like british bombes colossus computers bletchley park world war ii  mathematically advanced computerized schemes present  methods breaking modern cryptosystems often involve solving carefully constructed problems pure mathematics  best-known integer factorization    overview   given encrypted data   ciphertext    goal cryptanalyst gain much information possible original  unencrypted data   plaintext    cryptographic attacks characterized number ways     amount information available attacker    attacks classified based type information attacker available  as basic starting point normally assumed  purposes analysis  general algorithm known  shannon maxim  enemy knows system    turn  equivalent kerckhoffs  principle  this reasonable assumption practice   throughout history  countless examples secret algorithms falling wider knowledge  variously espionage  betrayal reverse engineering   and occasion  ciphers broken pure deduction  example  german lorenz cipher japanese purple code  variety classical schemes  ciphertext-only  cryptanalyst access collection ciphertexts codetexts known-plaintext  attacker set ciphertexts know corresponding plaintext chosen-plaintext  chosen-ciphertext   attacker obtain ciphertexts  plaintexts  corresponding arbitrary set plaintexts  ciphertexts  choosing adaptive chosen-plaintext  like chosen-plaintext attack  except attacker choose subsequent plaintexts based information learned previous encryptions  similarly adaptive chosen ciphertext attack related-key attack  like chosen-plaintext attack  except attacker obtain ciphertexts encrypted two different keys  the keys unknown  relationship known  example  two keys differ one bit     computational resources required    attacks also characterised resources require  those resources include time   number computation steps  e g   test encryptions  must performed memory   amount storage required perform attack data   quantity type plaintexts ciphertexts required particular approach it sometimes difficult predict quantities precisely  especially attack practical actually implement testing  but academic cryptanalysts tend provide least estimated order magnitude attacks  difficulty  saying  example   sha-  collisions      bruce schneier notes even computationally impractical attacks considered breaks   breaking cipher simply means finding weakness cipher exploited complexity less brute force  never mind brute-force might require      encryptions  attack requiring      encryptions would considered break   simply put  break certificational weakness  evidence cipher perform advertised      partial breaks    the results cryptanalysis also vary usefulness  cryptographer lars knudsen        classified various types attack block ciphers according amount quality secret information discovered total break   attacker deduces secret key global deduction   attacker discovers functionally equivalent algorithm encryption decryption  without learning key instance  local  deduction   attacker discovers additional plaintexts  ciphertexts  previously known information deduction   attacker gains shannon information plaintexts  ciphertexts  previously known distinguishing algorithm   attacker distinguish cipher random permutation academic attacks often weakened versions cryptosystem  block cipher hash function rounds removed  many   attacks become exponentially difficult execute rounds added cryptosystem  possible full cryptosystem strong even though reduced-round variants weak  nonetheless  partial breaks come close breaking original cryptosystem may mean full break follow  successful attacks des  md   sha-  preceded attacks weakened versions in academic cryptography  weakness break scheme usually defined quite conservatively  might require impractical amounts time  memory  known plaintexts  it also might require attacker able things many real-world attackers  example  attacker may need choose particular plaintexts encrypted even ask plaintexts encrypted using several keys related secret key  furthermore  might reveal small amount information  enough prove cryptosystem imperfect little useful real-world attackers  finally  attack might apply weakened version cryptographic tools  like reduced-round block cipher  step towards breaking full system    history   cryptanalysis coevolved together cryptography  contest traced history cryptography new ciphers designed replace old broken designs  new cryptanalytic techniques invented crack improved schemes  in practice  viewed two sides coin  secure cryptography requires design possible cryptanalysis     classical ciphers    although actual word  cryptanalysis  relatively recent  coined william friedman        methods breaking codes ciphers much older  david kahn notes the codebreakers arab scholars first people systematically document cryptanalytic methods the first known recorded explanation cryptanalysis given al-kindi  c           also known  alkindus  europe    th-century arab polymath  risalah fi istikhraj al-mu amma  a manuscript deciphering cryptographic messages   this treatise contains first description method frequency analysis  al-kindi thus regarded first codebreaker history  his breakthrough work influenced al-khalil            wrote book cryptographic messages  contains first use permutations combinations list possible arabic words without vowels frequency analysis basic tool breaking classical ciphers  in natural languages  certain letters alphabet appear often others  english   e  likely common letter sample plaintext  similarly  digraph  th  likely pair letters english  on  frequency analysis relies cipher failing hide statistics  for example  simple substitution cipher  letter simply replaced another   frequent letter ciphertext would likely candidate  e   frequency analysis cipher therefore relatively easy  provided ciphertext long enough give reasonably representative count letters alphabet contains al-kindi invention frequency analysis technique breaking monoalphabetic substitution ciphers significant cryptanalytic advance world war ii  al-kindi risalah fi istikhraj al-mu amma described first cryptanalytic techniques  including polyalphabetic ciphers  cipher classification  arabic phonetics syntax  importantly  gave first descriptions frequency analysis  he also covered methods encipherments  cryptanalysis certain encipherments  statistical analysis letters letter combinations arabic  an important contribution ibn adlan             sample size use frequency analysis in europe  italian scholar giambattista della porta      -      author seminal work cryptanalysis  de furtivis literarum notis successful cryptanalysis undoubtedly influenced history  ability read presumed-secret thoughts plans others decisive advantage  for example  england       mary  queen scots tried executed treason result involvement three plots assassinate elizabeth i england  the plans came light coded correspondence fellow conspirators deciphered thomas phelippes in europe   th   th centuries  idea polyalphabetic substitution cipher developed  among others french diplomat blaise de vigen            for three centuries  vigen cipher  uses repeating key select different encryption alphabets rotation  considered completely secure  le chiffre ind chiffrable  indecipherable cipher    nevertheless  charles babbage             later  independently  friedrich kasiski           succeeded breaking cipher  during world war i  inventors several countries developed rotor cipher machines arthur scherbius  enigma  attempt minimise repetition exploited break vigen system     ciphers world war i world war ii    in world war i  breaking zimmermann telegram instrumental bringing united states war  in world war ii  allies benefitted enormously joint success cryptanalysis german ciphers   including enigma machine lorenz cipher   japanese ciphers  particularly  purple  jn-     ultra  intelligence credited everything shortening end european war two years  determining eventual result  the war pacific similarly helped  magic  intelligence cryptanalysis enemy messages played significant part allied victory world war ii  f  w  winterbotham  quoted western supreme allied commander  dwight d  eisenhower  war end describing ultra intelligence  decisive  allied victory  sir harry hinsley  official historian british intelligence world war ii  made similar assessment ultra  saying shortened war  less two years probably four years   moreover  said absence ultra  uncertain war would ended in practice  frequency analysis relies much linguistic knowledge statistics  ciphers became complex  mathematics became important cryptanalysis  this change particularly evident world war ii  efforts crack axis ciphers required new levels mathematical sophistication  moreover  automation first applied cryptanalysis era polish bomba device  british bombe  use punched card equipment  colossus computers   first electronic digital computers controlled program      indicator     with reciprocal machine ciphers lorenz cipher enigma machine used nazi germany world war ii  message key  usually  transmitting operator informed receiving operator message key transmitting plaintext ciphertext enciphered message  this termed indicator  indicates receiving operator set machine decipher message poorly designed implemented indicator systems allowed first polish cryptographers british cryptographers bletchley park break enigma cipher system  similar poor indicator systems allowed british identify depths led diagnosis lorenz sz      cipher system  comprehensive breaking messages without cryptanalysts seeing cipher machine      depth     sending two messages key insecure process  to cryptanalyst messages said  depth   this may detected messages indicator sending operator informs receiving operator key generator initial settings message generally  cryptanalyst may benefit lining identical enciphering operations among set messages  for example  vernam cipher enciphers bit-for-bit combining plaintext long key using  exclusive  operator  also known  modulo-  addition   symbolized     plaintext   key   ciphertextdeciphering combines key bits ciphertext reconstruct plaintext ciphertext   key   plaintext in modulo-  arithmetic  addition subtraction   when two ciphertexts aligned depth  combining eliminates common key  leaving combination two plaintexts ciphertext    ciphertext    plaintext    plaintext the individual plaintexts worked linguistically trying probable words  phrases   also known  cribs   various locations  correct guess  combined merged plaintext stream  produces intelligible text plaintext component  plaintext    plaintext     plaintext    plaintext the recovered fragment second plaintext often extended one directions  extra characters combined merged plaintext stream extend first plaintext  working back forth two plaintexts  using intelligibility criterion check guesses  analyst may recover much original plaintexts   with two plaintexts depth  analyst may know one corresponds ciphertext  practice large problem   when recovered plaintext combined ciphertext  key revealed plaintext    ciphertext    keyknowledge key allows analyst read messages encrypted key  knowledge set related keys may allow cryptanalysts diagnose system used constructing them     development modern cryptography    governments long recognized potential benefits cryptanalysis intelligence  military diplomatic  established dedicated organizations devoted breaking codes ciphers nations  example  gchq nsa  organizations still active today even though computation used great effect cryptanalysis lorenz cipher systems world war ii  also made possible new methods cryptography orders magnitude complex ever before  taken whole  modern cryptography become much impervious cryptanalysis pen-and-paper systems past  seems upper hand pure cryptanalysis  the historian david kahn notes many cryptosystems offered hundreds commercial vendors today cannot broken known methods cryptanalysis  indeed  systems even chosen plaintext attack  selected plaintext matched ciphertext  cannot yield key unlock  messages  in sense   cryptanalysis dead  but end story  cryptanalysis may dead  - mix metaphors - one way skin cat kahn goes mention increased opportunities interception  bugging  side channel attacks  quantum computers replacements traditional means cryptanalysis  in       former nsa technical director brian snow said academic government cryptographers  moving slowly forward mature field  however  postmortems cryptanalysis may premature  while effectiveness cryptanalytic methods employed intelligence agencies remains unknown  many serious attacks academic practical cryptographic primitives published modern era computer cryptography the block cipher madryga  proposed      widely used  found susceptible ciphertext-only attacks      feal-   proposed replacement des standard encryption algorithm widely used  demolished spate attacks academic community  many entirely practical the a     a     cmea  dect systems used mobile wireless phone technology broken hours  minutes even real-time using widely available computing equipment brute-force keyspace search broken real-world ciphers applications  including single-des  see eff des cracker     -bit  export-strength  cryptography  dvd content scrambling system in       wired equivalent privacy  wep   protocol used secure wi-fi wireless networks  shown breakable practice weakness rc  cipher aspects wep design made related-key attacks practical  wep later replaced wi-fi protected access in       researchers conducted proof-of-concept break ssl using weaknesses md  hash function certificate issuer practices made possible exploit collision attacks hash functions  the certificate issuers involved changed practices prevent attack repeated thus  best modern ciphers may far resistant cryptanalysis enigma  cryptanalysis broader field information security remain quite active    symmetric ciphers   boomerang attackbrute-force attackdavies  attackdifferential cryptanalysisimpossible differential cryptanalysisimprobable differential cryptanalysisintegral cryptanalysislinear cryptanalysismeet-in-the-middle attackmod-n cryptanalysisrelated-key attacksandwich attackslide attackxsl attack   asymmetric ciphers   asymmetric cryptography  public-key cryptography  cryptography relies using two  mathematically related  keys  one private  one public  such ciphers invariably rely  hard  mathematical problems basis security  obvious point attack develop methods solving problem  the security two-key cryptography depends mathematical questions way single-key cryptography generally  conversely links cryptanalysis wider mathematical research new way asymmetric schemes designed around  conjectured  difficulty solving various mathematical problems  if improved algorithm found solve problem  system weakened  for example  security diffie hellman key exchange scheme depends difficulty calculating discrete logarithm  in       don coppersmith found faster way find discrete logarithms  certain groups   thereby requiring cryptographers use larger groups  different types groups   rsa security depends  part  upon difficulty integer factorization   breakthrough factoring would impact security rsa in       one could factor difficult   -digit number expense      elementary computer operations  by      state art factoring algorithms advanced point   -digit number could factored      operations  advances computing technology also meant operations could performed much faster  too  moore law predicts computer speeds continue increase  factoring techniques may continue well  likely depend mathematical insight creativity  neither ever successfully predictable     -digit numbers kind used rsa factored  the effort greater  unreasonable fast modern computers  by start   st century     -digit numbers longer considered large enough key size rsa  numbers several hundred digits still considered hard factor       though methods probably continue improve time  requiring key size keep pace methods elliptic curve cryptography used another distinguishing feature asymmetric schemes  unlike attacks symmetric cryptosystems  cryptanalysis opportunity make use knowledge gained public key    attacking cryptographic hash systems   birthday attackhash function security summaryrainbow table   side-channel attacks   black-bag cryptanalysisman-in-the-middle attackpower analysisreplay attackrubber-hose cryptanalysistiming analysis   quantum computing applications cryptanalysis   quantum computers  still early phases research  potential use cryptanalysis  for example  shor algorithm could factor large numbers polynomial time  effect breaking commonly used forms public-key encryption by using grover algorithm quantum computer  brute-force key search made quadratically faster  however  could countered doubling key length    see also   economics securityglobal surveillanceinformation assurance  term information security often used governmentinformation security  overarching goal cryptographynational cipher challengesecurity engineering  design applications protocolssecurity vulnerability  vulnerabilities include cryptographic flawstopics cryptographyzendian problem    historic cryptanalysts    conel hugh o donel alexandercharles babbagelambros d  callimahosjoan clarkealastair dennistonagnes meyer driscollelizebeth friedmanwilliam f  friedmanmeredith gardnerfriedrich kasiskial-kindidilly knoxsolomon kullbackmarian rejewskijoseph rochefort  whose contributions affected outcome battle midwayfrank rowlettabraham sinkovgiovanni soro  renaissance first outstanding cryptanalystjohn tiltmanalan turingwilliam t  tuttejohn wallis -   th-century english mathematicianwilliam stone weedon - worked fredson bowers world war iiherbert yardley   references       citations        sources       further reading   bard  gregory v          algebraic cryptanalysis  springer  isbn    - -    -    -  hinek  m  jason         cryptanalysis rsa its variants  crc press  isbn    - -    -    -  joux  antoine         algorithmic cryptanalysis  crc press  isbn    - -    -    -  junod  pascal  canteaut  anne         advanced linear cryptanalysis block stream ciphers  ios press  isbn    - -     -   -  stamp  mark   low  richard         applied cryptanalysis  breaking ciphers real world  john wiley   sons  isbn    - -   -     -  cs  maint  uses authors parameter  link swenson  christopher         modern cryptanalysis  techniques advanced code breaking  john wiley   sons  isbn    - -   -     -  wagstaff  samuel s          cryptanalysis number-theoretic ciphers  crc press  isbn    - -     -   -     external links   basic cryptanalysis  files contain   line header  removed first distributed computing projectslist tools cryptanalysis modern cryptographysimon singh crypto cornerthe national museum computingultraanvil tool attacking simple substitution ciphershow alan turing cracked the enigma code imperial war museums
a security protocol  cryptographic protocol encryption protocol  abstract concrete protocol performs security-related function applies cryptographic methods  often sequences cryptographic primitives  a protocol describes algorithms used includes details data structures representations  point used implement multiple  interoperable versions program cryptographic protocols widely used secure application-level data transport  a cryptographic protocol usually incorporates least aspects key agreement establishmententity authenticationsymmetric encryption message authentication   material constructionsecured application-level data transportnon-repudiation methodssecret sharing methodssecure multi-party computationfor example  transport layer security  tls  cryptographic protocol used secure web  https  connections  it entity authentication mechanism  based x     system  key setup phase  symmetric encryption key formed employing public-key cryptography  application-level data transport function  these three aspects important interconnections  standard tls non-repudiation support there types cryptographic protocols well  even term various readings  cryptographic application protocols often use one underlying key agreement methods  also sometimes referred  cryptographic protocols   for instance  tls employs known diffie hellman key exchange  although part tls per se  diffie hellman may seen complete cryptographic protocol applications    advanced cryptographic protocols   a wide variety cryptographic protocols go beyond traditional goals data confidentiality  integrity  authentication also secure variety desired characteristics computer-mediated collaboration  blind signatures used digital cash digital credentials prove person holds attribute right without revealing person identity identities parties person transacted with   secure digital timestamping used prove data  even confidential  existed certain time   secure multiparty computation used compute answers  determining highest bid auction  based confidential data  private bids   protocol complete participants know input answer  end-to-end auditable voting systems provide sets desirable privacy auditability properties conducting e-voting   undeniable signatures include interactive protocols allow signer prove forgery limit verify signature   deniable encryption augments standard encryption making impossible attacker mathematically prove existence plain text message  digital mixes create hard-to-trace communications    formal verification   cryptographic protocols sometimes verified formally abstract level  when done  necessity formalize environment protocol operates order identify threats  this frequently done dolev-yao model logics  concepts calculi used formal reasoning security protocols burrows abadi needham logic  ban logic dolev yao model -calculusprotocol composition logic  pcl strand spaceresearch projects tools used formal verification security protocols automated validation internet security protocols applications  avispa  follow-up project avantssarconstraint logic-based attack searcher  cl-atse open-source fixed-point model-checker  ofmc sat-based model-checker  satmc caspercryptoverifcryptographic protocol shapes analyzer  cpsa knowledge in security protocols  kiss maude-nrl protocol analyzer  maude-npa proverifscythertamarin prover    notion abstract protocol    to formally verify protocol often abstracted modelled using alice   bob notation  a simple example following                     a                 b                          x                                                       k                              a                                 b                                                            displaystyle a rightarrow b   x    k  a b     this states alice                     a                displaystyle a    intends message bob                     b                displaystyle b    consisting message                     x                displaystyle x    encrypted shared key                               k                      a                         b                                  displaystyle k  a b        examples   internet key exchangeipseckerberosoff-the-record messagingpoint point protocolsecure shell  ssh signal protocoltransport layer securityzrtp   see also   list cryptosystemssecure channelsecurity protocols open repository   references      further reading   ermoshina  ksenia  musiani  francesca  halpin  harry  september         end-to-end encrypted messaging protocols  an overview   pdf    in bagnoli  franco   et al   eds    internet science  insci       florence  italy  springer  pp           doi            - -   -     -      isbn    - -   -     -     external links   secure protocols open repository
in computer engineering  computer architecture set rules methods describe functionality  organization  implementation computer systems  the architecture system refers structure terms separately specified components system interrelationships some definitions architecture define describing capabilities programming model computer particular implementation  in definitions computer architecture involves instruction set architecture design  microarchitecture design  logic design  implementation    history   the first documented computer architecture correspondence charles babbage ada lovelace  describing analytical engine  when building computer z        konrad zuse described two patent applications future projects machine instructions could stored storage used data  i e   stored-program concept  two early important examples john von neumann      paper  first draft report edvac  described organization logical elements  andalan turing detailed proposed electronic calculator automatic computing engine  also      cited john von neumann paper the term  architecture  computer literature traced work lyle r  johnson frederick p  brooks  jr   members machine organization department ibm main research center       johnson opportunity write proprietary research communication stretch  ibm-developed supercomputer los alamos national laboratory  time known los alamos scientific laboratory   to describe level detail discussing luxuriously embellished computer  noted description formats  instruction types  hardware parameters  speed enhancements level  system architecture   term seemed useful  machine organization  subsequently  brooks  stretch designer  opened chapter   book called planning computer system  project stretch stating   computer architecture  like architecture  art determining needs user structure designing meet needs effectively possible within economic technological constraints  brooks went help develop ibm system      called ibm zseries  line computers   architecture  became noun defining  user needs know   later  computer users came use term many less explicit ways the earliest computer architectures designed paper directly built final hardware form later  computer architecture prototypes physically built form transistor transistor logic  ttl  computer prototypes      pa-risc tested  tweaked  committing final hardware form as      new computer architectures typically  built   tested  tweaked inside computer architecture computer architecture simulator  inside fpga soft microprocessor  committing final hardware form    subcategories   the discipline computer architecture three main subcategories instruction set architecture  isa   defines machine code processor reads acts upon well word size  memory address modes  processor registers  data type microarchitecture  also known  computer organization   describes particular processor implement isa  the size computer cpu cache instance  issue generally nothing isa systems design  includes hardware components within computing system  data processing cpu  e g   direct memory access   virtualization  multiprocessingthere technologies computer architecture  the following technologies used bigger companies like intel  estimated      count    computer architecture macroarchitecture  architectural layers abstract microarchitectureassembly instruction set architecture  a smart assembler may convert abstract assembly language common group machines slightly different machine language different implementations programmer-visible macroarchitecture  higher-level language tools compilers may define consistent interface contract programmers using  abstracting differences underlying isa  uisa  microarchitectures  for example  c  c    java standards define different programmer-visible macroarchitectures microcode  microcode software translates instructions run chip  it acts like wrapper around hardware  presenting preferred version hardware instruction set interface  this instruction translation facility gives chip designers flexible options  e g     a new improved version chip use microcode present exact instruction set old chip version  software targeting instruction set run new chip without needing changes  e g     microcode present variety instruction sets underlying chip  allowing run wider variety software uisa  user instruction set architecture  refers one three subsets risc cpu instructions provided powerpc risc processors  the uisa subset  risc instructions interest application developers  the two subsets vea  virtual environment architecture  instructions used virtualisation system developers  oea  operating environment architecture  used operation system developers pin architecture  the hardware functions microprocessor provide hardware platform  e g   x   pins a  m  ferr ignne flush  also  messages processor emit external caches invalidated  emptied   pin architecture functions flexible isa functions external hardware adapt new encodings  change pin message  the term  architecture  fits  functions must provided compatible systems  even detailed method changes    roles       definition    computer architecture concerned balancing performance  efficiency  cost  reliability computer system  the case instruction set architecture used illustrate balance competing factors  more complex instruction sets enable programmers write space efficient programs  since single instruction encode higher-level abstraction  x   loop instruction   however  longer complex instructions take longer processor decode costly implement effectively  the increased complexity large instruction set also creates room unreliability instructions interact unexpected ways the implementation involves integrated circuit design  packaging  power  cooling  optimization design requires familiarity compilers  operating systems logic design  packaging     instruction set architecture    an instruction set architecture  isa  interface computer software hardware also viewed programmer view machine  computers understand high-level programming languages java  c    programming languages used  a processor understands instructions encoded numerical fashion  usually binary numbers  software tools  compilers  translate high level languages instructions processor understand besides instructions  isa defines items computer available program e g   data types  registers  addressing modes  memory   instructions locate available items register indexes  names  memory addressing modes the isa computer usually described small instruction manual  describes instructions encoded  also  may define short  vaguely  mnemonic names instructions  the names recognized software development tool called assembler   an assembler computer program translates human-readable form isa computer-readable form   disassemblers also widely available  usually debuggers software programs isolate correct malfunctions binary computer programs isas vary quality completeness   a good isa compromises programmer convenience  easy code understand   size code  much code required specific action   cost computer interpret instructions  complexity means hardware needed decode execute instructions   speed computer  complex decoding hardware comes longer decode time    memory organization defines instructions interact memory  memory interacts itself during design emulation  emulators run programs written proposed instruction set  modern emulators measure size  cost  speed determine whether particular isa meeting goals     computer organization    computer organization helps optimize performance-based products  for example  software engineers need know processing power processors  they may need optimize software order gain performance lowest price  this require quite detailed analysis computer organization   for example  sd card  designers might need arrange card data processed fastest possible way computer organization also helps plan selection processor particular project  multimedia projects may need rapid data access  virtual machines may need fast interrupts  sometimes certain tasks need additional components well   for example  computer capable running virtual machine needs virtual memory hardware memory different virtual computers kept separated  computer organization features also affect power consumption processor cost     implementation    once instruction set micro-architecture designed  practical machine must developed  this design process called implementation  implementation usually considered architectural design  rather hardware design engineering  implementation broken several steps logic implementation designs circuits required logic-gate level circuit implementation transistor-level designs basic elements  e g   gates  multiplexers  latches  well larger blocks  alus  caches etc   may implemented logic-gate level  even physical level design calls it physical implementation draws physical circuits   the different circuit components placed chip floorplan board wires connecting created design validation tests computer whole see works situations timings  once design validation process starts  design logic level tested using logic emulators  however  usually slow run realistic test   so  making corrections based first test  prototypes constructed using field-programmable gate-arrays  fpgas   most hobby projects stop stage   the final step test prototype integrated circuits  may require several redesigns for cpus  entire implementation process organized differently often referred cpu design    design goals   the exact form computer system depends constraints goals  computer architectures usually trade standards  power versus performance  cost  memory capacity  latency  latency amount time takes information one node travel source  throughput  sometimes considerations  features  size  weight  reliability  expandability also factors the common scheme in-depth power analysis figures keep power consumption low maintaining adequate performance     performance    modern computer performance often described instructions per cycle  ipc   measures efficiency architecture clock frequency  faster ipc rate means computer faster  older computers ipc counts low     modern processors easily reach near    superscalar processors may reach three five ipc executing several instructions per clock cycle counting machine-language instructions would misleading varying amounts work different isas  the  instruction  standard measurements count isa machine-language instructions  unit measurement  usually based speed vax computer architecture many people used measure computer speed clock rate  usually mhz ghz   this refers cycles per second main clock cpu  however  metric somewhat misleading  machine higher clock rate may necessarily greater performance  as result  manufacturers moved away clock speed measure performance other factors influence speed  mix functional units  bus speeds  available memory  type order instructions programs there two main types speed  latency throughput  latency time start process completion  throughput amount work done per unit time   interrupt latency guaranteed maximum response time system electronic event  like disk drive finishes moving data  performance affected wide range design choices   example  pipelining processor usually makes latency worse  makes throughput better  computers control machinery usually need low interrupt latencies  these computers operate real-time environment fail operation completed specified amount time  for example  computer-controlled anti-lock brakes must begin braking within predictable limited time period brake pedal sensed else failure brake occur benchmarking takes factors account measuring time computer takes run series test programs  although benchmarking shows strengths  choose computer  often measured machines split different measures  for example  one system might handle scientific applications quickly  another might render video games smoothly  furthermore  designers may target add special features products  hardware software  permit specific benchmark execute quickly offer similar advantages general tasks     power efficiency    power efficiency another important measurement modern computers  a higher power efficiency often traded lower speed higher cost  the typical measurement referring power consumption computer architecture mips w  millions instructions per second per watt  modern circuits less power required per transistor number transistors per chip grows  this transistor put new chip requires power supply requires new pathways built power it  however number transistors per chip starting increase slower rate  therefore  power efficiency starting become important  important fitting more transistors single chip  recent processor designs shown emphasis put focus power efficiency rather cramming many transistors single chip possible  in world embedded computers  power efficiency long important goal next throughput latency     shifts market demand    increases clock frequency grown slowly past years  compared power reduction improvements  this driven end moore law demand longer battery life reductions size mobile technology  this change focus higher clock rates power consumption miniaturization shown significant reductions power consumption  much      reported intel release haswell microarchitecture  dropped power consumption benchmark       watts   -   watts  comparing processing speed increase   ghz   ghz             seen focus research development shifting away clock frequency moving towards consuming less power taking less space    see also   comparison cpu architecturescomputer hardwarecpu designfloating pointharvard architecture  modified dataflow architecturetransport triggered architecturereconfigurable computinginfluence ibm pc personal computer marketorthogonal instruction setsoftware architecturevon neumann architectureflynn taxonomy   references      sources   john l  hennessy david patterson         computer architecture  a quantitative approach  fourth ed    morgan kaufmann  isbn    - -  -      -  barton  robert s    functional design computers   communications acm                  barton  robert s    a new approach functional design digital computer   proceedings western joint computer conference  may       pp           about design burroughs b     computer bell  c  gordon  newell  allen          computer structures  readings examples   mcgraw-hill blaauw  g a   brooks  f p   jr    the structure system      part i-outline logical structure   ibm systems journal  vol     no     pp                tanenbaum  andrew s          structured computer organization  englewood cliffs  new jersey  prentice-hall  isbn  -  -      -     external links   isca  proceedings international symposium computer architecturemicro  ieee acm international symposium microarchitecturehpca  international symposium high performance computer architectureasplos  international conference architectural support programming languages operating systemsacm transactions architecture code optimizationieee transactions computersthe von neumann architecture computer systems
a central processing unit  cpu   also called central processor  main processor processor  electronic circuitry executes instructions comprising computer program  the cpu performs basic arithmetic  logic  controlling  input output  i o  operations specified instructions program  this contrasts external components main memory i o circuitry  specialized processors graphics processing units  gpus  the form  design  implementation cpus changed time  fundamental operation remains almost unchanged  principal components cpu include arithmetic logic unit  alu  performs arithmetic logic operations  processor registers supply operands alu store results alu operations  control unit orchestrates fetching  memory   decoding execution instructions directing coordinated operations alu  registers components most modern cpus implemented integrated circuit  ic  microprocessors  one cpus single metal-oxide-semiconductor  mos  ic chip  microprocessors chips multiple cpus multi-core processors  the individual physical cpus  processor cores  also multithreaded create additional virtual logical cpus an ic contains cpu may also contain memory  peripheral interfaces  components computer  integrated devices variously called microcontrollers systems chip  soc   array processors vector processors multiple processors operate parallel  unit considered central  virtual cpus abstraction dynamical aggregated computational resources    history   early computers eniac physically rewired perform different tasks  caused machines called  fixed-program computers   the  central processing unit  term use since early       since term  cpu  generally defined device software  computer program  execution  earliest devices could rightly called cpus came advent stored-program computer the idea stored-program computer already present design j  presper eckert john william mauchly eniac  initially omitted could finished sooner  on june           eniac made  mathematician john von neumann distributed paper entitled first draft report edvac  it outline stored-program computer would eventually completed august       edvac designed perform certain number instructions  operations  various types  significantly  programs written edvac stored high-speed computer memory rather specified physical wiring computer  this overcame severe limitation eniac  considerable time effort required reconfigure computer perform new task  with von neumann design  program edvac ran could changed simply changing contents memory  edvac  however  first stored-program computer  manchester baby  small-scale experimental stored-program computer  ran first program    june      manchester mark   ran first program night       june      early cpus custom designs used part larger sometimes distinctive computer  however  method designing custom cpus particular application largely given way development multi-purpose processors produced large quantities  this standardization began era discrete transistor mainframes minicomputers rapidly accelerated popularization integrated circuit  ic   the ic allowed increasingly complex cpus designed manufactured tolerances order nanometers  both miniaturization standardization cpus increased presence digital devices modern life far beyond limited application dedicated computing machines  modern microprocessors appear electronic devices ranging automobiles cellphones  sometimes even toys while von neumann often credited design stored-program computer design edvac  design became known von neumann architecture  others  konrad zuse  suggested implemented similar ideas  the so-called harvard architecture harvard mark i  completed edvac  also used stored-program design using punched paper tape rather electronic memory  the key difference von neumann harvard architectures latter separates storage treatment cpu instructions data  former uses memory space both  most modern cpus primarily von neumann design  cpus harvard architecture seen well  especially embedded applications  instance  atmel avr microcontrollers harvard architecture processors relays vacuum tubes  thermionic tubes  commonly used switching elements  useful computer requires thousands tens thousands switching devices  the overall speed system dependent speed switches  vacuum tube computers edvac tended average eight hours failures  whereas relay computers like  slower  earlier  harvard mark i failed rarely  in end  tube-based cpus became dominant significant speed advantages afforded generally outweighed reliability problems  most early synchronous cpus ran low clock rates compared modern microelectronic designs  clock signal frequencies ranging     khz   mhz common time  limited largely speed switching devices built with     transistor cpus    the design complexity cpus increased various technologies facilitated building smaller reliable electronic devices  the first improvement came advent transistor  transistorized cpus         longer built bulky  unreliable fragile switching elements like vacuum tubes relays  with improvement  complex reliable cpus built onto one several printed circuit boards containing discrete  individual  components in       ibm introduced ibm system     computer architecture used series computers capable running programs different speed performance  this significant time electronic computers incompatible one another  even made manufacturer  to facilitate improvement  ibm used concept microprogram  often called  microcode    still sees widespread usage modern cpus  the system     architecture popular dominated mainframe computer market decades left legacy still continued similar modern computers like ibm zseries  in       digital equipment corporation  dec  introduced another influential computer aimed scientific research markets  pdp-  transistor-based computers several distinct advantages predecessors  aside facilitating increased reliability lower power consumption  transistors also allowed cpus operate much higher speeds short switching time transistor comparison tube relay  the increased reliability dramatically increased speed switching elements  almost exclusively transistors time   cpu clock rates tens megahertz easily obtained period  additionally  discrete transistor ic cpus heavy usage  new high-performance designs like simd  single instruction multiple data  vector processors began appear  these early experimental designs later gave rise era specialized supercomputers like made cray inc fujitsu ltd     small-scale integration cpus    during period  method manufacturing many interconnected transistors compact space developed  the integrated circuit  ic  allowed large number transistors manufactured single semiconductor-based die   chip   at first  basic non-specialized digital circuits nor gates miniaturized ics  cpus based  building block  ics generally referred  small-scale integration   ssi  devices  ssi ics  ones used apollo guidance computer  usually contained dozen transistors  to build entire cpu ssi ics required thousands individual chips  still consumed much less space power earlier discrete transistor designs ibm system      follow-on system      used ssi ics rather solid logic technology discrete-transistor modules  dec pdp-  i ki   pdp-   also switched individual transistors used pdp-  pdp-   ssi ics  extremely popular pdp-   line originally built ssi ics eventually implemented lsi components became practical     large-scale integration cpus    lee boysel published influential articles  including       manifesto   described build equivalent   -bit mainframe computer relatively small number large-scale integration circuits  lsi   the way build lsi chips  chips hundred gates  build using mos semiconductor manufacturing process  either pmos logic  nmos logic  cmos logic   however  companies continued build processors bipolar transistor transistor logic  ttl  chips bipolar junction transistors faster mos chips      companies datapoint continued build processors ttl chips early       in      mos ics slower initially considered useful applications required low power  following development silicon-gate mos technology federico faggin fairchild semiconductor       mos ics largely replaced bipolar ttl standard chip technology early     s as microelectronic technology advanced  increasing number transistors placed ics  decreasing number individual ics needed complete cpu  msi lsi ics increased transistor counts hundreds  thousands  by       number ics required build complete cpu reduced    ics eight different types  ic containing roughly      mosfets  in stark contrast ssi msi predecessors  first lsi implementation pdp-   contained cpu composed four lsi integrated circuits     microprocessors    advances mos ic technology led invention microprocessor early     s  since introduction first commercially available microprocessor  intel            first widely used microprocessor  intel            class cpus almost completely overtaken central processing unit implementation methods  mainframe minicomputer manufacturers time launched proprietary ic development programs upgrade older computer architectures  eventually produced instruction set compatible microprocessors backward-compatible older hardware software  combined advent eventual success ubiquitous personal computer  term cpu applied almost exclusively microprocessors  several cpus  denoted cores  combined single processing chip previous generations cpus implemented discrete components numerous small integrated circuits  ics  one circuit boards  microprocessors  hand  cpus manufactured small number ics  usually one  the overall smaller cpu size  result implemented single die  means faster switching time physical factors like decreased gate parasitic capacitance  this allowed synchronous microprocessors clock rates ranging tens megahertz several gigahertz  additionally  ability construct exceedingly small transistors ic increased complexity number transistors single cpu many fold  this widely observed trend described moore law  proven fairly accurate predictor growth cpu  ic  complexity      while complexity  size  construction general form cpus changed enormously since       basic design function changed much all  almost common cpus today accurately described von neumann stored-program machines  as moore law longer holds  concerns arisen limits integrated circuit transistor technology  extreme miniaturization electronic gates causing effects phenomena like electromigration subthreshold leakage become much significant  these newer concerns among many factors causing researchers investigate new methods computing quantum computer  well expand usage parallelism methods extend usefulness classical von neumann model    operation   the fundamental operation cpus  regardless physical form take  execute sequence stored instructions called program  the instructions executed kept kind computer memory  nearly cpus follow fetch  decode execute steps operation  collectively known instruction cycle after execution instruction  entire process repeats  next instruction cycle normally fetching next-in-sequence instruction incremented value program counter  if jump instruction executed  program counter modified contain address instruction jumped program execution continues normally  in complex cpus  multiple instructions fetched  decoded executed simultaneously  this section describes generally referred  classic risc pipeline   quite common among simple cpus used many electronic devices  often called microcontrollers   it largely ignores important role cpu cache  therefore access stage pipeline some instructions manipulate program counter rather producing result data directly  instructions generally called  jumps  facilitate program behavior like loops  conditional program execution  use conditional jump   existence functions  in processors  instructions change state bits  flags  register  these flags used influence program behaves  since often indicate outcome various operations  for example  processors  compare  instruction evaluates two values sets clears bits flags register indicate one greater whether equal  one flags could used later jump instruction determine program flow     fetch    the first step  fetch  involves retrieving instruction  represented number sequence numbers  program memory  the instruction location  address  program memory determined program counter  pc  called  instruction pointer  intel x   microprocessors   stores number identifies address next instruction fetched  after instruction fetched  pc incremented length instruction contain address next instruction sequence  often  instruction fetched must retrieved relatively slow memory  causing cpu stall waiting instruction returned  this issue largely addressed modern processors caches pipeline architectures  see      decode    the instruction cpu fetches memory determines cpu do  in decode step  performed binary decoder circuitry known instruction decoder  instruction converted signals control parts cpu the way instruction interpreted defined cpu instruction set architecture  isa   often  one group bits    field   within instruction  called opcode  indicates operation performed  remaining fields usually provide supplemental information required operation  operands  those operands may specified constant value  called immediate value   location value may processor register memory address  determined addressing mode in cpu designs instruction decoder implemented hardwired  unchangeable binary decoder circuit  in others  microprogram used translate instructions sets cpu configuration signals applied sequentially multiple clock pulses  in cases memory stores microprogram rewritable  making possible change way cpu decodes instructions     execute    after fetch decode steps  execute step performed  depending cpu architecture  may consist single action sequence actions  during action  control signals electrically enable disable various parts cpu perform part desired operation  the action completed  typically response clock pulse  very often results written internal cpu register quick access subsequent instructions  in cases results may written slower  less expensive higher capacity main memory for example  addition instruction executed  registers containing operands  numbers summed  activated  parts arithmetic logic unit  alu  perform addition  when clock pulse occurs  operands flow source registers alu  sum appears output  on subsequent clock pulses  components enabled  disabled  move output  sum operation  storage  e g   register memory   if resulting sum large  i e   larger alu output word size   arithmetic overflow flag set  influencing next operation    structure implementation   hardwired cpu circuitry set basic operations perform  called instruction set  such operations may involve  example  adding subtracting two numbers  comparing two numbers  jumping different part program  each instruction represented unique combination bits  known machine language opcode  while processing instruction  cpu decodes opcode  via binary decoder  control signals  orchestrate behavior cpu  a complete machine language instruction consists opcode  many cases  additional bits specify arguments operation  example  numbers summed case addition operation   going complexity scale  machine language program collection machine language instructions cpu executes the actual mathematical operation instruction performed combinational logic circuit within cpu processor known arithmetic logic unit alu  in general  cpu executes instruction fetching memory  using alu perform operation  storing result memory  beside instructions integer mathematics logic operations  various machine instructions exist  loading data memory storing back  branching operations  mathematical operations floating-point numbers performed cpu floating-point unit  fpu      control unit    the control unit  cu  component cpu directs operation processor  it tells computer memory  arithmetic logic unit input output devices respond instructions sent processor it directs operation units providing timing control signals  most computer resources managed cu  it directs flow data cpu devices  john von neumann included control unit part von neumann architecture  in modern computer designs  control unit typically internal part cpu overall role operation unchanged since introduction     arithmetic logic unit    the arithmetic logic unit  alu  digital circuit within processor performs integer arithmetic bitwise logic operations  the inputs alu data words operated  called operands   status information previous operations  code control unit indicating operation perform  depending instruction executed  operands may come internal cpu registers external memory  may constants generated alu itself when input signals settled propagated alu circuitry  result performed operation appears alu outputs  the result consists data word  may stored register memory  status information typically stored special  internal cpu register reserved purpose     address generation unit    address generation unit  agu   sometimes also called address computation unit  acu   execution unit inside cpu calculates addresses used cpu access main memory  by address calculations handled separate circuitry operates parallel rest cpu  number cpu cycles required executing various machine instructions reduced  bringing performance improvements while performing various operations  cpus need calculate memory addresses required fetching data memory  example  in-memory positions array elements must calculated cpu fetch data actual memory locations  those address-generation calculations involve different integer arithmetic operations  addition  subtraction  modulo operations  bit shifts  often  calculating memory address involves one general-purpose machine instruction  necessarily decode execute quickly  by incorporating agu cpu design  together introducing specialized instructions use agu  various address-generation calculations offloaded rest cpu  often executed quickly single cpu cycle capabilities agu depend particular cpu architecture  thus  agus implement expose address-calculation operations  also include advanced specialized instructions operate multiple operands time  furthermore  cpu architectures include multiple agus one address-calculation operation executed simultaneously  bringing performance improvements capitalizing superscalar nature advanced cpu designs  for example  intel incorporates multiple agus sandy bridge haswell microarchitectures  increase bandwidth cpu memory subsystem allowing multiple memory-access instructions executed parallel     memory management unit  mmu     many microprocessors  smartphones desktop  laptop  server computers  memory management unit  translating logical addresses physical ram addresses  providing memory protection paging abilities  useful virtual memory  simpler processors  especially microcontrollers  usually include mmu     cache    a cpu cache hardware cache used central processing unit  cpu  computer reduce average cost  time energy  access data main memory  a cache smaller  faster memory  closer processor core  stores copies data frequently used main memory locations  most cpus different independent caches  including instruction data caches  data cache usually organized hierarchy cache levels  l   l   l   l   etc   all modern  fast  cpus  specialized exceptions  multiple levels cpu caches  the first cpus used cache one level cache  unlike later level   caches  split l  data  l  instructions   almost current cpus caches split l  cache  they also l  caches  larger processors  l  caches well  the l  cache usually split acts common repository already split l  cache  every core multi-core processor dedicated l  cache usually shared cores  the l  cache  higher-level caches  shared cores split  an l  cache currently uncommon  generally dynamic random-access memory  dram   rather static random-access memory  sram   separate die chip  that also case historically l   bigger chips allowed integration generally cache levels  possible exception last level  each extra level cache tends bigger optimized differently other types caches exist  counted towards  cache size  important caches mentioned   translation lookaside buffer  tlb  part memory management unit  mmu  cpus have caches generally sized powers two           etc  kib mib  larger non-l   sizes  although ibm z      kib l  instruction cache     clock rate    most cpus synchronous circuits  means employ clock signal pace sequential operations  the clock signal produced external oscillator circuit generates consistent number pulses second form periodic square wave  the frequency clock pulses determines rate cpu executes instructions  consequently  faster clock  instructions cpu execute second to ensure proper operation cpu  clock period longer maximum time needed signals propagate  move  cpu  in setting clock period value well worst-case propagation delay  possible design entire cpu way moves data around  edges  rising falling clock signal  this advantage simplifying cpu significantly  design perspective component-count perspective  however  also carries disadvantage entire cpu must wait slowest elements  even though portions much faster  this limitation largely compensated various methods increasing cpu parallelism  see  however  architectural improvements alone solve drawbacks globally synchronous cpus  for example  clock signal subject delays electrical signal  higher clock rates increasingly complex cpus make difficult keep clock signal phase  synchronized  throughout entire unit  this led many modern cpus require multiple identical clock signals provided avoid delaying single signal significantly enough cause cpu malfunction  another major issue  clock rates increase dramatically  amount heat dissipated cpu  the constantly changing clock causes many components switch regardless whether used time  in general  component switching uses energy element static state  therefore  clock rate increases  energy consumption  causing cpu require heat dissipation form cpu cooling solutions one method dealing switching unneeded components called clock gating  involves turning clock signal unneeded components  effectively disabling   however  often regarded difficult implement therefore see common usage outside low-power designs  one notable recent cpu design uses extensive clock gating ibm powerpc-based xenon used xbox      way  power requirements xbox     greatly reduced  another method addressing problems global clock signal removal clock signal altogether  while removing global clock signal makes design process considerably complex many ways  asynchronous  clockless  designs carry marked advantages power consumption heat dissipation comparison similar synchronous designs  while somewhat uncommon  entire asynchronous cpus built without using global clock signal  two notable examples arm compliant amulet mips r     compatible minimips rather totally removing clock signal  cpu designs allow certain portions device asynchronous  using asynchronous alus conjunction superscalar pipelining achieve arithmetic performance gains  while altogether clear whether totally asynchronous designs perform comparable better level synchronous counterparts  evident least excel simpler math operations  this  combined excellent power consumption heat dissipation properties  makes suitable embedded computers     voltage regulator module    many modern cpus die-integrated power managing module regulates on-demand voltage supply cpu circuitry allowing keep balance performance power consumption     integer range    every cpu represents numerical values specific way  for example  early digital computers represented numbers familiar decimal  base     numeral system values  others employed unusual representations ternary  base three   nearly modern cpus represent numbers binary form  digit represented two-valued physical quantity  high   low  voltage related numeric representation size precision integer numbers cpu represent  in case binary cpu  measured number bits  significant digits binary encoded integer  cpu process one operation  commonly called word size  bit width  data path width  integer precision  integer size  a cpu integer size determines range integer values directly operate on  for example   -bit cpu directly manipulate integers represented eight bits  range          discrete integer values integer range also affect number memory locations cpu directly address  address integer value representing specific memory location   for example  binary cpu uses    bits represent memory address directly address     memory locations  to circumvent limitation various reasons  cpus use mechanisms  bank switching  allow additional memory addressed cpus larger word sizes require circuitry consequently physically larger  cost consume power  therefore generate heat   as result  smaller  -  -bit microcontrollers commonly used modern applications even though cpus much larger word sizes              even    -bit  available  when higher performance required  however  benefits larger word size  larger data ranges address spaces  may outweigh disadvantages  a cpu internal data paths shorter word size reduce size cost  for example  even though ibm system     instruction set   -bit instruction set  system     model    model     -bit data paths arithmetic logical unit    -bit add required four cycles  one   bits operands   even though motorola       series instruction set   -bit instruction set  motorola       motorola         -bit data paths arithmetic logical unit    -bit add required two cycles to gain advantages afforded lower higher bit lengths  many instruction sets different bit widths integer floating-point data  allowing cpus implementing instruction set different bit widths different portions device  for example  ibm system     instruction set primarily    bit  supported   -bit floating point values facilitate greater accuracy range floating point numbers  the system     model     -bit adder decimal fixed-point binary arithmetic   -bit adder floating-point arithmetic  many later cpu designs use similar mixed bit width  especially processor meant general-purpose usage reasonable balance integer floating point capability required     parallelism    the description basic operation cpu offered previous section describes simplest form cpu take  this type cpu  usually referred subscalar  operates executes one instruction one two pieces data time  less one instruction per clock cycle  ipc      this process gives rise inherent inefficiency subscalar cpus  since one instruction executed time  entire cpu must wait instruction complete proceeding next instruction  as result  subscalar cpu gets  hung  instructions take one clock cycle complete execution  even adding second execution unit  see  improve performance much  rather one pathway hung  two pathways hung number unused transistors increased  this design  wherein cpu execution resources operate one instruction time  possibly reach scalar performance  one instruction per clock cycle  ipc       however  performance nearly always subscalar  less one instruction per clock cycle  ipc      attempts achieve scalar better performance resulted variety design methodologies cause cpu behave less linearly parallel  when referring parallelism cpus  two terms generally used classify design techniques instruction-level parallelism  ilp   seeks increase rate instructions executed within cpu   increase use on-die execution resources  task-level parallelism  tlp   purposes increase number threads processes cpu execute simultaneously each methodology differs ways implemented  well relative effectiveness afford increasing cpu performance application      instruction-level parallelism     one simplest methods increased parallelism begin first steps instruction fetching decoding prior instruction finishes executing  this technique known instruction pipelining  used almost modern general-purpose cpus  pipelining allows multiple instruction executed time breaking execution pathway discrete stages  this separation compared assembly line  instruction made complete stage exits execution pipeline retired pipelining  however  introduce possibility situation result previous operation needed complete next operation  condition often termed data dependency conflict  therefore pipelined processors must check sorts conditions delay portion pipeline necessary   a pipelined processor become nearly scalar  inhibited pipeline stalls  instruction spending one clock cycle stage  improvements instruction pipelining led decreases idle time cpu components  designs said superscalar include long instruction pipeline multiple identical execution units  load-store units  arithmetic-logic units  floating-point units address generation units  in superscalar pipeline  instructions read passed dispatcher  decides whether instructions executed parallel  simultaneously   if  dispatched execution units  resulting simultaneous execution  in general  number instructions superscalar cpu complete cycle dependent number instructions able dispatch simultaneously execution units most difficulty design superscalar cpu architecture lies creating effective dispatcher  the dispatcher needs able quickly determine whether instructions executed parallel  well dispatch way keep many execution units busy possible  this requires instruction pipeline filled often possible requires significant amounts cpu cache  it also makes hazard-avoiding techniques like branch prediction  speculative execution  register renaming  out-of-order execution transactional memory crucial maintaining high levels performance  by attempting predict branch  path  conditional instruction take  cpu minimize number times entire pipeline must wait conditional instruction completed  speculative execution often provides modest performance increases executing portions code may needed conditional operation completes  out-of-order execution somewhat rearranges order instructions executed reduce delays due data dependencies  also case single instruction stream  multiple data stream case lot data type processed   modern processors disable parts pipeline single instruction executed many times  cpu skips fetch decode phases thus greatly increases performance certain occasions  especially highly monotonous program engines video creation software photo processing in case portion cpu superscalar  part suffers performance penalty due scheduling stalls  the intel p  pentium two superscalar alus could accept one instruction per clock cycle  fpu could not  thus p  integer superscalar floating point superscalar  intel successor p  architecture  p   added superscalar abilities floating point features simple pipelining superscalar design increase cpu ilp allowing execute instructions rates surpassing one instruction per clock cycle  most modern cpu designs least somewhat superscalar  nearly general purpose cpus designed last decade superscalar  in later years emphasis designing high-ilp computers moved cpu hardware software interface  instruction set architecture  isa   the strategy long instruction word  vliw  causes ilp become implied directly software  reducing cpu work boosting ilp thereby reducing design complexity      task-level parallelism     another strategy achieving performance execute multiple threads processes parallel  this area research known parallel computing  in flynn taxonomy  strategy known multiple instruction stream  multiple data stream  mimd  one technology used purpose multiprocessing  mp   the initial flavor technology known symmetric multiprocessing  smp   small number cpus share coherent view memory system  in scheme  cpu additional hardware maintain constantly up-to-date view memory  by avoiding stale views memory  cpus cooperate program programs migrate one cpu another  to increase number cooperating cpus beyond handful  schemes non-uniform memory access  numa  directory-based coherence protocols introduced     s  smp systems limited small number cpus numa systems built thousands processors  initially  multiprocessing built using multiple discrete cpus boards implement interconnect processors  when processors interconnect implemented single chip  technology known chip-level multiprocessing  cmp  single chip multi-core processor it later recognized finer-grain parallelism existed single program  a single program might several threads  functions  could executed separately parallel  some earliest examples technology implemented input output processing direct memory access separate thread computation thread  a general approach technology introduced     systems designed run multiple computation threads parallel  this technology known multi-threading  mt   this approach considered cost-effective multiprocessing  small number components within cpu replicated support mt opposed entire cpu case mp  in mt  execution units memory system including caches shared among multiple threads  the downside mt hardware support multithreading visible software mp thus supervisor software like operating systems undergo larger changes support mt  one type mt implemented known temporal multithreading  one thread executed stalled waiting data return external memory  in scheme  cpu would quickly context switch another thread ready run  switch often done one cpu clock cycle  ultrasparc t   another type mt simultaneous multithreading  instructions multiple threads executed parallel within one cpu clock cycle for several decades     early      focus designing high performance general purpose cpus largely achieving high ilp technologies pipelining  caches  superscalar execution  out-of-order execution  etc  this trend culminated large  power-hungry cpus intel pentium    by early      cpu designers thwarted achieving higher performance ilp techniques due growing disparity cpu operating frequencies main memory operating frequencies well escalating cpu power dissipation owing esoteric ilp techniques cpu designers borrowed ideas commercial computing markets transaction processing  aggregate performance multiple programs  also known throughput computing  important performance single thread process this reversal emphasis evidenced proliferation dual core processor designs notably  intel newer designs resembling less superscalar p  architecture  late designs several processor families exhibit cmp  including x  -   opteron athlon    x   sparc ultrasparc t   ibm power  power   well several video game console cpus like xbox     triple-core powerpc design  playstation    -core cell microprocessor      data parallelism     a less common increasingly important paradigm processors  indeed  computing general  deals data parallelism  the processors discussed earlier referred type scalar device  as name implies  vector processors deal multiple pieces data context one instruction  this contrasts scalar processors  deal one piece data every instruction  using flynn taxonomy  two schemes dealing data generally referred single instruction stream  multiple data stream  simd  single instruction stream  single data stream  sisd   respectively  the great utility creating processors deal vectors data lies optimizing tasks tend require operation  example  sum dot product  performed large set data  some classic examples types tasks include multimedia applications  images  video sound   well many types scientific engineering tasks  whereas scalar processor must complete entire process fetching  decoding executing instruction value set data  vector processor perform single operation comparatively large set data one instruction  this possible application tends require many steps apply one operation large set data most early vector processors  cray-   associated almost exclusively scientific research cryptography applications  however  multimedia largely shifted digital media  need form simd general-purpose processors become significant  shortly inclusion floating-point units started become commonplace general-purpose processors  specifications implementations simd execution units also began appear general-purpose processors  some early simd specifications - like hp multimedia acceleration extensions  max  intel mmx - integer-only  this proved significant impediment software developers  since many applications benefit simd primarily deal floating-point numbers  progressively  developers refined remade early designs common modern simd specifications  usually associated one instruction set architecture  isa   some notable modern examples include intel streaming simd extensions  sse  powerpc-related altivec  also known vmx     virtual cpus   cloud computing involve subdividing cpu operation virtual central processing units  vcpus  a host virtual equivalent physical machine  virtual system operating  when several physical machines operating tandem managed whole  grouped computing memory resources form cluster  in systems  possible dynamically add remove cluster  resources available host cluster level partitioned resources pools fine granularity    performance   the performance speed processor depends  among many factors  clock rate  generally given multiples hertz  instructions per clock  ipc   together factors instructions per second  ips  cpu perform many reported ips values represented  peak  execution rates artificial instruction sequences branches  whereas realistic workloads consist mix instructions applications  take longer execute others  the performance memory hierarchy also greatly affects processor performance  issue barely considered mips calculations  because problems  various standardized tests  often called  benchmarks  purpose   specint   developed attempt measure real effective performance commonly used applications processing performance computers increased using multi-core processors  essentially plugging two individual processors  called cores sense  one integrated circuit  ideally  dual core processor would nearly twice powerful single core processor  in practice  performance gain far smaller       due imperfect software algorithms implementation  increasing number cores processor  i e  dual-core  quad-core  etc   increases workload handled  this means processor handle numerous asynchronous events  interrupts  etc  take toll cpu overwhelmed  these cores thought different floors processing plant  floor handling different task  sometimes  cores handle tasks cores adjacent single core enough handle information due specific capabilities modern cpus  simultaneous multithreading uncore  involve sharing actual cpu resources aiming increased utilization  monitoring performance levels hardware use gradually became complex task  as response  cpus implement additional hardware logic monitors actual use various parts cpu provides various counters accessible software  example intel performance counter monitor technology    see also      notes      references      external links   how microprocessors work howstuffworks    microchips shook world   article institute electrical electronics engineers 
in computing  memory device system used store information immediate use computer related computer hardware digital electronic devices  the term memory often synonymous term primary storage main memory  an archaic synonym memory store computer memory operates high speed compared storage slower offers higher capacities  if needed  contents computer memory transferred storage  common way memory management technique called virtual memory  modern memory implemented semiconductor memory  data stored within memory cells built mos transistors components integrated circuit  there two main kinds semiconductor memory  volatile non-volatile  examples non-volatile memory flash memory rom  prom  eprom eeprom memory  examples volatile memory dynamic random-access memory  dram  used primary storage  static random-access memory  sram  used cpu cache most semiconductor memory organized memory cells storing one bit        flash memory organization includes one bit per memory cell multi-level cell capable storing multiple bits per cell   the memory cells grouped words fixed word length  example                             bits  each word accessed binary address n bits  making possible store  n words memory    history   in early      memory technology often permitted capacity bytes   the first electronic programmable digital computer  eniac  using thousands vacuum tubes  could perform simple calculations involving    numbers ten decimal digits stored vacuum tubes the next significant advance computer memory came acoustic delay line memory  developed j  presper eckert early     s  through construction glass tube filled mercury plugged end quartz crystal  delay lines could store bits information form sound waves propagating mercury  quartz crystals acting transducers read write bits  delay line memory limited capacity thousand bits two alternatives delay line  williams tube selectron tube  originated       using electron beams glass tubes means storage   using cathode ray tubes  fred williams invented williams tube  first random-access computer memory   the williams tube able store information selectron tube  selectron limited     bits  williams tube could store thousands  less expensive   the williams tube nevertheless frustratingly sensitive environmental disturbances efforts began late     find non-volatile memory  magnetic-core memory allowed recall memory power loss  it developed frederick w  viehe an wang late      improved jay forrester jan a  rajchman early      commercialised whirlwind computer       magnetic-core memory dominant form memory development mos semiconductor memory     s the first semiconductor memory implemented flip-flop circuit early     using bipolar transistors  semiconductor memory made discrete devices first shipped texas instruments united states air force       the year  concept solid-state memory integrated circuit  ic  chip proposed applications engineer bob norman fairchild semiconductor  the first bipolar semiconductor memory ic chip sp   introduced ibm       while semiconductor memory offered improved performance magnetic-core memory  remain larger expensive displace magnetic-core memory late     s     mos memory    the invention mosfet  metal oxide semiconductor field-effect transistor  mos transistor   mohamed m  atalla dawon kahng bell labs       enabled practical use metal oxide semiconductor  mos  transistors memory cell storage elements  mos memory developed john schmidt fairchild semiconductor       in addition higher performance  mos semiconductor memory cheaper consumed less power magnetic core memory  in       j  wood r  ball royal radar establishment proposed digital storage systems use cmos  complementary mos  memory cells  addition mosfet power devices power supply  switched cross-coupling  switches delay line storage  the development silicon-gate mos integrated circuit  mos ic  technology federico faggin fairchild      enabled production mos memory chips  nmos memory commercialized ibm early     s  mos memory overtook magnetic core memory dominant memory technology early     s the two main types volatile random-access memory  ram  static random-access memory  sram  dynamic random-access memory  dram   bipolar sram invented robert norman fairchild semiconductor       followed development mos sram john schmidt fairchild       sram became alternative magnetic-core memory  required six mos transistors bit data  commercial use sram began       ibm introduced sp   sram chip system     model    toshiba introduced bipolar dram memory cells toscal bc-     electronic calculator       while offered improved performance magnetic-core memory  bipolar dram could compete lower price dominant magnetic-core memory  mos technology basis modern dram  in       dr  robert h  dennard ibm thomas j  watson research center working mos memory  while examining characteristics mos technology  found capable building capacitors  storing charge charge mos capacitor could represent     bit  mos transistor could control writing charge capacitor  this led development single-transistor dram memory cell  in       dennard filed patent ibm single-transistor dram memory cell  based mos technology  this led first commercial dram ic chip  intel       october       synchronous dynamic random-access memory  sdram  later debuted samsung km  sl     chip      the term memory also often used refer non-volatile memory  specifically flash memory  it origins read-only memory  rom   programmable read-only memory  prom  invented wen tsing chow       working arma division american bosch arma corporation  in       dawon kahng simon sze bell labs proposed floating gate mos semiconductor device could used cell reprogrammable read-only memory  rom   led dov frohman intel inventing eprom  erasable prom        eeprom  electrically erasable prom  developed yasuo tarui  yutaka hayashi kiyoko naga electrotechnical laboratory       flash memory invented fujio masuoka toshiba early     s  masuoka colleagues presented invention nor flash       nand flash       toshiba commercialized nand flash memory      developments technology economies scale made possible so-called very large memory  vlm  computers    volatile memory   volatile memory computer memory requires power maintain stored information   most modern semiconductor volatile memory either static ram  sram  dynamic ram  dram   sram retains contents long power connected simpler interfacing  uses six transistors per bit  dynamic ram complicated interfacing control  needing regular refresh cycles prevent losing contents  uses one transistor one capacitor per bit  allowing reach much higher densities much cheaper per-bit costs sram worthwhile desktop system memory  dram dominates  used cache memories   sram commonplace small embedded systems  might need tens kilobytes less  volatile memory technologies attempted compete replace sram dram include z-ram a-ram    non-volatile memory   non-volatile memory computer memory retain stored information even powered  examples non-volatile memory include read-only memory  see rom   flash memory  types magnetic computer storage devices  e g  hard disk drives  floppy disks magnetic tape   optical discs  early computer storage methods paper tape punched cards forthcoming non-volatile memory technologies include feram  cbram  pram  stt-ram  sonos  rram  racetrack memory  nram   d xpoint  millipede memory    semi-volatile memory   a third category memory  semi-volatile    the term used describe memory limited non-volatile duration power removed  data ultimately lost   a typical goal using semi-volatile memory provide high performance durability etc  associated volatile memories  providing benefits true non-volatile memory for example  non-volatile memory types wear   worn  cell increased volatility otherwise continues work   data locations written frequently thus directed use worn circuits   as long location updated within known retention time  data stays valid   if retention time  expires  without update  value copied less-worn circuit longer retention   writing first worn area allows high write rate avoiding wear not-worn circuits as second example  stt-ram made non-volatile building large cells  cost per bit write power go  write speed goes down   using small cells improves cost  power  speed  leads semi-volatile behavior   in applications increased volatility managed provide many benefits non-volatile memory  example removing power forcing wake-up data lost  caching read-only data discarding cached data power-off time exceeds non-volatile threshold the term semi-volatile also used describe semi-volatile behavior constructed memory types   for example  volatile non-volatile memory may combined  external signal copies data volatile memory non-volatile memory  power removed without copying  data lost   or  battery-backed volatile memory  external power lost known period battery continue power volatile memory  power extended time  battery runs data lost    management   proper management memory vital computer system operate properly  modern operating systems complex systems properly manage memory  failure lead bugs  slow performance  worst case  takeover viruses malicious software     bugs    improper management memory common cause bugs  including following types in arithmetic overflow  calculation results number larger allocated memory permits  for example  signed  -bit integer allows numbers            if value     instructed add one  computer store number     space  such case result undesired operation  changing number value      instead      a memory leak occurs program requests memory operating system never returns memory done it  a program bug gradually require more memory program fails runs out a segmentation fault results program tries access memory permission access  generally program terminated operating system a buffer overflow means program writes data end allocated space continues write data memory allocated purposes  this may result erratic program behavior  including memory access errors  incorrect results  crash  breach system security  they thus basis many software vulnerabilities maliciously exploited     early computer systems    in early computer systems  programs typically specified location write memory data put there  this location physical location actual memory hardware  the slow processing computers allow complex memory management systems used today  also  systems single-task  sophisticated systems required much this approach pitfalls  if location specified incorrect  cause computer write data part program  the results error like unpredictable  in cases  incorrect data might overwrite memory used operating system  computer crackers take advantage create viruses malware     virtual memory    virtual memory system physical memory controlled operating system  when program needs memory  requests operating system  the operating system decides physical location place program code data this offers several advantages  computer programmers longer need worry data physically stored whether user computer enough memory  it also allows multiple types memory used  for example  data stored physical ram chips data stored hard drive  e g  swapfile   functioning extension cache hierarchy  this drastically increases amount memory available programs  the operating system place actively used data physical ram  much faster hard disks  when amount ram sufficient run current programs  result situation computer spends time moving data ram disk back accomplishing tasks  known thrashing     protected memory    protected memory system program given area memory use permitted go outside range  use protected memory greatly enhances reliability security computer system without protected memory  possible bug one program alter memory used another program  this cause program run corrupted memory unpredictable results  if operating system memory corrupted  entire computer system may crash need rebooted  at times programs intentionally alter memory used programs  this done viruses malware take computers  it may also used benignly desirable programs intended modify programs  modern age  generally considered bad programming practice application programs  may used system development tools debuggers  example insert breakpoints hooks protected memory assigns programs areas memory  if operating system detects program tried alter memory belong  program terminated  otherwise restricted redirected   this way  offending program crashes  programs affected misbehavior  whether accidental intentional  protected memory systems almost always include virtual memory well    see also   memory geometrymemory hierarchymemory organizationprocessor registers store data normally considered memory  since store one word include addressing mechanism semiconductor memoryunits information   notes      references      further reading   miller  stephen w          memory storage technology  montvale   afips pressmemory storage technology  alexandria  virginia   time life books      
an operating system  os  system software manages computer hardware  software resources  provides common services computer programs time-sharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time  mass storage  printing  resources for hardware functions input output memory allocation  operating system acts intermediary programs computer hardware  although application code usually executed directly hardware frequently makes system calls os function interrupted it  operating systems found many devices contain computer    cellular phones video game consoles web servers supercomputers the dominant general-purpose personal computer operating system microsoft windows market share around         macos apple inc  second place           varieties linux collectively third place          in mobile sector  including smartphones tablets   android share     year       according third quarter      data  android share smartphones dominant      percent also growth rate      percent per year  followed apple ios      percent per year decrease market share     percent  operating systems amount     percent  linux distributions dominant server supercomputing sectors  other specialized classes operating systems  special-purpose operating systems   embedded real-time systems  exist many applications  security-focused operating systems also exist  some operating systems low system requirements  e g  light-weight linux distribution   others may higher system requirements some operating systems require installation may come pre-installed purchased computers  oem-installation   whereas others may run directly media  i e  live cd  flash memory  i e  usb stick     types operating systems       single-tasking multi-tasking    a single-tasking system run one program time  multi-tasking operating system allows one program running concurrency  this achieved time-sharing  available processor time divided multiple processes  these processes interrupted repeatedly time slices task-scheduling subsystem operating system  multi-tasking may characterized preemptive co-operative types  in preemptive multitasking  operating system slices cpu time dedicates slot programs  unix-like operating systems  linux well non-unix-like  amigaos support preemptive multitasking  cooperative multitasking achieved relying process provide time processes defined manner    -bit versions microsoft windows used cooperative multi-tasking    -bit versions windows nt win x used preemptive multi-tasking     single- multi-user    single-user operating systems facilities distinguish users  may allow multiple programs run tandem  a multi-user operating system extends basic concept multi-tasking facilities identify processes resources  disk space  belonging multiple users  system permits multiple users interact system time  time-sharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time  mass storage  printing  resources multiple users     distributed    a distributed operating system manages group distinct  networked computers makes appear single computer  computations distributed  divided amongst constituent computers      templated    in distributed cloud computing context os  templating refers creating single virtual machine image guest operating system  saving tool multiple running virtual machines  the technique used virtualization cloud computing management  common large server warehouses     embedded    embedded operating systems designed used embedded computer systems  they designed operate small machines less autonomy  e g  pdas   they compact extremely efficient design  able operate limited amount resources  windows ce minix   examples embedded operating systems     real-time    a real-time operating system operating system guarantees process events data specific moment time  a real-time operating system may single- multi-tasking  multitasking  uses specialized scheduling algorithms deterministic nature behavior achieved  such event-driven system switches tasks based priorities external events  whereas time-sharing operating systems switch tasks based clock interrupts     library    a library operating system one services typical operating system provides  networking  provided form libraries composed application configuration code construct unikernel  specialized  single address space  machine image deployed cloud embedded environments    history   early computers built perform series single tasks  like calculator  basic operating system features developed      resident monitor functions could automatically run different programs succession speed processing  operating systems exist modern complex forms early     s    hardware features added  enabled use runtime libraries  interrupts  parallel processing  when personal computers became popular      operating systems made similar concept used larger computers in      earliest electronic digital systems operating systems   electronic systems time programmed rows mechanical switches jumper wires plugboards   these special-purpose systems  example  generated ballistics tables military controlled printing payroll checks data punched paper cards   after programmable general-purpose computers invented  machine languages consisting strings binary digits     punched paper tape  introduced sped programming process  stern        in early      computer could execute one program time   each user sole use computer limited period would arrive scheduled time program data punched paper cards punched tape  the program would loaded machine  machine would set work program completed crashed  programs could generally debugged via front panel using toggle switches panel lights  it said alan turing master early manchester mark   machine  already deriving primitive conception operating system principles universal turing machine later machines came libraries programs  would linked user program assist operations input output compiling  generating machine code human-readable symbolic code   this genesis modern-day operating system  however  machines still ran single job time  at cambridge university england  job queue one time washing line  clothesline  tapes hung different colored clothes-pegs indicate job priority an improvement atlas supervisor  introduced manchester atlas       considered many first recognisable modern operating system  brinch hansen described  significant breakthrough history operating systems      mainframes    through      many major features pioneered field operating systems mainframe computers  including batch processing  input output interrupting  buffering  multitasking  spooling  runtime libraries  link-loading  programs sorting records files  these features included included application software option application programmers  rather separate operating system used applications   in       share operating system released integrated utility ibm      later          mainframes  although quickly supplanted ibsys ibjob                during      ibm os     introduced concept single os spanning entire product line  crucial success system     machines  ibm current mainframe operating systems distant descendants original system modern machines backwards-compatible applications written os     os     also pioneered concept operating system keeps track system resources used  including program data space allocation main memory file space secondary storage  file locking updates  when process terminated reason  resources re-claimed operating system the alternative cp-   system s    -   started whole line ibm operating systems focused concept virtual machines  other operating systems used ibm s     series mainframes included systems developed ibm  dos      disk operating system   tss      time sharing system   tos      tape operating system   bos      basic operating system   acp  airline control program   well non-ibm systems  mts  michigan terminal system   music  multi-user system interactive computing   orvyl  stanford timesharing system  control data corporation developed scope operating system      batch processing  in cooperation university minnesota  kronos later nos operating systems developed      supported simultaneous batch timesharing use  like many commercial timesharing systems  interface extension dartmouth basic operating systems  one pioneering efforts timesharing programming languages  in late      control data university illinois developed plato operating system  used plasma panel displays long-distance time sharing networks  plato remarkably innovative time  featuring real-time chat  multi-user graphical games in       burroughs corporation introduced b     mcp  master control program  operating system  the b     stack machine designed exclusively support high-level languages assembler  indeed  mcp first os written exclusively high-level language  espol  dialect algol   mcp also introduced many ground-breaking innovations  first commercial implementation virtual memory  during development as      ibm made approach burroughs license mcp run as     hardware  this proposal declined burroughs management protect existing hardware production  mcp still use today unisys company mcp clearpath line computers univac  first commercial computer manufacturer  produced series exec operating systems  like early main-frame systems  batch-oriented system managed magnetic drums  disks  card readers line printers  in      univac produced real-time basic  rtb  system support large-scale time sharing  also patterned dartmouth bc system general electric mit developed general electric comprehensive operating supervisor  gecos   introduced concept ringed security privilege levels  after acquisition honeywell renamed general comprehensive operating system  gcos  digital equipment corporation developed many operating systems various computer lines  including tops-   tops-   time sharing systems   -bit pdp-   class systems  before widespread use unix  tops-   particularly popular system universities  early arpanet community  rt-   single-user real-time os pdp-   class minicomputer  rsx-   corresponding multi-user os from late     late      several hardware capabilities evolved allowed similar ported software run one system  early systems utilized microprogramming implement features systems order permit different underlying computer architectures appear others series  in fact             except                                         microprogrammed implementations the enormous investment software systems made since     caused original computer manufacturers continue develop compatible operating systems along hardware  notable supported mainframe operating systems include burroughs mcp    b           unisys clearpath mcp  presentibm os        ibm system           ibm z os  presentibm cp-      ibm system           ibm z vmunivac exec      univac             os      unisys clearpath dorado  present    microcomputers    the first microcomputers capacity need elaborate operating systems developed mainframes minis  minimalistic operating systems developed  often loaded rom known monitors  one notable early disk operating system cp m  supported many early microcomputers closely imitated microsoft ms-dos  became widely popular operating system chosen ibm pc  ibm version called ibm dos pc dos   in      apple computer inc   apple inc   abandoned popular apple ii series microcomputers introduce apple macintosh computer innovative graphical user interface  gui  mac os the introduction intel       cpu chip october         -bit architecture paging capabilities  provided personal computers ability run multitasking operating systems like earlier minicomputers mainframes  microsoft responded progress hiring dave cutler  developed vms operating system digital equipment corporation  he would lead development windows nt operating system  continues serve basis microsoft operating systems line  steve jobs  co-founder apple inc   started next computer inc   developed nextstep operating system  nextstep would later acquired apple inc  used  along code freebsd core mac os x  macos latest name change  the gnu project started activist programmer richard stallman goal creating complete free software replacement proprietary unix operating system  while project highly successful duplicating functionality various parts unix  development gnu hurd kernel proved unproductive  in       finnish computer science student linus torvalds  cooperation volunteers collaborating internet  released first version linux kernel  it soon merged gnu user space components system software form complete operating system  since  combination two major components usually referred simply  linux  software industry  naming convention stallman free software foundation remain opposed  preferring name gnu linux  the berkeley software distribution  known bsd  unix derivative distributed university california  berkeley  starting     s  freely distributed ported many minicomputers  eventually also gained following use pcs  mainly freebsd  netbsd openbsd    examples       unix unix-like operating systems    unix originally written assembly language  ken thompson wrote b  mainly based bcpl  based experience multics project  b replaced c  unix  rewritten c  developed large  complex family inter-related operating systems influential every modern operating system  see history  the unix-like family diverse group operating systems  several major sub-categories including system v  bsd  linux  the name  unix  trademark the open group licenses use operating system shown conform definitions   unix-like  commonly used refer large set operating systems resemble original unix unix-like systems run wide variety computer architectures  they used heavily servers business  well workstations academic engineering environments  free unix variants  linux bsd  popular areas four operating systems certified the open group  holder unix trademark  unix  hp hp-ux ibm aix descendants original system v unix designed run respective vendor hardware  in contrast  sun microsystems solaris run multiple types hardware  including x   sparc servers  pcs  apple macos  replacement apple earlier  non-unix  mac os  hybrid kernel-based bsd variant derived nextstep  mach  freebsd unix interoperability sought establishing posix standard  the posix standard applied operating system  although originally created various unix variants      bsd descendants     a subgroup unix family berkeley software distribution family  includes freebsd  netbsd  openbsd  these operating systems commonly found webservers  although also function personal computer os  the internet owes much existence bsd  many protocols commonly used computers connect  send receive data network widely implemented refined bsd  the world wide web also first demonstrated number computers running os based bsd called nextstep in       university california  berkeley installed first unix system  over time  students staff computer science department began adding new programs make things easier  text editors  when berkeley received new vax computers      unix installed  school undergraduates modified unix even order take advantage computer hardware possibilities  the defense advanced research projects agency us department defense took interest  decided fund project  many schools  corporations  government organizations took notice started use berkeley version unix instead official one distributed at t steve jobs  upon leaving apple inc        formed next inc   company manufactured high-end computers running variation bsd called nextstep  one computers used tim berners-lee first webserver create world wide web developers like keith bostic encouraged project replace non-free code originated bell labs  once done  however  at t sued  after two years legal disputes  bsd project spawned number free derivatives  netbsd freebsd         openbsd  netbsd            macos     macos  formerly  mac os x  later  os x    line open core graphical operating systems developed  marketed  sold apple inc   latest pre-loaded currently shipping macintosh computers  macos successor original classic mac os  apple primary operating system since       unlike predecessor  macos unix operating system built technology developed next second half     apple purchased company early      the operating system first released      mac os x server      followed march      client version  mac os x v      cheetah    since  six distinct  client   server  editions macos released  two merged os x       lion  prior merging macos  server edition    macos server    architecturally identical desktop counterpart usually ran apple line macintosh server hardware  macos server included work group management administration software tools provide simplified access key network services  including mail transfer agent  samba server  ldap server  domain name server  others  with mac os x v     lion  server aspects mac os x server integrated client version product re-branded  os x   dropping  mac  name   the server tools offered application      linux     the linux kernel originated       project linus torvalds  university student finland  he posted information project newsgroup computer students programmers  received support assistance volunteers succeeded creating complete functional kernel linux unix-like  developed without unix code  unlike bsd variants  because open license model  linux kernel code available study modification  resulted use wide range computing machinery supercomputers smart-watches  although estimates suggest linux used        desktop   laptop  pcs  widely adopted use servers embedded systems cell phones  linux superseded unix many platforms used supercomputers including top      many computers also green     different order   linux runs top     linux also commonly used small energy-efficient computers  smartphones smartwatches  the linux kernel used popular distributions  red hat  debian  ubuntu  linux mint google android  chrome os  chromium os     microsoft windows    microsoft windows family proprietary operating systems designed microsoft corporation primarily targeted intel architecture based computers  estimated      percent total usage share web connected computers  the latest version windows    in       windows   overtook windows xp common version use microsoft windows first released       operating environment running top ms-dos  standard operating system shipped intel architecture personal computers time  in       windows    released used ms-dos bootstrap  for backwards compatibility  win x could run real-mode ms-dos   -bit windows   x drivers  windows me  released       last version win x family  later versions based windows nt kernel  current client versions windows run ia-    x  -   arm microprocessors  in addition itanium still supported older server version windows server      r   in past  windows nt supported additional architectures server editions windows widely used  in recent years  microsoft expended significant capital effort promote use windows server operating system  however  windows  usage servers widespread personal computers windows competes linux bsd server market share reactos windows-alternative operating system  developed principles windows    without using microsoft code     other    there many operating systems significant day longer  amigaos  os   ibm microsoft  classic mac os  non-unix precursor apple macos  beos  xts-     risc os  morphos  haiku  baremetal freemint  some still used niche markets continue developed minority platforms enthusiast communities specialist applications  openvms  formerly dec  still active development vms software inc  yet operating systems used almost exclusively academia  operating systems education research operating system concepts  a typical example system fulfills roles minix  example singularity used purely research  another example oberon system designed eth z rich niklaus wirth  j rg gutknecht group students former computer systems institute     s  it used mainly research  teaching  daily work wirth group other operating systems failed win significant market share  introduced innovations influenced mainstream operating systems  least bell labs  plan      components   the components operating system exist order make different parts computer work together  all user software needs go operating system order use hardware  whether simple mouse keyboard complex internet component     kernel    with aid firmware device drivers  kernel provides basic level control computer hardware devices  it manages memory access programs ram  determines programs get access hardware resources  sets resets cpu operating states optimal operation times  organizes data long-term non-volatile storage file systems media disks  tapes  flash memory  etc      program execution     the operating system provides interface application program computer hardware  application program interact hardware obeying rules procedures programmed operating system   the operating system also set services simplify development execution application programs  executing application program involves creation process operating system kernel assigns memory space resources  establishes priority process multi-tasking systems  loads program binary code memory  initiates execution application program interacts user hardware devices      interrupts     interrupts central operating systems  provide efficient way operating system interact react environment   the alternative    operating system  watch  various sources input events  polling  require action    found older systems small stacks        bytes  unusual modern systems large stacks  interrupt-based programming directly supported modern cpus  interrupts provide computer way automatically saving local register contexts  running specific code response events  even basic computers support hardware interrupts  allow programmer specify code may run event takes place when interrupt received  computer hardware automatically suspends whatever program currently running  saves status  runs computer code previously associated interrupt  analogous placing bookmark book response phone call   in modern operating systems  interrupts handled operating system kernel  interrupts may come either computer hardware running program when hardware device triggers interrupt  operating system kernel decides deal event  generally running processing code  the amount code run depends priority interrupt  example  person usually responds smoke detector alarm answering phone   the processing hardware interrupts task usually delegated software called device driver  may part operating system kernel  part another program  both  device drivers may relay information running program various means a program may also trigger interrupt operating system  if program wishes access hardware  example  may interrupt operating system kernel  causes control passed back kernel  the kernel processes request   if program wishes additional resources  wishes shed resources  memory  triggers interrupt get kernel attention      modes     modern computers support multiple modes operation  cpus capability offer least two modes  user mode supervisor mode  in general terms  supervisor mode operation allows unrestricted access machine resources  including mpu instructions   user mode operation sets limits instruction use typically disallows direct access machine resources  cpus might modes similar user mode well  virtual modes order emulate older processor types    -bit processors   -bit one    -bit processors   -bit one at power-on reset  system begins supervisor mode  once operating system kernel loaded started  boundary user mode supervisor mode  also known kernel mode  established supervisor mode used kernel low level tasks need unrestricted access hardware  controlling memory accessed  communicating devices disk drives video display devices  user mode  contrast  used almost everything else  application programs  word processors database managers  operate within user mode  access machine resources turning control kernel  process causes switch supervisor mode   typically  transfer control kernel achieved executing software interrupt instruction  motorola       trap instruction   the software interrupt causes processor switch user mode supervisor mode begin executing code allows kernel take control in user mode  programs usually access restricted set processor instructions  generally cannot execute instructions could potentially cause disruption system operation   in supervisor mode  instruction execution restrictions typically removed  allowing kernel unrestricted access machine resources the term  user mode resource  generally refers one cpu registers  contain information running program allowed alter  attempts alter resources generally causes switch supervisor mode  operating system deal illegal operation program attempting  example  forcibly terminating   killing   program      memory management     among things  multiprogramming operating system kernel must responsible managing system memory currently use programs  this ensures program interfere memory already use another program  since programs time share  program must independent access memory cooperative memory management  used many early operating systems  assumes programs make voluntary use kernel memory manager  exceed allocated memory  this system memory management almost never seen  since programs often contain bugs cause exceed allocated memory  if program fails  may cause memory used one programs affected overwritten  malicious programs viruses may purposefully alter another program memory  may affect operation operating system itself  with cooperative memory management  takes one misbehaved program crash system memory protection enables kernel limit process  access computer memory  various methods memory protection exist  including memory segmentation paging  all methods require level hardware support        mmu   exist computers in segmentation paging  certain protected mode registers specify cpu memory address allow running program access  attempts access addresses trigger interrupt cause cpu re-enter supervisor mode  placing kernel charge  this called segmentation violation seg-v short  since difficult assign meaningful result operation  usually sign misbehaving program  kernel generally resorts terminating offending program  reports error windows versions     me level memory protection  programs could easily circumvent need use it  a general protection fault would produced  indicating segmentation violation occurred  however  system would often crash anyway      virtual memory     the use virtual memory addressing  paging segmentation  means kernel choose memory program may use given time  allowing operating system use memory locations multiple tasks if program tries access memory current range accessible memory  nonetheless allocated  kernel interrupted way would program exceed allocated memory   see section memory management   under unix kind interrupt referred page fault when kernel detects page fault generally adjusts virtual memory range program triggered  granting access memory requested  this gives kernel discretionary power particular application memory stored  even whether actually allocated yet in modern operating systems  memory accessed less frequently temporarily stored disk media make space available use programs  this called swapping  area memory used multiple programs  memory area contains swapped exchanged demand  virtual memory  provides programmer user perception much larger amount ram computer really there      multitasking     multitasking refers running multiple independent computer programs computer  giving appearance performing tasks time  since computers one two things one time  generally done via time-sharing  means program uses share computer time execute an operating system kernel contains scheduling program determines much time process spends executing  order execution control passed programs  control passed process kernel  allows program access cpu memory  later  control returned kernel mechanism  another program may allowed use cpu  this so-called passing control kernel applications called context switch an early model governed allocation time programs called cooperative multitasking  in model  control passed program kernel  may execute long wants explicitly returning control kernel  this means malicious malfunctioning program may prevent programs using cpu  hang entire system enters infinite loop modern operating systems extend concepts application preemption device drivers kernel code  operating system preemptive control internal run-times well the philosophy governing preemptive multitasking ensuring programs given regular time cpu  this implies programs must limited much time allowed spend cpu without interrupted  to accomplish  modern operating system kernels make use timed interrupt  a protected mode timer set kernel triggers return supervisor mode specified time elapsed   see sections interrupts dual mode operation  on many single user operating systems cooperative multitasking perfectly adequate  home computers generally run small number well tested programs  the amigaos exception  preemptive multitasking first version  windows nt first version microsoft windows enforced preemptive multitasking  reach home user market windows xp  since windows nt targeted professionals       disk access file systems     access data stored disks central feature operating systems  computers store data disks using files  structured specific ways order allow faster access  higher reliability  make better use drive available space  the specific way files stored disk called file system  enables files names attributes  it also allows stored hierarchy directories folders arranged directory tree early operating systems generally supported single type disk drive one kind file system  early file systems limited capacity  speed  kinds file names directory structures could use  these limitations often reflected limitations operating systems designed  making difficult operating system support one file system while many simpler operating systems support limited range options accessing storage systems  operating systems like unix linux support technology known virtual file system vfs  an operating system unix supports wide array storage devices  regardless design file systems  allowing accessed common application programming interface  api   this makes unnecessary programs knowledge device accessing  a vfs allows operating system provide programs access unlimited number devices infinite variety file systems installed  use specific device drivers file system drivers a connected storage device  hard drive  accessed device driver  the device driver understands specific language drive able translate language standard language used operating system access disk drives  on unix  language block devices when kernel appropriate device driver place  access contents disk drive raw format  may contain one file systems  a file system driver used translate commands used access specific file system standard set commands operating system use talk file systems  programs deal file systems basis filenames  directories folders  contained within hierarchical structure  they create  delete  open  close files  well gather various information  including access permissions  size  free space  creation modification dates various differences file systems make supporting file systems difficult  allowed characters file names  case sensitivity  presence various kinds file attributes makes implementation single interface every file system daunting task  operating systems tend recommend using  support natively  file systems specifically designed  example  ntfs windows ext  reiserfs linux  however  practice  third party drivers usually available give support widely used file systems general-purpose operating systems  example  ntfs available linux ntfs- g  ext    reiserfs available windows third-party software  support file systems highly varied among modern operating systems  although several common file systems almost operating systems include support drivers for  operating systems vary file system support disk formats may installed on  under windows  file system usually limited application certain media  example  cds must use iso      udf  windows vista  ntfs file system operating system installed on   it possible install linux onto many types file systems  unlike operating systems  linux unix allow file system used regardless media stored  whether hard drive  disc  cd  dvd      usb flash drive  even contained within file located another file system      device drivers     a device driver specific type computer software developed allow interaction hardware devices  typically constitutes interface communicating device  specific computer bus communications subsystem hardware connected  providing commands receiving data device  end  requisite interfaces operating system software applications  it specialized hardware-dependent computer program also operating system specific enables another program  typically operating system applications software package computer program running operating system kernel  interact transparently hardware device  usually provides requisite interrupt handling necessary necessary asynchronous time-dependent hardware interfacing needs the key design goal device drivers abstraction  every model hardware  even within class device  different  newer models also released manufacturers provide reliable better performance newer models often controlled differently  computers operating systems cannot expected know control every device  future  to solve problem  operating systems essentially dictate every type device controlled  the function device driver translate operating system mandated function calls device specific calls  in theory new device  controlled new manner  function correctly suitable driver available  this new driver ensures device appears operate usual operating system point view under versions windows vista versions linux      driver execution co-operative  meaning driver entered infinite loop would freeze system  more recent revisions operating systems incorporate kernel preemption  kernel interrupts driver give tasks  separates process receives response device driver  gives tasks do     networking    currently operating systems support variety networking protocols  hardware  applications using them  this means computers running dissimilar operating systems participate common network sharing resources computing  files  printers  scanners using either wired wireless connections  networks essentially allow computer operating system access resources remote computer support functions could resources connected directly local computer  this includes everything simple communication  using networked file systems even sharing another computer graphics sound hardware  some network services allow resources computer accessed transparently  ssh allows networked users direct access computer command line interface client server networking allows program computer  called client  connect via network another computer  called server  servers offer  host  various services network computers users  these services usually provided ports numbered access points beyond server ip address  each port number usually associated maximum one running program  responsible handling requests port  a daemon  user program  turn access local hardware resources computer passing requests operating system kernel many operating systems support one vendor-specific open networking protocols well  example  sna ibm systems  decnet systems digital equipment corporation  microsoft-specific protocols  smb  windows  specific protocols specific tasks may also supported nfs file access  protocols like esound  esd easily extended network provide sound local applications  remote system sound hardware     security    a computer secure depends number technologies working properly  a modern operating system provides access number resources  available software running system  external devices like networks via kernel the operating system must capable distinguishing requests allowed processed  others processed  while systems may simply distinguish  privileged   non-privileged   systems commonly form requester identity  user name  to establish identity may process authentication  often username must quoted  username may password  other methods authentication  magnetic cards biometric data  might used instead  in cases  especially connections network  resources may accessed authentication  reading files network share   also covered concept requester identity authorization  particular services resources accessible requester logged system tied either requester user account variously configured groups users requester belongs in addition allow disallow model security  system high level security also offers auditing options  these would allow tracking requests access resources    reading file     internal security  security already running program possible possibly harmful requests must carried interrupts operating system kernel  if programs directly access hardware resources  cannot secured external security involves request outside computer  login connected console kind network connection  external requests often passed device drivers operating system kernel  passed onto applications  carried directly  security operating systems long concern highly sensitive data held computers  commercial military nature  the united states government department defense  dod  created trusted computer system evaluation criteria  tcsec  standard sets basic requirements assessing effectiveness security  this became vital importance operating system makers  tcsec used evaluate  classify select trusted operating systems considered processing  storage retrieval sensitive classified information network services include offerings file sharing  print services  email  web sites  file transfer protocols  ftp   compromised security  at front line security hardware devices known firewalls intrusion detection prevention systems  at operating system level  number software firewalls available  well intrusion detection prevention systems  most modern operating systems include software firewall  enabled default  a software firewall configured allow deny network traffic service application running operating system  therefore  one install running insecure service  telnet ftp  threatened security breach firewall would deny traffic trying connect service port an alternative strategy  sandbox strategy available systems meet popek goldberg virtualization requirements  operating system running user programs native code  instead either emulates processor provides host p-code based system java internal security especially relevant multi-user systems  allows user system private files users cannot tamper read  internal security also vital auditing use  since program potentially bypass operating system  inclusive bypassing auditing     user interface    every computer operated individual requires user interface  the user interface usually referred shell essential human interaction supported   the user interface views directory structure requests services operating system acquire data input hardware devices  keyboard  mouse credit card reader  requests operating system services display prompts  status messages output hardware devices  video monitor printer  the two common forms user interface historically command-line interface  computer commands typed line-by-line  graphical user interface  visual environment  commonly wimp  present      graphical user interfaces     most modern computer systems support graphical user interfaces  gui   often include them  in computer systems  original implementation classic mac os  gui integrated kernel while technically graphical user interface operating system service  incorporating support one operating system kernel allow gui responsive reducing number context switches required gui perform output functions  other operating systems modular  separating graphics subsystem kernel operating system  in     unix  vms many others operating systems built way  linux macos also built way  modern releases microsoft windows windows vista implement graphics subsystem mostly user-space  however graphics drawing routines versions windows nt     windows server      exist mostly kernel space  windows  x little distinction interface kernel many computer operating systems allow user install create user interface desire  the x window system conjunction gnome kde plasma   commonly found setup unix unix-like  bsd  linux  solaris  systems  a number windows shell replacements released microsoft windows  offer alternatives included windows shell  shell cannot separated windows numerous unix-based guis existed time  derived x    competition among various vendors unix  hp  ibm  sun  led much fragmentation  though effort standardize     cose cde failed various reasons  eventually eclipsed widespread adoption gnome k desktop environment  prior free software-based toolkits desktop environments  motif prevalent toolkit desktop combination  basis upon cde developed  graphical user interfaces evolve time  for example  windows modified user interface almost every time new major version windows released  mac os gui changed dramatically introduction mac os x         real-time operating systems   a real-time operating system  rtos  operating system intended applications fixed deadlines  real-time computing   such applications include small embedded systems  automobile engine controllers  industrial robots  spacecraft  industrial control  large-scale computing systems an early example large-scale real-time operating system transaction processing facility developed american airlines ibm sabre airline reservations system embedded systems fixed deadlines use real-time operating system vxworks  pikeos  ecos  qnx  montavista linux rtlinux  windows ce real-time operating system shares similar apis desktop windows shares none desktop windows  codebase  symbian os also rtos kernel  eka   starting version    b some embedded systems use operating systems palm os  bsd  linux  although operating systems support real-time computing    operating system development hobby   a hobby operating system may classified one whose code directly derived existing operating system  users active developers in cases  hobby development support  homebrew  computing device  example  simple single-board computer powered      microprocessor   or  development may architecture already widespread use   operating system development may come entirely new concepts  may commence modeling existing operating system   in either case  hobbyist developer  may interact small sometimes unstructured group individuals like interests examples hobby operating system include syllable templeos    diversity operating systems portability   application software generally written use specific operating system  sometimes even specific hardware  when porting application run another os  functionality required application may implemented differently os  names functions  meaning arguments  etc   requiring application adapted  changed  otherwise maintained unix first operating system written assembly language  making portable systems different native pdp-   this cost supporting operating systems diversity avoided instead writing applications software platforms java qt  these abstractions already borne cost adaptation specific operating systems system libraries another approach operating system vendors adopt standards  for example  posix os abstraction layers provide commonalities reduce porting costs    market share      see also      notes      references      further reading      external links   operating systems curliemultics history history operating systems
computer graphics deals generating images aid computers  today  computer graphics core technology digital photography  film  video games  cell phone computer displays  many specialized applications  a great deal specialized hardware software developed  displays devices driven computer graphics hardware  it vast recently developed area computer science  the phrase coined      computer graphics researchers verne hudson william fetter boeing  it often abbreviated cg  typically context film computer generated imagery  cgi   the non-artistic aspects computer graphics subject computer science research some topics computer graphics include user interface design  sprite graphics  rendering  ray tracing  geometry processing  computer animation  vector graphics   d modeling  shaders  gpu design  implicit surfaces  visualization  scientific computing  image processing  computational photography  scientific visualization  computational geometry computer vision  among others  the overall methodology depends heavily underlying sciences geometry  optics  physics  perception computer graphics responsible displaying art image data effectively meaningfully consumer  it also used processing image data received physical world  photo video content  computer graphics development significant impact many types media revolutionized animation  movies  advertising  video games  general    overview   the term computer graphics used broad sense describe  almost everything computers text sound   typically  term computer graphics refers several different things representation manipulation image data computerthe various technologies used create manipulate imagesmethods digitally synthesizing manipulating visual content  see study computer graphicstoday  computer graphics widespread  such imagery found television  newspapers  weather reports  variety medical investigations surgical procedures  a well-constructed graph present complex statistics form easier understand interpret  in media  graphs used illustrate papers  reports  theses   presentation material many tools developed visualize data  computer-generated imagery categorized several different types  two dimensional   d   three dimensional   d   animated graphics  as technology improved   d computer graphics become common   d computer graphics still widely used  computer graphics emerged sub-field computer science studies methods digitally synthesizing manipulating visual content  over past decade  specialized fields developed like information visualization  scientific visualization concerned  visualization three dimensional phenomena  architectural  meteorological  medical  biological  etc    emphasis realistic renderings volumes  surfaces  illumination sources  forth  perhaps dynamic  time  component     history   the precursor sciences development modern computer graphics advances electrical engineering  electronics  television took place first half twentieth century  screens could display art since lumiere brothers  use mattes create special effects earliest films dating       displays limited interactive  the first cathode ray tube  braun tube  invented        turn would permit oscilloscope military control panel   direct precursors field  provided first two-dimensional electronic displays responded programmatic user input  nevertheless  computer graphics remained relatively unknown discipline     post-world war ii period   time discipline emerged combination pure university laboratory academic research advanced computers united states military development technologies like radar  advanced aviation  rocketry developed war  new kinds displays needed process wealth information resulting projects  leading development computer graphics discipline            early projects like whirlwind sage projects introduced crt viable display interaction interface introduced light pen input device  douglas t  ross whirlwind sage system performed personal experiment   wrote small program captured movement finger displayed vector  traced name  display scope  one first interactive video games feature recognizable  interactive graphics   tennis two   created oscilloscope william higinbotham entertain visitors      brookhaven national laboratory simulated tennis match  in       douglas t  ross innovated working mit transforming mathematic statements computer generated  d machine tool vectors taking opportunity create display scope image disney cartoon character electronics pioneer hewlett-packard went public      incorporating decade prior  established strong ties stanford university founders  alumni  this began decades-long transformation southern san francisco bay area world leading computer technology hub   known silicon valley  the field computer graphics developed emergence computer graphics hardware further advances computing led greater advancements interactive computer graphics  in       tx-  computer developed mit lincoln laboratory  the tx-  integrated number new man-machine interfaces  a light pen could used draw sketches computer using ivan sutherland revolutionary sketchpad software  using light pen  sketchpad allowed one draw simple shapes computer screen  save even recall later  the light pen small photoelectric cell tip  this cell emitted electronic pulse whenever placed front computer screen screen electron gun fired directly it  by simply timing electronic pulse current location electron gun  easy pinpoint exactly pen screen given moment  once determined  computer could draw cursor location  sutherland seemed find perfect solution many graphics problems faced  even today  many standards computer graphics interfaces got start early sketchpad program  one example drawing constraints  if one wants draw square example  worry drawing four lines perfectly form edges box  one simply specify want draw box  specify location size box  the software construct perfect box  right dimensions right location  another example sutherland software modeled objects   picture objects  in words  model car  one could change size tires without affecting rest car  it could stretch body car without deforming tires            the phrase  computer graphics  coined      william fetter  graphic designer boeing  this old quote many secondary sources comes complete following sentence fetter said terms actually given verne hudson wichita division boeing in      another student mit  steve russell  created another important title history video games  spacewar  written dec pdp-   spacewar instant success copies started flowing pdp-  owners eventually dec got copy  the engineers dec used diagnostic program every new pdp-  shipping it  the sales force picked quickly enough installing new units  would run  world first video game  new customers   higginbotham tennis for two beaten spacewar almost three years  almost unknown outside research academic setting  at around time      -      university cambridge  elizabeth waldram wrote code display radio-astronomy maps cathode ray tube e  e  zajac  scientist bell telephone laboratory  btl   created film called  simulation two-giro gravity attitude control system        in computer-generated film  zajac showed attitude satellite could altered orbits earth  he created animation ibm      mainframe computer  also btl  ken knowlton  frank sinden  ruth a  weiss michael noll started working computer graphics field  sinden created film called force  mass motion illustrating newton laws motion operation  around time  scientists creating computer graphics illustrate research  at lawrence radiation laboratory  nelson max created films flow viscous fluid propagation shock waves solid form  boeing aircraft created film called vibration aircraft also sometime early      automobiles would also provide boost early work pierre b zier renault  used paul de casteljau curves   called b zier curves b zier work field   develop  modeling techniques renault car bodies  these curves would form foundation much curve-modeling work field  curves   unlike polygons   mathematically complex entities draw model well it long major corporations started taking interest computer graphics  trw  lockheed-georgia  general electric sperry rand among many companies getting started computer graphics mid-    s  ibm quick respond interest releasing ibm      graphics terminal  first commercially available graphics computer  ralph baer  supervising engineer sanders associates  came home video game      later licensed magnavox called odyssey  while simplistic  requiring fairly inexpensive electronic parts  allowed player move points light around screen  it first consumer computer graphics product  david c  evans director engineering bendix corporation computer division            worked next five years visiting professor berkeley  there continued interest computers interfaced people  in       university utah recruited evans form computer science program  computer graphics quickly became primary interest  this new department would become world primary research center computer graphics     s also        ivan sutherland continued innovate mit invented first computer-controlled head-mounted display  hmd   it displayed two separate wireframe images  one eye  this allowed viewer see computer scene stereoscopic  d  the heavy hardware required supporting display tracker called sword damocles potential danger fall upon wearer  after receiving ph d  mit  sutherland became director information processing arpa  advanced research projects agency   later became professor harvard  in      sutherland recruited evans join computer science program university utah   development would turn department one important research centers graphics nearly decade thereafter  eventually producing important pioneers field  there sutherland perfected hmd  twenty years later  nasa would re-discover techniques virtual reality research  at utah  sutherland evans highly sought consultants large companies  frustrated lack graphics hardware available time  started formulating plan start company in       dave evans ivan sutherland founded first computer graphics hardware company  evans   sutherland  while sutherland originally wanted company located cambridge  massachusetts  salt lake city instead chosen due proximity professors  research group university utah also      arthur appel described first ray casting algorithm  first class ray tracing-based rendering algorithms since become fundamental achieving photorealism graphics modeling paths rays light take light source  surfaces scene  camera in       acm initiated a special interest group graphics  siggraph  organizes conferences  graphics standards  publications within field computer graphics  by       first annual siggraph conference held  become one focuses organization  siggraph grown size importance field computer graphics expanded time            an important technological advance enabled practical computer graphics technology emergence metal oxide semiconductor  mos  large-scale integration  lsi  technology early     s  mos lsi technology made possible large amounts computational capability small mos integrated circuit chips  led development tektronix      computer graphics terminal       well microprocessor       mos memory  particularly dynamic random-access memory  dram  chip introduced       also capable holding kilobits data single high-density memory chip  making possible hold entire standard-definition  sd  raster graphics image digital frame buffer  used xerox parc develop superpaint  first video-compatible  raster-based computer graphics system       subsequently  number breakthroughs field   particularly important early breakthroughs transformation graphics utilitarian realistic   occurred university utah      hired ivan sutherland  he paired david c  evans teach advanced computer graphics class  contributed great deal founding research field taught several students would grow found several industry important companies   namely pixar  silicon graphics  adobe systems   tom stockham led image processing group uu worked closely computer graphics lab one students edwin catmull  catmull come the boeing company working degree physics  growing disney  catmull loved animation yet quickly discovered talent drawing  now catmull  along many others  saw computers natural progression animation wanted part revolution  the first computer animation catmull saw own  he created animation hand opening closing  he also pioneered texture mapping paint textures three-dimensional models       considered one fundamental techniques  d modeling  it became one goals produce feature-length motion picture using computer graphics   goal would achieve two decades later founding role pixar  in class  fred parke created animation wife face  the two animations included      feature film futureworld as uu computer graphics laboratory attracting people  john warnock another early pioneers  later founded adobe systems create revolution publishing world postscript page description language  adobe would go later create industry standard photo editing software adobe photoshop prominent movie industry special effects program adobe after effects james clark also  later founded silicon graphics  maker advanced rendering systems would dominate field high-end graphics early     s a major advance  d computer graphics created uu early pioneers   hidden surface determination  in order draw representation  d object screen  computer must determine surfaces  behind  object viewer perspective  thus  hidden  computer creates  renders  image  the  d core graphics system  core  first graphical standard developed  a group    experts acm special interest group siggraph developed  conceptual framework   the specifications published       became foundation many future developments field also      henri gouraud  jim blinn bui tuong phong contributed foundations shading cgi via development gouraud shading blinn phong shading models  allowing graphics move beyond  flat  look look accurately portraying depth  jim blinn also innovated      introducing bump mapping  technique simulating uneven surfaces  predecessor many advanced kinds mapping used today the modern videogame arcade known today birthed      first arcade games using real-time  d sprite graphics  pong      one first hit arcade cabinet games  speed race      featured sprites moving along vertically scrolling road  gun fight      featured human-looking animated characters  space invaders      featured large number animated figures screen  used specialized barrel shifter circuit made discrete chips help intel      microprocessor animate framebuffer graphics            the     began see modernization commercialization computer graphics  as home computer proliferated  subject previously academics-only discipline adopted much larger audience  number computer graphics developers increased significantly in early      metal oxide semiconductor  mos  very-large-scale integration  vlsi  technology led availability   -bit central processing unit  cpu  microprocessors first graphics processing unit  gpu  chips  began revolutionize computer graphics  enabling high-resolution graphics computer graphics terminals well personal computer  pc  systems  nec  pd     first gpu  fabricated fully integrated nmos vlsi chip  it supported     x     resolution  laid foundations emerging pc graphics market  it used number graphics cards  licensed clones intel        first intel graphics processing units  mos memory also became cheaper early      enabling development affordable framebuffer memory  notably video ram  vram  introduced texas instruments  ti  mid-    s  in       hitachi released artc hd       first complementary mos  cmos  gpu  it capable displaying high-resolution color mode  k resolution monochrome mode  used number graphics cards terminals late     s  in       ti introduced tms       first fully programmable mos graphics processor computer graphics terminals decade became increasingly intelligent  semi-standalone standalone workstations  graphics application processing increasingly migrated intelligence workstation  rather continuing rely central mainframe mini-computers  typical early move high-resolution computer graphics intelligent workstations computer-aided engineering market orca                 workstations  developed orcatech ottawa  spin-off bell-northern research  led david pearson  early workstation pioneer  the orca      based   -bit motorola       microprocessor amd bit-slice processors  unix operating system  it targeted squarely sophisticated end design engineering sector  artists graphic designers began see personal computer  particularly commodore amiga macintosh  serious design tool  one could save time draw accurately methods   the macintosh remains highly popular tool computer graphics among graphic design studios businesses  modern computers  dating      often use graphical user interfaces  gui  present data information symbols  icons pictures  rather text  graphics one five key elements multimedia technology in field realistic rendering  japan osaka university developed links-  computer graphics system  supercomputer used     zilog z     microprocessors        purpose rendering realistic  d computer graphics  according information processing society japan   the core  d image rendering calculating luminance pixel making rendered surface given viewpoint  light source  object position  the links-  system developed realize image rendering methodology pixel could parallel processed independently using ray tracing  by developing new software methodology specifically high-speed image rendering  links-  able rapidly render highly realistic images  it used create world first  d planetarium-like video entire heavens made completely computer graphics  the video presented fujitsu pavilion      international exposition tsukuba   the links-  world powerful computer        also field realistic rendering  general rendering equation david immel james kajiya developed        important step towards implementing global illumination  necessary pursue photorealism computer graphics the continuing popularity star wars science fiction franchises relevant cinematic cgi time  lucasfilm industrial light   magic became known  go-to  house many studios topnotch computer graphics film  important advances chroma keying   bluescreening   etc   made later films original trilogy  two pieces video would also outlast era historically relevant  dire straits  iconic  near-fully-cgi video song  money nothing        popularized cgi among music fans era  scene young sherlock holmes year featuring first fully cgi character feature movie  animated stained-glass knight   in       first shaders   small programs designed specifically shading separate algorithm   developed pixar  already spun industrial light   magic separate entity   though public would see results technological progress next decade  in late      silicon graphics  sgi  computers used create first fully computer-generated short films pixar  silicon graphics machines considered high-water mark field decade the     also called golden era videogames  millions-selling systems atari  nintendo sega  among companies  exposed computer graphics first time new  young  impressionable audience   ms-dos-based personal computers  apple iis  macs  amigas  also allowed users program games skilled enough  for arcades  advances made commercial  real-time  d graphics  in       first dedicated real-time  d graphics boards introduced arcades  namco system    taito air system  on professional side  evans   sutherland sgi developed  d raster graphics hardware directly influenced later single-chip graphics processing unit  gpu   technology separate powerful chip used parallel processing cpu optimize graphics the decade also saw computer graphics applied many additional professional markets  including location-based entertainment education e s digistar  vehicle design  vehicle simulation  chemistry            the      overwhelming note emergence  d modeling mass scale impressive rise quality cgi generally  home computers became able take rendering tasks previously limited workstations costing thousands dollars   d modelers became available home systems  popularity silicon graphics workstations declined powerful microsoft windows apple macintosh machines running autodesk products like  d studio home rendering software ascended importance  by end decade  gpu would begin rise prominence still enjoys today the field began see first rendered graphics could truly pass photorealistic untrained eye  though could yet trained cgi artist   d graphics became far popular gaming  multimedia  animation  at end     beginning nineties created  france  first computer graphics tv series  la vie des b tes studio mac guff ligne         les fables g om triques             studio fant  quarxs  first hdtv computer graphics series maurice benayoun fran ois schuiten  studio z-a production             in film  pixar began serious commercial rise era edwin catmull  first major film release         toy story   critical commercial success nine-figure magnitude  the studio invent programmable shader would go many animated hits  work prerendered video animation still considered industry leader research trail breaker in video games        virtua racing  running sega model   arcade system board  laid foundations fully  d racing games popularized real-time  d polygonal graphics among wider audience video game industry  the sega model        sega model        subsequently pushed boundaries commercial  real-time  d graphics  back pc  wolfenstein  d  doom quake  three first massively popular  d first-person shooter games  released id software critical popular acclaim decade using rendering engine innovated primarily john carmack  the sony playstation  sega saturn  nintendo     among consoles  sold millions popularized  d graphics home gamers  certain late-    first-generation  d titles became seen influential popularizing  d graphics among console users  platform games super mario    the legend of zelda  ocarina of time  early  d fighting games like virtua fighter  battle arena toshinden  tekken technology algorithms rendering continued improve greatly  in       krishnamurty levoy invented normal mapping   improvement jim blinn bump mapping       saw nvidia release seminal geforce      first home video card billed graphics processing unit gpu  words contained  integrated transform  lighting  triangle setup clipping  rendering engines   by end decade  computers adopted common frameworks graphics processing directx opengl  since  computer graphics become detailed realistic  due powerful graphics hardware  d modeling software    amd also became leading developer graphics boards decade  creating  duopoly  field exists day            cgi became ubiquitous earnest era  video games cgi cinema spread reach computer graphics mainstream late     continued accelerated pace     s  cgi also adopted en masse television advertisements widely late          became familiar massive audience the continued rise increasing sophistication graphics processing unit crucial decade   d rendering capabilities became standard feature  d-graphics gpus became considered necessity desktop computer makers offer  the nvidia geforce line graphics cards dominated market early decade occasional significant competing presence ati  as decade progressed  even low-end machines usually contained  d-capable gpu kind nvidia amd introduced low-priced chipsets continued dominate market  shaders introduced     perform specialized processing gpu would end decade become supported consumer hardware  speeding graphics considerably allowing greatly improved texture shading computer graphics via widespread adoption normal mapping  bump mapping  variety techniques allowing simulation great amount detail computer graphics used films video games gradually began realistic point entering uncanny valley  cgi movies proliferated  traditional animated cartoon films like ice age madagascar well numerous pixar offerings like finding nemo dominating box office field  the final fantasy  the spirits within  released       first fully computer-generated feature film use photorealistic cgi characters fully made motion capture  the film box-office success  however  some commentators suggested may partly lead cgi characters facial features fell  uncanny valley   other animated films like the polar express drew attention time well  star wars also resurfaced prequel trilogy effects continued set bar cgi film in videogames  sony playstation      microsoft xbox line consoles  offerings nintendo gamecube maintained large following  windows pc  marquee cgi-heavy titles like series grand theft auto  assassin creed  final fantasy  bioshock  kingdom hearts  mirror edge dozens others continued approach photorealism  grow video game industry impress  industry revenues became comparable movies  microsoft made decision expose directx easily independent developer world xna program  success  directx remained commercial success  however  opengl continued mature well  and directx improved greatly  second-generation shader languages hlsl glsl began popular decade in scientific computing  gpgpu technique pass large amounts data bidirectionally gpu cpu invented  speeding analysis many kinds bioinformatics molecular biology experiments  the technique also used bitcoin mining applications computer vision            in      cgi nearly ubiquitous video  pre-rendered graphics nearly scientifically photorealistic  real-time graphics suitably high-end system may simulate photorealism untrained eye texture mapping matured multistage process many layers  generally  uncommon implement texture mapping  bump mapping isosurfaces normal mapping  lighting maps including specular highlights reflection techniques  shadow volumes one rendering engine using shaders  maturing considerably  shaders nearly necessity advanced work field  providing considerable complexity manipulating pixels  vertices  textures per-element basis  countless possible effects  their shader languages hlsl glsl active fields research development  physically based rendering pbr  implements many maps performs advanced calculation simulate real optic light flow  active research area well  along advanced areas like  ambient occlusion  subsurface scattering  rayleigh scattering  photon mapping  many others  experiments processing power required provide graphics real time ultra-high-resolution modes like  k ultra hd beginning  though beyond reach highest-end hardware in cinema  animated movies cgi  great many animated cgi films made per year    attempt photorealism due continuing fears uncanny valley  most  d cartoons in videogames  microsoft xbox one  sony playstation    nintendo switch currently dominate home space capable highly advanced  d graphics  windows pc still one active gaming platforms well    image types       two-dimensional     d computer graphics computer-based generation digital images mostly models  digital image  techniques specific them  d computer graphics mainly used applications originally developed upon traditional printing drawing technologies typography  in applications  two-dimensional image representation real-world object  independent artifact added semantic value  two-dimensional models therefore preferred give direct control image  d computer graphics  whose approach akin photography typography      pixel art     a large form digital art  pixel art created use raster graphics software  images edited pixel level  graphics old  relatively limited  computer video games  graphing calculator games  many mobile phone games mostly pixel art      sprite graphics     a sprite two-dimensional image animation integrated larger scene  initially including graphical objects handled separately memory bitmap video display  includes various manners graphical overlays originally  sprites method integrating unrelated bitmaps appeared part normal bitmap screen  creating animated character moved screen without altering data defining overall screen  such sprites created either electronic circuitry software  in circuitry  hardware sprite hardware construct employs custom dma channels integrate visual elements main screen super-imposes two discrete video sources  software simulate specialized rendering methods      vector graphics     vector graphics formats complementary raster graphics  raster graphics representation images array pixels typically used representation photographic images  vector graphics consists encoding information shapes colors comprise image  allow flexibility rendering  there instances working vector tools formats best practice  instances working raster tools formats best practice  there times formats come together  an understanding advantages limitations technology relationship likely result efficient effective use tools     three-dimensional     d graphics  compared  d graphics  graphics use three-dimensional representation geometric data  for purpose performance  stored computer  this includes images may later display real-time viewing despite differences   d computer graphics rely similar algorithms  d computer graphics frame raster graphics  like  d  final rendered display  in computer graphics software  distinction  d  d occasionally blurred   d applications may use  d techniques achieve effects lighting  primarily  d may use  d rendering techniques  d computer graphics  d models  the model contained within graphical data file  apart rendering  however  differences include  d model representation  d object  until visually displayed model graphic  due printing   d models confined virtual space   d rendering model displayed  also used non-graphical computer simulations calculations     computer animation    computer animation art creating moving images via use computers  it subfield computer graphics animation  increasingly created means  d computer graphics  though  d computer graphics still widely used stylistic  low bandwidth  faster real-time rendering needs  sometimes target animation computer  sometimes target another medium  film  it also referred cgi  computer-generated imagery computer-generated imaging   especially used films virtual entities may contain controlled assorted attributes  transform values  location  orientation  scale  stored object transformation matrix  animation change attribute time  multiple methods achieving animation exist  rudimentary form based creation editing keyframes  storing value given time  per attribute animated  the  d  d graphics software change keyframe  creating editable curve value mapped time  results animation  other methods animation include procedural expression-based techniques  former consolidates related elements animated entities sets attributes  useful creating particle effects crowd simulations  latter allows evaluated result returned user-defined logical expression  coupled mathematics  automate animation predictable way  convenient controlling bone behavior beyond hierarchy offers skeletal system set  to create illusion movement  image displayed computer screen quickly replaced new image similar previous image  shifted slightly  this technique identical illusion movement television motion pictures    concepts principles   images typically created devices cameras  mirrors  lenses  telescopes  microscopes  etc digital images include vector images raster images  raster images commonly used     pixel    in digital imaging  pixel  picture element  single point raster image  pixels placed regular  -dimensional grid  often represented using dots squares  each pixel sample original image  samples typically provide accurate representation original  the intensity pixel variable  color systems  pixel typically threecomponents red  green  blue graphics visual presentations surface  computer screen  examples photographs  drawing  graphics designs  maps  engineering drawings  images  graphics often combine text illustration  graphic design may consist deliberate selection  creation  arrangement typography alone  brochure  flier  poster  web site  book without element  clarity effective communication may objective  association cultural elements may sought  merely  creation distinctive style     primitives    primitives basic units graphics system may combine create complex images models  examples would sprites character maps  d video games  geometric primitives cad  polygons triangles  d rendering  primitives may supported hardware efficient rendering  building blocks provided graphics application     rendering    rendering generation  d image  d model means computer programs  a scene file contains objects strictly defined language data structure  would contain geometry  viewpoint  texture  lighting  shading information description virtual scene  the data contained scene file passed rendering program processed output digital image raster graphics image file  the rendering program usually built computer graphics software  though others available plug-ins entirely separate programs  the term  rendering  may analogy  artist rendering  scene  although technical details rendering methods vary  general challenges overcome producing  d image  d representation stored scene file outlined graphics pipeline along rendering device  gpu  a gpu device able assist cpu calculations  if scene look relatively realistic predictable virtual lighting  rendering software solve rendering equation  the rendering equation account lighting phenomena  general lighting model computer-generated imagery   rendering  also used describe process calculating effects video editing file produce final video output  d projection d projection method mapping three dimensional points two dimensional plane  as current methods displaying graphical data based planar two dimensional media  use type projection widespread  this method used real-time  d applications typically uses rasterization produce final image ray tracingray tracing technique family image order algorithms generating image tracing path light pixels image plane  the technique capable producing high degree photorealism  usually higher typical scanline rendering methods  greater computational cost shadingshading refers depicting depth  d models illustrations varying levels darkness  it process used drawing depicting levels darkness paper applying media densely darker shade darker areas  less densely lighter shade lighter areas  there various techniques shading including cross hatching perpendicular lines varying closeness drawn grid pattern shade area  the closer lines together  darker area appears  likewise  farther apart lines  lighter area appears  the term recently generalized mean shaders applied texture mappingtexture mapping method adding detail  surface texture  colour computer-generated graphic  d model  its application  d graphics pioneered dr edwin catmull       a texture map applied  mapped  surface shape  polygon  this process akin applying patterned paper plain white box  multitexturing use one texture time polygon  procedural textures  created adjusting parameters underlying algorithm produces output texture   bitmap textures  created image editing application imported digital camera   generally speaking  common methods implementing texture definition  d models computer graphics software  intended placement textures onto model surface often requires technique known uv mapping  arbitrary  manual layout texture coordinates  polygon surfaces  non-uniform rational b-spline  nurb  surfaces intrinsic parameterization used texture coordinates  texture mapping discipline also encompasses techniques creating normal maps bump maps correspond texture simulate height specular maps help simulate shine light reflections  well environment mapping simulate mirror-like reflectivity  also called gloss anti-aliasingrendering resolution-independent entities   d models  viewing raster  pixel-based  device liquid-crystal display crt television inevitably causes aliasing artifacts mostly along geometric edges boundaries texture details  artifacts informally called  jaggies   anti-aliasing methods rectify problems  resulting imagery pleasing viewer  somewhat computationally expensive  various anti-aliasing algorithms  supersampling  able employed  customized efficient rendering performance versus quality resultant imagery  graphics artist consider trade-off anti-aliasing methods used  a pre-anti-aliased bitmap texture displayed screen  screen location  resolution different resolution texture  textured model distance virtual camera  exhibit aliasing artifacts  procedurally defined texture always show aliasing artifacts resolution-independent  techniques mipmapping texture filtering help solve texture-related aliasing problems     volume rendering    volume rendering technique used display  d projection  d discretely sampled data set  a typical  d data set group  d slice images acquired ct mri scanner usually acquired regular pattern  e g   one slice every millimeter  usually regular number image pixels regular pattern  this example regular volumetric grid  volume element  voxel represented single value obtained sampling immediate area surrounding voxel      d modeling     d modeling process developing mathematical  wireframe representation three-dimensional object  called   d model   via specialized software  models may created automatically manually  manual modeling process preparing geometric data  d computer graphics similar plastic arts sculpting   d models may created using multiple approaches  use nurbs generate accurate smooth surface patches  polygonal mesh modeling  manipulation faceted geometry   polygonal mesh subdivision  advanced tessellation polygons  resulting smooth surfaces similar nurb models   a  d model displayed two-dimensional image process called  d rendering  used computer simulation physical phenomena  animated directly purposes  the model also physically created using  d printing devices    pioneers computer graphics   charles csuricharles csuri pioneer computer animation digital fine art created first computer art       csuri recognized smithsonian father digital art computer animation  pioneer computer animation museum modern art  moma  association computing machinery-siggraph donald p  greenbergdonald p  greenberg leading innovator computer graphics  greenberg authored hundreds articles served teacher mentor many prominent computer graphic artists  animators  researchers robert l  cook  marc levoy  brian a  barsky  wayne lytle  many former students academy awards technical achievements several siggraph achievement award  greenberg founding director nsf center computer graphics scientific visualization a  michael nollnoll one first researchers use digital computer create artistic patterns formalize use random processes creation visual arts  he began creating digital art       making one earliest digital artists  in       noll along frieder nake georg nees first publicly exhibit computer art  during april       howard wise gallery exhibited noll computer art along random-dot patterns bela julesz     other pioneers    pierre b zierjim blinnjack bresenhamjohn carmackpaul de casteljaued catmullfrank crowjames d  foleywilliam fetterhenry fuchshenri gouraudcharles loopnadia magnenat thalmannbenoit mandelbrotmartin newellfred parkebui tuong phongdavid pearsonsteve russelldaniel j  sandinalvy ray smithbob sproullivan sutherlanddaniel thalmannandries van damjohn warnockj  turner whittedlance williamsjim kajiya    organizations    siggraphgdcbell telephone laboratoriesunited states armed forces  particularly whirlwind computer sage projectboeingibmrenaultthe computer science department university utahlucasfilm industrial light   magicautodeskadobe systemspixarsilicon graphics  khronos group   openglthe directx division microsoftnvidiaamd   study computer graphics   the study computer graphics sub-field computer science studies methods digitally synthesizing manipulating visual content  although term often refers three-dimensional computer graphics  also encompasses two-dimensional graphics image processing as academic discipline  computer graphics studies manipulation visual geometric information using computational techniques  it focuses mathematical computational foundations image generation processing rather purely aesthetic issues  computer graphics often differentiated field visualization  although two fields many similarities    applications   computer graphics may used following areas computational biologycomputational photographycomputational physicscomputer-aided designcomputer simulationdesigndigital arteducationgraphic designinfographicsinformation visualizationrational drug designscientific visualizationspecial effects cinemavideo gamesvirtual realityweb design   see also   computer representation surfacesglossary computer graphics   notes      references      further reading   l  ammeraal k  zhang         computer graphics java programmers  second edition  john-wiley   sons  isbn    - -   -     -  david rogers         procedural elements computer graphics  mcgraw-hill james d  foley  andries van dam  steven k  feiner john f  hughes         computer graphics  principles practice  addison-wesley donald hearn m  pauline baker         computer graphics  prentice-hall francis s  hill         computer graphics  prentice hall john lewell         computer graphics  a survey current techniques applications  van nostrand reinhold jeffrey j  mcconnell         computer graphics  theory into practice  jones   bartlett publishers r  d  parslow  r  w  prowse  richard elliot green         computer graphics  techniques applications peter shirley others          fundamentals computer graphics  a k  peters  ltd m  slater  a  steed  y  chrysantho         computer graphics virtual environments  realism real-time  addison-wesley wolfgang h hl         interactive environments open-source software  springer wien new york  isbn  -   -     -    external links   a critical history computer graphics animationhistory computer graphics series articlescomputer graphics research uc berkeleythomas dreher  history computer art  chap  iv   computer animationhistory computer graphics rus
digital image processing use digital computer process digital images algorithm  as subcategory field digital signal processing  digital image processing many advantages analog image processing  it allows much wider range algorithms applied input data avoid problems build-up noise distortion processing  since images defined two dimensions  perhaps  digital image processing may modeled form multidimensional systems  the generation development digital image processing mainly affected three factors  first  development computers  second  development mathematics  especially creation improvement discrete mathematics theory   third  demand wide range applications environment  agriculture  military  industry medical science increased    history   many techniques digital image processing  digital picture processing often called  developed      bell laboratories  jet propulsion laboratory  massachusetts institute technology  university maryland  research facilities  application satellite imagery  wire-photo standards conversion  medical imaging  videophone  character recognition  photograph enhancement  the purpose early image processing improve quality image  it aimed human beings improve visual effect people  in image processing  input low-quality image  output image improved quality  common image processing include image enhancement  restoration  encoding  compression  the first successful application american jet propulsion laboratory  jpl   they used image processing techniques geometric correction  gradation transformation  noise removal  etc  thousands lunar photos sent back space detector ranger         taking account position sun environment moon  the impact successful mapping moon surface map computer huge success  later  complex image processing performed nearly         photos sent back spacecraft  topographic map  color map panoramic mosaic moon obtained  achieved extraordinary results laid solid foundation human landing moon the cost processing fairly high  however  computing equipment era  that changed      digital image processing proliferated cheaper computers dedicated hardware became available  this led images processed real-time  dedicated problems television standards conversion  as general-purpose computers became faster  started take role dedicated hardware specialized computer-intensive operations  with fast computers signal processors available      digital image processing become common form image processing  generally used versatile method  also cheapest     image sensors    the basis modern image sensors metal-oxide-semiconductor  mos  technology  originates invention mosfet  mos field-effect transistor  mohamed m  atalla dawon kahng bell labs       this led development digital semiconductor image sensors  including charge-coupled device  ccd  later cmos sensor the charge-coupled device invented willard s  boyle george e  smith bell labs       while researching mos technology  realized electric charge analogy magnetic bubble could stored tiny mos capacitor  as fairly straightforward fabricate series mos capacitors row  connected suitable voltage charge could stepped along one next  the ccd semiconductor circuit later used first digital video cameras television broadcasting the nmos active-pixel sensor  aps  invented olympus japan mid-    s  this enabled advances mos semiconductor device fabrication  mosfet scaling reaching smaller micron sub-micron levels  the nmos aps fabricated tsutomu nakamura team olympus       the cmos active-pixel sensor  cmos sensor  later developed eric fossum team nasa jet propulsion laboratory       by       sales cmos sensors surpassed ccd sensors     image compression    an important development digital image compression technology discrete cosine transform  dct   lossy compression technique first proposed nasir ahmed       dct compression became basis jpeg  introduced joint photographic experts group       jpeg compresses images much smaller file sizes  become widely used image file format internet  its highly efficient dct compression algorithm largely responsible wide proliferation digital images digital photos  several billion jpeg images produced every day          digital signal processor  dsp     electronic signal processing revolutionized wide adoption mos technology     s  mos integrated circuit technology basis first single-chip microprocessors microcontrollers early      first single-chip digital signal processor  dsp  chips late     s  dsp chips since widely used digital image processing the discrete cosine transform  dct  image compression algorithm widely implemented dsp chips  many companies developing dsp chips based dct technology  dcts widely used encoding  decoding  video coding  audio coding  multiplexing  control signals  signaling  analog-to-digital conversion  formatting luminance color differences  color formats yuv    yuv     dcts also used encoding operations motion estimation  motion compensation  inter-frame prediction  quantization  perceptual weighting  entropy encoding  variable encoding  motion vectors  decoding operations inverse operation different color formats  yiq  yuv rgb  display purposes  dcts also commonly used high-definition television  hdtv  encoder decoder chips     medical imaging    in       engineer british company emi housfield invented x-ray computed tomography device head diagnosis  is usually called ct  computer tomography   the ct nucleus method based projection human head section processed computer reconstruct cross-sectional image  called image reconstruction  in       emi successfully developed ct device whole body  obtained clear tomographic image various parts human body  in       diagnostic technique nobel prize  digital image processing technology medical applications inducted space foundation space technology hall fame         tasks   digital image processing allows use much complex algorithms  hence  offer sophisticated performance simple tasks  implementation methods would impossible analogue means in particular  digital image processing concrete application  practical technology based classificationfeature extractionmulti-scale signal analysispattern recognitionprojectionsome techniques used digital image processing include anisotropic diffusionhidden markov modelsimage editingimage restorationindependent component analysislinear filteringneural networkspartial differential equationspixelationpoint feature matchingprincipal components analysisself-organizing mapswavelets   digital image transformations       filtering    digital filters used blur sharpen digital images  filtering performed convolution specifically designed kernels  filter array  spatial domainmasking specific frequency regions frequency  fourier  domainthe following examples show methods      image padding fourier domain filtering     images typically padded transformed fourier space  highpass filtered images illustrate consequences different padding techniques notice highpass filter shows extra edges zero padded compared repeated edge padding      filtering code examples     matlab example spatial domain highpass filtering     affine transformations    affine transformations enable basic image transformations including scale  rotate  translate  mirror shear shown following examples to apply affine matrix image  image converted matrix entry corresponds pixel intensity location  then pixel location represented vector indicating coordinates pixel image   x    x row column pixel image matrix  this allows coordinate multiplied affine-transformation matrix  gives position pixel value copied output image however  allow transformations require translation transformations    dimensional homogeneous coordinates needed  the third dimension usually set non-zero constant  usually    new coordinate  x       this allows coordinate vector multiplied     matrix  enabling translation shifts  so third dimension  constant    allows translation because matrix multiplication associative  multiple affine transformations combined single affine transformation multiplying matrix individual transformation order transformations done  this results single matrix  applied point vector  gives result individual transformations performed vector  x      sequence  thus sequence affine transformation matrices reduced single affine transformation matrix for example    dimensional coordinates allow rotation origin         but   dimensional homogeneous coordinates used first translate point         perform rotation  lastly translate origin        back original point  opposite first translation   these   affine transformations combined single matrix  thus allowing rotation around point image     image denoising morphology    mathematical morphology suitable denoising images  structuring element important mathematical morphology  the following examples structuring elements   the denoise function  image i  structuring element b shown table eg                                         ibdisplaystyle  i     begin bmatrix                             end bmatrix  b   begin bmatrix                     end bmatrix     define dilation i  b  j                                      x                 i                                                 j                 n                          b                                 n                                  displaystyle max  i j n  b n        let dilation i b    d i b d i   b                                           x                                                                                                                                                                                                                                                                                                                                                                                        displaystyle max                                                   define erosion i  b  j                                      n                 i                                                 j                 n                          b                                 n                                  displaystyle min  i j n -b n        let erosion i b    e i b e i   b                                           n                                                                                                                                                                                                                                                                                                                                                                                       displaystyle min   -    -    -    -    -    -    -    -   -       after dilation                                       idisplaystyle  i     begin bmatrix                             end bmatrix     after erosion                                       idisplaystyle  i     begin bmatrix                            end bmatrix     an opening method simply erosion first  dilation closing method vice versa  in reality  d i b  e i b  implemented convolutionin order apply denoising method image  image converted grayscale  a mask denoising method logical matrix                                                                                                  displaystyle                   the denoising methods start center picture half height  half width  end image boundary row number  column number  neighbor block original image boundary  point center  point  point left center  point right center   convolution neighbor structuring element replace center minimum neighbor take closing method example dilation firstread image convert grayscale matlab get size image  the return value row numbers column numbers boundaries going use later structuring elements depend dilation erosion function  the minimum neighbor pixel leads erosion method maximum neighbor leads dilation method set time dilation  erosion  closing create zero matrix size original image dilation first structuring window structuring window     matrix convolutionfor loop extract minimum window row range      image height -    column range      image width -   fill minimum value zero matrix save new imagefor boundary  still improved  since method  boundary ignored  padding elements applied deal boundaries then erosion  take dilation image input create zero matrix size original image erosion structuring window structuring window     matrix convolutionfor loop extract maximum window row range      image height -    column range      image width -   fill maximum value zero matrix save new imagefor boundary  still improved  since method  boundary ignored  padding elements applied deal boundaries results table shown   applications       digital camera images    digital cameras generally include specialized digital image processing hardware   either dedicated chips added circuitry chips   convert raw data image sensor color-corrected image standard image file format     film    westworld        first feature film use digital image processing pixellate photography simulate android point view     face detection    face detection implemented mathematical morphology  discrete cosine transform usually called dct  horizontal projection  mathematics  general method feature-based methodthe feature-based method face detection using skin tone  edge detection  face shape  feature face  like eyes  mouth  etc  achieve face detection  the skin tone  face shape  unique elements human face described features process explanationgiven batch face images  first  extract skin tone range sampling face images  the skin tone range skin filter structural similarity index measure  ssim  applied compare images terms extracting skin tone normally  hsv rgb color spaces suitable skin filter  eg  hsv mode  skin tone range                         after filtering images skin tone  get face edge  morphology dct used remove noise fill missing skin areas opening method closing method used achieve filling missing skin dct avoid object tone-like skin  since human faces always higher texture sobel operator operators applied detect face edge to position human features like eyes  using projection find peak histogram projection help get detail feature like mouse  hair  lip projection projecting image see high frequency usually feature position     improvement image quality method    image quality influenced camera vibration  over-exposure  gray level distribution centralized  noise  etc  for example  noise problem solved smoothing method gray level distribution problem improved histogram equalization smoothing methodin drawing  dissatisfied color  taking color around dissatisfied color averaging them  this easy way think smoothing method smoothing method implemented mask convolution  take small image mask instance below imagedisplaystyle   begin bmatrix                                      end bmatrix     mask                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              displaystyle   begin bmatrix                                       end bmatrix     after convolution smoothing  imagedisplaystyle   begin bmatrix                                     end bmatrix     oberseving image        image        image        image       the original image pixel               after smoothing mask  pixel becomes             respectively new image                                                                                                                               displaystyle   tfrac               image      image      image      image      image      image      image      image      image      new image         floor                                                                                                                       displaystyle   tfrac                                        new image         floor                                                                                                                        displaystyle   tfrac                                         new image         floor                                                                                                                       displaystyle   tfrac                                         new image         floor                                                                                                                       displaystyle   tfrac                                        gray level histogram methodgenerally  given gray level histogram image below  changing histogram uniform distribution image usually called histogram equalization  in discrete time  area gray level histogram                                                                                                               k                          h                           p                                                                displaystyle  sum       k h p       see figure    area uniform distribution                                                                                                               k                          g                           q                                                                displaystyle  sum       k g q       see figure     it clear area change                                                                                                                k                          h                           p                                                                                                                                                           k                          g                           q                                                                displaystyle  sum       k h p     sum       k g q       from uniform distribution  probability                               q                                                       displaystyle q                                                                              n                                                                                                                 q                                      k                                                                                     q                                                                                                                                     displaystyle   tfrac  n      q  k -q                                                                k                displaystyle   k   in continuous time  equation                                                                                      q                                                                                                       q                                                                                            n                                                                                                                               q                                          k                                                                                               q                                                                                                                                                                                                                                                       p                                                                                                                     p                                      h                                                                                             displaystyle  displaystyle  int   q       q   tfrac  n      q  k -q      ds  displaystyle  int   p       p h ds    moreover  based definition function  gray level histogram method like finding function                     f                displaystyle f    satisfies f p  q    fatigue detection monitoring technologies   there significant advancements fatigue monitoring technology past decade  these innovative technology solutions commercially available offer real safety benefits drivers  operators shift workers across industries software developers  engineers scientists develop fatigue detection software using various physiological cues determine state fatigue drowsiness  the measurement brain activity  electroencephalogram  widely accepted standard fatigue monitoring  other technology used determine fatigue related impairment include behavioural symptom measurements  eye behaviour  gaze direction  micro-corrections steering throttle use well heart rate variability    see also   digital imagingcomputer graphicscomputer visioncviptoolsdigitizingfree boundary conditiongpgpuhomomorphic filteringimage analysisieee intelligent transportation systems societymultidimensional systemsremote sensing softwarestandard test imagesuperresolutiontotal variation denoisingmachine visionbounded variationradiomics   references      further reading   solomon  c j   breckon  t p          fundamentals digital image processing  a practical approach examples matlab  wiley-blackwell  doi                        isbn    -           wilhelm burger  mark j  burge         digital image processing  an algorithmic approach using java  springer  isbn    - -     -   -  r  fisher  k dawson-howe  a  fitzgibbon  c  robertson  e  trucco         dictionary computer vision image processing  john wiley  isbn    - -   -     -  rafael c  gonzalez  richard e  woods  steven l  eddins         digital image processing using matlab  pearson education  isbn    -  -    -   -  tim morris         computer vision image processing  palgrave macmillan  isbn    - -   -     -  tyagi vipin         understanding digital image processing  taylor francis crc press  isbn    -  -    -     milan sonka  vaclav hlavac  roger boyle         image processing  analysis  machine vision  pws publishing  isbn    - -   -     -  rafael c  gonzalez         digital image processing  prentice hall  isbn                 external links   lectures image processing  alan peters  vanderbilt university  updated   january      processing digital images computer algorithms
information visualization  visualisation  study visual representations abstract data reinforce human cognition  the abstract data include numerical non-numerical data  text geographic information  it related data visualization  infographics  scientific visualization  one definition information visualization spatial representation  e g   page layout graphic design  chosen  whereas scientific visualization spatial representation given    overview   the field information visualization emerged  research human computer interaction  computer science  graphics  visual design  psychology  business methods  it increasingly applied critical component scientific research  digital libraries  data mining  financial data analysis  market studies  manufacturing production control  drug discovery  information visualization presumes  visual representations interaction techniques take advantage human eye broad bandwidth pathway mind allow users see  explore  understand large amounts information once  information visualization focused creation approaches conveying abstract information intuitive ways  data analysis indispensable part applied research problem solving industry  the fundamental data analysis approaches visualization  histograms  scatter plots  surface plots  tree maps  parallel coordinate plots  etc    statistics  hypothesis test  regression  pca  etc    data mining  association mining  etc    machine learning methods  clustering  classification  decision trees  etc    among approaches   information visualization  visual data analysis  reliant cognitive skills human analysts  allows discovery unstructured actionable insights limited human imagination creativity  the analyst learn sophisticated methods able interpret visualizations data  information visualization also hypothesis generation scheme   typically followed analytical formal analysis  statistical hypothesis testing    history   the modern study visualization started computer graphics   beginning used study scientific problems  however  early days lack graphics power often limited usefulness  the recent emphasis visualization started      special issue computer graphics visualization scientific computing  since several conferences workshops  co-sponsored ieee computer society acm siggraph   they devoted general topics data visualization  information visualization scientific visualization  specific areas volume visualization in       william playfair published first presentation graphics    techniques   cartogramcladogram  phylogeny concept mappingdendrogram  classification information visualization reference modelgraph drawingheatmaphyperbolictreemultidimensional scalingparallel coordinatesproblem solving environmenttreemapping   applications   information visualization insights applied areas scientific researchdigital librariesdata mininginformation graphicsfinancial data analysishealth caremarket studiesmanufacturing production controlcrime mappingegovernance policy modeling   organization   notable academic industry laboratories field adobe researchibm researchgoogle researchmicrosoft researchpanopticon softwarescientific computing imaging institutetableau softwareuniversity maryland human-computer interaction labvviconferences field  ranked significance data visualization research  ieee visualization  an annual international conference scientific visualization  information visualization  visual analytics  conference held october acm siggraph  an annual international conference computer graphics  convened acm siggraph organization  conference dates vary eurovis  an annual europe-wide conference data visualization  organized eurographics working group data visualization supported ieee visualization graphics technical committee  ieee vgtc   conference usually held june conference human factors computing systems  chi   an annual international conference human computer interaction  hosted acm sigchi  conference usually held april may eurographics  an annual europe-wide computer graphics conference  held european association computer graphics  conference usually held april may pacificvis  an annual visualization symposium held asia-pacific region  sponsored ieee visualization graphics technical committee  ieee vgtc   conference usually held march april for examples  see  category computer graphics organizations   see also   color coding technology visualizationcomputational visualisticsdata artdata presentation architecturedata visualizationgeovisualizationinfographicspatent visualisationsoftware visualizationvisual analyticslist information graphics softwarelist countries economic complexity  example treemapping   references      further reading   ben bederson ben shneiderman         the craft information visualization  readings reflections  morgan kaufmann stuart k  card  jock d  mackinlay ben shneiderman         readings information visualization  using vision think  morgan kaufmann publishers jeffrey heer  stuart k  card  james landay          prefuse  toolkit interactive information visualization   in  acm human factors computing systems chi      andreas kerren  john t  stasko  jean-daniel fekete  chris north         information visualization   human-centered issues perspectives  volume      lncs state-of-the-art survey  springer riccardo mazza         introduction information visualization  springer spence  robert information visualization  design interaction   nd edition   prentice hall        isbn  -  -      -  colin ware         information visualization  perception design  san francisco  ca  morgan kaufmann kawa nazemi         adaptive semantics visualization eurographics association    external links    media related information visualization wikimedia commonsinformation visualization curlie
parallel computing type computation many calculations processes carried simultaneously  large problems often divided smaller ones  solved time  there several different forms parallel computing  bit-level  instruction-level  data  task parallelism  parallelism long employed high-performance computing  gained broader interest due physical constraints preventing frequency scaling  as power consumption  consequently heat generation  computers become concern recent years  parallel computing become dominant paradigm computer architecture  mainly form multi-core processors parallel computing closely related concurrent computing frequently used together  often conflated  though two distinct  possible parallelism without concurrency  bit-level parallelism   concurrency without parallelism  multitasking time-sharing single-core cpu   in parallel computing  computational task typically broken several  often many  similar sub-tasks processed independently whose results combined afterwards  upon completion  in contrast  concurrent computing  various processes often address related tasks   typical distributed computing  separate tasks may varied nature often require inter-process communication execution parallel computers roughly classified according level hardware supports parallelism  multi-core multi-processor computers multiple processing elements within single machine  clusters  mpps  grids use multiple computers work task  specialized parallel computer architectures sometimes used alongside traditional processors  accelerating specific tasks in cases parallelism transparent programmer  bit-level instruction-level parallelism  explicitly parallel algorithms  particularly use concurrency  difficult write sequential ones  concurrency introduces several new classes potential software bugs  race conditions common  communication synchronization different subtasks typically greatest obstacles getting optimal parallel program performance a theoretical upper bound speed-up single program result parallelization given amdahl law    background   traditionally  computer software written serial computation  to solve problem  algorithm constructed implemented serial stream instructions  these instructions executed central processing unit one computer  only one instruction may execute time instruction finished  next one executed parallel computing  hand  uses multiple processing elements simultaneously solve problem  this accomplished breaking problem independent parts processing element execute part algorithm simultaneously others  the processing elements diverse include resources single computer multiple processors  several networked computers  specialized hardware  combination above  historically parallel computing used scientific computing simulation scientific problems  particularly natural engineering sciences  meteorology  this led design parallel hardware software  well high performance computing frequency scaling dominant reason improvements computer performance mid-          the runtime program equal number instructions multiplied average time per instruction  maintaining everything else constant  increasing clock frequency decreases average time takes execute instruction  an increase frequency thus decreases runtime compute-bound programs  however  power consumption p chip given equation p   c   v     f  c capacitance switched per clock cycle  proportional number transistors whose inputs change   v voltage  f processor frequency  cycles per second   increases frequency increase amount power used processor  increasing processor power consumption led ultimately intel may         cancellation tejas jayhawk processors  generally cited end frequency scaling dominant computer architecture paradigm to deal problem power consumption overheating major central processing unit  cpu processor  manufacturers started produce power efficient processors multiple cores  the core computing unit processor multi-core processors core independent access memory concurrently  multi-core processors brought parallel computing desktop computers  thus parallelisation serial programmes become mainstream programming task  in      quad-core processors became standard desktop computers  servers       core processors  from moore law predicted number cores per processor double every       months  this could mean      typical processor dozens hundreds cores an operating system ensure different tasks user programmes run parallel available cores  however  serial software programme take full advantage multi-core architecture programmer needs restructure parallelise code  a speed-up application software runtime longer achieved frequency scaling  instead programmers need parallelise software code take advantage increasing computing power multicore architectures     amdahl law gustafson law    optimally  speedup parallelization would linear doubling number processing elements halve runtime  doubling second time halve runtime  however  parallel algorithms achieve optimal speedup  most near-linear speedup small numbers processing elements  flattens constant value large numbers processing elements the potential speedup algorithm parallel computing platform given amdahl law                              s                      latency                                                                                                                                           p                                                               p                                                                                                      displaystyle s   text latency      frac      -p   frac  p         whereslatency potential speedup latency execution whole task speedup latency execution parallelizable part task p percentage execution time whole task concerning parallelizable part task parallelization since slatency        - p   shows small part program cannot parallelized limit overall speedup available parallelization  a program solving large mathematical engineering problem typically consist several parallelizable parts several non-parallelizable  serial  parts  if non-parallelizable part program accounts     runtime  p         get    times speedup  regardless many processors added  this puts upper limit usefulness adding parallel execution units   when task cannot partitioned sequential constraints  application effort effect schedule  the bearing child takes nine months  matter many women assigned  amdahl law applies cases problem size fixed  in practice  computing resources become available  tend get used larger problems  larger datasets   time spent parallelizable part often grows much faster inherently serial work  in case  gustafson law gives less pessimistic realistic assessment parallel performance                               s                      latency                                                                              p                        p                         displaystyle s   text latency     -p sp    both amdahl law gustafson law assume running time serial part program independent number processors  amdahl law assumes entire problem fixed size total amount work done parallel also independent number processors  whereas gustafson law assumes total amount work done parallel varies linearly number processors     dependencies    understanding data dependencies fundamental implementing parallel algorithms  no program run quickly longest chain dependent calculations  known critical path   since calculations depend upon prior calculations chain must executed order  however  algorithms consist long chain dependent calculations  usually opportunities execute independent calculations parallel let pi pj two program segments  bernstein conditions describe two independent executed parallel  for pi  let ii input variables oi output variables  likewise pj  pi pj independent satisfy                              i                      j                                             o                                                                                  displaystyle i  j  cap o    varnothing                                   i                                                                  o                      j                                                             displaystyle i   cap o  j   varnothing                                   o                                                                  o                      j                                                             displaystyle o   cap o  j   varnothing     violation first condition introduces flow dependency  corresponding first segment producing result used second segment  the second condition represents anti-dependency  second segment produces variable needed first segment  the third final condition represents output dependency  two segments write location  result comes logically last executed segment consider following functions  demonstrate several kinds dependencies    function dep  b    c      b          c   end functionin example  instruction   cannot executed  even parallel  instruction    instruction   uses result instruction    it violates condition    thus introduces flow dependency    function nodep  b    c      b          b   e      b   end functionin example  dependencies instructions  run parallel bernstein conditions allow memory shared different processes  for  means enforcing ordering accesses necessary  semaphores  barriers synchronization method     race conditions  mutual exclusion  synchronization  parallel slowdown    subtasks parallel program often called threads  some parallel computer architectures use smaller  lightweight versions threads known fibers  others use bigger versions known processes  however   threads  generally accepted generic term subtasks  threads often need synchronized access object resource  example must update variable shared them  without synchronization  instructions two threads may interleaved order  for example  consider following program if instruction  b executed  a  a  instruction  a executed  b  b  program produce incorrect data  this known race condition  the programmer must use lock provide mutual exclusion  a lock programming language construct allows one thread take control variable prevent threads reading writing  variable unlocked  the thread holding lock free execute critical section  section program requires exclusive access variable   unlock data finished  therefore  guarantee correct program execution  program rewritten use locks one thread successfully lock variable v  thread locked unable proceed v unlocked again  this guarantees correct execution program  locks may necessary ensure correct program execution threads must serialize access resources  use greatly slow program may affect reliability locking multiple variables using non-atomic locks introduces possibility program deadlock  an atomic lock locks multiple variables once  if cannot lock  lock them  if two threads need lock two variables using non-atomic locks  possible one thread lock one second thread lock second variable  in case  neither thread complete  deadlock results many parallel programs require subtasks act synchrony  this requires use barrier  barriers typically implemented using lock semaphore  one class algorithms  known lock-free wait-free algorithms  altogether avoids use locks barriers  however  approach generally difficult implement requires correctly designed data structures not parallelization results speed-up  generally  task split more threads  threads spend ever-increasing portion time communicating waiting access resources  once overhead resource contention communication dominates time spent computation  parallelization   splitting workload even threads  increases rather decreases amount time required finish  this problem  known parallel slowdown  improved cases software analysis redesign     fine-grained  coarse-grained  embarrassing parallelism    applications often classified according often subtasks need synchronize communicate other  an application exhibits fine-grained parallelism subtasks must communicate many times per second  exhibits coarse-grained parallelism communicate many times per second  exhibits embarrassing parallelism rarely never communicate  embarrassingly parallel applications considered easiest parallelize     flynn taxonomy    michael j  flynn created one earliest classification systems parallel  sequential  computers programs  known flynn taxonomy  flynn classified programs computers whether operating using single set multiple sets instructions  whether instructions using single set multiple sets data the single-instruction-single-data  sisd  classification equivalent entirely sequential program  the single-instruction-multiple-data  simd  classification analogous operation repeatedly large data set  this commonly done signal processing applications  multiple-instruction-single-data  misd  rarely used classification  while computer architectures deal devised  systolic arrays   applications fit class materialized  multiple-instruction-multiple-data  mimd  programs far common type parallel programs according david a  patterson john l  hennessy   some machines hybrids categories  course  classic model survived simple  easy understand  gives good first approximation  it also perhaps understandability widely used scheme     types parallelism       bit-level parallelism    from advent very-large-scale integration  vlsi  computer-chip fabrication technology           speed-up computer architecture driven doubling computer word size amount information processor manipulate per cycle  increasing word size reduces number instructions processor must execute perform operation variables whose sizes greater length word  for example   -bit processor must add two   -bit integers  processor must first add   lower-order bits integer using standard addition instruction  add   higher-order bits using add-with-carry instruction carry bit lower order addition  thus   -bit processor requires two instructions complete single operation    -bit processor would able complete operation single instruction historically   -bit microprocessors replaced  -bit    -bit    -bit microprocessors  this trend generally came end introduction   -bit processors  standard general-purpose computing two decades  not early      advent x  -   architectures    -bit processors become commonplace     instruction-level parallelism    a computer program  essence  stream instructions executed processor  without instruction-level parallelism  processor issue less one instruction per clock cycle  ipc       these processors known subscalar processors  these instructions re-ordered combined groups executed parallel without changing result program  this known instruction-level parallelism  advances instruction-level parallelism dominated computer architecture mid-    mid-    s all modern processors multi-stage instruction pipelines  each stage pipeline corresponds different action processor performs instruction stage  processor n-stage pipeline n different instructions different stages completion thus issue one instruction per clock cycle  ipc       these processors known scalar processors  the canonical example pipelined processor risc processor  five stages  instruction fetch  if   instruction decode  id   execute  ex   memory access  mem   register write back  wb   the pentium   processor   -stage pipeline most modern processors also multiple execution units  they usually combine feature pipelining thus issue one instruction per clock cycle  ipc       these processors known superscalar processors  superscalar processors differ multi-core processors several execution units entire processors  i e  processing units   instructions grouped together data dependency them  scoreboarding tomasulo algorithm  similar scoreboarding makes use register renaming  two common techniques implementing out-of-order execution instruction-level parallelism     task parallelism    task parallelisms characteristic parallel program  entirely different calculations performed either different sets data   this contrasts data parallelism  calculation performed different sets data  task parallelism involves decomposition task sub-tasks allocating sub-task processor execution  the processors would execute sub-tasks concurrently often cooperatively  task parallelism usually scale size problem     superword level parallelism    superword level parallelism vectorization technique based loop unrolling basic block vectorization  it distinct loop vectorization algorithms exploit parallelism inline code  manipulating coordinates  color channels loops unrolled hand    hardware       memory communication    main memory parallel computer either shared memory  shared processing elements single address space   distributed memory  processing element local address space   distributed memory refers fact memory logically distributed  often implies physically distributed well  distributed shared memory memory virtualization combine two approaches  processing element local memory access memory non-local processors  accesses local memory typically faster accesses non-local memory  on supercomputers  distributed shared memory space implemented using programming model pgas   this model allows processes one compute node transparently access remote memory another compute node  all compute nodes also connected external shared memory system via high-speed interconnect  infiniband  external shared memory system known burst buffer  typically built arrays non-volatile memory physically distributed across multiple i o nodes computer architectures element main memory accessed equal latency bandwidth known uniform memory access  uma  systems  typically  achieved shared memory system  memory physically distributed  a system property known non-uniform memory access  numa  architecture  distributed memory systems non-uniform memory access computer systems make use caches small fast memories located close processor store temporary copies memory values  nearby physical logical sense   parallel computer systems difficulties caches may store value one location  possibility incorrect program execution  these computers require cache coherency system  keeps track cached values strategically purges  thus ensuring correct program execution  bus snooping one common methods keeping track values accessed  thus purged   designing large  high-performance cache coherence systems difficult problem computer architecture  as result  shared memory computer architectures scale well distributed memory systems do processor processor processor memory communication implemented hardware several ways  including via shared  either multiported multiplexed  memory  crossbar switch  shared bus interconnect network myriad topologies including star  ring  tree  hypercube  fat hypercube  hypercube one processor node   n-dimensional mesh parallel computers based interconnected networks need kind routing enable passing messages nodes directly connected  the medium used communication processors likely hierarchical large multiprocessor machines     classes parallel computers    parallel computers roughly classified according level hardware supports parallelism  this classification broadly analogous distance basic computing nodes  these mutually exclusive  example  clusters symmetric multiprocessors relatively common      multi-core computing     a multi-core processor processor includes multiple processing units  called  cores   chip  this processor differs superscalar processor  includes multiple execution units issue multiple instructions per clock cycle one instruction stream  thread   contrast  multi-core processor issue multiple instructions per clock cycle multiple instruction streams  ibm cell microprocessor  designed use sony playstation    prominent multi-core processor  each core multi-core processor potentially superscalar well  every clock cycle  core issue multiple instructions one thread simultaneous multithreading   intel hyper-threading best known  early form pseudo-multi-coreism  a processor capable concurrent multithreading includes multiple execution units processing unit superscalar architecture issue multiple instructions per clock cycle multiple threads  temporal multithreading hand includes single execution unit processing unit issue one instruction time multiple threads      symmetric multiprocessing     a symmetric multiprocessor  smp  computer system multiple identical processors share memory connect via bus  bus contention prevents bus architectures scaling  as result  smps generally comprise    processors  because small size processors significant reduction requirements bus bandwidth achieved large caches  symmetric multiprocessors extremely cost-effective  provided sufficient amount memory bandwidth exists      distributed computing     a distributed computer  also known distributed memory multiprocessor  distributed memory computer system processing elements connected network  distributed computers highly scalable  the terms  concurrent computing    parallel computing    distributed computing  lot overlap  clear distinction exists them  the system may characterized  parallel   distributed   processors typical distributed system run concurrently parallel       cluster computing      a cluster group loosely coupled computers work together closely  respects regarded single computer  clusters composed multiple standalone machines connected network  while machines cluster symmetric  load balancing difficult not  the common type cluster beowulf cluster  cluster implemented multiple identical commercial off-the-shelf computers connected tcp ip ethernet local area network  beowulf technology originally developed thomas sterling donald becker      top    supercomputers clusters  the remaining massively parallel processors  explained below because grid computing systems  described  easily handle embarrassingly parallel problems  modern clusters typically designed handle difficult problems problems require nodes share intermediate results often  this requires high bandwidth  importantly  low-latency interconnection network  many historic current supercomputers use customized high-performance network hardware specifically designed cluster computing  cray gemini network  as       current supercomputers use off-the-shelf standard network hardware  often myrinet  infiniband  gigabit ethernet       massively parallel computing      a massively parallel processor  mpp  single computer many networked processors  mpps many characteristics clusters  mpps specialized interconnect networks  whereas clusters use commodity hardware networking   mpps also tend larger clusters  typically  far      processors  in mpp   cpu contains memory copy operating system application  each subsystem communicates others via high-speed interconnect  ibm blue gene l  fifth fastest supercomputer world according june      top    ranking  mpp       grid computing      grid computing distributed form parallel computing  it makes use computers communicating internet work given problem  because low bandwidth extremely high latency available internet  distributed computing typically deals embarrassingly parallel problems  many distributed computing applications created  seti home folding home best-known examples most grid computing applications use middleware  software sits operating system application manage network resources standardize software interface   the common distributed computing middleware berkeley open infrastructure network computing  boinc   often  distributed computing software makes use  spare cycles   performing computations times computer idling      specialized parallel computers     within parallel computing  specialized parallel devices remain niche areas interest  while domain-specific  tend applicable classes parallel problems       reconfigurable computing field-programmable gate arrays      reconfigurable computing use field-programmable gate array  fpga  co-processor general-purpose computer  an fpga  essence  computer chip rewire given task fpgas programmed hardware description languages vhdl verilog  however  programming languages tedious  several vendors created c hdl languages attempt emulate syntax semantics c programming language  programmers familiar  the best known c hdl languages mitrion-c  impulse c  dime-c  handel-c  specific subsets systemc based c   also used purpose amd decision open hypertransport technology third-party vendors become enabling technology high-performance reconfigurable computing  according michael r  d amour  chief operating officer drc computer corporation   first walked amd  called us  socket stealers   now call us partners        general-purpose computing graphics processing units  gpgpu       general-purpose computing graphics processing units  gpgpu  fairly recent trend computer engineering research  gpus co-processors heavily optimized computer graphics processing  computer graphics processing field dominated data parallel operations particularly linear algebra matrix operations in early days  gpgpu programs used normal graphics apis executing programs  however  several new programming languages platforms built general purpose computation gpus nvidia amd releasing programming environments cuda stream sdk respectively  other gpu programming languages include brookgpu  peakstream  rapidmind  nvidia also released specific products computation tesla series  the technology consortium khronos group released opencl specification  framework writing programs execute across platforms consisting cpus gpus  amd  apple  intel  nvidia others supporting opencl       application-specific integrated circuits      several application-specific integrated circuit  asic  approaches devised dealing parallel applications because asic  definition  specific given application  fully optimized application  as result  given application  asic tends outperform general-purpose computer  however  asics created uv photolithography  this process requires mask set  extremely expensive  a mask set cost million us dollars   the smaller transistors required chip  expensive mask be   meanwhile  performance increases general-purpose computing time  described moore law  tend wipe gains one two chip generations  high initial cost  tendency overtaken moore s-law-driven general-purpose computing  rendered asics unfeasible parallel computing applications  however  built  one example pflops riken mdgrape-  machine uses custom asics molecular dynamics simulation       vector processors      a vector processor cpu computer system execute instruction large sets data  vector processors high-level operations work linear arrays numbers vectors  an example vector operation a   b   c  a  b  c   -element vectors   -bit floating-point numbers  they closely related flynn simd classification cray computers became famous vector-processing computers         s  however  vector processors cpus full computer systems generally disappeared  modern processor instruction sets include vector processing instructions  freescale semiconductor altivec intel streaming simd extensions  sse     software       parallel programming languages    concurrent programming languages  libraries  apis  parallel programming models  algorithmic skeletons  created programming parallel computers  these generally divided classes based assumptions make underlying memory architecture shared memory  distributed memory  shared distributed memory  shared memory programming languages communicate manipulating shared memory variables  distributed memory uses message passing  posix threads openmp two widely used shared memory apis  whereas message passing interface  mpi  widely used message-passing system api  one concept used programming parallel programs future concept  one part program promises deliver required datum another part program future time caps entreprise pathscale also coordinating effort make hybrid multi-core parallel programming  hmpp  directives open standard called openhmpp  the openhmpp directive-based programming model offers syntax efficiently offload computations hardware accelerators optimize data movement hardware memory  openhmpp directives describe remote procedure call  rpc  accelerator device  e g  gpu  generally set cores  the directives annotate c fortran codes describe two sets functionalities  offloading procedures  denoted codelets  onto remote device optimization data transfers cpu main memory accelerator memory the rise consumer gpus led support compute kernels  either graphics apis  referred compute shaders   dedicated apis  opencl   language extensions     automatic parallelization    automatic parallelization sequential program compiler  holy grail  parallel computing  especially aforementioned limit processor frequency  despite decades work compiler researchers  automatic parallelization limited success mainstream parallel programming languages remain either explicitly parallel  best  partially implicit  programmer gives compiler directives parallelization  a fully implicit parallel programming languages exist sisal  parallel haskell  sequencel  system c  fpgas   mitrion-c  vhdl  verilog     application checkpointing    as computer system grows complexity  mean time failures usually decreases  application checkpointing technique whereby computer system takes  snapshot  application record current resource allocations variable states  akin core dump   information used restore program computer fail  application checkpointing means program restart last checkpoint rather beginning  while checkpointing provides benefits variety situations  especially useful highly parallel systems large number processors used high performance computing    algorithmic methods   as parallel computers become larger faster  able solve problems previously taken long run  fields varied bioinformatics  protein folding sequence analysis  economics  mathematical finance  taken advantage parallel computing  common types problems parallel computing applications include dense linear algebrasparse linear algebraspectral methods  cooley tukey fast fourier transform n-body problems  barnes hut simulation structured grid problems  lattice boltzmann methods unstructured grid problems  found finite element analysis monte carlo methodcombinational logic  brute-force cryptographic techniques graph traversal  sorting algorithms dynamic programmingbranch bound methodsgraphical models  detecting hidden markov models constructing bayesian networks finite-state machine simulation   fault tolerance   parallel computing also applied design fault-tolerant computer systems  particularly via lockstep systems performing operation parallel  this provides redundancy case one component fails  also allows automatic error detection error correction results differ  these methods used help prevent single-event upsets caused transient errors  although additional measures may required embedded specialized systems  method provide cost-effective approach achieve n-modular redundancy commercial off-the-shelf systems    history   the origins true  mimd  parallelism go back luigi federico menabrea sketch analytic engine invented charles babbage in april       stanley gill  ferranti  discussed parallel programming need branching waiting  also       ibm researchers john cocke daniel slotnick discussed use parallelism numerical calculations first time  burroughs corporation introduced d          four-processor computer accessed    memory modules crossbar switch  in       amdahl slotnick published debate feasibility parallel processing american federation information processing societies conference  it debate amdahl law coined define limit speed-up due parallelism in       honeywell introduced first multics system  symmetric multiprocessor system capable running eight processors parallel  c mmp  multi-processor project carnegie mellon university      among first multiprocessors processors  the first bus-connected multiprocessor snooping caches synapse n        simd parallel computers traced back     s  the motivation behind early simd computers amortize gate delay processor control unit multiple instructions  in       slotnick proposed building massively parallel computer lawrence livermore national laboratory  his design funded us air force  earliest simd parallel-computing effort  illiac iv  the key design fairly high parallelism      processors  allowed machine work large datasets would later known vector processing  however  illiac iv called  infamous supercomputers   project one-fourth completed  took    years cost almost four times original estimate  when finally ready run first real application       outperformed existing commercial supercomputers cray-     biological brain massively parallel computer   in early      mit computer science artificial intelligence laboratory  marvin minsky seymour papert started developing society mind theory  views biological brain massively parallel computer  in       minsky published the society mind  claims  mind formed many little agents  mindless   the theory attempts explain call intelligence could product interaction non-intelligent parts  minsky says biggest source ideas theory came work trying create machine uses robotic arm  video camera  computer build children blocks similar models  also view biological brain massively parallel computer  i e   brain made constellation independent semi-independent agents  also described thomas r  blakeslee michael s  gazzaniga robert e  ornstein ernest hilgard michio kaku george ivanovich gurdjieff neurocluster brain model    see also      references      further reading   rodriguez  c   villagra  m   baran  b      august         asynchronous team algorithms boolean satisfiability   bio-inspired models network  information computing systems        bionetics        nd         doi         bimnics               s cid          sechin  a   parallel computing photogrammetry  gim international            pp           external links   instructional videos caf fortran standard john reid  see appendix b parallel computing curlielawrence livermore national laboratory  introduction parallel computingdesigning building parallel programs  ian fosterinternet parallel computing archiveparallel processing topic area ieee distributed computing onlineparallel computing works free on-line bookfrontiers supercomputing free on-line book covering topics like algorithms industrial applicationsuniversal parallel computing research centercourse parallel programming columbia university  collaboration ibm t j  watson x   project parallel distributed gr bner bases computation jas  see also gr bner basiscourse parallel computing university wisconsin-madisonberkeley par lab  progress parallel computing landscape  editors  david patterson  dennis gannon  michael wrinn  august         the trouble multicore  david patterson  posted    jun     parallel computing   a view from techseviintroduction parallel computingcoursera  parallel programmingparallel computing   a view from gyan grih
in computer science  concurrency ability different parts units program  algorithm  problem executed out-of-order time simultaneously partial order  without affecting final outcome   this allows parallel execution concurrent units  significantly improve overall speed execution multi-processor multi-core systems  in technical terms  concurrency refers decomposability program  algorithm  problem order-independent partially-ordered components units computation according rob pike  concurrency composition independently executing computations  concurrency parallelism  concurrency dealing lots things parallelism lots things once  concurrency structure  parallelism execution  concurrency provides way structure solution solve problem may  necessarily  parallelizable a number mathematical models developed general concurrent computation including petri nets  process calculi  parallel random-access machine model  actor model reo coordination language    history   as leslie lamport        notes   while concurrent program execution considered years  computer science concurrency began edsger dijkstra seminal      paper introduced mutual exclusion problem      the ensuing decades seen huge growth interest concurrency particularly distributed systems  looking back origins field  stands fundamental role played edsger dijkstra     issues   because computations concurrent system interact executed  number possible execution paths system extremely large  resulting outcome indeterminate  concurrent use shared resources source indeterminacy leading issues deadlocks  resource starvation design concurrent systems often entails finding reliable techniques coordinating execution  data exchange  memory allocation  execution scheduling minimize response time maximise throughput    theory   concurrency theory active field research theoretical computer science   one first proposals  carl adam petri seminal work petri nets early     s  in years since  wide variety formalisms developed modeling reasoning concurrency     models    a number formalisms modeling understanding concurrent systems developed  including the parallel random-access machinethe actor modelcomputational bridging models bulk synchronous parallel  bsp  modelpetri netsprocess calculicalculus communicating systems  ccs communicating sequential processes  csp  model -calculustuple spaces  e g   lindasimple concurrent object-oriented programming  scoop reo coordination languagesome models concurrency primarily intended support reasoning specification  others used entire development cycle  including design  implementation  proof  testing simulation concurrent systems  some based message passing  others different mechanisms concurrency the proliferation different models concurrency motivated researchers develop ways unify different theoretical models  for example  lee sangiovanni-vincentelli demonstrated so-called  tagged-signal  model used provide common framework defining denotational semantics variety different models concurrency  nielsen  sassone  winskel demonstrated category theory used provide similar unified understanding different models the concurrency representation theorem actor model provides fairly general way represent concurrent systems closed sense receive communications outside   other concurrency systems  e g   process calculi modeled actor model using two-phase commit protocol   the mathematical denotation denoted closed system s constructed increasingly better approximations initial behavior called  s using behavior approximating function progressions construct denotation  meaning   s follows denotes      progressionsi  s in way  s mathematically characterized terms possible behaviors     logics    various types temporal logic used help reason concurrent systems  some logics  linear temporal logic computation tree logic  allow assertions made sequences states concurrent system pass through  others  action computational tree logic  hennessy milner logic  lamport temporal logic actions  build assertions sequences actions  changes state   the principal application logics writing specifications concurrent systems    practice   concurrent programming encompasses programming languages algorithms used implement concurrent systems   concurrent programming usually considered general parallel programming involve arbitrary dynamic patterns communication interaction  whereas parallel systems generally predefined well-structured communications pattern  the base goals concurrent programming include correctness  performance robustness  concurrent systems operating systems database management systems generally designed operate indefinitely  including automatic recovery failure  terminate unexpectedly  see concurrency control   some concurrent systems implement form transparent concurrency  concurrent computational entities may compete share single resource  complexities competition sharing shielded programmer because use shared resources  concurrent systems general require inclusion kind arbiter somewhere implementation  often underlying hardware   control access resources  the use arbiters introduces possibility indeterminacy concurrent computation major implications practice including correctness performance   for example  arbitration introduces unbounded nondeterminism raises issues model checking causes explosion state space even cause models infinite number states some concurrent programming models include coprocesses deterministic concurrency  in models  threads control explicitly yield timeslices  either system another process    see also   chu spaceclient server network nodesclojurecluster nodesconcurrency controlconcurrent computingconcurrent object-oriented programmingconcurrency patternconstruction analysis distributed processes  cadp d  programming language distributed systemnodeselixir  programming language erlang  programming language go  programming language gordon paskinternational conference concurrency theory  concur openmpparallel computingpartitioned global address spaceprocessesptolemy projectrust  programming language sheaf  mathematics threadsx    programming language    references      further reading   lynch  nancy a          distributed algorithms  morgan kaufmann  isbn    - -     -   -  tanenbaum  andrew s   van steen  maarten         distributed systems  principles paradigms  prentice hall  isbn    - -  -      -  kurki-suonio  reino         a practical theory reactive systems  springer  isbn    - -   -     -  garg  vijay k          elements distributed computing  wiley-ieee press  isbn    - -   -     -  magee  jeff  kramer  jeff         concurrency  state models java programming  wiley  isbn    - -   -     -  distefano  s     bruneo  d          quantitative assessments distributed systems  methodologies techniques   st ed    somerset  john wiley   sons inc isbn              bhattacharyya  s  s                handbook signal processing systems  second    nd       ed    new york  ny  springer            - -    -    -  isbn              wolter  k                resilience assessment evaluation computing systems     aufl     ed    london berlin   springer  isbn                 external links   concurrent systems the www virtual libraryconcurrency patterns presentation given scaleconf
distributed computing field computer science studies distributed systems  a distributed system system whose components located different networked computers  communicate coordinate actions passing messages one another system  the components interact one another order achieve common goal  three significant characteristics distributed systems  concurrency components  lack global clock  independent failure components  it deals central challenge  components system fails  imply entire system fails  examples distributed systems vary soa-based systems massively multiplayer online games peer-to-peer applications a computer program runs within distributed system called  distributed program  distributed programming process writing programs   there many different types implementations message passing mechanism  including pure http  rpc-like connectors message queues distributed computing also refers use distributed systems solve computational problems  in distributed computing  problem divided many tasks  solved one computers  communicate via message passing    introduction   the word distributed terms  distributed system    distributed programming    distributed algorithm  originally referred computer networks individual computers physically distributed within geographical area  the terms nowadays used much wider sense  even referring autonomous processes run physical computer interact message passing while single definition distributed system  following defining properties commonly used there several autonomous computational entities  computers nodes   local memory the entities communicate message passing a distributed system may common goal  solving large computational problem  user perceives collection autonomous processors unit  alternatively  computer may user individual needs  purpose distributed system coordinate use shared resources provide communication services users other typical properties distributed systems include following the system tolerate failures individual computers the structure system  network topology  network latency  number computers  known advance  system may consist different kinds computers network links  system may change execution distributed program each computer limited  incomplete view system  each computer may know one part input    parallel distributed computing   distributed systems groups networked computers share common goal work the terms  concurrent computing    parallel computing    distributed computing  much overlap  clear distinction exists them  the system may characterized  parallel   distributed   processors typical distributed system run concurrently parallel  parallel computing may seen particular tightly coupled form distributed computing  distributed computing may seen loosely coupled form parallel computing  nevertheless  possible roughly classify concurrent systems  parallel   distributed  using following criteria in parallel computing  processors may access shared memory exchange information processors in distributed computing  processor private memory  distributed memory   information exchanged passing messages processors the figure right illustrates difference distributed parallel systems  figure   schematic view typical distributed system  system represented network topology node computer line connecting nodes communication link  figure  b  shows distributed system detail  computer local memory  information exchanged passing messages one node another using available communication links  figure  c  shows parallel system processor direct access shared memory the situation complicated traditional uses terms parallel distributed algorithm quite match definitions parallel distributed systems  see detailed discussion   nevertheless  rule thumb  high-performance parallel computation shared-memory multiprocessor uses parallel algorithms coordination large-scale distributed system uses distributed algorithms    history   the use concurrent processes communicate message-passing roots operating system architectures studied     s  the first widespread distributed systems local-area networks ethernet  invented     s arpanet  one predecessors internet  introduced late      arpanet e-mail invented early     s  e-mail became successful application arpanet  probably earliest example large-scale distributed application  in addition arpanet  successor  global internet   early worldwide computer networks included usenet fidonet      used support distributed discussion systems the study distributed computing became branch computer science late     early     s  the first conference field  symposium principles distributed computing  podc   dates back       counterpart international symposium distributed computing  disc  first held ottawa      international workshop distributed algorithms graphs    architectures   various hardware software architectures used distributed computing  at lower level  necessary interconnect multiple cpus sort network  regardless whether network printed onto circuit board made loosely coupled devices cables  at higher level  necessary interconnect processes running cpus sort communication system distributed programming typically falls one several basic architectures  client server  three-tier  n-tier  peer-to-peer  categories  loose coupling  tight coupling client server  architectures smart clients contact server data format display users  input client committed back server represents permanent change three-tier  architectures move client intelligence middle tier stateless clients used  this simplifies application deployment  most web applications three-tier n-tier  architectures refer typically web applications forward requests enterprise services  this type application one responsible success application servers peer-to-peer  architectures special machines provide service manage network resources        instead responsibilities uniformly divided among machines  known peers  peers serve clients servers  examples architecture include bittorrent bitcoin network another basic aspect distributed computing architecture method communicating coordinating work among concurrent processes  through various message passing protocols  processes may communicate directly one another  typically master slave relationship  alternatively   database-centric  architecture enable distributed computing done without form direct inter-process communication  utilizing shared database  database-centric architecture particular provides relational processing analytics schematic architecture allowing live environment relay  this enables distributed computing functions within beyond parameters networked database    applications   reasons using distributed systems distributed computing may include the nature application may require use communication network connects several computers  example  data produced one physical location required another location there many cases use single computer would possible principle  use distributed system beneficial practical reasons  for example  may cost-efficient obtain desired level performance using cluster several low-end computers  comparison single high-end computer  a distributed system provide reliability non-distributed system  single point failure  moreover  distributed system may easier expand manage monolithic uniprocessor system    examples   examples distributed systems applications distributed computing include following telecommunication networks telephone networks cellular networks computer networks internet wireless sensor networks routing algorithms network applications world wide web peer-to-peer networks massively multiplayer online games virtual reality communities distributed databases distributed database management systems network file systems distributed cache burst buffers distributed information processing systems banking systems airline reservation systems real-time process control aircraft control systems industrial control systems parallel computation scientific computing  including cluster computing  grid computing  cloud computing  various volunteer computing projects  see list distributed computing projects  distributed rendering computer graphics    theoretical foundations       models    many tasks would like automate using computer question answer type  would like ask question computer produce answer  in theoretical computer science  tasks called computational problems  formally  computational problem consists instances together solution instance  instances questions ask  solutions desired answers questions theoretical computer science seeks understand computational problems solved using computer  computability theory  efficiently  computational complexity theory   traditionally  said problem solved using computer design algorithm produces correct solution given instance  such algorithm implemented computer program runs general-purpose computer  program reads problem instance input  performs computation  produces solution output  formalisms random-access machines universal turing machines used abstract models sequential general-purpose computer executing algorithm the field concurrent distributed computing studies similar questions case either multiple computers  computer executes network interacting processes  computational problems solved network efficiently  however  obvious meant  solving problem  case concurrent distributed system  example  task algorithm designer  concurrent distributed equivalent sequential general-purpose computer the discussion focuses case multiple computers  although many issues concurrent processes running single computer three viewpoints commonly used parallel algorithms shared-memory modelall processors access shared memory  the algorithm designer chooses program executed processor one theoretical model parallel random-access machines  pram  used  however  classical pram model assumes synchronous access shared memory shared-memory programs extended distributed systems underlying operating system encapsulates communication nodes virtually unifies memory across individual systems a model closer behavior real-world multiprocessor machines takes account use machine instructions  compare-and-swap  cas   asynchronous shared memory  there wide body work model  summary found literature parallel algorithms message-passing modelthe algorithm designer chooses structure network  well program executed computer models boolean circuits sorting networks used  a boolean circuit seen computer network  gate computer runs extremely simple computer program  similarly  sorting network seen computer network  comparator computer distributed algorithms message-passing modelthe algorithm designer chooses computer program  all computers run program  the system must work correctly regardless structure network a commonly used model graph one finite-state machine per node in case distributed algorithms  computational problems typically related graphs  often graph describes structure computer network problem instance  this illustrated following example     an example    consider computational problem finding coloring given graph g  different fields might take following approaches centralized algorithmsthe graph g encoded string  string given input computer  the computer program finds coloring graph  encodes coloring string  outputs result parallel algorithmsagain  graph g encoded string  however  multiple computers access string parallel  each computer might focus one part graph produce coloring part the main focus high-performance computation exploits processing power multiple computers parallel distributed algorithmsthe graph g structure computer network  there one computer node g one communication link edge g  initially  computer knows immediate neighbors graph g  computers must exchange messages discover structure g  each computer must produce color output the main focus coordinating operation arbitrary distributed system while field parallel algorithms different focus field distributed algorithms  much interaction two fields  for example  cole vishkin algorithm graph coloring originally presented parallel algorithm  technique also used directly distributed algorithm moreover  parallel algorithm implemented either parallel system  using shared memory  distributed system  using message passing   the traditional boundary parallel distributed algorithms  choose suitable network vs  run given network  lie place boundary parallel distributed systems  shared memory vs  message passing      complexity measures    in parallel algorithms  yet another resource addition time space number computers  indeed  often trade-off running time number computers  problem solved faster computers running parallel  see speedup   if decision problem solved polylogarithmic time using polynomial number processors  problem said class nc  the class nc defined equally well using pram formalism boolean circuits pram machines simulate boolean circuits efficiently vice versa in analysis distributed algorithms  attention usually paid communication operations computational steps  perhaps simplest model distributed computing synchronous system nodes operate lockstep fashion  this model commonly known local model  during communication round  nodes parallel     receive latest messages neighbours      perform arbitrary local computation      send new messages neighbors  in systems  central complexity measure number synchronous communication rounds required complete task this complexity measure closely related diameter network  let d diameter network  on one hand  computable problem solved trivially synchronous distributed system approximately  d communication rounds  simply gather information one location  d rounds   solve problem  inform node solution  d rounds  on hand  running time algorithm much smaller d communication rounds  nodes network must produce output without possibility obtain information distant parts network  in words  nodes must make globally consistent decisions based information available local d-neighbourhood  many distributed algorithms known running time much smaller d rounds  understanding problems solved algorithms one central research questions field  typically algorithm solves problem polylogarithmic time network size considered efficient model another commonly used measure total number bits transmitted network  cf  communication complexity   the features concept typically captured congest b  model  similarly defined local model single messages contain b bits     other problems    traditional computational problems take perspective user asks question  computer  distributed system  processes question  produces answer stops  however  also problems system required stop  including dining philosophers problem similar mutual exclusion problems  in problems  distributed system supposed continuously coordinate use shared resources conflicts deadlocks occur there also fundamental challenges unique distributed computing  example related fault-tolerance  examples related problems include consensus problems  byzantine fault tolerance  self-stabilisation much research also focused understanding asynchronous nature distributed systems synchronizers used run synchronous algorithms asynchronous systems logical clocks provide causal happened-before ordering events clock synchronization algorithms provide globally consistent physical time stamps     election    coordinator election  leader election  process designating single process organizer task distributed among several computers  nodes   before task begun  network nodes either unaware node serve  coordinator   leader  task  unable communicate current coordinator  after coordinator election algorithm run  however  node throughout network recognizes particular  unique node task coordinator the network nodes communicate among order decide get  coordinator  state  for  need method order break symmetry among them  for example  node unique comparable identities  nodes compare identities  decide node highest identity coordinator the definition problem often attributed lelann  formalized method create new token token ring network token lost coordinator election algorithms designed economical terms total bytes transmitted  time  the algorithm suggested gallager  humblet  spira  general undirected graphs strong impact design distributed algorithms general  dijkstra prize influential paper distributed computing many algorithms suggested different kind network graphs  undirected rings  unidirectional rings  complete graphs  grids  directed euler graphs  others  a general method decouples issue graph family design coordinator election algorithm suggested korach  kutten  moran in order perform coordination  distributed systems employ concept coordinators  the coordinator election problem choose process among group processes different processors distributed system act central coordinator  several central coordinator election algorithms exist     properties distributed systems    so far focus designing distributed system solves given problem  a complementary research problem studying properties given distributed system the halting problem analogous example field centralised computation  given computer program task decide whether halts runs forever  the halting problem undecidable general case  naturally understanding behaviour computer network least hard understanding behaviour one computer however  many interesting special cases decidable  in particular  possible reason behaviour network finite-state machines  one example telling whether given network interacting  asynchronous non-deterministic  finite-state machines reach deadlock  this problem pspace-complete  i e   decidable  likely efficient  centralised  parallel distributed  algorithm solves problem case large networks    see also      notes      references   booksandrews  gregory r          foundations multithreaded  parallel  distributed programming  addison wesley  isbn    - -   -     -  arora  sanjeev  barak  boaz         computational complexity   a modern approach  cambridge  isbn    - -   -     -  cormen  thomas h   leiserson  charles e   rivest  ronald l          introduction algorithms   st ed    mit press  isbn    - -   -     -  dolev  shlomi         self-stabilization  mit press  isbn    - -   -     -  elmasri  ramez  navathe  shamkant b          fundamentals database systems   rd ed    addison wesley  isbn    - -   -     -  ghosh  sukumar         distributed systems   an algorithmic approach  chapman   hall crc  isbn    - -     -   -  lynch  nancy a          distributed algorithms  morgan kaufmann  isbn    - -     -   -  herlihy  maurice p   shavit  nir n          the art multiprocessor programming  morgan kaufmann  isbn    - -  -      -  papadimitriou  christos h          computational complexity  addison wesley  isbn    - -   -     -  peleg  david         distributed computing  a locality-sensitive approach  siam  isbn    - -     -   -   archived original     -  -    retrieved     -  -   articlescole  richard  vishkin  uzi          deterministic coin tossing applications optimal parallel list ranking   information control                 doi         s    -             -  keidar  idit          distributed computing column      the year review   acm sigact news                 citeseerx                  doi                         linial  nathan          locality distributed graph algorithms   siam journal computing                   citeseerx                  doi                 naor  moni  stockmeyer  larry          what computed locally    pdf   siam journal computing                     citeseerx                doi         s                 web sitesgodfrey  bill          a primer distributed computing  peter  ian          ian peter history internet   retrieved     -  -      further reading   booksattiya  hagit jennifer welch         distributed computing  fundamentals  simulations  advanced topics  wiley-interscience isbn  -   -     -  christian cachin  rachid guerraoui  lu rodrigues         introduction reliable secure distributed programming     ed    springer  bibcode     itra book     c  isbn    - -   -     - coulouris  george   et al          distributed systems  concepts design   th edition   addison-wesley isbn  -   -     -  faber  jim         java distributed computing  o reilly  java distributed computing jim faber      garg  vijay k          elements distributed computing  wiley-ieee press isbn  -   -     -  tel  gerard         introduction distributed algorithms  cambridge university presschandy  mani   et al   parallel program designdusseau  remzi h   dusseau  andrea         operating systems  three easy pieces  chapter    distributed systems  pdf   archived original  pdf     august       retrieved   october      articleskeidar  idit  rajsbaum  sergio  eds                distributed computing column   acm sigact news birrell  a  d   levin  r   schroeder  m  d   needham  r  m   april         grapevine  an exercise distributed computing   pdf   communications acm                   doi                        s cid          conference papersrodriguez  carlos  villagra  marcos  baran  benjamin          asynchronous team algorithms boolean satisfiability         nd bio-inspired models network  information computing systems  pp         doi         bimnics               s cid             external links   distributed computing curliedistributed computing journals curlie
a relational database digital database based relational model data  proposed e  f  codd       a system used maintain relational databases relational database management system  rdbms   many relational database systems option using sql  structured query language  querying maintaining database    history   the term  relational database  invented e  f  codd ibm       codd introduced term research paper  a relational model data large shared data banks  in paper later papers  defined meant  relational   one well-known definition constitutes relational database system composed codd    rules  however  commercial implementations relational model conform codd rules  term gradually come describe broader class database systems  minimum present data user relations  presentation tabular form  i e  collection tables table consisting set rows columns  provide relational operators manipulate data tabular form in       ibm began developing system r  research project develop prototype rdbms the first system sold rdbms multics relational data store  june        oracle released      relational software  oracle corporation  ingres ibm bs   followed  other examples rdbms include db   sap sybase ase  informix  in       first rdbms macintosh began developed  code-named silver surfer  released       th dimension known today  d the first systems relatively faithful implementations relational model university michigan   micro dbms       massachusetts institute technology       ibm uk scientific centre peterlee   is            successor  prtv          the common definition rdbms product presents view data collection rows columns  even based strictly upon relational theory  by definition  rdbms products typically implement codd    rules a second school thought argues database implement codd rules  current understanding relational model  expressed christopher j  date  hugh darwen others   relational  this view  shared many theorists strict adherents codd principles  would disqualify dbmss relational  for clarification  often refer rdbmss truly-relational database management systems  trdbms   naming others pseudo-relational database management systems  prdbms   as       commercial relational dbmss employ sql query language alternative query languages proposed implemented  notably pre-     implementation ingres quel    relational model   this model organizes data one tables   relations   columns rows  unique key identifying row  rows also called records tuples  columns also called attributes  generally  table relation represents one  entity type   customer product   the rows represent instances type entity   lee   chair   columns representing values attributed instance  address price  for example  row class table corresponds class  class corresponds multiple students  relationship class table student table  one many    keys   each row table unique key  rows table linked rows tables adding column unique key linked row  columns known foreign keys   codd showed data relationships arbitrary complexity represented simple set concepts part processing involves consistently able select modify one one row table  therefore  physical implementations unique primary key  pk  row table  when new row written table  new unique value primary key generated  key system uses primarily accessing table  system performance optimized pks  other  natural keys may also identified defined alternate keys  ak   often several columns needed form ak  one reason single integer column usually made pk   both pks aks ability uniquely identify row within table  additional technology may applied ensure unique id across world  globally unique identifier  broader system requirements the primary keys within database used define relationships among tables  when pk migrates another table  becomes foreign key table  when cell contain one value pk migrates regular entity table  design pattern represent either one-to-one one-to-many relationship  most relational database designs resolve many-to-many relationships creating additional table contains pks entity tables    relationship becomes entity  resolution table named appropriately two fks combined form pk  the migration pks tables second major reason system-assigned integers used normally pks  usually neither efficiency clarity migrating bunch types columns     relationships    relationships logical connection different tables  established basis interaction among tables    transactions   in order database management system  dbms  operate efficiently accurately  must use acid transactions    stored procedures   most programming within rdbms accomplished using stored procedures  sps   often procedures used greatly reduce amount information transferred within outside system  for increased security  system design may grant access stored procedures directly tables  fundamental stored procedures contain logic needed insert new update existing data  more complex procedures may written implement additional rules logic related processing selecting data    terminology   the relational database first defined june      edgar codd  ibm san jose research laboratory  codd view qualifies rdbms summarized codd    rules  a relational database become predominant type database  other models besides relational model include hierarchical database model network model the table summarizes important relational database terms corresponding sql term    relations tables   a relation defined set tuples attributes  a tuple usually represents object information object  objects typically physical objects concepts  a relation usually described table  organized rows columns  all data referenced attribute domain conform constraints the relational model specifies tuples relation specific order tuples  turn  impose order attributes  applications access data specifying queries  use operations select identify tuples  project identify attributes  join combine relations  relations modified using insert  delete  update operators  new tuples supply explicit values derived query  similarly  queries identify tuples updating deleting tuples definition unique  if tuple contains candidate primary key obviously unique  however  primary key need defined row record tuple  the definition tuple requires unique  require primary key defined  because tuple unique  attributes definition constitute superkey    base derived relations   in relational database  data stored accessed via relations  relations store data called  base relations   implementations called  tables   other relations store data  computed applying relational operations relations  these relations sometimes called  derived relations   in implementations called  views   queries   derived relations convenient act single relation  even though may grab information several relations  also  derived relations used abstraction layer     domain    a domain describes set possible values given attribute  considered constraint value attribute  mathematically  attaching domain attribute means value attribute must element specified set  the character string  abc   instance  integer domain  integer value     is  another example domain describes possible values field  coinface    heads   tails    so  field  coinface  accept input values like        h t     constraints   constraints make possible restrict domain attribute  for instance  constraint restrict given integer attribute values       constraints provide one method implementing business rules database support subsequent data use within application layer  sql implements constraint functionality form check constraints constraints restrict data stored relations  these usually defined using expressions result boolean value  indicating whether data satisfies constraint  constraints apply single attributes  tuple  restricting combinations attributes  entire relation since every attribute associated domain  constraints  domain constraints   the two principal rules relational model known entity integrity referential integrity     primary key    each relation table primary key  consequence relation set  a primary key uniquely specifies tuple within table  while natural attributes  attributes used describe data entered  sometimes good primary keys  surrogate keys often used instead  a surrogate key artificial attribute assigned object uniquely identifies  instance  table information students school might assigned student id order differentiate   the surrogate key intrinsic  inherent  meaning  rather useful ability uniquely identify tuple another common occurrence  especially regard n m cardinality composite key  a composite key key made two attributes within table  together  uniquely identify record     foreign key    a foreign key field relational table matches primary key column another table  it relates two keys  foreign keys need unique values referencing relation  a foreign key used cross-reference tables  effectively uses values attributes referenced relation restrict domain one attributes referencing relation  the concept described formally   for tuples referencing relation projected referencing attributes  must exist tuple referenced relation projected attributes values referencing attributes match corresponding values referenced attributes      stored procedures    a stored procedure executable code associated  generally stored  database  stored procedures usually collect customize common operations  like inserting tuple relation  gathering statistical information usage patterns  encapsulating complex business logic calculations  frequently used application programming interface  api  security simplicity  implementations stored procedures sql rdbms often allow developers take advantage procedural extensions  often vendor-specific  standard declarative sql syntax stored procedures part relational database model  commercial implementations include them     index    an index one way providing quicker access data  indices created combination attributes relation  queries filter using attributes find matching tuples directly using index  similar hash table lookup   without check tuple turn  this analogous using index book go directly page information looking found  read entire book find looking for  relational databases typically supply multiple indexing techniques  optimal combination data distribution  relation size  typical access pattern  indices usually implemented via b  trees  r-trees  bitmaps indices usually considered part database  considered implementation detail  though indices usually maintained group maintains parts database  the use efficient indexes primary foreign keys dramatically improve query performance  this b-tree indexes result query times proportional log n  n number rows table hash indexes result constant time queries  size dependency long relevant part index fits memory     relational operations   queries made relational database  derived relvars database expressed relational calculus relational algebra  in original relational algebra  codd introduced eight relational operators two groups four operators each  the first four operators based traditional mathematical set operations the union operator     combines tuples two relations removes duplicate tuples result  the relational union operator equivalent sql union operator the intersection operator     produces set tuples two relations share common  intersection implemented sql form intersect operator the set difference operator  -  acts two relations produces set tuples first relation exist second relation  difference implemented sql form except minus operator the cartesian product  x  two relations join restricted criteria  resulting every tuple first relation matched every tuple second relation  the cartesian product implemented sql cross join operator the remaining operators proposed codd involve special operations specific relational databases the selection  restriction  operation     retrieves tuples relation  limiting results meet specific criterion  i e  subset terms set theory  the sql equivalent selection select query statement where clause the projection operation     extracts specified attributes tuple set tuples the join operation defined relational databases often referred natural join      in type join  two relations connected common attributes  mysql approximation natural join inner join operator  in sql  inner join prevents cartesian product occurring two tables query  for table added sql query  one additional inner join added prevent cartesian product  thus  n tables sql query  must n   inner joins prevent cartesian product the relational division     operation slightly complex operation essentially involves using tuples one relation  dividend  partition second relation  divisor   the relational division operator effectively opposite cartesian product operator  hence name  other operators introduced proposed since codd introduction original eight including relational comparison operators extensions offer support nesting hierarchical data  among others    normalization   normalization first proposed codd integral part relational model  it encompasses set procedures designed eliminate non-simple domains  non-atomic values  redundancy  duplication  data  turn prevents data manipulation anomalies loss data integrity  the common forms normalization applied databases called normal forms    rdbms   connolly begg define database management system  dbms   software system enables users define  create  maintain control access database   rdbms extension acronym sometimes used underlying database relational an alternative definition relational database management system database management system  dbms  based relational model  most databases widespread use today based model rdbmss common option storage information databases used financial records  manufacturing logistical information  personnel data  applications since     s  relational databases often replaced legacy hierarchical databases network databases  rdbms easier implement administer  nonetheless  relational stored data received continued  unsuccessful challenges object database management systems           introduced attempt address so-called object relational impedance mismatch relational databases object-oriented application programs   well xml database management systems     s  however  due expanse technologies  horizontal scaling computer clusters  nosql databases recently become popular alternative rdbms databases    distributed relational databases   distributed relational database architecture  drda  designed workgroup within ibm period            drda enables network connected relational databases cooperate fulfill sql requests the messages  protocols  structural components drda defined distributed data management architecture    market share   according db-engines  march       widely used systems oracle databasemysqlmicrosoft sql serverpostgresql  free software ibm db sqlite  free software microsoft accessmariadb  free software hive  free software  specialized data warehouses  teradatamicrosoft azure sql databaseaccording research company gartner        five leading proprietary software relational database vendors revenue oracle          ibm          microsoft          sap including sybase         teradata           see also   sqlobject database  oodbms online analytical processing  olap  rolap  relational online analytical processing data warehousestar schemasnowflake schemalist relational database management systemscomparison relational database management systems   references      sources   date  c  j          a guide db   student ed    addison-wesley  isbn             oclc            ol        m    external links   
set theory branch mathematical logic studies sets  informally described collections objects  although objects kind collected set  set theory  branch mathematics  mostly concerned relevant mathematics whole the modern study set theory initiated german mathematicians richard dedekind georg cantor     s  in particular  georg cantor commonly considered founder set theory  the non-formalized systems investigated early stage go name naive set theory  after discovery paradoxes within naive set theory  russell paradox  cantor paradox burali-forti paradox  various axiomatic systems proposed early twentieth century  zermelo fraenkel set theory  without axiom choice  still best-known studied set theory commonly employed foundational system whole mathematics  particularly form zermelo fraenkel set theory axiom choice  beside foundational role  set theory also provides framework develop mathematical theory infinity  various applications computer science  theory relational algebra   philosophy formal semantics  its foundational appeal  together paradoxes  implications concept infinity multiple applications  made set theory area major interest logicians philosophers mathematics  contemporary research set theory covers vast array topics  ranging structure real number line study consistency large cardinals    history   mathematical topics typically emerge evolve interactions among many researchers  set theory  however  founded single paper      georg cantor   on property collection all real algebraic numbers  since  th century bc  beginning greek mathematician zeno elea west early indian mathematicians east  mathematicians struggled concept infinity  especially notable work bernard bolzano first half   th century  modern understanding infinity began            motivated cantor work real analysis  an      meeting cantor richard dedekind influenced cantor thinking  culminated cantor      paper cantor work initially polarized mathematicians day  while karl weierstrass dedekind supported cantor  leopold kronecker  seen founder mathematical constructivism  not  cantorian set theory eventually became widespread  due utility cantorian concepts  one-to-one correspondence among sets  proof real numbers integers   infinity infinities    cantor paradise   resulting power set operation  this utility set theory led article  mengenlehre   contributed      arthur schoenflies klein encyclopedia the next wave excitement set theory came around       discovered interpretations cantorian set theory gave rise several contradictions  called antinomies paradoxes  bertrand russell ernst zermelo independently found simplest best known paradox  called russell paradox  consider  set sets members   leads contradiction since must member member itself  in       cantor posed question  what cardinal number set sets    obtained related paradox  russell used paradox theme      review continental mathematics the principles mathematics  rather term set  russell used term class  subsequently used technically in       term set appeared book theory sets points husband wife william henry young grace chisholm young  published cambridge university press the momentum set theory debate paradoxes lead abandonment  the work zermelo      work abraham fraenkel thoralf skolem      resulted set axioms zfc  became commonly used set axioms set theory  the work analysts  henri lebesgue  demonstrated great mathematical utility set theory  since become woven fabric modern mathematics  set theory commonly used foundational system  although areas algebraic geometry algebraic topology category theory thought preferred foundation    basic concepts notation   set theory begins fundamental binary relation object set a  if member  element  a  notation   a used  a set described listing elements separated commas  characterizing property elements  within braces      since sets objects  membership relation relate sets well a derived binary relation two sets subset relation  also called set inclusion  if members set a also members set b  a subset b  denoted a   b  for example         subset                       not  as implied definition  set subset itself  for cases possibility unsuitable would make sense rejected  term proper subset defined  a called proper subset b a subset b  a equal b  also          members  elements  set            subsets  turn  subsets       members set           just arithmetic features binary operations numbers  set theory features binary operations sets  the following partial list union sets a b  denoted a   b  set objects member a  b  both  for example  union                     set              intersection sets a b  denoted a   b  set objects members a b  for example  intersection                     set        set difference u a  denoted u   a  set members u members a  the set difference                             conversely  set difference                            when a subset u  set difference u   a also called complement a u  in case  choice u clear context  notation ac sometimes used instead u   a  particularly u universal set study venn diagrams symmetric difference sets a b  denoted a   b a   b  set objects member exactly one a b  elements one sets    for instance  sets                      symmetric difference set         it set difference union intersection   a   b     a   b   a   b     b   a  cartesian product a b  denoted a   b  set whose members possible ordered pairs   b   a member a b member b  for example  cartesian product         red  white       red       white       red       white   power set set a  denoted                                           p                                   a                         displaystyle   mathcal  p   a      set whose members possible subsets a  for example  power set                                 some basic sets central importance set natural numbers  set real numbers empty set unique set containing elements  the empty set also occasionally called null set  though name ambiguous lead several interpretations    some ontology   a set pure members sets  members members sets  on  for example  set      containing empty set nonempty pure set  in modern set theory  common restrict attention von neumann universe pure sets  many systems axiomatic set theory designed axiomatize pure sets only  there many technical advantages restriction  little generality lost  essentially mathematical concepts modeled pure sets  sets von neumann universe organized cumulative hierarchy  based deeply members  members members  etc  nested  each set hierarchy assigned  transfinite recursion  ordinal number                                      displaystyle  alpha      known rank  the rank pure set                     x                displaystyle x    defined least ordinal strictly greater rank elements  for example  empty set assigned rank    set        containing empty set assigned rank    for ordinal                                      displaystyle  alpha      set                               v                                                         displaystyle v   alpha      defined consist pure sets rank less                                      displaystyle  alpha      the entire von neumann universe denoted                     v                displaystyle v       formalized set theory   elementary set theory studied informally intuitively  taught primary schools using venn diagrams  the intuitive approach tacitly assumes set may formed class objects satisfying particular defining condition  this assumption gives rise paradoxes  simplest best known russell paradox burali-forti paradox  axiomatic set theory originally devised rid set theory paradoxes the widely studied systems axiomatic set theory imply sets form cumulative hierarchy  such systems come two flavors  whose ontology consists sets alone  this includes common axiomatic set theory  zermelo fraenkel set theory axiom choice  zfc   fragments zfc include zermelo set theory  replaces axiom schema replacement separation general set theory  small fragment zermelo set theory sufficient peano axioms finite sets kripke platek set theory  omits axioms infinity  powerset  choice  weakens axiom schemata separation replacement sets proper classes  these include von neumann bernays g del set theory  strength zfc theorems sets alone  morse kelley set theory tarski grothendieck set theory  stronger zfc the systems modified allow urelements  objects members sets sets members the new foundations systems nfu  allowing urelements  nf  lacking  based cumulative hierarchy  nf nfu include  set everything   relative every set complement  in systems urelements matter  nf  nfu  produces sets axiom choice hold systems constructive set theory  cst  czf  izf  embed set axioms intuitionistic instead classical logic  yet systems accept classical logic feature nonstandard membership relation  these include rough set theory fuzzy set theory  value atomic formula embodying membership relation simply true false  the boolean-valued models zfc related subject an enrichment zfc called internal set theory proposed edward nelson         applications   many mathematical concepts defined precisely using set theoretic concepts  for example  mathematical structures diverse graphs  manifolds  rings  vector spaces  relational algebras defined sets satisfying various  axiomatic  properties  equivalence order relations ubiquitous mathematics  theory mathematical relations described set theory set theory also promising foundational system much mathematics  since publication first volume principia mathematica  claimed  even  mathematical theorems derived using aptly designed set axioms set theory  augmented many definitions  using first second-order logic  for example  properties natural real numbers derived within set theory  number system identified set equivalence classes suitable equivalence relation whose field infinite set set theory foundation mathematical analysis  topology  abstract algebra  discrete mathematics likewise uncontroversial  mathematicians accept  principle  theorems areas derived relevant definitions axioms set theory  however  remains full derivations complex mathematical theorems set theory formally verified  since formal derivations often much longer natural language proofs mathematicians commonly present  one verification project  metamath  includes human-written  computer-verified derivations        theorems starting zfc set theory  first-order logic propositional logic    areas study   set theory major area research mathematics  many interrelated subfields     combinatorial set theory    combinatorial set theory concerns extensions finite combinatorics infinite sets  this includes study cardinal arithmetic study extensions ramsey theorem erd rado theorem  double extension set theory  dest  axiomatic set theory proposed andrzej kisielewicz consisting two separate membership relations universe sets     descriptive set theory    descriptive set theory study subsets real line  generally  subsets polish spaces  it begins study pointclasses borel hierarchy extends study complex hierarchies projective hierarchy wadge hierarchy  many properties borel sets established zfc  proving properties hold complicated sets requires additional axioms related determinacy large cardinals the field effective descriptive set theory set theory recursion theory  it includes study lightface pointclasses  closely related hyperarithmetical theory  in many cases  results classical descriptive set theory effective versions  cases  new results obtained proving effective version first extending   relativizing   make broadly applicable a recent area research concerns borel equivalence relations complicated definable equivalence relations  this important applications study invariants many fields mathematics     fuzzy set theory    in set theory cantor defined zermelo fraenkel axiomatized  object either member set not  in fuzzy set theory condition relaxed lotfi a  zadeh object degree membership set  number      for example  degree membership person set  tall people  flexible simple yes answer real number          inner model theory    an inner model zermelo fraenkel set theory  zf  transitive class includes ordinals satisfies axioms zf  the canonical example constructible universe l developed g del one reason study inner models interest used prove consistency results  for example  shown regardless whether model v zf satisfies continuum hypothesis axiom choice  inner model l constructed inside original model satisfy generalized continuum hypothesis axiom choice  thus assumption zf consistent  least one model  implies zf together two principles consistent the study inner models common study determinacy large cardinals  especially considering axioms axiom determinacy contradict axiom choice  even fixed model set theory satisfies axiom choice  possible inner model fail satisfy axiom choice  for example  existence sufficiently large cardinals implies inner model satisfying axiom determinacy  thus satisfying axiom choice      large cardinals    a large cardinal cardinal number extra property  many properties studied  including inaccessible cardinals  measurable cardinals  many more  these properties typically imply cardinal number must large  existence cardinal specified property unprovable zermelo fraenkel set theory     determinacy    determinacy refers fact  appropriate assumptions  certain two-player games perfect information determined start sense one player must winning strategy  the existence strategies important consequences descriptive set theory  assumption broader class games determined often implies broader class sets topological property  the axiom determinacy  ad  important object study  although incompatible axiom choice  ad implies subsets real line well behaved  particular  measurable perfect set property   ad used prove wadge degrees elegant structure     forcing    paul cohen invented method forcing searching model zfc continuum hypothesis fails  model zf axiom choice fails  forcing adjoins given model set theory additional sets order create larger model properties determined  i e   forced   construction original model  for example  cohen construction adjoins additional subsets natural numbers without changing cardinal numbers original model  forcing also one two methods proving relative consistency finitistic methods  method boolean-valued models     cardinal invariants    a cardinal invariant property real line measured cardinal number  for example  well-studied invariant smallest cardinality collection meagre sets reals whose union entire real line  these invariants sense two isomorphic models set theory must give cardinal invariant  many cardinal invariants studied  relationships often complex related axioms set theory     set-theoretic topology    set-theoretic topology studies questions general topology set-theoretic nature require advanced methods set theory solution  many theorems independent zfc  requiring stronger axioms proof  a famous problem normal moore space question  question general topology subject intense research  the answer normal moore space question eventually proved independent zfc    objections set theory   from set theory inception  mathematicians objected foundation mathematics  the common objection set theory  one kronecker voiced set theory earliest years  starts constructivist view mathematics loosely related computation  if view granted  treatment infinite sets  naive axiomatic set theory  introduces mathematics methods objects computable even principle  the feasibility constructivism substitute foundation mathematics greatly increased errett bishop influential book foundations constructive analysis a different objection put forth henri poincar  defining sets using axiom schemas specification replacement  well axiom power set  introduces impredicativity  type circularity  definitions mathematical objects  the scope predicatively founded mathematics  less commonly accepted zermelo fraenkel theory  much greater constructive mathematics  point solomon feferman said  scientifically applicable analysis developed  using predicative methods   ludwig wittgenstein condemned set theory philosophically connotations mathematical platonism   he wrote  set theory wrong   since builds  nonsense  fictitious symbolism   pernicious idioms   nonsensical talk  numbers    wittgenstein identified mathematics algorithmic human deduction  need secure foundation mathematics seemed   nonsensical   moreover  since human effort necessarily finite  wittgenstein philosophy required ontological commitment radical constructivism finitism   meta-mathematical statements    wittgenstein  included statement quantifying infinite domains  thus almost modern set theory   mathematics   few modern philosophers adopted wittgenstein views spectacular blunder remarks foundations mathematics  wittgenstein attempted refute g del incompleteness theorems read abstract   as reviewers kreisel  bernays  dummett  goodstein pointed  many critiques apply paper full   only recently philosophers crispin wright begun rehabilitate wittgenstein arguments category theorists proposed topos theory alternative traditional axiomatic set theory  topos theory interpret various alternatives theory  constructivism  finite set theory  computable set theory  topoi also give natural setting forcing discussions independence choice zf  well providing framework pointless topology stone spaces an active area research univalent foundations related homotopy type theory  within homotopy type theory  set may regarded homotopy  -type  universal properties sets arising inductive recursive properties higher inductive types  principles axiom choice law excluded middle formulated manner corresponding classical formulation set theory perhaps spectrum distinct ways unique type theory  some principles may proven consequence principles  the variety formulations axiomatic principles allows detailed analysis formulations required order derive various mathematical results    set theory mathematical education   as set theory gained popularity foundation modern mathematics  support idea introducing basics naive set theory early mathematics education in us      new math experiment aimed teach basic set theory  among abstract concepts  primary school students  met much criticism  the math syllabus european schools followed trend  currently includes subject different levels grades  venn diagrams widely employed explain basic set-theoretic relationships primary school students  even though john venn originally devised part procedure assess validity inferences term logic  set theory used introduce students logical operators  not  and  or   semantic rule description  technically intensional definition  sets  e g   months starting letter a    may useful learning computer programming  since boolean logic used various programming languages  likewise  sets collection-like objects  multisets lists  common datatypes computer science programming in addition  sets commonly referred mathematical teaching talking different types numbers  n  z  r        defining mathematical function relation one set  domain  another set  range     see also   glossary set theoryclass  set theory list set theory topicsrelational model   borrows set theory   notes      references      further reading   devlin  keith         the joy sets   nd ed    springer verlag  isbn  -   -     - ferreir  jose         labyrinth thought  a history set theory role modern mathematics  basel  birkh user  isbn    - -    -    - johnson  philip         a history set theory  prindle  weber   schmidt  isbn  -     -   - kunen  kenneth         set theory  an introduction independence proofs  north-holland  isbn  -   -     - potter  michael         set theory its philosophy  a critical introduction  oxford university presstiles  mary         the philosophy set theory  an historical introduction cantor paradise  dover publications  isbn    - -   -     - smullyan  raymond m   fitting  melvin         set theory and the continuum problem  dover publications  isbn    - -   -     - monk  j  donald         introduction set theory  mcgraw-hill book company  isbn    -             external links   daniel cunningham  set theory article internet encyclopedia philosophy jose ferreiros  the early development set theory article  stanford encyclopedia philosophy  foreman  matthew  akihiro kanamori  eds  handbook set theory    vols         each chapter surveys aspect contemporary research set theory  does cover established elementary set theory  see devlin         axiomatic set theory   encyclopedia mathematics  ems press              set theory   encyclopedia mathematics  ems press             schoenflies  arthur         mengenlehre klein encyclopedia online books  library resources library libraries set theoryrudin  walter b   april            set theory  an offspring analysis   marden lecture mathematics  university wisconsin-milwaukee  archived original     -  -     via youtube 
structured storage computer storage structured data  often form distributed database  computer software formally known structured storage systems include apache cassandra  google bigtable apache hbase    comparison   the following comparison notable structured storage systems    see also   nosql   references   
a nosql  originally referring  non-sql   non-relational   database provides mechanism storage retrieval data modeled means tabular relations used relational databases  such databases existed since late      name  nosql  coined early   st century  triggered needs web     companies  nosql databases increasingly used big data real-time web applications  nosql systems also sometimes called  not sql  emphasize may support sql-like query languages sit alongside sql databases polyglot-persistent architectures motivations approach include simplicity design  simpler  horizontal  scaling clusters machines  problem relational databases   finer control availability limiting object-relational impedance mismatch  the data structures used nosql databases  e g  key value pair  wide column  graph  document  different used default relational databases  making operations faster nosql  the particular suitability given nosql database depends problem must solve   sometimes data structures used nosql databases also viewed  flexible  relational database tables many nosql stores compromise consistency  sense cap theorem  favor availability  partition tolerance  speed  barriers greater adoption nosql stores include use low-level query languages  instead sql  instance   lack ability perform ad hoc joins across tables  lack standardized interfaces  huge previous investments existing relational databases  most nosql stores lack true acid transactions  although databases made central designs instead  nosql databases offer concept  eventual consistency   database changes propagated nodes  eventually   typically within milliseconds   queries data might return updated data immediately might result reading data accurate  problem known stale reads  additionally  nosql systems may exhibit lost writes forms data loss  some nosql systems provide concepts write-ahead logging avoid data loss  for distributed transaction processing across multiple databases  data consistency even bigger challenge difficult nosql relational databases  relational databases  allow referential integrity constraints span databases   few systems maintain acid transactions x open xa standards distributed transaction processing  interactive relational databases share conformational relay analysis techniques common feature  limitations within interface environment overcome using semantic virtualization protocols  nosql services accessible operating systems    history   the term nosql used carlo strozzi      name lightweight strozzi nosql open-source relational database expose standard structured query language  sql  interface  still relational  his nosql rdbms distinct around-     general concept nosql databases   strozzi suggests  current nosql movement  departs relational model altogether  therefore called appropriately  norel    referring  relational  johan oskarsson  developer last fm  reintroduced term nosql early      organized event discuss  open-source distributed  non-relational databases   the name attempted label emergence increasing number non-relational  distributed data stores  including open source clones google bigtable mapreduce amazon dynamodb    types examples   there various ways classify nosql databases  different categories subcategories  overlap  what follows basic classification data model  examples wide column  azure cosmos db  accumulo  cassandra  scylladb  hbase document  azure cosmos db  apache couchdb  arangodb  basex  clusterpoint  couchbase  exist-db  ibm domino  marklogic  mongodb  orientdb  qizx  rethinkdbkey value  azure cosmos db  aerospike  apache ignite  arangodb  berkeley db  couchbase  dynamo  foundationdb  infinitydb  memcachedb  mumps  oracle nosql database  orientdb  redis  riak  scidb  sdbm flat file dbm  zookeepergraph  azure cosmos db  allegrograph  arangodb  infinitegraph  apache giraph  marklogic  neo j  agensgraph  orientdb  virtuosoa detailed classification following  based one stephen yen correlation databases model-independent  instead row-based column-based storage  use value-based storage     key value store    key value  kv  stores use associative array  also called map dictionary  fundamental data model  in model  data represented collection key value pairs  possible key appears collection the key value model one simplest non-trivial data models  richer data models often implemented extension it  the key value model extended discretely ordered model maintains keys lexicographic order  this extension computationally powerful  efficiently retrieve selective key ranges key value stores use consistency models ranging eventual consistency serializability  some databases support ordering keys  there various hardware implementations  users store data memory  ram   others solid-state drives  ssd  rotating disks  aka hard disk drive  hdd       document store    the central concept document store  document   while details definition differ among document-oriented databases  assume documents encapsulate encode data  information  standard formats encodings  encodings use include xml  yaml  json binary forms like bson  documents addressed database via unique key represents document  another defining characteristic document-oriented database api query language retrieve documents based contents different implementations offer different ways organizing grouping documents collectionstagsnon-visible metadatadirectory hierarchiescompared relational databases  collections could considered analogous tables documents analogous records  but different  every record table sequence fields  documents collection may fields completely different     graph    graph databases designed data whose relations well represented graph consisting elements connected finite number relations  examples data include social relations  public transport links  road maps  network topologies  etc graph databases query language    object database    db ogemstone sintersystems cach jadeobjectdatabase  objectdbobjectivity dbobjectstoreodabaperstrealmopenlink virtuosoversant object databasezodb    tabular    apache accumulobigtableapache hbasehypertablemnesiaopenlink virtuoso    tuple store    apache rivergigaspacestarantooltibco activespacesopenlink virtuoso    triple quad store  rdf  database    allegrographapache jena  it framework  database marklogicontotext-owlimoracle nosql databaseprofium sensevirtuoso universal server    hosted    azure cosmos dbamazon dynamodbamazon documentdbamazon simpledbclusterpoint databasecloudant data layer  couchdb freebasegoogle cloud datastoremicrosoft azure storage servicesopenlink virtuosomongodb atlas    multivalue databases    d  pick databaseextensible storage engine  ese nt infinitydbintersystems cach jbase pick databasemvbase rocket softwaremventerprise rocket softwarenorthgate information solutions reality  original pick mv databaseopenqmrevelation software openinsight  windows  advanced revelation  dos unidata rocket u universe rocket u     multimodel database    azure cosmos dbapache ignitearangodbcouchbasefoundationdbmarklogicorientdboracle database   performance   the performance nosql databases usually evaluated using metric throughput  measured operations second  performance evaluation must pay attention right benchmarks production configurations  parameters databases  anticipated data volume  concurrent user workloads ben scofield rated different categories nosql databases follows performance scalability comparisons commonly done using ycsb benchmark    handling relational data   since nosql databases lack ability joins queries  database schema generally needs designed differently  there three main techniques handling relational data nosql database   see table join acid support nosql databases support joins      multiple queries    instead retrieving data one query  common several queries get desired data  nosql queries often faster traditional sql queries cost additional queries may acceptable  if excessive number queries would necessary  one two approaches appropriate     caching  replication non-normalized data    instead storing foreign keys  common store actual foreign values along model data  for example  blog comment might include username addition user id  thus providing easy access username without requiring another lookup  when username changes however  need changed many places database  thus approach works better reads much common writes     nesting data    with document databases like mongodb common put data smaller number collections  for example  blogging application  one might choose store comments within blog post document single retrieval one gets comments  thus approach single document contains data need specific task    acid join support   a database marked supporting acid properties  atomicity  consistency  isolation  durability  join operations documentation database makes claim  however  necessarily mean capability fully supported manner similar sql databases    see also   cap theoremcomparison object database management systemscomparison structured storage softwarecorrelation databasec  database scalabilitydistributed cachefaceted searchmultivalue databasemulti-model databasetriplestoreschema-agnostic databases   references      further reading   sadalage  pramod  fowler  martin         nosql distilled  a brief guide emerging world polyglot persistence  addison-wesley  isbn    - -   -     -  mccreary  dan  kelly  ann         making sense nosql  a guide managers rest us  isbn               wiese  lena         advanced data management sql  nosql  cloud distributed databases  degruyter oldenbourg  isbn    - -  -      -  strauch  christof          nosql databases   pdf  moniruzzaman  a  b   hossain  s  a           nosql database  new era databases big data analytics - classification  characteristics comparison   arxiv            bibcode     arxiv         m  orend  kai          analysis classification nosql databases evaluation ability replace object-relational persistence layer   citeseerx                 krishnan  ganesh  kulkarni  sarang  dadbhawala  dharmesh kirit   method system versioned sharing  consolidating reporting information     external links   strauch  christoph   nosql whitepaper   pdf   stuttgart  hochschule der medien edlich  stefan   nosql database list  neubauer  peter          graph databases  nosql neo j  bushik  sergey          a vendor-independent comparison nosql databases  cassandra  hbase  mongodb  riak   networkworld zicari  roberto v           nosql data stores   articles  papers  presentations   odbms org 
in computing  compiler computer program translates computer code written one programming language  source language  another language  target language   the name  compiler  primarily used programs translate source code high-level programming language lower level language  e g  assembly language  object code  machine code  create executable program   p  there many different types compilers produce output different useful forms  a cross-compiler  produces code different cpu operating system one cross-compiler runs  a bootstrap compiler written language intends compile  a program translates low-level language higher level one decompiler  a program translates high-level languages usually called source-to-source compiler transpiler  a language rewriter usually program translates form expressions without change language  a compiler-compiler compiler produces compiler  part one  a compiler likely perform following operations  often called phases  preprocessing  lexical analysis  parsing  semantic analysis  syntax-directed translation   conversion input programs intermediate representation  code optimization code generation  compilers generally implement phases modular components  promoting efficient design correctness transformations source input target output  program faults caused incorrect compiler behavior difficult track work around  therefore  compiler implementers invest significant effort ensure compiler correctness compilers language processor used transform source programs  an interpreter computer software transforms executes indicated operations   p   the translation process influences design computer languages  leads preference compilation interpretation  in theory  programming language compiler interpreter  in practice  programming languages tend associated one  compiler interpreter     history   theoretical computing concepts developed scientists  mathematicians  engineers formed basis digital modern computing development world war ii  primitive binary languages evolved digital devices understand ones zeros circuit patterns underlying machine architecture  in late      assembly languages created offer workable abstraction computer architectures  limited memory capacity early computers led substantial technical challenges first compilers designed  therefore  compilation process needed divided several small programs  the front end programs produce analysis products used back end programs generate target code  as computer technology provided resources  compiler designs could align better compilation process it usually productive programmer use high-level language  development high-level languages followed naturally capabilities offered digital computers  high-level languages formal languages strictly defined syntax semantics form high-level language architecture  elements formal languages include alphabet  finite set symbols string  finite sequence symbols language  set strings alphabet the sentences language may defined set rules called grammar backus naur form  bnf  describes syntax  sentences  language used syntax algol    john backus  the ideas derive context-free grammar concepts noam chomsky  linguist   bnf extensions become standard tools describing syntax programming notations  many cases parts compilers generated automatically bnf description  in      konrad zuse designed algorithmic programming language called plankalk l   plan calculus    while actual implementation occurred      presented concepts later seen apl designed ken iverson late     s  apl language mathematical computations  high-level language design formative years digital computing provided useful programming tools variety applications fortran  formula translation  engineering science applications considered first high-level language cobol  common business-oriented language  evolved a-  flow-matic become dominant high-level language business applications lisp  list processor  symbolic computation compiler technology evolved need strictly defined transformation high-level source program low-level target program digital computer  the compiler could viewed front end deal analysis source code back end synthesize analysis target code  optimization front end back end could produce efficient target code some early milestones development compiler technology       an autocode compiler developed alick glennie manchester mark i computer university manchester considered first compiled programming language       grace hopper team remington rand wrote compiler a-  programming language  coined term compiler describe   although a-  compiler functioned loader linker modern notion full compiler            a team led john backus ibm developed fortran usually considered first high-level language  in       completed fortran compiler generally credited introduced first unambiguously complete compiler       the conference data systems language  codasyl  initiated development cobol  the cobol design drew a-  flow-matic  by early     cobol compiled multiple architectures            john mccarthy mit designed lisp  the symbol processing capabilities provided useful features artificial intelligence research  in       lisp     release noted tools  interpreter written stephen russell daniel j  edwards  compiler assembler written tim hart mike levin early operating systems software written assembly language  in     early      use high-level languages system programming still controversial due resource limitations  however  several research industry efforts began shift toward high-level systems programming languages  example  bcpl  bliss  b  c bcpl  basic combined programming language  designed      martin richards university cambridge originally developed compiler writing tool  several compilers implemented  richards  book provides insights language compiler  bcpl influential systems programming language still used research also provided basis design b c languages bliss  basic language implementation system software  developed digital equipment corporation  dec  pdp-   computer w a  wulf carnegie mellon university  cmu  research team  the cmu team went develop bliss-   compiler one year later      multics  multiplexed information computing service   time-sharing operating system project  involved mit  bell labs  general electric  later honeywell  led fernando corbat  mit  multics written pl i language developed ibm ibm user group  ibm goal satisfy business  scientific  systems programming requirements  there languages could considered pl i offered complete solution even though implemented  for first years multics project  subset language could compiled assembly language early pl i  epl  compiler doug mcilory bob morris bell labs  epl supported project boot-strapping compiler full pl i could developed bell labs left multics project        over time  hope replaced frustration group effort initially failed produce economically useful system   continued participation would drive project support costs  so researchers turned development efforts  a system programming language b based bcpl concepts written dennis ritchie ken thompson  ritchie created boot-strapping compiler b wrote unics  uniplexed information computing service  operating system pdp-  b  unics eventually became spelled unix bell labs started development expansion c based b bcpl  the bcpl compiler transported multics bell labs bcpl preferred language bell labs  initially  front-end program bell labs  b compiler used c compiler developed  in       new pdp-   provided resource define extensions b rewrite compiler  by      design c language essentially complete unix kernel pdp-   rewritten c  steve johnson started development portable c compiler  pcc  support retargeting c compilers new machines object-oriented programming  oop  offered interesting possibilities application development maintenance  oop concepts go back part lisp simula language science  at bell labs  development c   became interested oop  c   first used      systems programming  the initial design leveraged c language systems programming capabilities simula concepts  object-oriented facilities added       the cfront program implemented c   front-end c   language compiler  in subsequent years several c   compilers developed c   popularity grew in many application domains  idea using higher-level language quickly caught on  because expanding functionality supported newer programming languages increasing complexity computer architectures  compilers became complex darpa  defense advanced research projects agency  sponsored compiler project wulf cmu research team       the production quality compiler-compiler pqcc design would produce production quality compiler  pqc  formal definitions source language target  pqcc tried extend term compiler-compiler beyond traditional meaning parser generator  e g   yacc  without much success  pqcc might properly referred compiler generator pqcc research code generation process sought build truly automatic compiler-writing system  the effort discovered designed phase structure pqc  the bliss-   compiler provided initial structure  the phases included analyses  front end   intermediate translation virtual machine  middle end   translation target  back end   tcol developed pqcc research handle language specific constructs intermediate representation  variations tcol supported various languages  the pqcc project investigated techniques automated compiler construction  the design concepts proved useful optimizing compilers compilers object-oriented programming language ada the ada stoneman document formalized program support environment  apse  along kernel  kapse  minimal  mapse   an ada interpreter nyu ed supported development standardization efforts american national standards institute  ansi  international standards organization  iso   initial ada compiler development u s  military services included compilers complete integrated design environment along lines stoneman document  army navy worked ada language system  als  project targeted dec vax architecture air force started ada integrated environment  aie  targeted ibm     series  while projects provide desired results  contribute overall effort ada development other ada compiler efforts got underway britain university york germany university karlsruhe  in u  s   verdix  later acquired rational  delivered verdix ada development system  vads  army  vads provided set development tools including compiler  unix vads could hosted variety unix platforms dec ultrix sun      solaris targeted motorola       army cecom evaluation  there soon many ada compilers available passed ada validation tests  the free software foundation gnu project developed gnu compiler collection  gcc  provides core capability support multiple languages targets  the ada version gnat one widely used ada compilers  gnat free also commercial support  example  adacore  founded      provide commercial software solutions ada  gnat pro includes gnu gcc based gnat tool suite provide integrated development environment high-level languages continued drive compiler research development  focus areas included optimization automatic code generation  trends programming languages development environments influenced compiler technology  more compilers became included language distributions  perl  java development kit  component ide  vads  eclipse  ada pro   the interrelationship interdependence technologies grew  the advent web services promoted growth web languages scripting languages  scripts trace back early days command line interfaces  cli  user could enter commands executed system  user shell concepts developed languages write shell programs  early windows designs offered simple batch programming capability  the conventional transformation language used interpreter  while widely used  bash batch compilers written  more recently sophisticated interpreted languages became part developers tool kit  modern scripting languages include php  python  ruby lua   lua widely used game development   all interpreter compiler support  when field compiling began late    focus limited translation high-level language programs machine code     the compiler field increasingly intertwined disciplines including computer architecture  programming languages  formal methods  software engineering  computer security   the  compiler research  the next    years  article noted importance object-oriented languages java  security parallel computing cited among future research targets    compiler construction   a compiler implements formal transformation high-level source program low-level target program  compiler design define end-to-end solution tackle defined subset interfaces compilation tools e g  preprocessors  assemblers  linkers  design requirements include rigorously defined interfaces internally compiler components externally supporting toolsets in early days  approach taken compiler design directly affected complexity computer language processed  experience person  designing  resources available  resource limitations led need pass source code once a compiler relatively simple language written one person might single  monolithic piece software  however  source language grows complexity design may split number interdependent phases  separate phases provide design improvements focus development functions compilation process     one-pass versus multi-pass compilers    classifying compilers number passes background hardware resource limitations computers  compiling involves performing much work early computers enough memory contain one program work  so compilers split smaller programs made pass source  representation  performing required analysis translations the ability compile single pass classically seen benefit simplifies job writing compiler one-pass compilers generally perform compilations faster multi-pass compilers  thus  partly driven resource limitations early systems  many early languages specifically designed could compiled single pass  e g   pascal  in cases  design language feature may require compiler perform one pass source  for instance  consider declaration appearing line    source affects translation statement appearing line     in case  first pass needs gather information declarations appearing statements affect  actual translation happening subsequent pass the disadvantage compiling single pass is possible perform many sophisticated optimizations needed generate high quality code  it difficult count exactly many passes optimizing compiler makes  for instance  different phases optimization may analyse one expression many times analyse another expression once splitting compiler small programs technique used researchers interested producing provably correct compilers  proving correctness set small programs often requires less effort proving correctness larger  single  equivalent program     three-stage compiler structure    regardless exact number phases compiler design  phases assigned one three stages  the stages include front end  middle end  back end the front end scans input verifies syntax semantics according specific source language  for statically typed languages performs type checking collecting type information  if input program syntactically incorrect type error  generates error warning messages  usually identifying location source code problem detected  cases actual error may  much  earlier program  aspects front end include lexical analysis  syntax analysis  semantic analysis  the front end transforms input program intermediate representation  ir  processing middle end  this ir usually lower-level representation program respect source code the middle end performs optimizations ir independent cpu architecture targeted  this source code machine code independence intended enable generic optimizations shared versions compiler supporting different languages target processors  examples middle end optimizations removal useless  dead code elimination  unreachable code  reachability analysis   discovery propagation constant values  constant propagation   relocation computation less frequently executed place  e g   loop   specialization computation based context  eventually producing  optimized  ir used back end the back end takes optimized ir middle end  it may perform analysis  transformations optimizations specific target cpu architecture  the back end generates target-dependent assembly code  performing register allocation process  the back end performs instruction scheduling  re-orders instructions keep parallel execution units busy filling delay slots  although optimization problems np-hard  heuristic techniques solving well-developed currently implemented production-quality compilers  typically output back end machine code specialized particular processor operating system this front middle back-end approach makes possible combine front ends different languages back ends different cpus sharing optimizations middle end  practical examples approach gnu compiler collection  clang  llvm-based c c   compiler   amsterdam compiler kit  multiple front-ends  shared optimizations multiple back-ends      front end     the front end analyzes source code build internal representation program  called intermediate representation  ir   it also manages symbol table  data structure mapping symbol source code associated information location  type scope while frontend single monolithic function program  scannerless parser  traditionally implemented analyzed several phases  may execute sequentially concurrently  this method favored due modularity separation concerns  most commonly today  frontend broken three phases  lexical analysis  also known lexing scanning   syntax analysis  also known scanning parsing   semantic analysis  lexing parsing comprise syntactic analysis  word syntax phrase syntax  respectively   simple cases  modules  lexer parser  automatically generated grammar language  though complex cases require manual modification  the lexical grammar phrase grammar usually context-free grammars  simplifies analysis significantly  context-sensitivity handled semantic analysis phase  the semantic analysis phase generally complex written hand  partially fully automated using attribute grammars  these phases broken  lexing scanning evaluating  parsing building concrete syntax tree  cst  parse tree  transforming abstract syntax tree  ast  syntax tree   in cases additional phases used  notably line reconstruction preprocessing  rare the main phases front end include following line reconstruction converts input character sequence canonical form ready parser  languages strop keywords allow arbitrary spaces within identifiers require phase  the top-down  recursive-descent  table-driven parsers used     typically read source one character time require separate tokenizing phase  atlas autocode imp  implementations algol coral     examples stropped languages whose compilers would line reconstruction phase preprocessing supports macro substitution conditional compilation  typically preprocessing phase occurs syntactic semantic analysis  e g  case c  preprocessor manipulates lexical tokens rather syntactic forms  however  languages scheme support macro substitutions based syntactic forms lexical analysis  also known lexing tokenization  breaks source code text sequence small pieces called lexical tokens  this phase divided two stages  scanning  segments input text syntactic units called lexemes assigns category  evaluating  converts lexemes processed value  a token pair consisting token name optional token value  common token categories may include identifiers  keywords  separators  operators  literals comments  although set token categories varies different programming languages  the lexeme syntax typically regular language  finite state automaton constructed regular expression used recognize it  the software lexical analysis called lexical analyzer  this may separate step combined parsing step scannerless parsing  case parsing done character level  token level syntax analysis  also known parsing  involves parsing token sequence identify syntactic structure program  this phase typically builds parse tree  replaces linear sequence tokens tree structure built according rules formal grammar define language syntax  the parse tree often analyzed  augmented  transformed later phases compiler semantic analysis adds semantic information parse tree builds symbol table  this phase performs semantic checks type checking  checking type errors   object binding  associating variable function references definitions   definite assignment  requiring local variables initialized use   rejecting incorrect programs issuing warnings  semantic analysis usually requires complete parse tree  meaning phase logically follows parsing phase  logically precedes code generation phase  though often possible fold multiple phases one pass code compiler implementation      middle end     the middle end  also known optimizer  performs optimizations intermediate representation order improve performance quality produced machine code  the middle end contains optimizations independent cpu architecture targeted the main phases middle end include following analysis  this gathering program information intermediate representation derived input  data-flow analysis used build use-define chains  together dependence analysis  alias analysis  pointer analysis  escape analysis  etc  accurate analysis basis compiler optimization  the control-flow graph every compiled function call graph program usually also built analysis phase optimization  intermediate language representation transformed functionally equivalent faster  smaller  forms  popular optimizations inline expansion  dead code elimination  constant propagation  loop transformation even automatic parallelization compiler analysis prerequisite compiler optimization  tightly work together  for example  dependence analysis crucial loop transformation the scope compiler analysis optimizations vary greatly  scope may range operating within basic block  whole procedures  even whole program   there trade-off granularity optimizations cost compilation   for example  peephole optimizations fast perform compilation affect small local fragment code  performed independently context code fragment appears   in contrast  interprocedural optimization requires compilation time memory space  enable optimizations possible considering behavior multiple functions simultaneously interprocedural analysis optimizations common modern commercial compilers hp  ibm  sgi  intel  microsoft  sun microsystems  the free software gcc criticized long time lacking powerful interprocedural optimizations  changing respect  another open source compiler full analysis optimization infrastructure open    used many organizations research commercial purposes due extra time space needed compiler analysis optimizations  compilers skip default  users use compilation options explicitly tell compiler optimizations enabled      back end     the back end responsible cpu architecture specific optimizations code generation the main phases back end include following machine dependent optimizations  optimizations depend details cpu architecture compiler targets  a prominent example peephole optimizations  rewrites short sequences assembler instructions efficient instructions code generation  transformed intermediate language translated output language  usually native machine language system  this involves resource storage decisions  deciding variables fit registers memory selection scheduling appropriate machine instructions along associated addressing modes  see also sethi ullman algorithm   debug data may also need generated facilitate debugging     compiler correctness    compiler correctness branch software engineering deals trying show compiler behaves according language specification  techniques include developing compiler using formal methods using rigorous testing  often called compiler validation  existing compiler    compiled versus interpreted languages   higher-level programming languages usually appear type translation mind  either designed compiled language interpreted language  however  practice rarely anything language requires exclusively compiled exclusively interpreted  although possible design languages rely re-interpretation run time  the categorization usually reflects popular widespread implementations language   instance  basic sometimes called interpreted language  c compiled one  despite existence basic compilers c interpreters interpretation replace compilation completely  it hides user makes gradual  even though interpreter interpreted  directly executed program needed somewhere bottom execution stack  see machine language  furthermore  optimization compilers contain interpreter functionality  interpreters may include ahead time compilation techniques  for example  expression executed compilation results inserted output program  prevents recalculated time program runs  greatly speed final program  modern trends toward just-in-time compilation bytecode interpretation times blur traditional categorizations compilers interpreters even further some language specifications spell implementations must include compilation facility  example  common lisp  however  nothing inherent definition common lisp stops interpreted  other languages features easy implement interpreter  make writing compiler much harder  example  apl  snobol   many scripting languages allow programs construct arbitrary source code runtime regular string operations  execute code passing special evaluation function  to implement features compiled language  programs must usually shipped runtime library includes version compiler itself    types   one classification compilers platform generated code executes  this known target platform a native hosted compiler one whose output intended directly run type computer operating system compiler runs on  the output cross compiler designed run different platform  cross compilers often used developing software embedded systems intended support software development environment the output compiler produces code virtual machine  vm  may may executed platform compiler produced it  for reason  compilers usually classified native cross compilers the lower level language target compiler may high-level programming language  c  viewed sort portable assembly language  frequently target language compilers  for example  cfront  original compiler c    used c target language  the c code generated compiler usually intended readable maintained humans  indent style creating pretty c intermediate code ignored  some features c make good target language include  line directive  generated compiler support debugging original source  wide platform support available c compilers while common compiler type outputs machine code  many types source-to-source compilers type compiler takes high-level language input outputs high-level language  for example  automatic parallelizing compiler frequently take high-level language program input transform code annotate parallel code annotations  e g  openmp  language constructs  e g  fortran doall statements   other terms source-to-source compilers language translator  language converter  language rewriter  the last term usually applied translations involve change language bytecode compilers compile assembly language theoretical machine  like prolog implementationsthis prolog machine also known warren abstract machine  wam  bytecode compilers java  python also examples category just-in-time compilers  jit compiler  defer compilation runtime  jit compilers exist many modern languages including python  javascript  smalltalk  java  microsoft  net common intermediate language  cil  others   a jit compiler generally runs inside interpreter   when interpreter detects code path  hot   meaning executed frequently  jit compiler invoked compile  hot  code increased performance for languages  java  applications first compiled using bytecode compiler delivered machine-independent intermediate representation   a bytecode interpreter executes bytecode  jit compiler translate bytecode machine code increased performance necessary hardware compilers  also known synthesis tools  compilers whose input hardware description language whose output description  form netlist otherwise  hardware configuration the output compilers target computer hardware low level  example field-programmable gate array  fpga  structured application-specific integrated circuit  asic   such compilers said hardware compilers  source code compile effectively controls final configuration hardware operates  the output compilation interconnection transistors lookup tables an example hardware compiler xst  xilinx synthesis tool used configuring fpgas  similar tools available altera  synplicity  synopsys hardware vendors an assembler program compiles human readable assembly language machine code  actual instructions executed hardware   the inverse program translates machine code assembly language called disassembler a program translates low-level language higher level one decompiler a program translates object code format supported compilation machine called cross compiler commonly used prepare code embedded applications a program rewrites object code back type object code applying optimisations transformations binary recompiler    see also      references      further reading      external links   compilers curlieincremental approach compiler construction   pdf tutorialcompile-howtobasics compiler design wayback machine  archived    may      short animation youtube explaining key conceptual difference compilers interpreterssyntax analysis   ll  parsing youtubelet build compiler  jack crenshawforum compiler development wayback machine  archived    october      
in computing  compiler computer program translates computer code written one programming language  source language  another language  target language   the name  compiler  primarily used programs translate source code high-level programming language lower level language  e g  assembly language  object code  machine code  create executable program   p  there many different types compilers produce output different useful forms  a cross-compiler  produces code different cpu operating system one cross-compiler runs  a bootstrap compiler written language intends compile  a program translates low-level language higher level one decompiler  a program translates high-level languages usually called source-to-source compiler transpiler  a language rewriter usually program translates form expressions without change language  a compiler-compiler compiler produces compiler  part one  a compiler likely perform following operations  often called phases  preprocessing  lexical analysis  parsing  semantic analysis  syntax-directed translation   conversion input programs intermediate representation  code optimization code generation  compilers generally implement phases modular components  promoting efficient design correctness transformations source input target output  program faults caused incorrect compiler behavior difficult track work around  therefore  compiler implementers invest significant effort ensure compiler correctness compilers language processor used transform source programs  an interpreter computer software transforms executes indicated operations   p   the translation process influences design computer languages  leads preference compilation interpretation  in theory  programming language compiler interpreter  in practice  programming languages tend associated one  compiler interpreter     history   theoretical computing concepts developed scientists  mathematicians  engineers formed basis digital modern computing development world war ii  primitive binary languages evolved digital devices understand ones zeros circuit patterns underlying machine architecture  in late      assembly languages created offer workable abstraction computer architectures  limited memory capacity early computers led substantial technical challenges first compilers designed  therefore  compilation process needed divided several small programs  the front end programs produce analysis products used back end programs generate target code  as computer technology provided resources  compiler designs could align better compilation process it usually productive programmer use high-level language  development high-level languages followed naturally capabilities offered digital computers  high-level languages formal languages strictly defined syntax semantics form high-level language architecture  elements formal languages include alphabet  finite set symbols string  finite sequence symbols language  set strings alphabet the sentences language may defined set rules called grammar backus naur form  bnf  describes syntax  sentences  language used syntax algol    john backus  the ideas derive context-free grammar concepts noam chomsky  linguist   bnf extensions become standard tools describing syntax programming notations  many cases parts compilers generated automatically bnf description  in      konrad zuse designed algorithmic programming language called plankalk l   plan calculus    while actual implementation occurred      presented concepts later seen apl designed ken iverson late     s  apl language mathematical computations  high-level language design formative years digital computing provided useful programming tools variety applications fortran  formula translation  engineering science applications considered first high-level language cobol  common business-oriented language  evolved a-  flow-matic become dominant high-level language business applications lisp  list processor  symbolic computation compiler technology evolved need strictly defined transformation high-level source program low-level target program digital computer  the compiler could viewed front end deal analysis source code back end synthesize analysis target code  optimization front end back end could produce efficient target code some early milestones development compiler technology       an autocode compiler developed alick glennie manchester mark i computer university manchester considered first compiled programming language       grace hopper team remington rand wrote compiler a-  programming language  coined term compiler describe   although a-  compiler functioned loader linker modern notion full compiler            a team led john backus ibm developed fortran usually considered first high-level language  in       completed fortran compiler generally credited introduced first unambiguously complete compiler       the conference data systems language  codasyl  initiated development cobol  the cobol design drew a-  flow-matic  by early     cobol compiled multiple architectures            john mccarthy mit designed lisp  the symbol processing capabilities provided useful features artificial intelligence research  in       lisp     release noted tools  interpreter written stephen russell daniel j  edwards  compiler assembler written tim hart mike levin early operating systems software written assembly language  in     early      use high-level languages system programming still controversial due resource limitations  however  several research industry efforts began shift toward high-level systems programming languages  example  bcpl  bliss  b  c bcpl  basic combined programming language  designed      martin richards university cambridge originally developed compiler writing tool  several compilers implemented  richards  book provides insights language compiler  bcpl influential systems programming language still used research also provided basis design b c languages bliss  basic language implementation system software  developed digital equipment corporation  dec  pdp-   computer w a  wulf carnegie mellon university  cmu  research team  the cmu team went develop bliss-   compiler one year later      multics  multiplexed information computing service   time-sharing operating system project  involved mit  bell labs  general electric  later honeywell  led fernando corbat  mit  multics written pl i language developed ibm ibm user group  ibm goal satisfy business  scientific  systems programming requirements  there languages could considered pl i offered complete solution even though implemented  for first years multics project  subset language could compiled assembly language early pl i  epl  compiler doug mcilory bob morris bell labs  epl supported project boot-strapping compiler full pl i could developed bell labs left multics project        over time  hope replaced frustration group effort initially failed produce economically useful system   continued participation would drive project support costs  so researchers turned development efforts  a system programming language b based bcpl concepts written dennis ritchie ken thompson  ritchie created boot-strapping compiler b wrote unics  uniplexed information computing service  operating system pdp-  b  unics eventually became spelled unix bell labs started development expansion c based b bcpl  the bcpl compiler transported multics bell labs bcpl preferred language bell labs  initially  front-end program bell labs  b compiler used c compiler developed  in       new pdp-   provided resource define extensions b rewrite compiler  by      design c language essentially complete unix kernel pdp-   rewritten c  steve johnson started development portable c compiler  pcc  support retargeting c compilers new machines object-oriented programming  oop  offered interesting possibilities application development maintenance  oop concepts go back part lisp simula language science  at bell labs  development c   became interested oop  c   first used      systems programming  the initial design leveraged c language systems programming capabilities simula concepts  object-oriented facilities added       the cfront program implemented c   front-end c   language compiler  in subsequent years several c   compilers developed c   popularity grew in many application domains  idea using higher-level language quickly caught on  because expanding functionality supported newer programming languages increasing complexity computer architectures  compilers became complex darpa  defense advanced research projects agency  sponsored compiler project wulf cmu research team       the production quality compiler-compiler pqcc design would produce production quality compiler  pqc  formal definitions source language target  pqcc tried extend term compiler-compiler beyond traditional meaning parser generator  e g   yacc  without much success  pqcc might properly referred compiler generator pqcc research code generation process sought build truly automatic compiler-writing system  the effort discovered designed phase structure pqc  the bliss-   compiler provided initial structure  the phases included analyses  front end   intermediate translation virtual machine  middle end   translation target  back end   tcol developed pqcc research handle language specific constructs intermediate representation  variations tcol supported various languages  the pqcc project investigated techniques automated compiler construction  the design concepts proved useful optimizing compilers compilers object-oriented programming language ada the ada stoneman document formalized program support environment  apse  along kernel  kapse  minimal  mapse   an ada interpreter nyu ed supported development standardization efforts american national standards institute  ansi  international standards organization  iso   initial ada compiler development u s  military services included compilers complete integrated design environment along lines stoneman document  army navy worked ada language system  als  project targeted dec vax architecture air force started ada integrated environment  aie  targeted ibm     series  while projects provide desired results  contribute overall effort ada development other ada compiler efforts got underway britain university york germany university karlsruhe  in u  s   verdix  later acquired rational  delivered verdix ada development system  vads  army  vads provided set development tools including compiler  unix vads could hosted variety unix platforms dec ultrix sun      solaris targeted motorola       army cecom evaluation  there soon many ada compilers available passed ada validation tests  the free software foundation gnu project developed gnu compiler collection  gcc  provides core capability support multiple languages targets  the ada version gnat one widely used ada compilers  gnat free also commercial support  example  adacore  founded      provide commercial software solutions ada  gnat pro includes gnu gcc based gnat tool suite provide integrated development environment high-level languages continued drive compiler research development  focus areas included optimization automatic code generation  trends programming languages development environments influenced compiler technology  more compilers became included language distributions  perl  java development kit  component ide  vads  eclipse  ada pro   the interrelationship interdependence technologies grew  the advent web services promoted growth web languages scripting languages  scripts trace back early days command line interfaces  cli  user could enter commands executed system  user shell concepts developed languages write shell programs  early windows designs offered simple batch programming capability  the conventional transformation language used interpreter  while widely used  bash batch compilers written  more recently sophisticated interpreted languages became part developers tool kit  modern scripting languages include php  python  ruby lua   lua widely used game development   all interpreter compiler support  when field compiling began late    focus limited translation high-level language programs machine code     the compiler field increasingly intertwined disciplines including computer architecture  programming languages  formal methods  software engineering  computer security   the  compiler research  the next    years  article noted importance object-oriented languages java  security parallel computing cited among future research targets    compiler construction   a compiler implements formal transformation high-level source program low-level target program  compiler design define end-to-end solution tackle defined subset interfaces compilation tools e g  preprocessors  assemblers  linkers  design requirements include rigorously defined interfaces internally compiler components externally supporting toolsets in early days  approach taken compiler design directly affected complexity computer language processed  experience person  designing  resources available  resource limitations led need pass source code once a compiler relatively simple language written one person might single  monolithic piece software  however  source language grows complexity design may split number interdependent phases  separate phases provide design improvements focus development functions compilation process     one-pass versus multi-pass compilers    classifying compilers number passes background hardware resource limitations computers  compiling involves performing much work early computers enough memory contain one program work  so compilers split smaller programs made pass source  representation  performing required analysis translations the ability compile single pass classically seen benefit simplifies job writing compiler one-pass compilers generally perform compilations faster multi-pass compilers  thus  partly driven resource limitations early systems  many early languages specifically designed could compiled single pass  e g   pascal  in cases  design language feature may require compiler perform one pass source  for instance  consider declaration appearing line    source affects translation statement appearing line     in case  first pass needs gather information declarations appearing statements affect  actual translation happening subsequent pass the disadvantage compiling single pass is possible perform many sophisticated optimizations needed generate high quality code  it difficult count exactly many passes optimizing compiler makes  for instance  different phases optimization may analyse one expression many times analyse another expression once splitting compiler small programs technique used researchers interested producing provably correct compilers  proving correctness set small programs often requires less effort proving correctness larger  single  equivalent program     three-stage compiler structure    regardless exact number phases compiler design  phases assigned one three stages  the stages include front end  middle end  back end the front end scans input verifies syntax semantics according specific source language  for statically typed languages performs type checking collecting type information  if input program syntactically incorrect type error  generates error warning messages  usually identifying location source code problem detected  cases actual error may  much  earlier program  aspects front end include lexical analysis  syntax analysis  semantic analysis  the front end transforms input program intermediate representation  ir  processing middle end  this ir usually lower-level representation program respect source code the middle end performs optimizations ir independent cpu architecture targeted  this source code machine code independence intended enable generic optimizations shared versions compiler supporting different languages target processors  examples middle end optimizations removal useless  dead code elimination  unreachable code  reachability analysis   discovery propagation constant values  constant propagation   relocation computation less frequently executed place  e g   loop   specialization computation based context  eventually producing  optimized  ir used back end the back end takes optimized ir middle end  it may perform analysis  transformations optimizations specific target cpu architecture  the back end generates target-dependent assembly code  performing register allocation process  the back end performs instruction scheduling  re-orders instructions keep parallel execution units busy filling delay slots  although optimization problems np-hard  heuristic techniques solving well-developed currently implemented production-quality compilers  typically output back end machine code specialized particular processor operating system this front middle back-end approach makes possible combine front ends different languages back ends different cpus sharing optimizations middle end  practical examples approach gnu compiler collection  clang  llvm-based c c   compiler   amsterdam compiler kit  multiple front-ends  shared optimizations multiple back-ends      front end     the front end analyzes source code build internal representation program  called intermediate representation  ir   it also manages symbol table  data structure mapping symbol source code associated information location  type scope while frontend single monolithic function program  scannerless parser  traditionally implemented analyzed several phases  may execute sequentially concurrently  this method favored due modularity separation concerns  most commonly today  frontend broken three phases  lexical analysis  also known lexing scanning   syntax analysis  also known scanning parsing   semantic analysis  lexing parsing comprise syntactic analysis  word syntax phrase syntax  respectively   simple cases  modules  lexer parser  automatically generated grammar language  though complex cases require manual modification  the lexical grammar phrase grammar usually context-free grammars  simplifies analysis significantly  context-sensitivity handled semantic analysis phase  the semantic analysis phase generally complex written hand  partially fully automated using attribute grammars  these phases broken  lexing scanning evaluating  parsing building concrete syntax tree  cst  parse tree  transforming abstract syntax tree  ast  syntax tree   in cases additional phases used  notably line reconstruction preprocessing  rare the main phases front end include following line reconstruction converts input character sequence canonical form ready parser  languages strop keywords allow arbitrary spaces within identifiers require phase  the top-down  recursive-descent  table-driven parsers used     typically read source one character time require separate tokenizing phase  atlas autocode imp  implementations algol coral     examples stropped languages whose compilers would line reconstruction phase preprocessing supports macro substitution conditional compilation  typically preprocessing phase occurs syntactic semantic analysis  e g  case c  preprocessor manipulates lexical tokens rather syntactic forms  however  languages scheme support macro substitutions based syntactic forms lexical analysis  also known lexing tokenization  breaks source code text sequence small pieces called lexical tokens  this phase divided two stages  scanning  segments input text syntactic units called lexemes assigns category  evaluating  converts lexemes processed value  a token pair consisting token name optional token value  common token categories may include identifiers  keywords  separators  operators  literals comments  although set token categories varies different programming languages  the lexeme syntax typically regular language  finite state automaton constructed regular expression used recognize it  the software lexical analysis called lexical analyzer  this may separate step combined parsing step scannerless parsing  case parsing done character level  token level syntax analysis  also known parsing  involves parsing token sequence identify syntactic structure program  this phase typically builds parse tree  replaces linear sequence tokens tree structure built according rules formal grammar define language syntax  the parse tree often analyzed  augmented  transformed later phases compiler semantic analysis adds semantic information parse tree builds symbol table  this phase performs semantic checks type checking  checking type errors   object binding  associating variable function references definitions   definite assignment  requiring local variables initialized use   rejecting incorrect programs issuing warnings  semantic analysis usually requires complete parse tree  meaning phase logically follows parsing phase  logically precedes code generation phase  though often possible fold multiple phases one pass code compiler implementation      middle end     the middle end  also known optimizer  performs optimizations intermediate representation order improve performance quality produced machine code  the middle end contains optimizations independent cpu architecture targeted the main phases middle end include following analysis  this gathering program information intermediate representation derived input  data-flow analysis used build use-define chains  together dependence analysis  alias analysis  pointer analysis  escape analysis  etc  accurate analysis basis compiler optimization  the control-flow graph every compiled function call graph program usually also built analysis phase optimization  intermediate language representation transformed functionally equivalent faster  smaller  forms  popular optimizations inline expansion  dead code elimination  constant propagation  loop transformation even automatic parallelization compiler analysis prerequisite compiler optimization  tightly work together  for example  dependence analysis crucial loop transformation the scope compiler analysis optimizations vary greatly  scope may range operating within basic block  whole procedures  even whole program   there trade-off granularity optimizations cost compilation   for example  peephole optimizations fast perform compilation affect small local fragment code  performed independently context code fragment appears   in contrast  interprocedural optimization requires compilation time memory space  enable optimizations possible considering behavior multiple functions simultaneously interprocedural analysis optimizations common modern commercial compilers hp  ibm  sgi  intel  microsoft  sun microsystems  the free software gcc criticized long time lacking powerful interprocedural optimizations  changing respect  another open source compiler full analysis optimization infrastructure open    used many organizations research commercial purposes due extra time space needed compiler analysis optimizations  compilers skip default  users use compilation options explicitly tell compiler optimizations enabled      back end     the back end responsible cpu architecture specific optimizations code generation the main phases back end include following machine dependent optimizations  optimizations depend details cpu architecture compiler targets  a prominent example peephole optimizations  rewrites short sequences assembler instructions efficient instructions code generation  transformed intermediate language translated output language  usually native machine language system  this involves resource storage decisions  deciding variables fit registers memory selection scheduling appropriate machine instructions along associated addressing modes  see also sethi ullman algorithm   debug data may also need generated facilitate debugging     compiler correctness    compiler correctness branch software engineering deals trying show compiler behaves according language specification  techniques include developing compiler using formal methods using rigorous testing  often called compiler validation  existing compiler    compiled versus interpreted languages   higher-level programming languages usually appear type translation mind  either designed compiled language interpreted language  however  practice rarely anything language requires exclusively compiled exclusively interpreted  although possible design languages rely re-interpretation run time  the categorization usually reflects popular widespread implementations language   instance  basic sometimes called interpreted language  c compiled one  despite existence basic compilers c interpreters interpretation replace compilation completely  it hides user makes gradual  even though interpreter interpreted  directly executed program needed somewhere bottom execution stack  see machine language  furthermore  optimization compilers contain interpreter functionality  interpreters may include ahead time compilation techniques  for example  expression executed compilation results inserted output program  prevents recalculated time program runs  greatly speed final program  modern trends toward just-in-time compilation bytecode interpretation times blur traditional categorizations compilers interpreters even further some language specifications spell implementations must include compilation facility  example  common lisp  however  nothing inherent definition common lisp stops interpreted  other languages features easy implement interpreter  make writing compiler much harder  example  apl  snobol   many scripting languages allow programs construct arbitrary source code runtime regular string operations  execute code passing special evaluation function  to implement features compiled language  programs must usually shipped runtime library includes version compiler itself    types   one classification compilers platform generated code executes  this known target platform a native hosted compiler one whose output intended directly run type computer operating system compiler runs on  the output cross compiler designed run different platform  cross compilers often used developing software embedded systems intended support software development environment the output compiler produces code virtual machine  vm  may may executed platform compiler produced it  for reason  compilers usually classified native cross compilers the lower level language target compiler may high-level programming language  c  viewed sort portable assembly language  frequently target language compilers  for example  cfront  original compiler c    used c target language  the c code generated compiler usually intended readable maintained humans  indent style creating pretty c intermediate code ignored  some features c make good target language include  line directive  generated compiler support debugging original source  wide platform support available c compilers while common compiler type outputs machine code  many types source-to-source compilers type compiler takes high-level language input outputs high-level language  for example  automatic parallelizing compiler frequently take high-level language program input transform code annotate parallel code annotations  e g  openmp  language constructs  e g  fortran doall statements   other terms source-to-source compilers language translator  language converter  language rewriter  the last term usually applied translations involve change language bytecode compilers compile assembly language theoretical machine  like prolog implementationsthis prolog machine also known warren abstract machine  wam  bytecode compilers java  python also examples category just-in-time compilers  jit compiler  defer compilation runtime  jit compilers exist many modern languages including python  javascript  smalltalk  java  microsoft  net common intermediate language  cil  others   a jit compiler generally runs inside interpreter   when interpreter detects code path  hot   meaning executed frequently  jit compiler invoked compile  hot  code increased performance for languages  java  applications first compiled using bytecode compiler delivered machine-independent intermediate representation   a bytecode interpreter executes bytecode  jit compiler translate bytecode machine code increased performance necessary hardware compilers  also known synthesis tools  compilers whose input hardware description language whose output description  form netlist otherwise  hardware configuration the output compilers target computer hardware low level  example field-programmable gate array  fpga  structured application-specific integrated circuit  asic   such compilers said hardware compilers  source code compile effectively controls final configuration hardware operates  the output compilation interconnection transistors lookup tables an example hardware compiler xst  xilinx synthesis tool used configuring fpgas  similar tools available altera  synplicity  synopsys hardware vendors an assembler program compiles human readable assembly language machine code  actual instructions executed hardware   the inverse program translates machine code assembly language called disassembler a program translates low-level language higher level one decompiler a program translates object code format supported compilation machine called cross compiler commonly used prepare code embedded applications a program rewrites object code back type object code applying optimisations transformations binary recompiler    see also      references      further reading      external links   compilers curlieincremental approach compiler construction   pdf tutorialcompile-howtobasics compiler design wayback machine  archived    may      short animation youtube explaining key conceptual difference compilers interpreterssyntax analysis   ll  parsing youtubelet build compiler  jack crenshawforum compiler development wayback machine  archived    october      
automata theory study abstract machines automata  well computational problems solved using them  it theory theoretical computer science  the word automata  plural automaton  comes greek word            means  self-acting  self-willed  self-moving   an automaton  automata plural  abstract self-propelled computing device follows predetermined sequence operations automatically  an automaton finite number states called finite automaton  fa  finite-state machine  fsm  the figure right illustrates finite-state machine  belongs well-known type automaton   this automaton consists states  represented figure circles  transitions  represented arrows    as automaton sees symbol input  makes transition  jump  another state  according transition function  takes previous state current input symbol arguments automata theory closely related formal language theory  in context  automata used finite representations formal languages may infinite  automata often classified class formal languages recognize  chomsky hierarchy  describes nesting relationship major classes automata  automata play major role theory computation  compiler construction  artificial intelligence  parsing formal verification    history   the theory abstract automata developed mid-  th century connection finite automata  automata theory initially considered branch mathematical systems theory  studying behavior discrete-parameter systems  early work automata theory differed previous work systems using abstract algebra describe information systems rather differential calculus describe material systems  the theory finite-state transducer developed different names different research communities  the earlier concept turing machines also included discipline along new forms infinite-state automaton  pushdown automata      saw publication automata studies  collected work scientists including claude shannon  w  ross ashby  john von neumann  marvin minsky  edward f  moore  stephen cole kleene  with publication volume   automata theory emerged relatively autonomous discipline   the book included kleene description set regular events  regular languages  relatively stable measure complexity turing machine programs shannon  in year  noam chomsky described chomsky hierarchy  correspondence automata formal grammars  ross ashby published an introduction cybernetics  accessible textbook explaining automata information using basic set theory the study linear automata led myhill-nerode theorem  gives necessary sufficient condition formal language regular  exact count number states minimal machine language  the pumping lemma regular languages  also useful regularity proofs  proven period michael o  rabin dana scott  along computational equivalence deterministic nondeterministic finite automata in      body algebraic results known  structure theory   algebraic decomposition theory  emerged  dealt realization sequential machines smaller machines interconnection  while finite automaton simulated using  universal gate set  requires simulating circuit contain loops arbitrary complexity  structure theory deals  loop-free  realizability machines the theory computational complexity also took shape     s  by end decade  automata theory came seen  pure mathematics computer science     automata   what follows general definition automaton  restricts broader definition system one viewed acting discrete time-steps  state behavior outputs defined step unchanging functions state input     informal description    an automaton runs given sequence inputs discrete  individual  time steps steps  an automaton processes one input picked set symbols letters  called input alphabet  the symbols received automaton input step sequence symbols called words  an automaton set states  at moment run automaton  automaton one states  when automaton receives new input moves another state  transitions  based transition function takes previous state current input symbol parameters  at time  another function called output function produces symbols output alphabet  also according previous state current input symbol  the automaton reads symbols input word transitions states word read completely  finite length  point automaton halts  a state automaton halts called final state to investigate possible state input output sequences automaton using formal language theory  machine assigned starting state set accepting states  then  depending whether run starting starting state ends accepting state  automaton said accept reject input sequence  the set words accepted automaton called language recognized automaton  a familiar example machine recognizing language electronic lock accepts rejects attempts enter correct code     formal definition    automatonan automaton represented formally  -tuple                     m                                                              q                                                             displaystyle m  langle  sigma   gamma  q  delta   lambda  rangle                                           displaystyle  sigma     finite set symbols  called input alphabet automaton                                      displaystyle  gamma     another finite set symbols  called output alphabet automaton                     q                displaystyle q    set states                                      displaystyle  delta     next-state function transition function                                       q                                   q                displaystyle  delta  q times  sigma  q    mapping state-input pairs successor states                                      displaystyle  lambda     next-output function                                       q                                                    displaystyle  lambda  q times  sigma   gamma     mapping state-input pairs outputs if                     q                displaystyle q    finite                      m                displaystyle m    finite automaton input wordan automaton reads finite string symbols                                                                                                                                                                                                   n                                  displaystyle          a  n                                                                                                            displaystyle    sigma      called input word  the set words denoted                                                                                         displaystyle  sigma         runa sequence states                               q                                                                    q                                                                                               q                      n                                  displaystyle q     q        q  n                                    q                                                        q                displaystyle q   q                                  q                                                                                    q                                                                                                                                                           displaystyle q    delta  q  i-                                                               n                displaystyle   leq n     run automaton input                                                                                                                                                                                                   n                                                                                                       displaystyle          a  n   sigma         starting state                               q                                                         displaystyle q         in words  first automaton start state                               q                                                         displaystyle q         receives input                                                                                       displaystyle         for                                                                                       displaystyle        every following                                                                                     displaystyle      input string  automaton picks next state                               q                                                       displaystyle q      according transition function                                                 q                                                                                                                                                           displaystyle  delta  q  i-          last symbol                                                    n                                  displaystyle  n     read  leaving machine final state run                                q                      n                                  displaystyle q  n      similarly  step  automaton emits output symbol according output function                                                 q                                                                                                                                                           displaystyle  lambda  q  i-         the transition function                                      displaystyle  delta     extended inductively                                                                                            q                                                                                      q                displaystyle   overline   delta    q times  sigma      q    describe machine behavior fed whole input words  for empty string                                      displaystyle  varepsilon                                                                                                 q                                            q                displaystyle   overline   delta    q  varepsilon   q    states                     q                displaystyle q     strings                     w                       displaystyle wa                                       displaystyle    last symbol                     w                displaystyle w     possibly empty  rest string                                                                                             q                 w                                                                                                                          q                 w                                                  displaystyle   overline   delta    q wa   delta    overline   delta    q w       the output function                                      displaystyle  lambda     may extended similarly                                                                                            q                 w                         displaystyle   overline   lambda    q w      gives complete output machine run word                     w                displaystyle w    state                     q                displaystyle q    acceptorin order study automaton theory formal languages  automaton may considered acceptor  replacing output alphabet function                                      displaystyle  gamma                                          displaystyle  lambda                                  q                                                          q                displaystyle q     q     designated start state                     f                displaystyle f     set states                     q                displaystyle q     i e                      f                 q                displaystyle f subseteq q     called accept states this allows following defined accepting worda word                     w                                                                                                                                                                                               n                                                                                                       displaystyle w          a  n   sigma         accepting word automaton                                                                                                      q                                                          w                          f                displaystyle   overline   delta    q     w  f      consuming whole string                     w                displaystyle w    machine accept state recognized languagethe language                     l                                                                                     displaystyle l subseteq  sigma         recognized automaton set words accepted automaton                      l                          w                                                                                                                                                                                                           q                                                          w                          f                         displaystyle l   w  sigma            overline   delta    q     w  f      recognizable languagesthe recognizable languages set languages recognized automaton  for finite automata recognizable languages regular languages  for different types automata  recognizable languages different    variant definitions automata   automata defined study useful machines mathematical formalism  so  definition automaton open variations according  real world machine   want model using automaton  people studied many variations automata  the following popular variations definition different components automata inputfinite input  an automaton accepts finite sequence symbols  the introductory definition encompasses finite words infinite input  an automaton accepts infinite words   -words   such automata called  -automata tree word input  the input may tree symbols instead sequence symbols  in case reading symbol  automaton reads successor symbols input tree  it said automaton makes one copy successor copy starts running one successor symbols state according transition relation automaton  such automaton called tree automaton infinite tree input   the two extensions combined  automaton reads tree structure  finite branches  such automaton called infinite tree automatonstatessingle state  an automaton one state  also called combinational circuit  performs transformation may implement combinational logic finite states  an automaton contains finite number states infinite states  an automaton may finite number states  even countable number states  different kinds abstract memory may used give machines finite descriptions stack memory  an automaton may also contain extra memory form stack symbols pushed popped  this kind automaton called pushdown automatonqueue memory  an automaton may memory form queue  such machine called queue machine turing-complete tape memory  the inputs outputs automata often described input output tapes  some machines additional working tapes  including turing machine  linear bounded automaton  log-space transducer transition functiondeterministic  for given current state input symbol  automaton jump one one state deterministic automaton nondeterministic  an automaton  reading input symbol  may jump number states  licensed transition relation  notice term transition function replaced transition relation  the automaton non-deterministically decides jump one allowed choices  such automata called nondeterministic automata alternation  this idea quite similar tree automaton orthogonal  the automaton may run multiple copies next read symbol  such automata called alternating automata  acceptance condition must satisfy runs copies accept input acceptance conditionacceptance finite words  same described informal definition above acceptance infinite words  omega automaton cannot final states  infinite words never terminate  rather  acceptance word decided looking infinite sequence visited states run probabilistic acceptance  an automaton need strictly accept reject input  it may accept input probability zero one  for example  quantum finite automaton  geometric automaton metric automaton probabilistic acceptance different combinations variations produce many classes automaton automata theory subject matter studies properties various types automata  for example  following questions studied given type automata which class formal languages recognizable type automata   recognizable languages are certain automata closed union  intersection  complementation formal languages   closure properties how expressive type automata terms recognizing class formal languages  and  relative expressive power   language hierarchy automata theory also studies existence nonexistence effective algorithms solve problems similar following list does automaton accept input word   emptiness checking is possible transform given non-deterministic automaton deterministic automaton without changing recognizable language   determinization for given formal language  smallest automaton recognizes   minimization    classes automata   the following incomplete list types automata     discrete  continuous  hybrid automata    normally automata theory describes states abstract machines discrete automata  analog automata continuous automata  hybrid discrete-continuous automata  use digital data  analog data continuous time  digital analog data  respectively    hierarchy terms powers   the following incomplete hierarchy terms powers different types virtual machines  the hierarchy reflects nested categories languages machines able accept    applications   each model automata theory plays important roles several applied areas  finite automata used text processing  compilers  hardware design  context-free grammar  cfgs  used programming languages artificial intelligence  originally  cfgs used study human languages  cellular automata used field artificial life  famous example john conway game life  some examples could explained using automata theory biology include mollusk pine cones growth pigmentation patterns  going  theory suggesting whole universe computed sort discrete automaton  advocated scientists  the idea originated work konrad zuse  popularized america edward fredkin  automata also appear theory finite fields  set irreducible polynomials written composition degree two polynomials fact regular language another problem automata used induction regular languages    automata simulators   automata simulators pedagogical tools used teach  learn research automata theory  an automata simulator takes input description automaton simulates working arbitrary input string  the description automaton entered several ways  an automaton defined symbolic language  specification may entered predesigned form transition diagram may drawn clicking dragging mouse  well known automata simulators include turing world  jflap  vas  tags simstudio    connection category theory   one define several distinct categories automata following automata classification different types described previous section  the mathematical category deterministic automata  sequential machines sequential automata  turing machines automata homomorphisms defining arrows automata cartesian closed category  categorical limits colimits  an automata homomorphism maps quintuple automaton ai onto quintuple another automaton  aj  automata homomorphisms also considered automata transformations semigroup homomorphisms  state space  s  automaton defined semigroup sg  monoids also considered suitable setting automata monoidal categories categories variable automataone could also define variable automaton  sense norbert wiener book the human use human beings via endomorphisms                               a                                                                  a                                                       displaystyle a   a       then  one show variable automata homomorphisms form mathematical group  in case non-deterministic  complex kinds automata  latter set endomorphisms may become  however  variable automaton groupoid  therefore  general case  categories variable automata kind categories groupoids groupoid categories  moreover  category reversible automata  -category  also subcategory  -category groupoids  groupoid category    see also   boolean differential calculus   references      further reading   john e  hopcroft  rajeev motwani  jeffrey d  ullman         introduction automata theory  languages  computation   nd ed    pearson education  isbn    - -   -     -  cs  maint  uses authors parameter  link michael sipser         introduction theory computation  pws publishing  isbn    - -   -     -   part one  automata languages  chapters      pp          section      decidable languages  pp           section      undecidable problems language theory  pp          elaine rich         automata  computability complexity  theory applications  pearson  isbn    - -  -      -  salomaa  arto         computation automata  encyclopedia mathematics its applications      cambridge university press  isbn    - -   -     -   zbl            anderson  james a          automata theory modern applications  with contributions tom head  cambridge  cambridge university press  isbn    - -   -     -   zbl            conway  j h          regular algebra finite machines  chapman hall mathematics series  london  chapman   hall  zbl            john m  howie        automata languages  clarendon press isbn  -  -      -  mr       sakarovitch  jacques         elements automata theory  translated french reuben thomas  cambridge university press  isbn    - -   -     -   zbl            james p  schmeiser  david t  barnard         producing top-down parse order bottom-up parsing  elsevier north-holland cs  maint  uses authors parameter  link igor aleksander  f keith hanna         automata theory   an engineering approach  new york  crane russak  isbn    - -    -    -  cs  maint  uses authors parameter  link marvin minsky         computation   finite infinite machines  princeton  n j   prentice hall john c  martin         introduction languages the theory computation  new york  ny        mcgraw hill  isbn    - -  -      -  cs  maint  location  link    external links   visual automata simulator  tool simulating  visualizing transforming finite-state automata turing machines  jean bovetjflapdk brics automatonlibfa
a programming language formal language comprising set strings produce various kinds machine code output  programming languages one kind computer language  used computer programming implement algorithms most programming languages consist instructions computers  there programmable machines use set specific instructions  rather general programming languages  since early      programs used direct behavior machines jacquard looms  music boxes player pianos  the programs machines  player piano scrolls  produce different behavior response different inputs conditions thousands different programming languages created  created every year  many programming languages written imperative form  i e   sequence operations perform  languages use declarative form  i e  desired result specified  achieve  the description programming language usually split two components syntax  form  semantics  meaning   some languages defined specification document  example  c programming language specified iso standard  languages  perl  dominant implementation treated reference  some languages  basic language defined standard extensions taken dominant implementation common  programming language theory subfield computer science deals design  implementation  analysis  characterization  classification programming languages    definitions   a programming language notation writing programs  specifications computation algorithm  some authors restrict term  programming language  languages express possible algorithms  traits often considered important constitutes programming language include function targeta computer programming language language used write computer programs  involves computer performing kind computation algorithm possibly control external devices printers  disk drives  robots  on  for example  postscript programs frequently created another program control computer printer display  more generally  programming language may describe computation  possibly abstract  machine  it generally accepted complete specification programming language includes description  possibly idealized  machine processor language  in practical contexts  programming language involves computer  consequently  programming languages usually defined studied way  programming languages differ natural languages natural languages used interaction people  programming languages also allow humans communicate instructions machines abstractionsprogramming languages usually contain abstractions defining manipulating data structures controlling flow execution  the practical necessity programming language support adequate abstractions expressed abstraction principle  this principle sometimes formulated recommendation programmer make proper use abstractions expressive powerthe theory computation classifies languages computations capable expressing  all turing-complete languages implement set algorithms  ansi iso sql-   charity examples languages turing complete  yet often called programming languages markup languages like xml  html  troff  define structured data  usually considered programming languages  programming languages may  however  share syntax markup languages computational semantics defined  xslt  example  turing complete language entirely using xml syntax  moreover  latex  mostly used structuring documents  also contains turing complete subset the term computer language sometimes used interchangeably programming language  however  usage terms varies among authors  including exact scope each  one usage describes programming languages subset computer languages  similarly  languages used computing different goal expressing computer programs generically designated computer languages  for instance  markup languages sometimes referred computer languages emphasize meant used programming another usage regards programming languages theoretical constructs programming abstract machines  computer languages subset thereof runs physical computers  finite hardware resources  john c  reynolds emphasizes formal specification languages much programming languages languages intended execution  he also argues textual even graphical input formats affect behavior computer programming languages  despite fact commonly turing-complete  remarks ignorance programming language concepts reason many flaws input formats    history       early developments    very early computers  colossus  programmed without help stored program  modifying circuitry setting banks physical controls slightly later  programs could written machine language  programmer writes instruction numeric form hardware execute directly  for example  instruction add value two memory locations might consist   numbers   opcode  selects  add  operation  two memory locations  the programs  decimal binary form  read punched cards  paper tape  magnetic tape toggled switches front panel computer   machine languages later termed first-generation programming languages   gl  the next step development so-called second-generation programming languages   gl  assembly languages  still closely tied instruction set architecture specific computer  these served make program much human-readable relieved programmer tedious error-prone address calculations the first high-level programming languages  third-generation programming languages   gl   written     s  an early high-level programming language designed computer plankalk l  developed german z  konrad zuse            however  implemented           john mauchly short code  proposed       one first high-level languages ever developed electronic computer  unlike machine code  short code statements represented mathematical expressions understandable form  however  program translated machine code every time ran  making process much slower running equivalent machine code at university manchester  alick glennie developed autocode early     s  as programming language  used compiler automatically convert language machine code  the first code compiler developed      mark   computer university manchester considered first compiled high-level programming language the second autocode developed mark   r  a  brooker      called  mark   autocode   brooker also developed autocode ferranti mercury     conjunction university manchester  the version edsac   devised d  f  hartley university cambridge mathematical laboratory       known edsac   autocode  straight development mercury autocode adapted local circumstances noted object code optimisation source-language diagnostics advanced time  a contemporary separate thread development  atlas autocode developed university manchester atlas   machine in       fortran invented ibm john backus  it first widely used high-level general purpose programming language functional implementation  opposed design paper  it still popular language high-performance computing used programs benchmark rank world fastest supercomputers another early programming language devised grace hopper us  called flow-matic  it developed univac i remington rand period            hopper found business data processing customers uncomfortable mathematical notation  early       team wrote specification english programming language implemented prototype  the flow-matic compiler became publicly available early      substantially complete       flow-matic major influence design cobol  since direct descendant aimaco actual use time     refinement    the increased use high-level languages introduced requirement low-level programming languages system programming languages  these languages  varying degrees  provide facilities assembly languages high-level languages  they used perform tasks require direct access hardware facilities still provide higher-level control structures error-checking the period     late     brought development major language paradigms use apl introduced array programming influenced functional programming algol refined structured procedural programming discipline language specification   revised report algorithmic language algol     became model later language specifications written lisp  implemented       first dynamically typed functional programming language in      simula first language designed support object-oriented programming  mid-     smalltalk followed first  purely  object-oriented language c developed           system programming language unix operating system remains popular prolog  designed       first logic programming language in       ml built polymorphic type system top lisp  pioneering statically typed functional programming languages each languages spawned descendants  modern programming languages count least one ancestry the         also saw considerable debate merits structured programming  whether programming languages designed support it  edsger dijkstra  famous      letter published communications acm  argued goto statements eliminated  higher level  programming languages     consolidation growth    the     years relative consolidation  c   combined object-oriented systems programming  the united states government standardized ada  systems programming language derived pascal intended use defense contractors  in japan elsewhere  vast sums spent investigating so-called  fifth-generation  languages incorporated logic programming constructs  the functional languages community moved standardize ml lisp  rather inventing new paradigms  movements elaborated upon ideas invented previous decades one important trend language design programming large-scale systems     increased focus use modules large-scale organizational units code  modula-   ada  ml developed notable module systems      often wedded generic programming constructs the rapid growth internet mid-    created opportunities new languages  perl  originally unix scripting tool first released       became common dynamic websites  java came used server-side programming  bytecode virtual machines became popular commercial settings promise  write  run anywhere   ucsd pascal popular time early       these developments fundamentally novel  rather  refinements many existing languages paradigms  although syntax often based c family programming languages  programming language evolution continues  industry research  current directions include security reliability verification  new kinds modularity  mixins  delegates  aspects   database integration microsoft linq fourth-generation programming languages   gl  computer programming languages aim provide higher level abstraction internal computer hardware details  gls  fifth-generation programming languages   gl  programming languages based solving problems using constraints given program  rather using algorithm written programmer    elements   all programming languages primitive building blocks description data processes transformations applied  like addition two numbers selection item collection   these primitives defined syntactic semantic rules describe structure meaning respectively     syntax    a programming language surface form known syntax  most programming languages purely textual  use sequences text including words  numbers  punctuation  much like written natural languages  on hand  programming languages graphical nature  using visual relationships symbols specify program the syntax language describes possible combinations symbols form syntactically correct program  the meaning given combination symbols handled semantics  either formal hard-coded reference implementation   since languages textual  article discusses textual syntax programming language syntax usually defined using combination regular expressions  lexical structure  backus naur form  grammatical structure   below simple grammar  based lisp this grammar specifies following expression either atom list atom either number symbol number unbroken sequence one decimal digits  optionally preceded plus minus sign symbol letter followed zero characters  excluding whitespace   anda list matched pair parentheses  zero expressions inside it the following examples well-formed token sequences grammar             b c         not syntactically correct programs semantically correct  many syntactically correct programs nonetheless ill-formed  per language rules  may  depending language specification soundness implementation  result error translation execution  in cases  programs may exhibit undefined behavior  even program well-defined within language  may still meaning intended person wrote it using natural language example  may possible assign meaning grammatically correct sentence sentence may false  colorless green ideas sleep furiously   grammatically well-formed generally accepted meaning  john married bachelor   grammatically well-formed expresses meaning cannot true the following c language fragment syntactically correct  performs operations semantically defined  operation  p      meaning value complex type p- im defined value p null pointer  if type declaration first line omitted  program would trigger error undefined variable p compilation  however  program would still syntactically correct since type declarations provide semantic information the grammar needed specify programming language classified position chomsky hierarchy  the syntax programming languages specified using type-  grammar  i e   context-free grammars  some languages  including perl lisp  contain constructs allow execution parsing phase  languages constructs allow programmer alter behavior parser make syntax analysis undecidable problem  generally blur distinction parsing execution  in contrast lisp macro system perl begin blocks  may contain general computations  c macros merely string replacements require code execution     semantics    the term semantics refers meaning languages  opposed form  syntax       static semantics     the static semantics defines restrictions structure valid texts hard impossible express standard syntactic formalisms  for compiled languages  static semantics essentially include semantic rules checked compile time  examples include checking every identifier declared used  languages require declarations  labels arms case statement distinct  many important restrictions type  like checking identifiers used appropriate context  e g  adding integer function name   subroutine calls appropriate number type arguments  enforced defining rules logic called type system  other forms static analyses like data flow analysis may also part static semantics  newer programming languages like java c  definite assignment analysis  form data flow analysis  part static semantics      dynamic semantics     once data specified  machine must instructed perform operations data  for example  semantics may define strategy expressions evaluated values  manner control structures conditionally execute statements  the dynamic semantics  also known execution semantics  language defines various constructs language produce program behavior  there many ways defining execution semantics  natural language often used specify execution semantics languages commonly used practice  a significant amount academic research went formal semantics programming languages  allow execution semantics specified formal manner  results field research seen limited application programming language design implementation outside academia     type system    a type system defines programming language classifies values expressions types  manipulate types interact  the goal type system verify usually enforce certain level correctness programs written language detecting certain incorrect operations  any decidable type system involves trade-off  rejects many incorrect programs  also prohibit correct  albeit unusual programs  in order bypass downside  number languages type loopholes  usually unchecked casts may used programmer explicitly allow normally disallowed operation different types  in typed languages  type system used type check programs  number languages  usually functional ones  infer types  relieving programmer need write type annotations  the formal design study type systems known type theory      typed versus untyped languages     a language typed specification every operation defines types data operation applicable  for example  data represented  text quotes  string  many programming languages dividing number string meaning executed  the invalid operation may detected program compiled   static  type checking  rejected compiler compilation error message  may detected program running   dynamic  type checking   resulting run-time exception  many languages allow function called exception handler handle exception  example  always return  -   result a special case typed languages single-typed languages  these often scripting markup languages  rexx sgml  one data type  commonly character strings used symbolic numeric data in contrast  untyped language  assembly languages  allows operation performed data  generally sequences bits various lengths  high-level untyped languages include bcpl  tcl  varieties forth in practice  languages considered typed type theory  verifying rejecting operations   modern languages offer degree typing  many production languages provide means bypass subvert type system  trading type-safety finer control program execution  see casting       static versus dynamic typing     in static typing  expressions types determined prior program executed  typically compile-time  for example          integer expressions  cannot passed function expects string  stored variable defined hold dates statically typed languages either manifestly typed type-inferred  in first case  programmer must explicitly write types certain textual positions  example  variable declarations   in second case  compiler infers types expressions declarations based context  most mainstream statically typed languages  c    c  java  manifestly typed  complete type inference traditionally associated less mainstream languages  haskell ml  however  many manifestly typed languages support partial type inference  example  c    java c  infer types certain limited cases  additionally  programming languages allow types automatically converted types  example  int used program expects float dynamic typing  also called latent typing  determines type-safety operations run time  words  types associated run-time values rather textual expressions  as type-inferred languages  dynamically typed languages require programmer write explicit type annotations expressions  among things  may permit single variable refer values different types different points program execution  however  type errors cannot automatically detected piece code actually executed  potentially making debugging difficult  lisp  smalltalk  perl  python  javascript  ruby examples dynamically typed languages      weak strong typing     weak typing allows value one type treated another  example treating string number  this occasionally useful  also allow kinds program faults go undetected compile time even run time strong typing prevents program faults  an attempt perform operation wrong type value raises error  strongly typed languages often termed type-safe safe an alternative definition  weakly typed  refers languages  perl javascript  permit large number implicit type conversions  in javascript  example  expression     x implicitly converts x number  conversion succeeds even x null  undefined  array  string letters  such implicit conversions often useful  mask programming errors strong static generally considered orthogonal concepts  usage literature differs  some use term strongly typed mean strongly  statically typed   even confusingly  mean simply statically typed  thus c called strongly typed weakly  statically typed it may seem odd professional programmers c could  weakly  statically typed   however  notice use generic pointer  void  pointer  allow casting pointers pointers without needing explicit cast  this extremely similar somehow casting array bytes kind datatype c without using explicit cast   int   char      standard library run-time system    most programming languages associated core library  sometimes known  standard library   especially included part published language standard   conventionally made available implementations language  core libraries typically include definitions commonly used algorithms  data structures  mechanisms input output the line language core library differs language language  in cases  language designers may treat library separate entity language  however  language core library often treated part language users  language specifications even require library made available implementations  indeed  languages designed meanings certain syntactic constructs cannot even described without referring core library  for example  java  string literal defined instance java lang string class  similarly  smalltalk  anonymous function expression   block   constructs instance library blockcontext class  conversely  scheme contains multiple coherent subsets suffice construct rest language library macros  language designers even bother say portions language must implemented language constructs  must implemented parts library    design implementation   programming languages share properties natural languages related purpose vehicles communication  syntactic form separate semantics  showing language families related languages branching one another  but artificial constructs  also differ fundamental ways languages evolved usage  a significant difference programming language fully described studied entirety since precise finite definition  by contrast  natural languages changing meanings given users different communities  while constructed languages also artificial languages designed ground specific purpose  lack precise complete semantic definition programming language has many programming languages designed scratch  altered meet new needs  combined languages  many eventually fallen disuse  although attempts design one  universal  programming language serves purposes  failed generally accepted filling role  the need diverse programming languages arises diversity contexts languages used programs range tiny scripts written individual hobbyists huge systems written hundreds programmers programmers range expertise novices need simplicity else experts may comfortable considerable complexity programs must balance speed  size  simplicity systems ranging microcontrollers supercomputers programs may written change generations  may undergo continual modification programmers may simply differ tastes  may accustomed discussing problems expressing particular language one common trend development programming languages add ability solve problems using higher level abstraction  the earliest programming languages tied closely underlying hardware computer  as new programming languages developed  features added let programmers express ideas remote simple translation underlying hardware instructions  because programmers less tied complexity computer  programs computing less effort programmer  this lets write functionality per time unit natural language programming proposed way eliminate need specialized language programming  however  goal remains distant benefits open debate  edsger w  dijkstra took position use formal language essential prevent introduction meaningless constructs  dismissed natural language programming  foolish   alan perlis similarly dismissive idea  hybrid approaches taken structured english sql a language designers users must construct number artifacts govern enable practice programming  the important artifacts language specification implementation     specification    the specification programming language artifact language users implementors use agree upon whether piece source code valid program language  behavior shall be a programming language specification take several forms  including following an explicit definition syntax  static semantics  execution semantics language  while syntax commonly specified using formal grammar  semantic definitions may written natural language  e g   c language   formal semantics  e g   standard ml scheme specifications  a description behavior translator language  e g   c   fortran specifications   the syntax semantics language inferred description  may written natural formal language a reference model implementation  sometimes written language specified  e g   prolog ansi rexx   the syntax semantics language explicit behavior reference implementation     implementation    an implementation programming language provides way write programs language execute one configurations hardware software  there  broadly  two approaches programming language implementation  compilation interpretation  it generally possible implement language using either technique the output compiler may executed hardware program called interpreter  in implementations make use interpreter approach distinct boundary compiling interpreting  for instance  implementations basic compile execute source line time programs executed directly hardware usually run much faster interpreted software one technique improving performance interpreted programs just-in-time compilation  here virtual machine  execution  translates blocks bytecode going used machine code  direct execution hardware    proprietary languages   although most commonly used programming languages fully open specifications implementations  many programming languages exist proprietary programming languages implementation available single vendor  may claim proprietary language intellectual property  proprietary programming languages commonly domain specific languages internal scripting languages single product  proprietary languages used internally within vendor  others available external users some programming languages exist border proprietary open  example  oracle corporation asserts proprietary rights aspects java programming language  microsoft c  programming language  open implementations parts system  also common language runtime  clr  closed environment many proprietary languages widely used  spite proprietary nature  examples include matlab  vbscript  wolfram language   some languages may make transition closed open  example  erlang originally ericsson internal programming language    use   thousands different programming languages created  mainly computing field individual software projects commonly use five programming languages more programming languages differ forms human expression require greater degree precision completeness  when using natural language communicate people  human authors speakers ambiguous make small errors  still expect intent understood  however  figuratively speaking  computers  exactly told   cannot  understand  code programmer intended write  the combination language definition  program  program inputs must fully specify external behavior occurs program executed  within domain control program  on hand  ideas algorithm communicated humans without precision required execution using pseudocode  interleaves natural language code written programming language a programming language provides structured mechanism defining pieces data  operations transformations may carried automatically data  a programmer uses abstractions present language represent concepts involved computation  these concepts represented collection simplest elements available  called primitives   programming process programmers combine primitives compose new programs  adapt existing ones new uses changing environment programs computer might executed batch process without human interaction  user might type commands interactive session interpreter  in case  commands  simply programs  whose execution chained together  when language run commands interpreter  unix shell command-line interface   without compiling  called scripting language     measuring language usage    determining widely used programming language difficult since definition usage varies context  one language may occupy greater number programmer hours  different one lines code  third may consume cpu time  some languages popular particular kinds applications  for example  cobol still strong corporate data center  often large mainframes  fortran scientific engineering applications  ada aerospace  transportation  military  real-time embedded applications  c embedded applications operating systems  other languages regularly used write many different kinds applications various methods measuring language popularity  subject different bias measured  proposed counting number job advertisements mention languagethe number books sold teach describe languageestimates number existing lines code written language    may underestimate languages often found public searchescounts language references  i e   name language  found using web search engine combining averaging information various internet sites  stackify com reported ten popular programming languages  descending order overall popularity   java  c  c    python  c   javascript  vb  net  r  php  matlab    dialects  flavors implementations   a dialect programming language data exchange language  relatively small  variation extension language change intrinsic nature  with languages scheme forth  standards may considered insufficient  inadequate illegitimate implementors  often deviate standard  making new dialect  in cases  dialect created use domain-specific language  often subset  in lisp world  languages use basic s-expression syntax lisp-like semantics considered lisp dialects  although vary wildly   say  racket clojure  as common one language several dialects  become quite difficult inexperienced programmer find right documentation  the basic programming language many dialects the explosion forth dialects led saying  if seen one forth    seen one forth     taxonomies   there overarching classification scheme programming languages  a given programming language usually single ancestor language  languages commonly arise combining elements several predecessor languages new ideas circulation time  ideas originate one language diffuse throughout family related languages  leap suddenly across familial gaps appear entirely different family the task complicated fact languages classified along multiple axes  for example  java object-oriented language  encourages object-oriented organization  concurrent language  contains built-in constructs running multiple threads parallel   python object-oriented scripting language in broad strokes  programming languages divide programming paradigms classification intended domain use  general-purpose programming languages distinguished domain-specific programming languages  traditionally  programming languages regarded describing computation terms imperative sentences  i e  issuing commands  these generally called imperative programming languages  a great deal research programming languages aimed blurring distinction program set instructions program assertion desired answer  main feature declarative programming  more refined paradigms include procedural programming  object-oriented programming  functional programming  logic programming  languages hybrids paradigms multi-paradigmatic  an assembly language much paradigm direct model underlying machine architecture  by purpose  programming languages might considered general purpose  system programming languages  scripting languages  domain-specific languages  concurrent distributed languages  combination   some general purpose languages designed largely educational goals a programming language may also classified factors unrelated programming paradigm  for instance  programming languages use english language keywords  minority not  other languages may classified deliberately esoteric not    see also      references      further reading      external links   
programming paradigms way classify programming languages based features  languages classified multiple paradigms some paradigms concerned mainly implications execution model language  allowing side effects  whether sequence operations defined execution model   other paradigms concerned mainly way code organized  grouping code units along state modified code   yet others concerned mainly style syntax grammar common programming paradigms include imperative programmer instructs machine change state procedural groups instructions procedures object-oriented groups instructions part state operate declarative programmer merely declares properties desired result  compute itfunctional desired result declared value series function applications logic desired result declared answer question system facts rules mathematical desired result declared solution optimization problemreactive desired result declared data streams propagation changesymbolic techniques reflection  allow program refer  might also considered programming paradigm  however  compatible major paradigms thus real paradigm right for example  languages fall imperative paradigm two main features  state order operations occur  constructs explicitly control order  allow side effects  state modified one point time  within one unit code  later read different point time inside different unit code   the communication units code explicit   meanwhile  object-oriented programming  code organized objects contain state modified code part object   most object-oriented languages also imperative languages   in contrast  languages fit declarative paradigm state order execute operations   instead  supply number available operations system  along conditions allowed execute   the implementation language execution model tracks operations free execute chooses order independently  more  comparison multi-paradigm programming languages    overview   just software engineering  process  defined differing methodologies  programming languages  models computation  defined differing paradigms  some languages designed support one paradigm  smalltalk supports object-oriented programming  haskell supports functional programming   programming languages support multiple paradigms  object pascal  c    java  javascript  c   scala  visual basic  common lisp  scheme  perl  php  python  ruby  oz  f    for example  programs written c    object pascal php purely procedural  purely object-oriented  contain elements paradigms  software designers programmers decide use paradigm elements in object-oriented programming  programs treated set interacting objects  in functional programming  programs treated sequence stateless function evaluations  when programming computers systems many processors  process-oriented programming  programs treated sets concurrent processes act logical shared data structures many programming paradigms well known techniques forbid enable  for instance  pure functional programming disallows use side-effects  structured programming disallows use goto statement  partly reason  new paradigms often regarded doctrinaire overly rigid accustomed earlier styles  yet  avoiding certain techniques make easier understand program behavior  prove theorems program correctness programming paradigms also compared programming models  allows invoking execution model using api  programming models also classified paradigms based features execution model for parallel computing  using programming model instead language common   the reason details parallel hardware leak abstractions used program hardware   this causes programmer to map patterns algorithm onto patterns execution model  inserted due leakage hardware abstraction    as consequence  one parallel programming language maps well computation problems   thus  convenient use base sequential language insert api calls parallel execution models via programming model   such parallel programming models classified according abstractions reflect hardware  shared memory  distributed memory message passing  notions place visible code  forth   these considered flavors programming paradigm apply parallel languages programming models    criticism   some programming language researchers criticise notion paradigms classification programming languages  e g  harper  krishnamurthi   they argue many programming languages cannot strictly classified one paradigm  rather include features several paradigms  see comparison multi-paradigm programming languages    history   different approaches programming developed time  identified either time retrospectively  an early approach consciously identified structured programming  advocated since mid     s  the concept  programming paradigm  dates least       turing award lecture robert w  floyd  entitled the paradigms programming  cites notion paradigm used thomas kuhn the structure scientific revolutions            machine code    the lowest-level programming paradigms machine code  directly represents instructions  contents program memory  sequence numbers  assembly language machine instructions represented mnemonics memory addresses given symbolic labels  these sometimes called first- second-generation languages in      assembly languages developed support library copy quite sophisticated conditional macro generation preprocessing abilities  call  subroutines   external variables common sections  globals   enabling significant code re-use isolation hardware specifics via use logical operators read write get put  assembly still  used time-critical systems often embedded systems gives direct control machine does     procedural languages    the next advance development procedural languages  these third-generation languages  first described high-level languages  use vocabulary related problem solved  for example common business oriented language  cobol     uses terms like file  move copy formula translation  fortran     using mathematical language terminology  developed mainly scientific engineering problems algorithmic language  algol     focused appropriate language define algorithms  using mathematical language terminology  targeting scientific engineering problems  like fortran programming language one  pl i     hybrid commercial-scientific general purpose language supporting pointers beginners all purpose symbolic instruction code  basic     developed enable people write programs c    general-purpose programming language  initially developed dennis ritchie           at t bell labs all languages follow procedural paradigm  that  describe  step step  exactly procedure  according particular programmer least  followed solve specific problem  the efficacy efficiency solution therefore entirely subjective highly dependent programmer experience  inventiveness  ability     object-oriented programming    following widespread use procedural languages  object-oriented programming  oop  languages created  simula  smalltalk  c    eiffel  python  php  java  c   in languages  data methods manipulate kept one unit called object   with perfect encapsulation  one distinguishing features oop  way another object user would able access data via object methods  thus  object inner workings may changed without affecting code uses object  there still controversy raised alexander stepanov  richard stallman programmers  concerning efficacy oop paradigm versus procedural paradigm  the need every object associative methods leads skeptics associate oop software bloat  attempt resolve dilemma came polymorphism because object-oriented programming considered paradigm  language  possible create even object-oriented assembler language  high level assembly  hla  example fully supports advanced data types object-oriented assembly language programming    despite early origins  thus  differing programming paradigms seen rather like motivational memes advocates  rather necessarily representing progress one level next  precise comparisons competing paradigms  efficacy frequently made difficult new differing terminology applied similar entities processes together numerous implementation distinctions across languages     further paradigms    literate programming  form imperative programming  structures programs human-centered web  hypertext essay  documentation integral program  program structured following logic prose exposition  rather compiler convenience independent imperative branch  declarative programming paradigms developed  in languages  computer told problem  solve problem    program structured set properties find expected result  procedure follow  given database set rules  computer tries find solution matching desired properties  an archetype declarative language fourth generation language sql  family functional languages logic programming functional programming subset declarative programming  programs written using paradigm use functions  blocks code intended behave like mathematical functions  functional languages discourage changes value variables assignment  making great deal use recursion instead the logic programming paradigm views computation automated reasoning body knowledge  facts problem domain expressed logic formulas  programs executed applying inference rules answer problem found  set formulas proved inconsistent symbolic programming paradigm describes programs able manipulate formulas program components data   programs thus effectively modify  appear  learn   making suited applications artificial intelligence  expert systems  natural-language processing computer games   languages support paradigm include lisp prolog differentiable programming structures programs differentiated throughout  usually via automatic differentiation    support multiple paradigms   most programming languages support one programming paradigm allow programmers use suitable programming style associated language constructs given job    see also      references      external links   classification principal programming paradigmshow programming paradigms evolve get adopted 
object-oriented programming  oop  programming paradigm based concept  objects   contain data code  data form fields  often known attributes properties   code  form procedures  often known methods   a feature objects object procedures access often modify data fields  objects notion self   in oop  computer programs designed making objects interact one another  oop languages diverse  popular ones class-based  meaning objects instances classes  also determine types many widely used programming languages  c    java  python  etc   multi-paradigm support object-oriented programming greater lesser degree  typically combination imperative  procedural programming  significant object-oriented languages include java c   c  python r php visual basic net javascript ruby perl simscript object pascal objective-c dart swift scala kotlin common lisp matlab andsmalltalk    history   terminology invoking  objects   oriented  modern sense object-oriented programming made first appearance mit late     early     s  in environment artificial intelligence group  early        object  could refer identified items  lisp atoms  properties  attributes  alan kay later cited detailed understanding lisp internals strong influence thinking      another early mit example sketchpad created ivan sutherland            glossary      technical report based dissertation sketchpad  sutherland defined notions  object   instance   class concept covered  master   definition    albeit specialized graphical interaction also  mit algol version  aed-   established direct link data structures   plexes   dialect  procedures  prefiguring later termed  messages    methods    member functions  simula introduced important concepts today essential part object-oriented programming  class object  inheritance  dynamic binding  the object-oriented simula programming language used mainly researchers involved physical modelling  models study improve movement ships content cargo ports in      first version smalltalk programming language developed xerox parc alan kay  dan ingalls adele goldberg  smaltalk-   included programming environment dynamically typed  first interpreted  compiled  smalltalk became noted application object orientation language-level graphical development environment  smalltalk went various versions interest language grew  while smalltalk influenced ideas introduced simula    designed fully dynamic system classes could created modified dynamically in      smalltalk influenced lisp community incorporate object-based techniques introduced developers via lisp machine  experimentation various extensions lisp  loops flavors introducing multiple inheritance mixins  eventually led common lisp object system  integrates functional programming object-oriented programming allows extension via meta-object protocol  in      attempts design processor architectures included hardware support objects memory successful  examples include intel iapx     linn smart rekursiv in       goldberg edited august issue byte magazine  introducing smalltalk object-oriented programming wider audience  in       association computing machinery organised first conference object-oriented programming  systems  languages  applications  oopsla   unexpectedly attended       people  in mid-    objective-c developed brad cox  used smalltalk itt inc   bjarne stroustrup  used simula phd thesis  eventually went create object-oriented c    in       bertrand meyer also produced first design eiffel language  focused software quality  eiffel purely object-oriented programming language notation supporting entire software lifecycle  meyer described eiffel software development method  based small number key ideas software engineering computer science  object-oriented software construction  essential quality focus eiffel meyer reliability mechanism  design contract  integral part method language in early mid-    object-oriented programming developed dominant programming paradigm programming languages supporting techniques became widely available  these included visual foxpro      c    delphi  its dominance enhanced rising popularity graphical user interfaces  rely heavily upon object-oriented programming techniques  an example closely related dynamic gui library oop language found cocoa frameworks mac os x  written objective-c  object-oriented  dynamic messaging extension c based smalltalk  oop toolkits also enhanced popularity event-driven programming  although concept limited oop  at eth z rich  niklaus wirth colleagues also investigating topics data abstraction modular programming  although common use     earlier   modula-         included  succeeding design  oberon  included distinctive approach object orientation  classes  such object-oriented features added many previously existing languages  including ada  basic  fortran  pascal  cobol  adding features languages initially designed often led problems compatibility maintainability code more recently  number languages emerged primarily object-oriented  also compatible procedural methodology  two languages python ruby  probably commercially important recent object-oriented languages java  developed sun microsystems  well c  visual basic net  vb net   designed microsoft  net platform  each two frameworks shows  way  benefit using oop creating abstraction implementation  vb net c  support cross-language inheritance  allowing classes defined one language subclass classes defined language    features   object-oriented programming uses objects  associated techniques structures supported directly languages claim support oop   the features listed common among languages considered strongly class- object-oriented  multi-paradigm oop support   notable exceptions mentioned     shared non-oop languages    variables store information formatted small number built-in data types like integers alphanumeric characters   this may include data structures like strings  lists  hash tables either built-in result combining variables using memory pointers procedures   also known functions  methods  routines  subroutines   take input  generate output  manipulate data   modern languages include structured programming constructs like loops conditionals modular programming support provides ability group procedures files modules organizational purposes   modules namespaced identifiers one module conflict procedure variable sharing name another file module     objects classes    languages support object-oriented programming  oop  typically use inheritance code reuse extensibility form either classes prototypes  those use classes support two main concepts classes   definitions data format available procedures given type class object  may also contain data procedures  known class methods   i e  classes contain data members member functionsobjects   instances classesobjects sometimes correspond things found real world  for example  graphics program may objects  circle    square    menu   an online shopping system might objects  shopping cart    customer    product   sometimes objects represent abstract entities  like object represents open file  object provides service translating measurements u s  customary metric each object said instance particular class  example  object name field set  mary  might instance class employee    procedures object-oriented programming known methods  variables also known fields  members  attributes  properties   this leads following terms class variables   belong class whole  one copy oneinstance variables attributes   data belongs individual objects  every object copy onemember variables   refers class instance variables defined particular classclass methods   belong class whole access class variables inputs procedure callinstance methods   belong individual objects  access instance variables specific object called  inputs  class variablesobjects accessed somewhat like variables complex internal structure  many languages effectively pointers  serving actual references single instance said object memory within heap stack   they provide layer abstraction used separate internal external code  external code use object calling specific instance method certain set input parameters  read instance variable  write instance variable  objects created calling special type method class known constructor   a program may create many instances class runs  operate independently   this easy way procedures used different sets data object-oriented programming uses classes sometimes called class-based programming  prototype-based programming typically use classes  as result  significantly different yet analogous terminology used define concepts object instance in languages classes objects composed using concepts like traits mixins     class-based vs prototype-based    in class-based languages classes defined beforehand objects instantiated based classes  if two objects apple orange instantiated class fruit  inherently fruits guaranteed may handle way  e g  programmer expect existence attributes color sugar content ripe in prototype-based languages objects primary entities  no classes even exist  the prototype object another object object linked  every object one prototype link  one    new objects created based already existing objects chosen prototype  you may call two different objects apple orange fruit  object fruit exists  apple orange fruit prototype  the idea fruit class exist explicitly  equivalence class objects sharing prototype  the attributes methods prototype delegated objects equivalence class defined prototype  the attributes methods owned individually object may shared objects equivalence class  e g  attribute sugar content may unexpectedly present apple  only single inheritance implemented prototype     dynamic dispatch message passing    it responsibility object  external code  select procedural code execute response method call  typically looking method run time table associated object   this feature known dynamic dispatch  distinguishes object abstract data type  module   fixed  static  implementation operations instances   if call variability relies single type object called  i e  least one parameter object involved method choice   one speaks multiple dispatch a method call also known message passing   it conceptualized message  name method input parameters  passed object dispatch     encapsulation    encapsulation object-oriented programming concept binds together data functions manipulate data  keeps safe outside interference misuse  data encapsulation led important oop concept data hiding if class allow calling code access internal object data permits access methods  strong form abstraction information hiding known encapsulation   some languages  java  example  let classes enforce access restrictions explicitly  example denoting internal data private keyword designating methods intended use code outside class public keyword   methods may also designed public  private  intermediate levels protected  allows access class subclasses  objects different class    in languages  like python  enforced convention  example  private methods may names start underscore    encapsulation prevents external code concerned internal workings object   this facilitates code refactoring  example allowing author class change objects class represent data internally without changing external code  long  public  method calls work way    it also encourages programmers put code concerned certain set data class  organizes easy comprehension programmers   encapsulation technique encourages decoupling     composition  inheritance  delegation    objects contain objects instance variables  known object composition   for example  object employee class might contain  either directly pointer  object address class  addition instance variables like  first name   position    object composition used represent  has-a  relationships  every employee address  every employee object access place store address object  either directly embedded within  separate location addressed via pointer  languages support classes almost always support inheritance   this allows classes arranged hierarchy represents  is-a-type-of  relationships   for example  class employee might inherit class person   all data methods available parent class also appear child class names   for example  class person might define variables  first name   last name  method  make full name      these also available class employee  might add variables  position   salary    this technique allows easy re-use procedures data definitions  addition potentially mirroring real-world relationships intuitive way  rather utilizing database tables programming subroutines  developer utilizes objects user may familiar  objects application domain subclasses override methods defined superclasses  multiple inheritance allowed languages  though make resolving overrides complicated   some languages special support mixins  though language multiple inheritance  mixin simply class represent is-a-type-of relationship   mixins typically used add methods multiple classes   for example  class unicodeconversionmixin might provide method unicode ascii   included class filereader class webpagescraper  share common parent abstract classes cannot instantiated objects  exist purpose inheritance  concrete  classes instantiated   in java  final keyword used prevent class subclassed the doctrine composition inheritance advocates implementing has-a relationships using composition instead inheritance   for example  instead inheriting class person  class employee could give employee object internal person object  opportunity hide external code even class person many public attributes methods   some languages  like go support inheritance all the  open closed principle  advocates classes functions  open extension  closed modification  delegation another language feature used alternative inheritance     polymorphism    subtyping   form polymorphism   calling code agnostic class supported hierarchy operating   parent class one descendants   meanwhile  operation name among objects inheritance hierarchy may behave differently for example  objects type circle square derived common class called shape   the draw function type shape implements necessary draw calling code remain indifferent particular type shape drawn this another type abstraction simplifies code external class hierarchy enables strong separation concerns     open recursion    in languages support open recursion  object methods call methods object  including   typically using special variable keyword called self   this variable late-bound  allows method defined one class invoke another method defined later  subclass thereof    oop languages   simula        generally accepted first language primary features object-oriented language  it created making simulation programs  came called objects important information representation  smalltalk             another early example  one much theory oop developed  concerning degree object orientation  following distinctions made languages called  pure  oo languages  everything treated consistently object  primitives characters punctuation  way whole classes  prototypes  blocks  modules  etc  they designed specifically facilitate  even enforce  oo methods  examples  ruby  scala  smalltalk  eiffel  emerald  jade  self  raku languages designed mainly oo programming  procedural elements  examples  java  python  c    c   delphi object pascal  vb net languages historically procedural languages  extended oo features  examples  php  perl  visual basic  derived basic   matlab  cobol       fortran       abap  ada     pascal languages features objects  classes  methods  inheritance   distinctly original form  examples  oberon  oberon-  oberon-   languages abstract data type support may used resemble oo programming  without features object-orientation  this includes object-based prototype-based languages  examples  javascript  lua  modula-   clu chameleon languages support multiple paradigms  including oo  tcl stands among tcloo  hybrid object system supports prototype-based programming class-based oo     oop dynamic languages    in recent years  object-oriented programming become especially popular dynamic programming languages  python  powershell  ruby groovy dynamic languages built oop principles  perl php adding object-oriented features since perl   php    coldfusion since version   the document object model html  xhtml  xml documents internet bindings popular javascript ecmascript language  javascript perhaps best known prototype-based programming language  employs cloning prototypes rather inheriting class  contrast class-based programming   another scripting language takes approach lua     oop network protocol    the messages flow computers request services client-server environment designed linearizations objects defined class objects known client server   for example  simple linearized object would consist length field  code point identifying class  data value   a complex example would command consisting length code point command values consisting linearized objects representing command parameters   each command must directed server object whose class  superclass  recognizes command able provide requested service  clients servers best modeled complex object-oriented structures  distributed data management architecture  ddm  took approach used class objects define objects four levels formal hierarchy fields defining data values form messages  length  code point data values objects collections objects similar would found smalltalk program messages parameters managers similar ibm objects  directory files files consisting metadata records  managers conceptually provide memory processing resources contained objects a client server consisting managers necessary implement full processing environment  supporting aspects directory services  security concurrency control the initial version ddm defined distributed file services   it later extended foundation distributed relational database architecture  drda     design patterns   challenges object-oriented design addressed several approaches  most common known design patterns codified gamma et al   more broadly  term  design patterns  used refer general  repeatable  solution pattern commonly occurring problem software design  some commonly occurring problems implications solutions particular object-oriented development     inheritance behavioral subtyping    it intuitive assume inheritance creates semantic   relationship  thus infer objects instantiated subclasses always safely used instead instantiated superclass  this intuition unfortunately false oop languages  particular allow mutable objects  subtype polymorphism enforced type checker oop languages  mutable objects  cannot guarantee behavioral subtyping context  behavioral subtyping undecidable general  cannot implemented program  compiler   class object hierarchies must carefully designed  considering possible incorrect uses cannot detected syntactically  this issue known liskov substitution principle     gang four design patterns    design patterns  elements reusable object-oriented software influential book published      erich gamma  richard helm  ralph johnson  john vlissides  often referred humorously  gang four   along exploring capabilities pitfalls object-oriented programming  describes    common programming problems patterns solving them as april       book   th printing the book describes following patterns creational patterns      factory method pattern  abstract factory pattern  singleton pattern  builder pattern  prototype patternstructural patterns      adapter pattern  bridge pattern  composite pattern  decorator pattern  facade pattern  flyweight pattern  proxy patternbehavioral patterns       chain-of-responsibility pattern  command pattern  interpreter pattern  iterator pattern  mediator pattern  memento pattern  observer pattern  state pattern  strategy pattern  template method pattern  visitor pattern    object-orientation databases    both object-oriented programming relational database management systems  rdbmss  extremely common software today  since relational databases store objects directly  though rdbmss object-oriented features approximate   general need bridge two worlds  the problem bridging object-oriented programming accesses data patterns relational databases known object-relational impedance mismatch  there number approaches cope problem  general solution without downsides  one common approaches object-relational mapping  found ide languages visual foxpro libraries java data objects ruby rails  activerecord there also object databases used replace rdbmss  technically commercially successful rdbmss     real-world modeling relationships    oop used associate real-world objects processes digital counterparts  however  everyone agrees oop facilitates direct real-world mapping  see criticism section  real-world mapping even worthy goal  bertrand meyer argues object-oriented software construction program model world model part world   reality cousin twice removed   at time  principal limitations oop noted for example  circle-ellipse problem difficult handle using oop concept inheritance however  niklaus wirth  popularized adage known wirth law   software getting slower rapidly hardware becomes faster   said oop paper   good ideas looking glass    this paradigm closely reflects structure systems  real world   therefore well suited model complex systems complex behaviours   contrast kiss principle  steve yegge others noted natural languages lack oop approach strictly prioritizing things  objects nouns  actions  methods verbs   this problem may cause oop suffer convoluted solutions procedural programming     oop control flow    oop developed increase reusability maintainability source code  transparent representation control flow priority meant handled compiler  with increasing relevance parallel hardware multithreaded coding  developing transparent control flow becomes important  something hard achieve oop     responsibility- vs  data-driven design    responsibility-driven design defines classes terms contract   class defined around responsibility information shares  this contrasted wirfs-brock wilkerson data-driven design  classes defined around data-structures must held  the authors hold responsibility-driven design preferable     solid grasp guidelines    solid mnemonic invented michael feathers stands advocates five programming practices single responsibility principleopen closed principleliskov substitution principleinterface segregation principledependency inversion principlegrasp  general responsibility assignment software patterns  another set guidelines advocated craig larman    criticism   the oop paradigm criticised number reasons  including meeting stated goals reusability modularity  overemphasizing one aspect software design modeling  data objects  expense important aspects  computation algorithms  luca cardelli claimed oop code  intrinsically less efficient  procedural code  oop take longer compile  oop languages  extremely poor modularity properties respect class extension modification   tend extremely complex  the latter point reiterated joe armstrong  principal inventor erlang  quoted saying the problem object-oriented languages got implicit environment carry around them  you wanted banana got gorilla holding banana entire jungle a study potok et al  shown significant difference productivity oop procedural approaches christopher j  date stated critical comparison oop technologies  relational particular  difficult lack agreed-upon rigorous definition oop  however  date darwen proposed theoretical foundation oop uses oop kind customizable type system support rdbms in article lawrence krubner claimed compared languages  lisp dialects  functional languages  etc   oop languages unique strengths  inflict heavy burden unneeded complexity alexander stepanov compares object orientation unfavourably generic programming i find oop technically unsound  it attempts decompose world terms interfaces vary single type  to deal real problems need multisorted algebras   families interfaces span multiple types  i find oop philosophically unsound  it claims everything object  even true interesting   saying everything object saying nothing all paul graham suggested oop popularity within large companies due  large  frequently changing  groups mediocre programmers   according graham  discipline imposed oop prevents one programmer  much damage  leo brodie suggested connection standalone nature objects tendency duplicate code violation repeat principle software development steve yegge noted  opposed functional programming object oriented programming puts nouns first foremost  why would go lengths put one part speech pedestal  why one kind concept take precedence another  it oop suddenly made verbs less important way actually think  it strangely skewed perspective rich hickey  creator clojure  described object systems overly simplistic models real world  he emphasized inability oop model time properly  getting increasingly problematic software systems become concurrent eric s  raymond  unix programmer open-source software advocate  critical claims present object-oriented programming  one true solution   written object-oriented programming languages tend encourage thickly layered programs destroy transparency  raymond compares unfavourably approach taken unix c programming language rob pike  programmer involved creation utf-  go  called object-oriented programming  roman numerals computing  said oop languages frequently shift focus data structures algorithms types  furthermore  cites instance java professor whose  idiomatic  solution problem create six new classes  rather simply use lookup table    formal semantics   objects run-time entities object-oriented system  they may represent person  place  bank account  table data  item program handle there several attempts formalizing concepts used object-oriented programming  the following concepts constructs used interpretations oop concepts co algebraic data typesabstract data types  existential types  allow definition modules support dynamic dispatchrecursive typesencapsulated stateinheritancerecords basis understanding objects function literals stored fields  like functional-programming languages   actual calculi need considerably complex incorporate essential features oop  several extensions system f   deal mutable objects studied  allow subtype polymorphism parametric polymorphism  generics attempts find consensus definition theory behind objects proven successful  however  see abadi   cardelli  a theory objects formal definitions many oop concepts constructs   often diverge widely  for example  definitions focus mental activities  program structuring  one simpler definitions oop act using  map  data structures arrays contain functions pointers maps  syntactic scoping sugar top  inheritance performed cloning maps  sometimes called  prototyping      see also   comparison programming languages  object-oriented programming comparison programming paradigmscomponent-based software engineeringdesign contractobject associationobject databaseobject model referenceobject modeling languageobject-oriented analysis designobject-relational impedance mismatch  the third manifesto object-relational mapping    systems    cadescommon object request broker architecture  corba distributed component object modeldistributed data management architecturejeroo    modeling languages    idef interface description languagelepus uml   references      further reading   abadi  martin  luca cardelli         a theory objects  springer verlag  isbn    - -   -     -  abelson  harold  gerald jay sussman         structure interpretation computer programs  mit press  isbn    - -   -     -  armstrong  deborah j   february         the quarks object-oriented development   communications acm                   doi                          issn     -      s cid          booch  grady         object-oriented analysis design applications  addison-wesley  isbn    - -    -    -  eeles  peter  oliver sims         building business objects  john wiley   sons  isbn    - -   -     -  gamma  erich  richard helm  ralph johnson  john vlissides         design patterns  elements reusable object oriented software  addison-wesley  bibcode     dper book     g  isbn    - -   -     -  harmon  paul  william morrissey         the object technology casebook   lessons award-winning business applications  john wiley   sons  isbn    - -   -     -  jacobson  ivar         object-oriented software engineering  a use case-driven approach  addison-wesley  bibcode     oose book     j  isbn    - -   -     -  kay  alan  the early history smalltalk  archived original   april       retrieved    april      meyer  bertrand         object-oriented software construction  prentice hall  isbn    - -  -      -  pecinovsky  rudolf         oop   learn object oriented thinking   programming  bruckner publishing  isbn    -  -      - -  rumbaugh  james  michael blaha  william premerlani  frederick eddy  william lorensen         object-oriented modeling design  prentice hall  isbn    - -  -      -  schach  stephen         object-oriented classical software engineering  seventh edition  mcgraw-hill  isbn    - -  -      -  schreiner  axel-tobias         object oriented programming ansi-c  hanser  hdl            isbn    - -   -     -  taylor  david a          object-oriented information systems   planning implementation  john wiley   sons  isbn    - -   -     -  weisfeld  matt         the object-oriented thought process  third edition  addison-wesley  isbn    - -   -     -  west  david         object thinking  developer reference   microsoft press  isbn    - -    -    -     external links   introduction object oriented programming concepts  oop  more l w c  niroshdiscussion flaws oodoop concepts  java tutorials 
programming language theory  plt  branch computer science deals design  implementation  analysis  characterization  classification formal languages known programming languages individual features  it falls within discipline computer science  depending affecting mathematics  software engineering  linguistics even cognitive science  it become well-recognized branch computer science  active research area  results published numerous  journals dedicated plt  well general computer science engineering publications    history   in ways  history programming language theory predates even development programming languages themselves  the lambda calculus  developed alonzo church stephen cole kleene      considered world first programming language  even though intended model computation rather means programmers describe algorithms computer system  many modern functional programming languages described providing  thin veneer  lambda calculus  many easily described terms it the first programming language invented plankalk l  designed konrad zuse      publicly known       implemented        the first widely known successful high-level programming language fortran  developed           team ibm researchers led john backus  the success fortran led formation committee scientists develop  universal  computer language  result effort algol     separately  john mccarthy mit developed lisp  first language origins academia successful  with success initial efforts  programming languages became active topic research     beyond some key events history programming language theory since            noam chomsky developed chomsky hierarchy field linguistics  discovery directly impacted programming language theory branches computer science            the simula language developed ole-johan dahl kristen nygaard  widely considered first example object-oriented programming language  simula also introduced concept coroutines in       peter landin first realize church lambda calculus used model programming languages  he introduces secd machine  interprets  lambda expressions in       landin introduces j operator  essentially form continuation in       landin introduces iswim  abstract computer programming language article the next     programming languages  it influential design languages leading haskell programming language in       corrado b hm introduced programming language cuch  curry-church  in       christopher strachey publishes influential set lecture notes fundamental concepts programming languages  introducing terminology r-values  l-values  parametric polymorphism  ad hoc polymorphism in       j  roger hindley publishes the principal type-scheme object combinatory logic  later generalized hindley milner type inference algorithm in       tony hoare introduces hoare logic  form axiomatic semantics in       william alvin howard observed  high-level  proof system  referred natural deduction  directly interpreted intuitionistic version typed variant model computation known lambda calculus  this became known curry howard correspondence            in       dana scott first publishes work denotational semantics in       logic programming prolog developed thus allowing computer programs expressed mathematical logic a team scientists xerox parc led alan kay develop smalltalk  object-oriented language widely known innovative development environment in       john c  reynolds discovers system f  it already discovered      mathematical logician jean-yves girard from       gerald jay sussman guy steele develop scheme programming language  lisp dialect incorporating lexical scoping  unified namespace  elements actor model including first-class continuations backus       turing award lecture  assailed current state industrial languages proposed new class programming languages known function-level programming languages in       gordon plotkin introduces programming computable functions  abstract typed functional language in       robin milner introduces hindley milner type inference algorithm ml  type theory became applied discipline programming languages  application led tremendous advances type theory years            in       gordon plotkin publishes paper structured operational semantics in       gilles kahn published paper natural semantics there emerged process calculi  calculus communicating systems robin milner  communicating sequential processes model c  a  r  hoare  well similar models concurrency actor model carl hewitt in       release miranda sparks academic interest lazy-evaluated pure functional programming languages  a committee formed define open standard resulting release haskell     standard      bertrand meyer created methodology design contract incorporated eiffel programming language            gregor kiczales  jim des rivieres daniel g  bobrow published book the art metaobject protocol eugenio moggi philip wadler introduced use monads structuring programs written functional programming languages    sub-disciplines related fields   there several fields study either lie within programming language theory  profound influence  many considerable overlap  in addition  plt makes use many branches mathematics  including computability theory  category theory  set theory     formal semantics    formal semantics formal specification behaviour computer programs programming languages  three common approaches describe semantics  meaning  computer program denotational semantics  operational semantics axiomatic semantics     type theory    type theory study type systems   tractable syntactic method proving absence certain program behaviors classifying phrases according kinds values compute   many programming languages distinguished characteristics type systems     program analysis transformation    program analysis general problem examining program determining key characteristics  absence classes program errors   program transformation process transforming program one form  language  another form     comparative programming language analysis    comparative programming language analysis seeks classify programming languages different types based characteristics  broad categories programming languages often known programming paradigms     generic metaprogramming    metaprogramming generation higher-order programs  executed  produce programs  possibly different language  subset original language  result     domain-specific languages    domain-specific languages languages constructed efficiently solve problems particular part domain     compiler construction    compiler theory theory writing compilers  generally  translators   programs translate program written one language another form  the actions compiler traditionally broken syntax analysis  scanning parsing   semantic analysis  determining program   optimization  improving performance program indicated metric  typically execution speed  code generation  generation output equivalent program target language  often instruction set cpu      run-time systems    run-time systems refer development programming language runtime environments components  including virtual machines  garbage collection  foreign function interfaces    journals  publications  conferences   conferences primary venue presenting research programming languages  the well known conferences include symposium principles programming languages  popl   programming language design implementation  pldi   international conference functional programming  icfp   international conference object oriented programming  systems  languages applications  oopsla  international conference architectural support programming languages operating systems  asplos   notable journals publish plt research include acm transactions programming languages systems  toplas   journal functional programming  jfp   journal functional logic programming  higher-order symbolic computation    see also   sigplantimeline programming languagesvery high-level programming language   references      further reading   abadi  mart n cardelli  luca  a theory objects  springer-verlag michael j  c  gordon  programming language theory its implementation  prentice hall gunter  carl mitchell  john c   eds    theoretical aspects object oriented programming languages  types  semantics  language design  mit press harper  robert  practical foundations programming languages  draft version knuth  donald e          selected papers computer languages  stanford  california  center study language information mitchell  john c   foundations programming languages mitchell  john c   introduction programming language theory o hearn  peter  w  tennent  robert  d          algol-like languages  progress theoretical computer science  birkhauser  boston pierce  benjamin c          types programming languages  mit press pierce  benjamin c  advanced topics types programming languages pierce  benjamin c  et al          software foundations    external links   lambda ultimate  community weblog professional discussion repository documents programming language theory great works programming languages  collected benjamin c  pierce  university pennsylvania  classic papers programming languages logic  collected karl crary  carnegie mellon university  programming language research  directory mark leone programming language theory texts online  at utrecht university  -calculus  then   now dana s  scott acm turing centenary celebrationgrand challenges programming languages  panel session popl      
in programming language theory  semantics field concerned rigorous mathematical study meaning programming languages  it evaluating meaning syntactically valid strings defined specific programming language  showing computation involved  in case evaluation would syntactically invalid strings  result would non-computation  semantics describes processes computer follows executing program specific language  this shown describing relationship input output program  explanation program executed certain platform  hence creating model computation    overview   the field formal semantics encompasses following the definition semantic modelsthe relations different semantic modelsthe relations different approaches meaningthe relation computation underlying mathematical structures fields logic  set theory  model theory  category theory  etc it close links areas computer science programming language design  type theory  compilers interpreters  program verification model checking    approaches   there many approaches formal semantics  belong three major classes denotational semantics  whereby phrase language interpreted denotation  i e  conceptual meaning thought abstractly   such denotations often mathematical objects inhabiting mathematical space  requirement so   as practical necessity  denotations described using form mathematical notation  turn formalized denotational metalanguage   for example  denotational semantics functional languages often translate language domain theory  denotational semantic descriptions also serve compositional translations programming language denotational metalanguage used basis designing compilers operational semantics  whereby execution language described directly  rather translation    operational semantics loosely corresponds interpretation  although  implementation language  interpreter generally mathematical formalism   operational semantics may define abstract machine  secd machine   give meaning phrases describing transitions induce states machine   alternatively  pure lambda calculus  operational semantics defined via syntactic transformations phrases language axiomatic semantics  whereby one gives meaning phrases describing axioms apply them   axiomatic semantics makes distinction phrase meaning logical formulas describe  meaning exactly proven logic   the canonical example axiomatic semantics hoare logic apart choice denotational  operational  axiomatic approaches  variations formal semantic systems arise choice supporting mathematical formalism    variations   some variations formal semantics include following action semantics approach tries modularize denotational semantics  splitting formalization process two layers  macro microsemantics  predefining three semantic entities  actions  data yielders  simplify specification algebraic semantics form axiomatic semantics based algebraic laws describing reasoning program semantics formal manner attribute grammars define systems systematically compute  metadata   called attributes  various cases language syntax   attribute grammars understood denotational semantics target language simply original language enriched attribute annotations   aside formal semantics  attribute grammars also used code generation compilers  augment regular context-free grammars context-sensitive conditions categorical   functorial   semantics uses category theory core mathematical formalism  a categorical semantics usually proven correspond axiomatic semantics gives syntactic presentation categorical structures  also  denotational semantics often instances general categorical semantics  concurrency semantics catch-all term formal semantics describes concurrent computations   historically important concurrent formalisms included actor model process calculi game semantics uses metaphor inspired game theory predicate transformer semantics  developed edsger w  dijkstra  describes meaning program fragment function transforming postcondition precondition needed establish it    describing relationships   for variety reasons  one might wish describe relationships different formal semantics   for example to prove particular operational semantics language satisfies logical formulas axiomatic semantics language   such proof demonstrates  sound  reason particular  operational  interpretation strategy using particular  axiomatic  proof system to prove operational semantics high-level machine related simulation semantics low-level machine  whereby low-level abstract machine contains primitive operations high-level abstract machine definition given language  such proof demonstrates low-level machine  faithfully implements  high-level machine it also possible relate multiple semantics abstractions via theory abstract interpretation    history   robert w  floyd credited founding field programming language semantics floyd           see also   computational semanticsformal semantics  logic formal semantics  linguistics ontologyontology  information science semantic equivalencesemantic technology   references      further reading   textbooks
in mathematics  logic  computer science  type system formal system every term  type  defines meaning operations may performed it  type theory academic study type systems some type theories serve alternatives set theory foundation mathematics  two well-known theories alonzo church typed  -calculus per martin-l f intuitionistic type theory type theory created avoid paradoxes previous foundations naive set theory  formal logics rewrite systems type theory closely related  cases overlaps  computational type systems  programming language feature used reduce bugs facilitate certain compiler optimizations    history   between           bertrand russell proposed various  theories type  response discovery gottlob frege version naive set theory afflicted russell paradox  by      russell arrived  ramified  theory types together  axiom reducibility  featured prominently whitehead russell principia mathematica published            they attempted resolve russell paradox first creating hierarchy types  assigning concrete mathematical  possibly  entity type  entities given type built exclusively entities types lower hierarchy  thus preventing entity assigned itself in      leon chwistek frank p  ramsey proposed unramified type theory  known  theory simple types  simple type theory  collapsed hierarchy types earlier ramified theory require axiom reducibility the common usage  type theory  types used term rewrite system  the famous early example alonzo church simply typed lambda calculus  church theory types helped formal system avoid kleene rosser paradox afflicted original untyped lambda calculus  church demonstrated could serve foundation mathematics referred higher-order logic some type theories include per martin-l f intuitionistic type theory  foundation used areas constructive mathematics  thierry coquand calculus constructions derivatives foundation used coq  lean  others  the field area active research  demonstrated homotopy type theory    basic concepts   the contemporary presentation type systems context type theory made systematic conceptual framework introduced henk barendregt     type  term  value    in system type theory  term opposed type   for example                                                                   displaystyle   cdot      separate terms type nat natural numbers   traditionally  term followed colon type      nat - means number   type nat  beyond opposition syntax  little said types generality  often  interpreted kind collection  necessarily sets  values term might evaluate to  it usual denote terms e types    how terms types shaped depends particular type system made precise syntax additional restrictions well-formedness     typing environment  type assignment  type judgement    typing usually takes place context environment denoted symbol                                      displaystyle  gamma      often  environment list pairs                     e                                  displaystyle e  tau      this pair sometimes called assignment  the context completes opposition  together form judgement denoted                                       e                                  displaystyle  gamma  vdash e  tau         rewriting rules  conversion  reduction    type theories explicit computation encoded rules rewriting terms  these called conversion rules  rule works one direction  reduction rule  for example                                                         displaystyle                                             displaystyle      syntactically different terms  former reduces latter  this reduction written                                                                          displaystyle     twoheadrightarrow       these rules also establish corresponding equivalences terms  written                                                                          displaystyle     equiv      the term                                                        displaystyle        reduces                                      displaystyle       since                                      displaystyle      cannot reduced  called normal form  various systems typed lambda calculus including simply typed lambda calculus  jean-yves girard system f  thierry coquand calculus constructions strongly normalizing  in systems  successful type check implies termination proof term     type rules    based judgements equivalences type inference rules used describe type system assigns type syntactic constructions  terms   much like natural deduction  to meaningful  conversion type rules usually closely related e g  subject reduction property  might establish part soundness type system    decision problems   a type system  naturally associated decision problems type checking  typability  type inhabitation     type checking    the decision problem type checking  abbreviated                                       e                                           displaystyle  gamma  vdash e  tau        given type environment                                      displaystyle  gamma      term                     e                displaystyle e     type                                      displaystyle  tau      decide whether term                     e                displaystyle e    assigned type                                      displaystyle  tau     type environment                                      displaystyle  gamma     decidability type checking means type safety given program text  source code  verified     typability    the decision problem typability  abbreviated                                                                                    e                                           displaystyle  exists  gamma   tau   gamma  vdash e  tau        given term                     e                displaystyle e     decide whether exists type environment                                      displaystyle  gamma     type                                      displaystyle  tau     term                     e                displaystyle e    assigned type                                      displaystyle  tau     type environment                                      displaystyle  gamma     a variant typability typability wrt  type environment  abbreviated                                                                  e                                           displaystyle  exists  tau   gamma  vdash e  tau        type environment part input if given term contain external references  free term variables   typability coincides typability wrt  empty type environment typability closely related type inference  whereas typability  decision problem  addresses existence type given term  type inference  computation problem  requires actual type computed     type inhabitation    the decision problem type inhabitation  abbreviated                              e                                   e                                           displaystyle  exists e  gamma  vdash e  tau        given type environment                                      displaystyle  gamma     type                                      displaystyle  tau      decide whether exists term                     e                displaystyle e    assigned type                                      displaystyle  tau     type environment                                      displaystyle  gamma     girard paradox shows type inhabitation strongly related consistency type system curry howard correspondence  to sound  system must uninhabited types the opposition terms types also views one implementation specification  by program synthesis  computational counterpart  type inhabitation  see  used construct  parts  programs specification given form type information    interpretations type theory   type theory closely linked many fields active research  most particular  curry howard correspondence provides deep isomorphism intuitionistic logic  typed lambda calculus cartesian closed categories     intuitionistic logic    beside view types collection values term  type theory offers second interpretation opposition term types  types seen propositions terms proofs  in way reading typing  function type                                                        displaystyle  alpha  rightarrow  beta     viewed implication  i e  proposition                                       displaystyle  beta     follows                                      displaystyle  alpha         category theory    the internal language cartesian closed category simply typed lambda calculus  this view extended typed lambda calculi certain cartesian closed categories  topoi  proposed general setting mathematics  instead traditional set theory    difference set theory   there many different set theories many different systems type theory  follows generalizations set theory built top logic  it requires separate system like predicate logic underneath it  in type theory  concepts like     encoded types type theory itself in set theory  element restricted one set  in type theory  terms  generally  belong one type   where subset would used  type theory tends use predicate function returns true term subset returns false value not   the union two types defined new type called sum type  contains new terms  set theory usually encodes numbers sets      empty set    set containing empty set  etc   see set-theoretic definition natural numbers   type theory encode numbers functions using church encoding naturally inductive types   inductive types create new constants successor function zero  closely resembling peano axioms type theory simple connection constructive mathematics bhk interpretation   it connected logic curry howard isomorphism   and type theories closely connected category theory    optional features       dependent types    a dependent type type depends term another type  thus  type returned function may depend argument function for example  list                               n                                          displaystyle  mathrm  nat     length   may different type list                               n                                          displaystyle  mathrm  nat     length    in type theory dependent types  possible define function takes parameter  n  returns list containing  n  zeros  calling function   would produce term different type function called   another example type consisting proofs argument term certain property  term                                n                                          displaystyle  mathrm  nat       type  e g   given natural number  prime   see curry-howard correspondence dependent types play central role intuitionistic type theory design functional programming languages like idris  ats  agda epigram     equality types    many systems type theory type represents equality types terms  this type different convertibility  often denoted propositional equality in intuitionistic type theory  equality type  also called identity type  known                     i                displaystyle i    identity  there type                     i                 a                                 b                displaystyle i  a   b                        a                displaystyle a    type                                    displaystyle                        b                displaystyle b    terms type                     a                displaystyle a     a term type                     i                 a                                 b                displaystyle i  a   b    interpreted meaning                                    displaystyle    equal                     b                displaystyle b    in practice  possible build type                     i                           n                                                                              displaystyle i   mathrm  nat            exist term type  in intuitionistic type theory  new terms equality start reflexivity  if                                      displaystyle      term type                               n                                          displaystyle  mathrm  nat       exists term type                     i                           n                                                                              displaystyle i   mathrm  nat             more complicated equalities created creating reflexive term reduction one side  so                                                        displaystyle        term type                               n                                          displaystyle  mathrm  nat       term type                     i                           n                                                                                                                                                      displaystyle i   mathrm  nat                     reduction  generate term type                     i                           n                                                                                                                  displaystyle i   mathrm  nat                 thus  system  equality type denotes two values type convertible reductions having type equality important manipulated inside system  there usually judgement say two terms equal  instead  brouwer heyting kolmogorov interpretation  map                                                       b                         displaystyle  neg  b                                                  b                                           displaystyle  b   bot                                           displaystyle  bot     bottom type values  there exists term type                              i                           n                                                                                                         displaystyle  i   mathrm  nat           bot      one type                              i                           n                                                                                                         displaystyle  i   mathrm  nat           bot     homotopy type theory differs intuitionistic type theory mostly handling equality type     inductive types    a system type theory requires basic terms types operate on  some systems build functions using church encoding  other systems inductive types  set base types set type constructors generate types well-behaved properties  for example  certain recursive functions called inductive types guaranteed terminate coinductive types infinite data types created giving function generates next element   see coinduction corecursion induction-induction  feature declaring inductive type family types depends inductive type induction recursion allows wider range well-behaved types  allowing type recursive functions operating defined time     universe types    types created prevent paradoxes  russell paradox  however  motives lead paradoxes able say things types still exist  so  many type theories  universe type   contains types   in systems might want say something universe types  hierarchy universe types  containing one hierarchy  the hierarchy defined infinite  statements must refer finite number universe levels type universes particularly tricky type theory  the initial proposal intuitionistic type theory suffered girard paradox     computational component    many systems type theory  simply-typed lambda calculus  intuitionistic type theory  calculus constructions  also programming languages  that  said  computational component   the computation reduction terms language using rewriting rules a system type theory well-behaved computational component also simple connection constructive mathematics bhk interpretation non-constructive mathematics systems possible adding operators continuations call current continuation  however  operators tend break desirable properties canonicity parametricity    type theories       major    simply typed lambda calculus higher-order logic intuitionistic type theory system f lf often used define type theories calculus constructions derivatives     minor    automath st type theory utt  luo unified theory dependent types forms combinatory logic others defined lambda cube others name typed lambda calculus others name pure type system     active    homotopy type theory researched    practical impact       programming languages    there extensive overlap interaction fields type theory type systems  type systems programming language feature designed identify bugs  any static program analysis  type checking algorithms semantic analysis phase compiler  connection type theory a prime example agda  programming language uses utt  luo unified theory dependent types  type system  the programming language ml developed manipulating type theories  see lcf  type system heavily influenced them     mathematical foundations    the first computer proof assistant  called automath  used type theory encode mathematics computer  martin-l f specifically developed intuitionistic type theory encode mathematics serve new foundation mathematics  there ongoing research mathematical foundations using homotopy type theory mathematicians working category theory already difficulty working widely accepted foundation zermelo fraenkel set theory  this led proposals lawvere elementary theory category sets  etcs   homotopy type theory continues line using type theory  researchers exploring connections dependent types  especially identity type  algebraic topology  specifically homotopy      proof assistants    much current research type theory driven proof checkers  interactive proof assistants  automated theorem provers  most systems use type theory mathematical foundation encoding proofs  surprising  given close connection type theory programming languages lf used twelf  often define type theories many type theories fall higher-order logic used hol family provers pvs computational type theory used nuprl calculus constructions derivatives used coq  matita  lean utt  luo unified theory dependent types  used agda programming language proof assistantmany type theories supported lego isabelle  isabelle also supports foundations besides type theories  zfc  mizar example proof system supports set theory     linguistics    type theory also widely used formal theories semantics natural languages  especially montague grammar descendants  in particular  categorial grammars pregroup grammars extensively use type constructors define types  noun  verb  etc   words the common construction takes basic types                     e                displaystyle e                                       displaystyle    individuals truth-values  respectively  defines set types recursively follows                                    displaystyle                        b                displaystyle b    types                                               b                         displaystyle  langle b rangle     nothing except basic types  constructed means previous clause types a complex type                                              b                         displaystyle  langle b rangle     type functions entities type                                    displaystyle    entities type                     b                displaystyle b     thus one types like                              e                                         displaystyle  langle e rangle     interpreted elements set functions entities truth-values  i e  indicator functions sets entities  an expression type                                       e                                                                  displaystyle  langle  langle e rangle  rangle     function sets entities truth-values  i e   indicator function  set sets  this latter type standardly taken type natural language quantifiers  like  everybody  nobody  montague       barwise cooper           social sciences    gregory bateson introduced theory logical types social sciences  notions double bind logical levels based russell theory types    relation category theory   although initial motivation category theory far removed foundationalism  two fields turned deep connections  as john lane bell writes   in fact categories viewed type theories certain kind  fact alone indicates type theory much closely related category theory set theory   in brief  category viewed type theory regarding objects types  sorts   i e   roughly speaking  category may thought type theory shorn syntax   a number significant results follow way cartesian closed categories correspond typed  -calculus  lambek        c-monoids  categories products exponentials one non-terminal object  correspond untyped  -calculus  observed independently lambek dana scott around       locally cartesian closed categories correspond martin-l f type theories  seely        the interplay  known categorical logic  subject active research since  see monograph jacobs        instance    see also   data type concrete types data programmingdomain theorytype  model theory type system practical discussion type systems programming languagesunivalent foundations   notes      references      further reading      external links   robert l  constable  ed     computational type theory   scholarpedia the types forum   moderated e-mail forum focusing type theory computer science  operating since      the nuprl book   introduction type theory  types project lecture notes summer schools          the      summer school introductory lecturestype theory nlab  articles many related topics oregon programming languages summer school  many lectures notes summer      types  logic  semantics  verification
computational science  also known scientific computing scientific computation  sc   rapidly growing field uses advanced computing capabilities understand solve complex problems  it area science spans many disciplines  core  involves development models simulations understand natural systems algorithms  numerical non-numerical   mathematical models  computational models  computer simulations developed solve science  e g   biological  physical  social   engineering  humanities problemscomputer hardware develops optimizes advanced system hardware  firmware  networking  data management components needed solve computationally demanding problemsthe computing infrastructure supports science engineering problem solving developmental computer information sciencein practical use  typically application computer simulation forms computation numerical analysis theoretical computer science solve problems various scientific disciplines  the field different theory laboratory experiment traditional forms science engineering  the scientific computing approach gain understanding  mainly analysis mathematical models implemented computers  scientists engineers develop computer programs  application software  model systems studied run programs various sets input parameters  the essence computational science application numerical algorithms computational mathematics  in cases  models require massive amounts calculations  usually floating-point  often executed supercomputers distributed computing platforms    the computational scientist   the term computational scientist used describe someone skilled scientific computing  this person usually scientist  engineer applied mathematician applies high-performance computing different ways advance state-of-the-art respective applied disciplines physics  chemistry engineering computational science commonly considered third mode science  complementing adding experimentation observation theory  see image right   here  define system potential source data  experiment process extracting data system exerting inputs model  m  system  s  experiment  e  anything e applied order answer questions s   a computational scientist capable recognizing complex problemsadequately conceptualising system containing problemsdesigning framework algorithms suitable studying system  simulationchoosing suitable computing infrastructure  parallel computing grid computing supercomputers hereby  maximising computational power simulationassessing level output simulation resembles systems  model validatedadjusting conceptualisation system accordinglyrepeating cycle suitable level validation obtained  computational scientists trusts simulation generates adequately realistic results system  studied conditionsin fact  substantial effort computational sciences devoted development algorithms  efficient implementation programming languages  validation computational results  a collection problems solutions computational science found steeb  hardy  hardy stoop        philosophers science addressed question degree computational science qualifies science  among humphreys gelfert  they address general question epistemology  gain insight computational science approaches  tolk uses insights show epistemological constraints computer-based simulation research  as computational science uses mathematical models representing underlying theory executable form  essence  apply modeling  theory building  simulation  implementation execution   while simulation computational science sophisticated way express knowledge understanding  also come constraints limits already known computational solutions    applications computational science   problem domains computational science scientific computing include     predictive computational science    predictive computational science scientific discipline concerned formulation  calibration  numerical solution validation mathematical models designed predict specific aspects physical events  given initial boundary conditions set characterizing parameters associated uncertainties  in typical cases  predictive statement formulated terms probabilities   for example  given mechanical component periodic loading condition   probability  say      number cycles failure  nf  interval n  nf n       urban complex systems    in       half world population live cities  by middle   st century  estimated     world population urban  this urban growth focused urban populations developing countries city dwellers double  increasing     billion      almost     billion       cities massive complex systems created humans  made humans governed humans  trying predict  understand somehow shape development cities future requires complex thinking  requires computational models simulations help mitigate challenges possible disasters  the focus research urban complex systems  modeling simulation  build greater understanding city dynamics help prepare coming urbanisation     computational finance    in today financial markets huge volumes interdependent assets traded large number interacting market participants different locations time zones  their behavior unprecedented complexity characterization measurement risk inherent highly diverse set instruments typically based complicated mathematical computational models  solving models exactly closed form  even single instrument level  typically possible  therefore look efficient numerical algorithms  this become even urgent complex recently  credit crisis clearly demonstrated role cascading effects going single instruments portfolios single institutions even interconnected trading network  understanding requires multi-scale holistic approach interdependent risk factors market  credit liquidity risk modelled simultaneously different interconnected scales     computational biology    exciting new developments biotechnology revolutionizing biology biomedical research  examples techniques high-throughput sequencing  high-throughput quantitative pcr  intra-cellular imaging  in-situ hybridization gene expression  three-dimensional imaging techniques like light sheet fluorescence microscopy optical projection   micro -computer tomography  given massive amounts complicated data generated techniques  meaningful interpretation  even storage  form major challenges calling new approaches  going beyond current bioinformatics approaches  computational biology needs develop new methods discover meaningful patterns large data sets  model-based reconstruction gene networks used organize gene expression data systematic way guide future data collection  a major challenge understand gene regulation controlling fundamental biological processes like biomineralisation embryogenesis  the sub-processes like gene regulation  organic molecules interacting mineral deposition process  cellular processes  physiology processes tissue environmental levels linked  rather directed central control mechanism  biomineralisation embryogenesis viewed emergent behavior resulting complex system several sub-processes different temporal spatial scales  ranging nanometer nanoseconds meters years  connected multi-scale system  one available options understand systems developing multi-scale model system     complex systems theory    using information theory  non-equilibrium dynamics explicit simulations computational systems theory tries uncover true nature complex adaptive systems     computational science engineering    computational science engineering  cse  relatively new discipline deals development application computational models simulations  often coupled high-performance computing  solve complex physical problems arising engineering analysis design  computational engineering  well natural phenomena  computational science   cse described  third mode discovery   next theory experimentation   in many fields  computer simulation integral therefore essential business research  computer simulation provides capability enter fields either inaccessible traditional experimentation carrying traditional empirical inquiries prohibitively expensive  cse neither confused pure computer science  computer engineering  although wide domain former used cse  e g   certain algorithms  data structures  parallel programming  high performance computing  problems latter modeled solved cse methods  application area     methods algorithms   algorithms mathematical methods used computational science varied  commonly applied methods include both historically today  fortran remains popular applications scientific computing  other programming languages computer algebra systems commonly used mathematical aspects scientific computing applications include gnu octave  haskell  julia  maple  mathematica  matlab  python  third-party scipy library   perl  third-party pdl library   r  scilab  tk solver  the computationally intensive aspects scientific computing often use variation c fortran optimized algebra libraries blas lapack  in addition  parallel computing heavily used scientific computing achieve solutions large problems reasonable amount time  in framework  problem either divided many cores single cpu node  openmp   divided many cpu nodes networked together  mpi   run one gpus  typically using either cuda opencl  computational science application programs often model real-world changing conditions  weather  airflow around plane  automobile body distortions crash  motion stars galaxy  explosive device  etc  such programs might create  logical mesh  computer memory item corresponds area space contains information space relevant model  for example  weather models  item might square kilometer  land elevation  current wind direction  humidity  temperature  pressure  etc  the program would calculate likely next state based current state  simulated time steps  solving differential equations describe system operates  repeat process calculate next state    conferences journals   in year       international conference computational science  iccs  first organised  since organised yearly  iccs a-rank conference core classification the international journal computational science published first issue may       a new initiative launched       journal open research software in       rescience c dedicated replication computational results started github    education   at institutions  specialization scientific computation earned  minor  within another program  may varying levels   however  increasingly many bachelor  master doctoral programs computational science  the joint degree programme master program computational science university amsterdam vrije universiteit computational science first offered       in programme  students learn build computational models real-life observations develop skills turning models computational structures performing large-scale simulations learn theory give firm basis analysis complex systems learn analyse results simulations virtual laboratory using advanced numerical algorithms george mason university one early pioneers first offering multidisciplinary doctorate ph d program computational sciences informatics      focused number specialty areas including bioinformatics  computational chemistry  earth systems global changes  computational mathematics  computational physics  space sciences  computational statisticsschool computational integrative sciences  jawaharlal nehru university  erstwhile school information technology  also offers vibrant master science program computational science two specialities namely- computational biology complex systems    related fields      see also   computer simulations sciencecomputational science engineeringcomparison computer algebra systemsdifferentiable programminglist molecular modeling softwarelist numerical-analysis softwarelist statistical packagestimeline scientific computingsimulated realityextensions scientific computation  xsc    references      additional sources   e  gallopoulos a  sameh   cse  content product   ieee computational science engineering magazine                   g  hager g  wellein  introduction high performance computing scientists engineers  chapman hall       a k  hartmann  practical guide computer simulations  world scientific       journal computational methods science technology  open access   polish academy sciencesjournal computational science discovery  institute physicsr h  landau  c c  bordeianu  m  jose paez  a survey computational physics  introductory computational science  princeton university press          external links   john von neumann-institut computing  nic  juelich  germany the national center computational science oak ridge national laboratorycenter simulation modeling george mason universityeducational materials undergraduate computational studiescomputational science national laboratoriesbachelor computational science  university medellin  colombia  south americasimulation optimization systems  sos  research laboratory  mcmaster university  hamilton  oncomputational sciences informatics  ph d program  george mason university
scientific modelling scientific activity  aim make particular part feature world easier understand  define  quantify  visualize  simulate referencing existing usually commonly accepted knowledge  it requires selecting identifying relevant aspects situation real world using different types models different aims  conceptual models better understand  operational models operationalize  mathematical models quantify  computational models simulate  graphical models visualize subject  modelling essential inseparable part many scientific disciplines  ideas specific types modelling  the following said john von neumann     sciences try explain  hardly even try interpret  mainly make models  by model meant mathematical construct  addition certain verbal interpretations  describes observed phenomena  the justification mathematical construct solely precisely expected work  correctly describe phenomena reasonably wide area there also increasing attention scientific modelling fields science education  philosophy science  systems theory  knowledge visualization  there growing collection methods  techniques meta-theory kinds specialized scientific modelling    overview   a scientific model seeks represent empirical objects  phenomena  physical processes logical objective way  all models simulacra   simplified reflections reality  despite approximations  extremely useful  building disputing models fundamental scientific enterprise  complete true representation may impossible  scientific debate often concerns better model given task  e g   accurate climate model seasonal forecasting attempts formalize principles empirical sciences use interpretation model reality  way logicians axiomatize principles logic  the aim attempts construct formal system produce theoretical consequences contrary found reality  predictions statements drawn formal system mirror map real world insofar scientific models true for scientist  model also way human thought processes amplified  for instance  models rendered software allow scientists leverage computational power simulate  visualize  manipulate gain intuition entity  phenomenon  process represented  such computer models silico  other types scientific models vivo  living models  laboratory rats  vitro  glassware  tissue culture     basics       modelling substitute direct measurement experimentation    models typically used either impossible impractical create experimental conditions scientists directly measure outcomes  direct measurement outcomes controlled conditions  see scientific method  always reliable modeled estimates outcomes within  modeling simulation  model task-driven  purposeful simplification abstraction perception reality  shaped physical  legal  cognitive constraints  it task-driven model captured certain question task mind  simplifications leave known observed entities relation important task  abstraction aggregates information important needed detail object interest  both activities  simplification  abstraction  done purposefully  however  done based perception reality  this perception already model  comes physical constraint  there also constraints able legally observe current tools methods  cognitive constraints limit able explain current theories  this model comprises concepts  behavior  relations informal form often referred conceptual model  in order execute model  needs implemented computer simulation  this requires choices  numerical approximations use heuristics  despite epistemological computational constraints  simulation recognized third pillar scientific methods  theory building  simulation  experimentation     simulation    a simulation way implement model  often employed model complex analytical solution  a steady-state simulation provides information system specific instant time  usually equilibrium  state exists    a dynamic simulation provides information time  a simulation shows particular object phenomenon behave  such simulation useful testing  analysis  training cases real-world systems concepts represented models     structure    structure fundamental sometimes intangible notion covering recognition  observation  nature  stability patterns relationships entities  from child verbal description snowflake  detailed scientific analysis properties magnetic fields  concept structure essential foundation nearly every mode inquiry discovery science  philosophy  art     systems    a system set interacting interdependent entities  real abstract  forming integrated whole  in general  system construct collection different elements together produce results obtainable elements alone   the concept  integrated whole  also stated terms system embodying set relationships differentiated relationships set elements  form relationships element set elements part relational regime   there two types system models     discrete variables change instantaneously separate points time     continuous state variables change continuously respect time     generating model    modelling process generating model conceptual representation phenomenon  typically model deal aspects phenomenon question  two models phenomenon may essentially different say  differences comprise simple renaming components such differences may due differing requirements model end users  conceptual aesthetic differences among modelers contingent decisions made modelling process  considerations may influence structure model might modeler preference reduced ontology  preferences regarding statistical models versus deterministic models  discrete versus continuous time  etc  in case  users model need understand assumptions made pertinent validity given use building model requires abstraction   assumptions used modelling order specify domain application model  for example  special theory relativity assumes inertial frame reference  this assumption contextualized explained general theory relativity  a model makes accurate predictions assumptions valid  might well make accurate predictions assumptions hold  such assumptions often point older theories succeeded new ones  general theory relativity works non-inertial reference frames well      evaluating model    a model evaluated first foremost consistency empirical data  model inconsistent reproducible observations must modified rejected  one way modify model restricting domain credited high validity  a case point newtonian physics  highly useful except small  fast  massive phenomena universe  however  fit empirical data alone sufficient model accepted valid   factors important evaluating model include ability explain past observationsability predict future observationscost use  especially combination modelsrefutability  enabling estimation degree confidence modelsimplicity  even aesthetic appealpeople may attempt quantify evaluation model using utility function     visualization    visualization technique creating images  diagrams  animations communicate message  visualization visual imagery effective way communicate abstract concrete ideas since dawn man  examples history include cave paintings  egyptian hieroglyphs  greek geometry  leonardo da vinci revolutionary methods technical drawing engineering scientific purposes     space mapping    space mapping refers methodology employs  quasi-global  modelling formulation link companion  coarse   ideal low-fidelity   fine   practical high-fidelity  models different complexities  in engineering optimization  space mapping aligns  maps  fast coarse model related expensive-to-compute fine model avoid direct expensive optimization fine model  the alignment process iteratively refines  mapped  coarse model  surrogate model     types      applications       modelling simulation    one application scientific modelling field modelling simulation  generally referred  m s    m s spectrum applications range concept development analysis  experimentation  measurement  verification  disposal analysis   projects programs may use hundreds different simulations  simulators model analysis tools the figure shows modelling simulation used central part integrated program defence capability development process     model-based learning education    model based learning education  particularly relation learning science involves students creating models scientific concepts order gain insight scientific idea acquire deeper understanding subject visualization modelimprove student engagement coursedifferent types model based learning techniques include physical macrocosmsrepresentational systemssyntactic modelsemergent modelsmodel making education iterative exercise students refining  developing evaluating models time  this shifts learning rigidity monotony traditional curriculum exercise students  creativity curiosity  this approach utilizes constructive strategy social collaboration learning scaffold theory  model based learning includes cognitive reasoning skills existing models improved upon construction newer models using old models basis  model based learning entails determining target models learning pathway provide realistic chances understanding   model making also incorporate blended learning strategies using web based tools simulators  thereby allowing students familiarize on-line digital resourcescreate different models various virtual materials little costpractice model making activity time placerefine existing models a well-designed simulation simplifies real-world system heightening awareness complexity system  students participate simplified system learn real system operates without spending days  weeks years would take undergo experience real world  the teacher role overall teaching learning process primarily facilitator arranger learning experience  he would assign students  model making activity particular concept provide relevant information support activity  for virtual model making activities  teacher also provide information usage digital tool render troubleshooting support case glitches using same  the teacher also arrange group discussion activity students provide platform necessary students share observations knowledge extracted model making activity model-based learning evaluation could include use rubrics assess ingenuity creativity student model construction also overall classroom participation student vis-a-vis knowledge constructed activity it important  however  give due consideration following successful model-based learning occur use right tool right time particular conceptprovision within educational setup model making activity  e g   computer room internet facility software installed access simulator digital tool   see also   abductive reasoningall models wrongheuristicinverse modelscientific visualizationstatistical model   references      further reading   nowadays    magazines scientific modelling offer kinds international forums  since     strongly growing number books magazines specific forms scientific modelling  there also lot discussion scientific modelling philosophy-of-science literature  a selection rainer hegselmann  ulrich m ller klaus troitzsch  eds           modelling simulation social sciences philosophy science point view  theory decision library  dordrecht  kluwer paul humphreys         extending ourselves  computational science  empiricism  scientific method  oxford  oxford university press johannes lenhard  g nter k ppers terry shinn  eds           simulation  pragmatic constructions reality   springer berlin tom ritchey          outline morphology modelling methods   contribution general theory modelling   in  acta morphologica generalis  vol    no    pp       william silvert          modelling discipline   in  int  j  general systems  vol         pp      sergio sismondo snait gissis  eds           modeling simulation  special issue science context    eric winsberg         philosophy climate science  cambridge  cambridge university presseric winsberg         science age computer simulation  chicago  university chicago presseric winsberg          simulated experiments  methodology virtual world   in  philosophy science             tom   helikar  jim a rogers          chemchains  platform simulation analysis biochemical networks aimed laboratory scientists   biomed central    external links   models  entry internet encyclopedia philosophymodels science  entry stanford encyclopedia philosophythe world process  simulations natural social sciences   r  hegselmann et al   eds    modelling simulation social sciences philosophy science point view  theory decision library  dordrecht  kluwer         -    research simulation modelling various physical systemsmodelling water quality information center  u s  department agricultureecotoxicology   modelsa morphology modelling methods  acta morphologica generalis  vol    no    pp       
numerical analysis study algorithms use numerical approximation  opposed symbolic manipulations  problems mathematical analysis  distinguished discrete mathematics   numerical analysis finds application fields engineering physical sciences    st century also life social sciences  medicine  business even arts  current growth computing power enabled use complex numerical analysis  providing detailed realistic mathematical models science engineering  examples numerical analysis include  ordinary differential equations found celestial mechanics  predicting motions planets  stars galaxies   numerical linear algebra data analysis  stochastic differential equations markov chains simulating living cells medicine biology before modern computers  numerical methods often relied hand interpolation formulas  using data large printed tables  since mid   th century  computers calculate required functions instead  many formulas continue used software algorithms the numerical point view goes back earliest mathematical writings  a tablet yale babylonian collection  ybc        gives sexagesimal numerical approximation square root    length diagonal unit square numerical analysis continues long tradition  rather giving exact symbolic answers translated digits applicable real-world measurements  approximate solutions within specified error bounds used    general introduction   the overall goal field numerical analysis design analysis techniques give approximate accurate solutions hard problems  variety suggested following advanced numerical methods essential making numerical weather prediction feasible computing trajectory spacecraft requires accurate numerical solution system ordinary differential equations car companies improve crash safety vehicles using computer simulations car crashes  such simulations essentially consist solving partial differential equations numerically hedge funds  private investment funds  use tools fields numerical analysis attempt calculate value stocks derivatives precisely market participants airlines use sophisticated optimization algorithms decide ticket prices  airplane crew assignments fuel needs  historically  algorithms developed within overlapping field operations research insurance companies use numerical programs actuarial analysis the rest section outlines several important themes numerical analysis     history    the field numerical analysis predates invention modern computers many centuries  linear interpolation already use      years ago  many great mathematicians past preoccupied numerical analysis  obvious names important algorithms like newton method  lagrange interpolation polynomial  gaussian elimination  euler method to facilitate computations hand  large books produced formulas tables data interpolation points function coefficients  using tables  often calculated    decimal places functions  one could look values plug formulas given achieve good numerical estimates functions  the canonical work field nist publication edited abramowitz stegun      -plus page book large number commonly used formulas functions values many points  the function values longer useful computer available  large listing formulas still handy the mechanical calculator also developed tool hand computation  these calculators evolved electronic computers      found computers also useful administrative purposes  but invention computer also influenced field numerical analysis  since longer complicated calculations could done     direct iterative methods    consider problem solving x          unknown quantity x for iterative method  apply bisection method f x     x        the initial values      b      f         f b       from table concluded solution               the algorithm might return number range error less          discretization numerical integration     in two-hour race  speed car measured three instants recorded following table a discretization would say speed car constant                      finally            for instance  total distance traveled first    minutes approximately      h       km h         km  this would allow us estimate total distance traveled      km       km       km         km  example numerical integration  see  using riemann sum  displacement integral velocity ill-conditioned problem  take function f x       x       note f           f                change x less     turns change f x  nearly       evaluating f x  near x     ill-conditioned problem well-conditioned problem  by contrast  evaluating function f x       x      near x      well-conditioned problem  for instance  f                   f            modest change x leads modest change f x  direct methods compute solution problem finite number steps  these methods would give precise answer performed infinite precision arithmetic  examples include gaussian elimination  qr factorization method solving systems linear equations  simplex method linear programming  in practice  finite precision used result approximation true solution  assuming stability  in contrast direct methods  iterative methods expected terminate finite number steps  starting initial guess  iterative methods form successive approximations converge exact solution limit  a convergence test  often involving residual  specified order decide sufficiently accurate solution  hopefully  found  even using infinite precision arithmetic methods would reach solution within finite number steps  general   examples include newton method  bisection method  jacobi iteration  in computational matrix algebra  iterative methods generally needed large problems iterative methods common direct methods numerical analysis  some methods direct principle usually used though  e g  gmres conjugate gradient method  for methods number steps needed obtain exact solution large approximation accepted manner iterative method     discretization    furthermore  continuous problems must sometimes replaced discrete problem whose solution known approximate continuous problem  process called  discretization   for example  solution differential equation function  this function must represented finite amount data  instance value finite number points domain  even though domain continuum    generation propagation errors   the study errors forms important part numerical analysis  there several ways error introduced solution problem     round-off    round-off errors arise impossible represent real numbers exactly machine finite memory  practical digital computers      truncation discretization error    truncation errors committed iterative method terminated mathematical procedure approximated  approximate solution differs exact solution  similarly  discretization induces discretization error solution discrete problem coincide solution continuous problem  for instance  iteration sidebar compute solution                                        x                                                                                              displaystyle  x                 iterations  concluded root roughly       example   therefore  truncation error      once error generated  generally propagate calculation  for instance  already noted operation   calculator  computer  inexact  it follows calculation type                                     b                 c                                 e                displaystyle b c e    even inexact the truncation error created mathematical procedure approximated  to integrate function exactly required find sum infinite trapezoids  numerically sum finite trapezoids found  hence approximation mathematical procedure  similarly  differentiate function  differential element approaches zero numerically finite value differential element chosen     numerical stability well-posed problems    numerical stability notion numerical analysis  an algorithm called  numerically stable  error  whatever cause  grow much larger calculation  this happens problem  well-conditioned   meaning solution changes small amount problem data changed small amount  to contrary  problem  ill-conditioned   small error data grow large error both original problem algorithm used solve problem  well-conditioned   ill-conditioned   combination possible so algorithm solves well-conditioned problem may either numerically stable numerically unstable  an art numerical analysis find stable algorithm solving well-posed mathematical problem  for instance  computing square root    roughly          well-posed problem  many algorithms solve problem starting initial approximation x                                                                               displaystyle   sqrt          instance x         computing improved guesses x   x   etc  one method famous babylonian method  given xk     xk       xk  another method  called  method x   given xk      xk          xk  a iterations scheme calculated table form  initial guesses x        x         observe babylonian method converges quickly regardless initial guess  whereas method x converges extremely slowly initial guess x        diverges initial guess x          hence  babylonian method numerically stable  method x numerically unstable numerical stability affected number significant digits machine keeps  machine used keeps four significant decimal digits  good example loss significance given two equivalent functions                    f                 x                          x                                                                       x                                                                                                                   x                                                                                          g                 x                                                x                                                            x                                                                                                                                   x                                                                                     displaystyle f x  x left   sqrt  x    -  sqrt  x   right   text    g x    frac  x    sqrt  x       sqrt  x        comparing results                    f                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        displaystyle f          left   sqrt       -  sqrt        right      left      -      right                                                                                        gdisplaystyle   begin alignedat    g         frac         sqrt          sqrt               frac                          frac                     end alignedat     comparing two results  clear loss significance  caused catastrophic cancellation subtracting approximations nearby numbers                                                                                displaystyle   sqrt                                                                                          displaystyle   sqrt            despite subtraction computed exactly  huge effect results  even though functions equivalent  shown                                                                        f                                 x                                                                                              x                                                                                                                       x                                                                                                                                                                                   x                                                                                                                                                                                                                  x                                                                                                                       x                                                                                                                                                                                   x                                                                                                                                                                                                                             x                                                                                                                                                                                                   x                                                                                                                                                              x                                                                                                                                                                                                   x                                                                                                                                                                                                                       x                                                                                                                                                     x                                                                                                                                                                                                                                                                                                                                                                          x                                                                                                                                                                                                                                                                                                              x                                                                                                                                                                                                   x                                                                                                                                                                                                                       x                                                                            x                                                                                           x                                                                                                                x                                                                                                                                                                                                   x                                                                                                                                                                                                                       x                                                                                                                                                   x                                                                                                                                                                                                   x                                                                                                                                                                                                                                                             x                                                                                            x                                                                                                                                                                                                   x                                                                                                                                                                                                                       g                                 x                                                                             displaystyle   begin alignedat    f x   x left   sqrt  x    -  sqrt  x   right     x left   sqrt  x    -  sqrt  x   right   frac    sqrt  x       sqrt  x      sqrt  x       sqrt  x        x  frac     sqrt  x         -   sqrt  x           sqrt  x       sqrt  x        x  frac  x  -x    sqrt  x       sqrt  x        x  frac       sqrt  x       sqrt  x          frac  x    sqrt  x       sqrt  x        g x  end alignedat     the desired value  computed using infinite precision              the example modification one taken mathew  numerical methods using matlab   rd ed    areas study   the field numerical analysis includes many sub-disciplines  some major ones     computing values functions    one simplest problems evaluation function given point  the straightforward approach  plugging number formula sometimes efficient  for polynomials  better approach using horner scheme  since reduces necessary number multiplications additions  generally  important estimate control round-off errors arising use floating point arithmetic     interpolation  extrapolation  regression    interpolation solves following problem  given value unknown function number points  value function point given points extrapolation similar interpolation  except value unknown function point outside given points must found regression also similar  takes account data imprecise  given points  measurement value function points  error   unknown function found  the least squares-method one way achieve this     solving equations systems equations    another fundamental problem computing solution given equation  two cases commonly distinguished  depending whether equation linear not  for instance  equation                              x                                                    displaystyle  x        linear                                        x                                                                                             displaystyle  x            not much effort put development methods solving systems linear equations  standard direct methods  i e   methods use matrix decomposition gaussian elimination  lu decomposition  cholesky decomposition symmetric  hermitian  positive-definite matrix  qr decomposition non-square matrices  iterative methods jacobi method  gauss seidel method  successive over-relaxation conjugate gradient method usually preferred large systems  general iterative methods developed using matrix splitting root-finding algorithms used solve nonlinear equations  named since root function argument function yields zero   if function differentiable derivative known  newton method popular choice  linearization another technique solving nonlinear equations     solving eigenvalue singular value problems    several important problems phrased terms eigenvalue decompositions singular value decompositions  for instance  spectral image compression algorithm based singular value decomposition  the corresponding tool statistics called principal component analysis     optimization    optimization problems ask point given function maximized  minimized   often  point also satisfy constraints the field optimization split several subfields  depending form objective function constraint  for instance  linear programming deals case objective function constraints linear  a famous method linear programming simplex method the method lagrange multipliers used reduce optimization problems constraints unconstrained optimization problems     evaluating integrals    numerical integration  instances also known numerical quadrature  asks value definite integral  popular methods use one newton cotes formulas  like midpoint rule simpson rule  gaussian quadrature  these methods rely  divide conquer  strategy  whereby integral relatively large set broken integrals smaller sets  in higher dimensions  methods become prohibitively expensive terms computational effort  one may use monte carlo quasi-monte carlo methods  see monte carlo integration    modestly large dimensions  method sparse grids     differential equations    numerical analysis also concerned computing  approximate way  solution differential equations  ordinary differential equations partial differential equations partial differential equations solved first discretizing equation  bringing finite-dimensional subspace  this done finite element method  finite difference method   particularly engineering  finite volume method  the theoretical justification methods often involves theorems functional analysis  this reduces problem solution algebraic equation    software   since late twentieth century  algorithms implemented variety programming languages  the netlib repository contains various collections software routines numerical problems  mostly fortran c  commercial products implementing many different numerical algorithms include imsl nag libraries  free-software alternative gnu scientific library over years royal statistical society published numerous algorithms applied statistics  code  as  functions   acm similarly  transactions mathematical software   toms  code  the naval surface warfare center several times published library mathematics subroutines  code  there several popular numerical computing applications matlab  tk solver  s-plus  idl well free open source alternatives freemat  scilab  gnu octave  similar matlab   it    c   library   there also programming languages r  similar s-plus   julia  python libraries numpy  scipy sympy  performance varies widely  vector matrix operations usually fast  scalar loops may vary speed order magnitude many computer algebra systems mathematica also benefit availability arbitrary-precision arithmetic provide accurate results also  spreadsheet software used solve simple problems relating numerical analysis  excel  example  hundreds available functions  including matrices  may used conjunction built  solver     see also   analysis algorithmscomputational scienceinterval arithmeticlist numerical analysis topicslocal linearization methodnumerical differentiationnumerical recipessymbolic-numeric computationvalidated numerics   notes      references       citations        sources       external links       journals    gdz sub uni-goettingen  numerische mathematik  volumes  -    springer      -      searchable  pages images    english german numerische mathematik  volumes        springer           journal numerical analysis  volumes  -    siam               online texts     numerical analysis   encyclopedia mathematics  ems press             numerical recipes  william h  press  free  downloadable previous editions first steps numerical analysis  archived   r j hosking  s joe  d c joyce  j c turnercsep  computational science education project   u s  department energy  archived     -  -   numerical methods  ch    digital library mathematical functions    online course material    numerical methods archived    july      wayback machine  stuart dalziel university cambridgelectures numerical analysis  dennis deturck herbert s  wilf university pennsylvanianumerical methods  john d  fenton university karlsruhenumerical methods physicists  anthony o hare oxford universitylectures numerical analysis  archived   r  radok mahidol universityintroduction numerical analysis engineering  henrik schmidt massachusetts institute technologynumerical analysis engineering  d  w  harder university waterloo
in mathematics computing  root-finding algorithm algorithm finding zeroes  also called  roots   continuous functions  a zero function f  real numbers real numbers complex numbers complex numbers  number x f x       as  generally  zeroes function cannot computed exactly expressed closed form  root-finding algorithms provide approximations zeroes  expressed either floating point numbers small isolating intervals   disks complex roots  interval disk output equivalent approximate output together error bound  solving equation f x    g x  finding roots function h x    f x    g x   thus root-finding algorithms allow solving equation defined continuous functions  however  root-finding algorithms guarantee find roots  particular  algorithm find root  mean root exists most numerical root-finding methods use iteration  producing sequence numbers hopefully converge towards root limit  they require one initial guesses root starting values  iteration algorithm produces successively accurate approximation root  since iteration must stopped point methods produce approximation root  exact solution  many methods compute subsequent values evaluating auxiliary function preceding values  the limit thus fixed point auxiliary function  chosen roots original equation fixed points  converging rapidly fixed points the behaviour general root-finding algorithms studied numerical analysis  however  polynomials  root-finding study belongs generally computer algebra  since algebraic properties polynomials fundamental efficient algorithms  the efficiency algorithm may depend dramatically characteristics given functions  for example  many algorithms use derivative input function  others work every continuous function  in general  numerical algorithms guaranteed find roots function  failing find root prove root  however  polynomials  specific algorithms use algebraic properties certifying root missed  locating roots separate intervals  disks complex roots  small enough ensure convergence numerical methods  typically newton method  unique root located    bracketing methods   bracketing methods determine successively smaller intervals  brackets  contain root  when interval small enough  root found  they generally use intermediate value theorem  asserts continuous function values opposite signs end points interval  function least one root interval  therefore  require start interval function takes opposite signs end points interval  however  case polynomials methods  descartes  rule signs  budan theorem sturm theorem  getting information number roots interval  they lead efficient algorithms real-root isolation polynomials  ensure finding real roots guaranteed accuracy     bisection method    the simplest root-finding algorithm bisection method  let f continuous function  one knows interval   b   f  f b  opposite signs  bracket   let c     b    middle interval  midpoint point bisects interval   then either f  f c   f c  f b  opposite signs  one divided two size interval  although bisection method robust  gains one one bit accuracy iteration  other methods  appropriate conditions  gain accuracy faster     false position  regula falsi     the false position method  also called regula falsi method  similar bisection method  instead using bisection search middle interval uses x-intercept line connects plotted function values endpoints interval                      c                                                                  f                             b                                            b              f                                                                                 f                             b                                            f                                                                                                  displaystyle c   frac  af b -bf   f b -f       false position similar secant method  except  instead retaining last two points  makes sure keep one point either side root   the false position method faster bisection method never diverge like secant method  however  may fail converge naive implementations due roundoff errors may lead wrong sign f c   typically  may occur rate variation f large neighborhood root     itp method    the itp method known method bracket root worst case guarantees bisection method guaranteeing superlinear convergence root smooth functions secant method  it also known method guaranteed outperform bisection method average continuous distribution location root  see  itp method analysis   it keeping track bracketing interval well minmax interval point therein converges fast bisection method  the construction queried point c follows three steps  interpolation  similar regula falsi   truncation  adjusting regula falsi similar regula falsi   improvements regula falsi  projection onto minmax interval  the combination steps produces simultaneously minmax optimal method guarantees similar interpolation based methods smooth functions   practice outperform bisection method interpolation based methods smooth non-smooth functions    interpolation   many root-finding processes work interpolation  this consists using last computed approximate values root approximating function polynomial low degree  takes values approximate roots  then root polynomial computed used new approximate value root function  process iterated two values allow interpolating function polynomial degree one  approximating graph function line   this basis secant method  three values define quadratic function  approximates graph function parabola  this muller method regula falsi also interpolation method  differs secant method using  interpolating line  two points necessarily last two computed points    iterative methods   although root-finding algorithms proceed iteration  iterative root-finding method generally uses specific type iteration  consisting defining auxiliary function  applied last computed approximations root getting new approximation  the iteration stops fixed point  desired precision  auxiliary function reached  new computed value sufficiently close preceding ones     newton method  similar derivative-based methods     newton method assumes function f continuous derivative  newton method may converge started far away root  however  converge  faster bisection method  usually quadratic  newton method also important readily generalizes higher-dimensional problems  newton-like methods higher orders convergence householder methods  the first one newton method halley method cubic order convergence     secant method    replacing derivative newton method finite difference  get secant method  this method require computation  existence  derivative  price slower convergence  order approximately      golden ratio    a generalization secant method higher dimensions broyden method     steffensen method    if use polynomial fit remove quadratic part finite difference used secant method  better approximates derivative  obtain steffensen method  quadratic convergence  whose behavior  good bad  essentially newton method require derivative     inverse interpolation    the appearance complex values interpolation methods avoided interpolating inverse f  resulting inverse quadratic interpolation method  again  convergence asymptotically faster secant method  inverse quadratic interpolation often behaves poorly iterates close root    combinations methods       brent method    brent method combination bisection method  secant method inverse quadratic interpolation  at every iteration  brent method decides method three likely best  proceeds step according method  this gives robust fast method  therefore enjoys considerable popularity     ridders  method    ridders  method hybrid method uses value function midpoint interval perform exponential interpolation root  this gives fast convergence guaranteed convergence twice number iterations bisection method    roots polynomials   finding roots polynomial long-standing problem object much research throughout history  a testament   th century algebra meant essentially theory polynomial equations finding root linear polynomial  degree one  easy needs one division  for quadratic polynomials  degree two   quadratic formula produces solution  numerical evaluation may require care ensuring numerical stability  for degrees three four  closed-form solutions terms radicals  generally convenient numerical evaluation  complicated involving computation several nth roots whose computation easier direct computation roots polynomial  example expression real roots cubic polynomial may involve non-real cube roots   for polynomials degree five higher abel ruffini theorem asserts  general  radical expression roots so  except low degrees  root finding polynomials consists finding approximations roots  by fundamental theorem algebra  one knows polynomial degree n n real complex roots  number reached almost polynomials it follows problem root finding polynomials may split three different subproblems finding one rootfinding rootsfinding roots specific region complex plane  typically real roots real roots given interval  example  roots represents physical quantity  real positive ones interesting  for finding one root  newton method general iterative methods work generally well for finding roots  oldest method  root r found  divide polynomial x   r  restart iteratively search root quotient polynomial  however  except low degrees  work well numerical instability  wilkinson polynomial shows small modification one coefficient may change dramatically value roots  also nature  real complex   also  even good approximation  one evaluates polynomial approximate root  one may get result far close zero  for example  polynomial degree     degree wilkinson polynomial  root close     derivative polynomial root may order                                                                                                    displaystyle             implies error                                                                                                        displaystyle     -       value root may produce value polynomial approximate root order                                                                                                    displaystyle            for avoiding problems  methods elaborated  compute roots simultaneously  desired accuracy  presently efficient method aberth method  a free implementation available name mpsolve  this reference implementation  find routinely roots polynomials degree larger              significant decimal digits the methods computing roots may used computing real roots  however  may difficult decide whether root small imaginary part real not  moreover  number real roots  average  logarithm degree  waste computer resources compute non-real roots one interested real roots the oldest method computing number real roots  number roots interval results sturm theorem  methods based descartes  rule signs extensions budan vincent theorems generally efficient  for root finding  proceed reducing size intervals roots searched getting intervals containing zero one root  then intervals containing one root may reduced getting quadratic convergence newton method isolated roots  the main computer algebra systems  maple  mathematica  sagemath  pari gp  variant method default algorithm real roots polynomial another class methods based converting problem finding polynomial roots problem finding eigenvalues companion matrix polynomial  in principle  one use eigenvalue algorithm find roots polynomial  however  efficiency reasons one prefers methods employ structure matrix   implemented matrix-free form  among methods power method  whose application transpose companion matrix classical bernoulli method find root greatest modulus  the inverse power method shifts  finds smallest root first  drives complex  cpoly  variant jenkins traub algorithm gives numerical stability  additionally  insensitive multiple roots fast convergence order                                                                            displaystyle    varphi  approx                                              displaystyle  varphi     golden ratio  even presence clustered roots  this fast convergence comes cost three polynomial evaluations per step  resulting residual o  f x         slower convergence three steps newton method     finding one root    the widely used method computing root newton method  consists iterations computation                               x                      n                                                                       x                      n                                                                       f                                             x                                  n                                                                                                   f                                                                            x                                  n                                                                                                    displaystyle x  n    x  n -  frac  f x  n    f  x  n        starting well-chosen value                               x                                                                  displaystyle x        if f polynomial  computation faster using horner method evaluation preprocessing computing polynomial derivative iteration the convergence generally quadratic  may converge much slowly even converge all  in particular  polynomial real root                                x                                                         displaystyle x        real  newton method cannot converge  however  polynomial real root  larger larger real root derivative  newton method converges quadratically largest root                               x                                                         displaystyle x        larger larger root  easy ways computing upper bound roots  see properties polynomial roots   this starting point horner method computing roots when one root r found  one may use euclidean division removing factor x   r polynomial  computing root resulting quotient  repeating process provides  principle  way computing roots  however  iterative scheme numerically unstable  approximation errors accumulate successive factorizations  last roots determined polynomial deviates widely factor original polynomial  to reduce error  one may  root found  restart newton method original polynomial  approximate root starting value however  warranty allow finding roots  in fact  problem finding roots polynomial coefficients general highly ill-conditioned  this illustrated wilkinson polynomial  roots polynomial degree       first positive integers  changing last bit   -bit representation one coefficient  equal       produces polynomial    real roots    complex roots imaginary parts larger     closely related newton method halley method laguerre method  both use polynomial two first derivations iterative process cubic convergence  combining two consecutive steps methods single test  one gets rate convergence    cost   polynomial evaluations  horner rule   on hand  combining three steps newtons method gives rate convergence   cost number polynomial evaluation  this gives slight advantage methods  less clear laguerre method  square root computed step  when applying methods polynomials real coefficients real starting points  newton halley method stay inside real number line  one choose complex starting points find complex roots  in contrast  laguerre method square root evaluation leave real axis accord     finding roots pairs    if given polynomial real coefficients  one may wish avoid computations complex numbers  to effect  one find quadratic factors pairs conjugate complex roots  the application multidimensional newton method task results bairstow method the real variant jenkins traub algorithm improvement method     finding roots    the simple durand kerner slightly complicated aberth method simultaneously find roots using simple complex number arithmetic  accelerated algorithms multi-point evaluation interpolation similar fast fourier transform help speed large degrees polynomial  it advisable choose asymmetric  evenly distributed set initial points  the implementation method free software mpsolve reference efficiency accuracy another method style dandelin gr ffe method  sometimes also ascribed lobachevsky   uses polynomial transformations repeatedly implicitly square roots  this greatly magnifies variances roots  applying vi te formulas  one obtains easy approximations modulus roots  effort  roots themselves     exclusion enclosure methods    several fast tests exist tell segment real line region complex plane contains roots  by bounding modulus roots recursively subdividing initial region indicated bounds  one isolate small regions may contain roots apply methods locate exactly all methods involve finding coefficients shifted scaled versions polynomial  for large degrees  fft-based accelerated methods become viable for real roots  see next sections the lehmer schur algorithm uses schur cohn test circles  variant  wilf global bisection algorithm uses winding number computation rectangular regions complex plane the splitting circle method uses fft-based polynomial transformations find large-degree factors corresponding clusters roots  the precision factorization maximized using newton-type iteration  this method useful finding roots polynomials high degree arbitrary precision  almost optimal complexity setting     real-root isolation    finding real roots polynomial real coefficients problem received much attention since beginning   th century  still active domain research  most root-finding algorithms find real roots  cannot certify found roots  methods finding complex roots  aberth method provide real roots  however  numerical instability polynomials  see wilkinson polynomial   may need arbitrary-precision arithmetic deciding roots real  moreover  compute complex roots real it follows standard way computing real roots compute first disjoint intervals  called isolating intervals  one contains exactly one real root  together contain roots  this computation called real-root isolation  having isolating interval  one may use fast numerical methods  newton method improving precision result the oldest complete algorithm real-root isolation results sturm theorem  however  appears much less efficient methods based descartes  rule signs vincent theorem  these methods divide two main classes  one using continued fractions using bisection  both method dramatically improved since beginning   st century  with improvements reach computational complexity similar best algorithms computing roots  even roots real  these algorithms implemented available mathematica  continued fraction method  maple  bisection method   both implementations routinely find real roots polynomials degree higher           finding multiple roots polynomials    most root-finding algorithms behave badly multiple roots close roots  however  polynomials whose coefficients exactly given integers rational numbers  efficient method factorize factors simple roots whose coefficients also exactly given  this method  called square-free factorization  based multiple roots polynomial roots greatest common divisor polynomial derivative the square-free factorization polynomial p factorization                     p                           p                                                           p                                                                                                     p                      k                                k                                  displaystyle p p    p         cdots p  k   k                                   p                                                       displaystyle p      either   polynomial without multiple roots  two different                               p                                                       displaystyle p      common root an efficient method compute factorization yun algorithm    see also   list root finding algorithmsbroyden method   quasi-newton root-finding method multivariable casecryptographically secure pseudorandom number generatorgnu scientific librarygraeffe method   algorithm finding polynomial rootslill method   graphical method real roots polynomialmpsolve   software approximating roots polynomial arbitrarily high precisionmultiplicity  mathematics    number times object must counted making true general formulanth root algorithmsystem polynomial equations   root-finding algorithms common roots several multivariate polynomialskantorovich theorem   initial conditions insure convergence newton method   references   
in analysis  numerical integration comprises broad family algorithms calculating numerical value definite integral  extension  term also sometimes used describe numerical solution differential equations  this article focuses calculation definite integrals the term numerical quadrature  often abbreviated quadrature  less synonym numerical integration  especially applied one-dimensional integrals  some authors refer numerical integration one dimension cubature  others take quadrature include higher-dimensional integration the basic problem numerical integration compute approximate solution definite integral                                                                                    b                          f                 x                                x                displaystyle  int     b f x   dx   given degree accuracy  if f  x  smooth function integrated small number dimensions  domain integration bounded  many methods approximating integral desired precision    reasons numerical integration   there several reasons carrying numerical integration  opposed analytical integration finding antiderivative the integrand f x  may known certain points  obtained sampling  some embedded systems computer applications may need numerical integration reason a formula integrand may known  may difficult impossible find antiderivative elementary function  an example integrand f x    exp  x    antiderivative  error function  times constant  cannot written elementary form  it may possible find antiderivative symbolically  may easier compute numerical approximation compute antiderivative  that may case antiderivative given infinite series product  evaluation requires special function available    history   the term  numerical integration  first appears      publication a course interpolation numeric integration mathematical laboratory david gibb quadrature historical mathematical term means calculating area  quadrature problems served one main sources mathematical analysis  mathematicians ancient greece  according pythagorean doctrine  understood calculation area process constructing geometrically square area  squaring   that process named quadrature  for example  quadrature circle  lune hippocrates  the quadrature parabola  this construction must performed means compass straightedge the ancient babylonians used trapezoidal rule integrate motion jupiter along ecliptic for quadrature rectangle sides b necessary construct square side                     x                                                  b                                  displaystyle x   sqrt  ab       geometric mean b   for purpose possible use following fact  draw circle sum b diameter  height bh  point connection crossing circle  equals geometric mean  the similar geometrical construction solves problem quadrature parallelogram triangle problems quadrature curvilinear figures much difficult  the quadrature circle compass straightedge proved   th century impossible  nevertheless  figures  example lune hippocrates  quadrature performed  the quadratures sphere surface parabola segment done archimedes became highest achievement antique analysis the area surface sphere equal quadruple area great circle sphere the area segment parabola cut straight line     area triangle inscribed segment for proof results archimedes used method exhaustion eudoxus in medieval europe quadrature meant calculation area method  more often method indivisibles used  less rigorous  simple powerful  with help galileo galilei gilles de roberval found area cycloid arch  gr goire de saint-vincent investigated area hyperbola  opus geometricum         alphonse antonio de sarasa  de saint-vincent pupil commentator  noted relation area logarithms john wallis algebrised method  wrote arithmetica infinitorum        series call definite integral  calculated values  isaac barrow james gregory made progress  quadratures algebraic curves spirals  christiaan huygens successfully performed quadrature solids revolution the quadrature hyperbola saint-vincent de sarasa provided new function  natural logarithm  critical importance with invention integral calculus came universal method area calculation  in response  term quadrature become traditional  instead modern phrase  computation univariate definite integral  common    methods one-dimensional integrals   numerical integration methods generally described combining evaluations integrand get approximation integral  the integrand evaluated finite set points called integration points weighted sum values used approximate integral  the integration points weights depend specific method used accuracy required approximation an important part analysis numerical integration method study behavior approximation error function number integrand evaluations  a method yields small error small number evaluations usually considered superior  reducing number evaluations integrand reduces number arithmetic operations involved  therefore reduces total round-off error  also  evaluation takes time  integrand may arbitrarily complicated a  brute force  kind numerical integration done  integrand reasonably well-behaved  i e  piecewise continuous bounded variation   evaluating integrand small increments     quadrature rules based interpolating functions    a large class quadrature rules derived constructing  interpolating functions easy integrate  typically interpolating functions polynomials   in practice  since polynomials high degree tend oscillate wildly  polynomials low degree used  typically linear quadratic the simplest method type let interpolating function constant function  polynomial degree zero  passes point                                                                                                                                          b                                                                                    f                                                                                                                                       b                                                                                                                                           textstyle  left   frac  b      f left   frac  b      right  right      this called midpoint rule rectangle rule                                                                                    b                          f                 x                                x                          b                                 f                                                                                                       b                                                                                               displaystyle  int     b f x   dx approx  b-a f left   frac  b      right     the interpolating function may straight line  affine function  i e  polynomial degree   passing points                                                                              f                                                                                  displaystyle  left f  right                                                          b                         f                         b                                                          displaystyle  left b f b  right     this called trapezoidal rule                                                                                    b                          f                 x                                x                          b                                                                                                f                                                                                  f                                 b                                                                                                                displaystyle  int     b f x   dx approx  b-a  left   frac  f  f b       right     for either one rules  make accurate approximation breaking  interval                                              b                         displaystyle  b     number                     n                displaystyle n    subintervals  computing approximation subinterval  adding results  this called composite rule  extended rule  iterated rule  for example  composite trapezoidal rule stated                                                                                    b                          f                 x                                x                                                     b                                                    n                                                                                                           f                                                                                                                                                                                        k                                                                              n                                                                                                                     f                                                                                                                 k                                                                                            b                                                                                                    n                                                                                                                                                                                                                 f                                     b                                                                                                                                    displaystyle  int     b f x   dx approx   frac  b-a  n   left  f       sum   k     n-   left f left k  frac  b-a  n   right  right   f b      right     subintervals form                                              k        h                                          k                                   h                                                   b                                  displaystyle  kh  k   h  subset  b                          h                                                     b                                                    n                                  textstyle h   frac  b-a  n                          k                                                     n                                   displaystyle k    ldots  n-      here used subintervals length                     h                displaystyle h    one could also use intervals varying length                                                                      h                              k                                                                       k                                  displaystyle  left h  k  right   k     interpolation polynomials evaluated equally spaced points                                              b                         displaystyle  b     yields newton cotes formulas  rectangle rule trapezoidal rule examples  simpson rule  based polynomial order    also newton cotes formula quadrature rules equally spaced points convenient property nesting   the corresponding rule interval subdivided includes current points  integrand values re-used if allow intervals interpolation points vary  find another group quadrature formulas  gaussian quadrature formulas  a gaussian  quadrature rule typically accurate newton cotes rule  requires number function evaluations  integrand smooth  i e   sufficiently differentiable   other quadrature methods varying intervals include clenshaw curtis quadrature  also called fej r quadrature  methods  nest gaussian quadrature rules nest  related gauss kronrod quadrature formulas do     generalized midpoint rule formula    a generalized midpoint rule formula given                                                                                                                           f                     x                                        x                                                                                                                   m                                                                           n                                                                                                                                                                                                                                                                                                                                                                                               n                                                                                                                                                                                                                                                                              m                                                                                                                     n                                                                                                                                                                                               n                                                                                                                                                                                                                                                                                                                        f                                                                             n                                                                                                                      x                                                                                                                                    x                                                                                                                                                                                                                                                                                                        m                                                                                                                  displaystyle  int          f x   dx   sum       m   sum   n      infty     frac   left  -   right   n       left  m right   n     left  n    right       left f   n   x  right    x   frac  m-     m                                                                                                                                   f                     x                                        x                                   lim                      m                                                                                                                                              m                                                                           n                                                                    n                                                                                                                                                                                                                                                                                                                          n                                                                                                                                                                                                                                                                                                              m                                                                                                                                                 n                                                                                                                                                                                               n                                                                                                                                                                                                                                                                                              f                                                                       n                                                                                                            x                                                                                                            x                                                                                                                                                                                                                                                                                                        m                                                                                                                           displaystyle  int          f x   dx   lim   m  infty   sum       m   sum   n     n    frac   left  -   right   n        left   m  right    n     left  n    right      left f   n   x  right   x   frac  m-     m                                        f                                   n                                                x                         displaystyle f   n   x     denotes                     n                displaystyle n   -th derivative  for example  substituting                     m                                  displaystyle m                         f                 x                                                                                                                                                                                                                         x                                                                                                               displaystyle f x    frac   theta      theta     x         generalized midpoint rule formula  obtain equation inverse tangent                              tan                                                                                                                                                   n                                                                                                                                                     nnn                                                                                                                                                                                              n                                                                                                                                                                         n                                                                                                                                                                                 n                                                                                                                                                                                                                              n                                                                                                                                                                                                                                       b                                      n                                                                                                                                                                                                                                                         displaystyle  tan   -    theta   sum   n      infty    frac      n-    left   frac      left     theta  right    n-    -  frac      left  -  theta  right    n-     right    sum   n      infty     frac      n-     frac   n  left  theta  right    n      left  theta  right  b  n      left  theta  right                                                                                                                  displaystyle   sqrt  -       imaginary unit                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       b                                                                                                                                                                                                                                                                                                                                                      nn                                                                                                                                                                                                                                                                                                                b                                      n                                                                                                                                                                                                                                      b                                      nb                                      n                                                                                                                                                                                                                                                                                                                                                     n                                                                                                                                                                                                            displaystyle   begin aligned      theta      frac      theta      b      theta         n   theta     left  -  frac      theta        right    n-    theta     frac      theta     b  n-    theta     b  n   theta     left  -  frac      theta        right   b  n-    theta  -  frac      theta      n-    theta    end aligned     since odd                     n                displaystyle n    numerator integrand becomes                                                                                 n                                                                      displaystyle  -    n          generalized midpoint rule formula reorganized                                                                                                                           f                     x                                        x                                                                                                                            m                                                                           n                                                                                                                                                                                                                                                                                                                                  m                                                                                                                                              n                                                                                                                                                                                                                      n                                                                                                                                                                                                                                                                                                                        f                                                                                                        n                                                                                                                      x                                                                                                                                    x                                                                                                                                                                                                                                                                                                        m                                                                                                                                           displaystyle  int          f x   dx    sum       m   sum   n      infty     frac       left  m right    n     left   n    right       left f    n   x  right    x   frac  m-     m              the following example mathematica code generates plot showing difference inverse tangent approximation truncated                     m                                  displaystyle m                          n                                   displaystyle n       for function                     g                                         displaystyle g     defined interval                                              b                         displaystyle  b      integral                                                                                    b                                    g                                                                                                                                                      b                                                            g                                                                                                                     b                                                                                                                                        g                                b                                         x                                                            x                                 displaystyle  int     b  g   dt   int       b-a  g  tau    tau    b-a  int          g  b-a x   dx     therefore  apply generalized midpoint integration formula assuming                     f                 x                                   b                                         g                          b                                 x                                         displaystyle f x   b-a   g  b-a x         adaptive algorithms    if f x  many derivatives points  derivatives become large  gaussian quadrature often insufficient  in case  algorithm similar following perform better some details algorithm require careful thought  for many cases  estimating error quadrature interval function f x  obvious  one popular solution use two different rules quadrature  use difference estimate error quadrature  the problem deciding  large   small  signify  a local criterion  large  quadrature error larger   h  real number  tolerance wish set global error  then  h already tiny  may worthwhile make even smaller even quadrature error apparently large  a global criterion sum errors intervals less t   this type error analysis usually called  posteriori  since compute error computed approximation heuristics adaptive quadrature discussed forsythe et al   section          extrapolation methods    the accuracy quadrature rule newton cotes type generally function number evaluation points  the result usually accurate number evaluation points increases   equivalently  width step size points decreases  it natural ask result would step size allowed approach zero  this answered extrapolating result two nonzero step sizes  using series acceleration methods richardson extrapolation  the extrapolation function may polynomial rational function  extrapolation methods described detail stoer bulirsch  section      implemented many routines quadpack library     conservative  priori  error estimation    let                     f                displaystyle f    bounded first derivative                                              b                                  displaystyle  b      i e                      f                           c                                                                                   b                                           displaystyle f c      b       the mean value theorem                     f                         displaystyle f                         x                                          b                                  displaystyle x  b      gives                             x                                           f                                                                     x                                            f                 x                          f                                                  displaystyle  x-a f   xi   x   f x -f                                                          x                                                            x                         displaystyle  xi   x   x     depending                     x                displaystyle x    if integrate                     x                displaystyle x                                       displaystyle                        b                displaystyle b    sides take absolute values  obtain                                                                                                                                             b                                      f                         x                                                x                                      b                                                 f                                                                                                                                                                                                            b                                                   x                                                               f                                                                                                 x                                                                          x                                                      displaystyle  left  int     b f x   dx- b-a f  right   left  int     b  x-a f   xi   x    dx right     we approximate integral right-hand side bringing absolute value integrand  replacing term                               f                                   displaystyle f     upper boundwhere supremum used approximate hence  approximate integral                                                                                     b                          f                 x                                x                textstyle  int     b f x   dx    quadrature rule                              b                                 f                                         displaystyle  b-a f     error greater right hand side    we convert error analysis riemann sum  giving upper bound                                                        n                                                                                                                           sup                                                x                                                                                                   f                                                    x                                                          displaystyle   frac  n  -        sup     leq x leq    left f  x  right    error term particular approximation   note precisely error calculated example                     f                 x                          x                displaystyle f x  x      using derivatives  tweaking quadrature  similar error analysis using taylor series  using partial sum remainder term  f  this error analysis gives strict upper bound error  derivatives f available this integration method combined interval arithmetic produce computer proofs verified calculations     integrals infinite intervals    several methods exist approximate integration unbounded intervals  the standard technique involves specially derived quadrature rules  gauss-hermite quadrature integrals whole real line gauss-laguerre quadrature integrals positive reals  monte carlo methods also used  change variables finite interval  e g   whole line one could use                                                                                                                              f                 x                                x                                                                                                                                        fdisplaystyle  int   - infty     infty  f x   dx  int   -       f left   frac    -t       right   frac          left  -t     right         dt    semi-infinite intervals one could use                                                                                                                                                                                                                                           f                                 x                                                                x                                                                                                                                                                                                                                                  ff                                 x                                                                x                                                                                                                                                                                                                                                  fdisplaystyle   begin aligned  int      infty  f x   dx   int         f left   frac    -t   right   frac  dt    -t           int   - infty    f x   dx   int         f left a-  frac   -t    right   frac  dt         end aligned     possible transformations    multidimensional integrals   the quadrature rules discussed far designed compute one-dimensional integrals  to compute integrals multiple dimensions  one approach phrase multiple integral repeated one-dimensional integrals applying fubini theorem  tensor product rule   this approach requires function evaluations grow exponentially number dimensions increases  three methods known overcome so-called curse dimensionality a great many additional techniques forming multidimensional cubature integration rules variety weighting functions given monograph stroud integration sphere reviewed hesse et al             monte carlo    monte carlo methods quasi-monte carlo methods easy apply multi-dimensional integrals  they may yield greater accuracy number function evaluations repeated integrations using one-dimensional methods a large class useful monte carlo methods so-called markov chain monte carlo algorithms  include metropolis hastings algorithm gibbs sampling     sparse grids    sparse grids originally developed smolyak quadrature high-dimensional functions  the method always based one-dimensional quadrature rule  performs sophisticated combination univariate results  however  whereas tensor product rule guarantees weights cubature points positive weights quadrature points positive  smolyak rule guarantee  weights positive     bayesian quadrature    bayesian quadrature statistical approach numerical problem computing integrals falls field probabilistic numerics  it provide full handling uncertainty solution integral expressed gaussian process posterior variance    connection differential equations   the problem evaluating integral                    f                 x                                                                                          x                          f                 u                                u                displaystyle f x   int     x f u   du   reduced initial value problem ordinary differential equation applying first part fundamental theorem calculus  by differentiating sides respect argument x  seen function f satisfies                                                                     f                             x                                                                  x                                               f                 x                                  f                                                            displaystyle   frac  df x   dx   f x   quad f       methods developed ordinary differential equations  runge kutta methods  applied restated problem thus used evaluate integral  for instance  standard fourth-order runge kutta method applied differential equation yields simpson rule above the differential equation                               f                                    x                          f                 x                         displaystyle f  x  f x     special form  right-hand side contains independent variable                      x                displaystyle x     dependent variable                      f                displaystyle f      this simplifies theory algorithms considerably  the problem evaluating integrals thus best studied right    see also   numerical methods ordinary differential equationstruncation error  numerical integration clenshaw curtis quadraturegauss-kronrod quadratureriemann sum riemann integraltrapezoidal ruleromberg methodtanh-sinh quadraturenonelementary integral   references   philip j  davis philip rabinowitz  methods numerical integration george e  forsythe  michael a  malcolm  cleve b  moler  computer methods mathematical computations  englewood cliffs  nj  prentice-hall         see chapter     press  w h   teukolsky  s a   vetterling  w t   flannery  b p           chapter    integration functions   numerical recipes  the art scientific computing   rd ed    new york  cambridge university press  isbn    - -   -     - josef stoer roland bulirsch  introduction numerical analysis  new york  springer-verlag         see chapter    boyer  c  b   a history mathematics   nd ed  rev  uta c  merzbach  new york  wiley       isbn  -   -     -        pbk ed  isbn  -   -     -   eves  howard  an introduction history mathematics  saunders        isbn  -  -      -     external links   integration  background  simulations  etc  holistic numerical methods institutelobatto quadrature wolfram mathworldlobatto quadrature formula encyclopedia mathematicsimplementations many quadrature cubature formulae within free tracker component library 
numerical methods ordinary differential equations methods used find numerical approximations solutions ordinary differential equations  odes   their use also known  numerical integration   although term also refer computation integrals many differential equations cannot solved using symbolic computation   analysis    for practical purposes  however   engineering   numeric approximation solution often sufficient  the algorithms studied used compute approximation  an alternative method use techniques calculus obtain series expansion solution ordinary differential equations occur many scientific disciplines  including physics  chemistry  biology  economics  in addition  methods numerical partial differential equations convert partial differential equation ordinary differential equation  must solved    the problem   a first-order differential equation initial value problem  ivp  form                     f                displaystyle f    function                     f                                                                                                                                              r                                                                                        r                                                                 displaystyle f       infty   times  mathbb  r      mathbb  r         initial condition                                                                                                              r                                                                 displaystyle      mathbb  r        given vector   first-order means first derivative appears equation  higher derivatives absent without loss generality higher-order systems  restrict first-order differential equations  higher-order ode converted larger system first-order equations introducing extra variables   for example  second-order equation      rewritten two first-order equations     z z     y in section  describe numerical methods ivps  remark boundary value problems  bvps  require different set tools   in bvp  one defines values  components solution one point   because  different methods need used solve bvps   for example  shooting method  variants  global methods like finite differences  galerkin methods  collocation methods appropriate class problems the picard lindel f theorem states unique solution  provided f lipschitz-continuous    methods   numerical methods solving first-order ivps often fall one two large categories  linear multistep methods  runge kutta methods  a division realized dividing methods explicit implicit  for example   implicit linear multistep methods include adams-moulton methods  backward differentiation methods  bdf   whereas implicit runge kutta methods include diagonally implicit runge kutta  dirk   singly diagonally implicit runge kutta  sdirk   gauss radau  based gaussian quadrature  numerical methods  explicit examples linear multistep family include adams bashforth methods  runge kutta method lower diagonal butcher tableau explicit  a loose rule thumb dictates stiff differential equations require use implicit schemes  whereas non-stiff problems solved efficiently explicit schemes the so-called general linear methods  glms  generalization two large classes methods     euler method    from point curve  find approximation nearby point curve moving short distance along line tangent curve starting differential equation      replace derivative  finite difference approximationwhich re-arranged yields following formula                                                    h                                                                   h                                                                             displaystyle h  approx  hy     using     gives this formula usually applied following way  we choose step size h  construct sequence                                                                                                                                                                                                                              h                                                                                                                                                                h                                                    displaystyle             h          h          we denote                                                    n                                  displaystyle  n     numerical estimate exact solution                                                                    n                                           displaystyle  n       motivated      compute estimates following recursive scheme this euler method  forward euler method  contrast backward euler method  described   the method named leonhard euler described      the euler method example explicit method  this means new value yn   defined terms things already known  like yn     backward euler method    if  instead      use approximationwe get backward euler method the backward euler method implicit method  meaning solve equation find yn    one often uses fixed-point iteration  modification  newton raphson method achieve this it costs time solve equation explicit methods  cost must taken consideration one selects method use  the advantage implicit methods     usually stable solving stiff equation  meaning larger step size h used     first-order exponential integrator method    exponential integrators describe large class integrators recently seen lot development   they date back least     s in place      assume differential equation either formor locally linearized background state produce linear term                              a                       displaystyle -ay    nonlinear term                                           n                                                           displaystyle   mathcal  n       exponential integrators constructed multiplying                                   e                      a                                             textstyle e  at      exactly integrating result overa time interval                                                             n                                                                  n                                                                                            n                                   h                         displaystyle   n   n     n  h                                                        n                                                                       e                                   a            h                                                         n                                                                                                     h                                    e                                                h                                                   a                                                n                                                                                                                                                                          n                                                                                                                                                                                           displaystyle  n    e  -ah  n   int       h e  - h- tau  a   mathcal  n   left left  n   tau  right  right   tau     this integral equation exact  define integral the first-order exponential integrator realized holding                                           n                                                                                  n                                                                      displaystyle   mathcal  n    n   tau       constant full interval     generalizations    the euler method often accurate enough  in precise terms  order one  concept order explained   this caused mathematicians look higher-order methods one possibility use previously computed value yn determine yn    make solution depend past values  this yields so-called multistep method  perhaps simplest leapfrog method second order  roughly speaking  relies two time values almost practical multistep methods fall within family linear multistep methods  form                                                                                                                                                                               k                                                                                                         n                                         k                                                                                                                            k                                                                                                                                                   n                                         k                                                                                                                                                                                                                                                                                                                  n                                                                                                                                                                                                     h                                                                                                                                              k                                                              f                                                                                                            n                                                 k                                                                                                                                                      n                                                 k                                                                                                                                                                             k                                                                                                                f                                                                                                            n                                                 k                                                                                                                                                                                                        n                                                 k                                                                                                                                                                                                                                                                                                                                        f                                                                                                            n                                                                                                                                                      n                                                                                                                                                                                                 displaystyle   begin aligned     alpha   k  n k   alpha   k-   n k-    cdots   alpha      n       quad  h left  beta   k f  n k   n k    beta   k-  f  n k-    n k-     cdots   beta     f  n   n   right   end aligned     another possibility use points interval                                                             n                                                                  n                                                                     displaystyle   n   n         this leads family runge kutta methods  named carl runge martin kutta  one fourth-order methods especially popular     advanced features    a good implementation one methods solving ode entails time-stepping formula it often inefficient use step size time  variable step-size methods developed  usually  step size chosen  local  error per step tolerance level  this means methods must also compute error indicator  estimate local error an extension idea choose dynamically different methods different orders  called variable order method   methods based richardson extrapolation  bulirsch stoer algorithm  often used construct various methods different orders other desirable features include  dense output  cheap numerical approximations whole integration interval  points          event location  finding times  say  particular function vanishes  this typically requires use root-finding algorithm support parallel computing when used integrating respect time  time reversibility    alternative methods    many methods fall within framework discussed here  some classes alternative methods multiderivative methods  use function f also derivatives  this class includes hermite obreschkoff methods fehlberg methods  well methods like parker sochacki method bychkov scherbakov method  compute coefficients taylor series solution recursively methods second order odes  we said higher-order odes transformed first-order odes form      while certainly true  may best way proceed  in particular  nystr methods work directly second-order equations geometric integration methods especially designed special classes odes  example  symplectic integrators solution hamiltonian equations   they take care numerical solution respects underlying structure geometry classes quantized state systems methods family ode integration methods based idea state quantization  they efficient simulating sparse systems frequent discontinuities     parallel-in-time methods    for applications require parallel computing supercomputers  degree concurrency offered numerical method becomes relevant  in view challenges exascale computing systems  numerical methods initial value problems provide concurrency temporal direction studied parareal relatively well known example parallel-in-time integration method  early ideas go back     s    analysis   numerical analysis design numerical methods  also analysis  three central concepts analysis convergence  whether method approximates solution order  well approximates solution  andstability  whether errors damped out     convergence    a numerical method said convergent numerical solution approaches exact solution step size h goes    more precisely  require every ode     lipschitz function f every                                    lim                      h                                                                                                                                     max                      n                                                                                                                                                                                                                                             h                                                                                                                   n                                 h                                                                                                                      n                                                                                                       displaystyle  lim   h        max   n      dots   lfloor     h rfloor   left   n h -y  n   right        all methods mentioned convergent     consistency order    suppose numerical method                                                   n                         k                                                                                    n                         k                                                                  n                                                                  n                                                                                                              n                         k                                                             h                                          displaystyle  n k   psi   n k   n   n     dots   n k-   h       the local  truncation  error method error committed one step method  that  difference result given method  assuming error made earlier steps  exact solution                                                      n                         k                                h                                                                                                                        n                                 k                                                                                                                      n                                                                                                                                   n                                                                                                                                                                                               n                                 k                                                                                                  h                                                                                             n                         k                                                    displaystyle  delta   n k   h   psi  left  n k   n    n      dots   n k-    h right -y  n k      the method said consistent                               lim                      h                                                                                                                       n                                 k                                            h                                      h                                                     displaystyle  lim   h     frac   delta   n k   h   h        the method order                     p                displaystyle p                                                        n                         k                                h                                   o                           h                      p                                                                                                                     h                                   displaystyle  delta   n k   h  o h  p     quad   mbox   h      hence method consistent order greater    the  forward  euler method     backward euler method     introduced order    consistent  most methods used practice attain higher order  consistency necessary condition convergence  sufficient  method convergent  must consistent zero-stable a related concept global  truncation  error  error sustained steps one needs reach fixed time                                    displaystyle     explicitly  global error time                                    displaystyle                                                       n                                                                           displaystyle  n -y                         n                                                                                                                                        h                displaystyle n  t-t      h     the global error                     p                displaystyle p   th order one-step method                     o                           h                      p                                           displaystyle o h  p       particular  method convergent   this statement necessarily true multi-step methods     stability stiffness    for differential equations  application standard methods euler method  explicit runge kutta methods  multistep methods  example  adams bashforth methods  exhibit instability solutions  though methods may produce stable solutions  this  difficult behaviour  equation  may necessarily complex  described stiffness  often caused presence different time scales underlying problem  for example  collision mechanical system like impact oscillator typically occurs much smaller time scale time motion objects  discrepancy makes  sharp turns  curves state parameters stiff problems ubiquitous chemical kinetics  control theory  solid mechanics  weather forecasting  biology  plasma physics  electronics  one way overcome stiffness extend notion differential equation differential inclusion  allows models non-smoothness    history   below timeline important developments field      - leonhard euler publishes method      - augustin louis cauchy proves convergence euler method  in proof  cauchy uses implicit euler method      - first mention multistep methods john couch adams letter written francis bashforth      - carl runge publishes first runge kutta method      - martin kutta describes popular fourth-order runge kutta method      - lewis fry richardson announces extrapolation method  richardson extrapolation      - charles f  curtiss joseph oakland hirschfelder coin term stiff equations      - germund dahlquist introduces a-stability integration methods    numerical solutions second-order one-dimensional boundary value problems   boundary value problems  bvps  usually solved numerically solving approximately equivalent matrix problem obtained discretizing original bvp  the commonly used method numerically solving bvps one dimension called finite difference method   this method takes advantage linear combinations point values construct finite difference coefficients describe derivatives function  for example  second-order central difference approximation first derivative given                                                                         u                                                                                                                                                  u                                                                                                                                                          h                                                         u                                              x                                                                                       o                                             h                                                                           displaystyle   frac  u    -u  i-     h   u  x      mathcal  o   h         second-order central difference second derivative given                                                                         u                                                                                                                                                                 u                                                                                                            u                                                                                                                                           h                                                                                                      u                                              x                                                                                       o                                             h                                                                           displaystyle   frac  u    - u   u  i-    h       u   x      mathcal  o   h         in formulae                      h                           x                                                                  x                                                                                 displaystyle h x  -x  i-      distance neighbouring x values discretized domain  one constructs linear system solved standard matrix methods  for example  suppose equation solved                                                                                                                                                                                                                                                                                                                                 u                                                                                                           x                                                                                                                                                                                        u                                                                                                                                                                     u                                                                                                                                                                                                                        u                                                                                                                                                  displaystyle   begin aligned      frac     u  dx      -u        u           u       end aligned     the next step would discretize problem use linear derivative approximations                              u                                                                                                                       u                                                                                                                                                                 u                                                                                                            u                                                                                                                                           h                                                                                           displaystyle u       frac  u    - u   u  i-    h         solve resulting system linear equations  this would lead equations                                                                         u                                                                                                                                                                 u                                                                                                            u                                                                                                                                           h                                                                                                      u                                                                                                                                                                                                                                   n                                                       displaystyle   frac  u    - u   u  i-    h      -u      quad  forall            n-      on first viewing  system equations appears difficulty associated fact equation involves terms multiplied variables  fact false  at     n     term involving boundary values                     u                                                      u                                                         displaystyle u    u                            u                                                      u                      n                                  displaystyle u    u  n     since two values known  one simply substitute equation result non-homogeneous linear system equations non-trivial solutions    see also   courant friedrichs lewy conditionenergy driftgeneral linear methodslist numerical analysis topics numerical methods ordinary differential equationsreversible reference system propagation algorithmmodelica language openmodelica software   notes      references   bradie  brian         a friendly introduction numerical analysis  upper saddle river  new jersey  pearson prentice hall  isbn    - -  -      -  j  c  butcher  numerical methods ordinary differential equations  isbn  -   -     - ernst hairer  syvert paul n rsett gerhard wanner  solving ordinary differential equations i  nonstiff problems  second edition  springer verlag  berlin        isbn  -   -     -  ernst hairer gerhard wanner  solving ordinary differential equations ii  stiff differential-algebraic problems  second edition  springer verlag  berlin        isbn  -   -     -     this two-volume monograph systematically covers aspects field  hochbruck  marlis  ostermann  alexander  may         exponential integrators   acta numerica               bibcode     acnum         h  citeseerx                  doi         s                 arieh iserles  a first course numerical analysis differential equations  cambridge university press        isbn  -   -     -   hardback   isbn  -   -     -   paperback     textbook  targeting advanced undergraduate postgraduate students mathematics  also discusses numerical partial differential equations  john denholm lambert  numerical methods ordinary differential systems  john wiley   sons  chichester        isbn  -   -     -     textbook  slightly demanding book iserles     external links   joseph w  rudmin  application parker sochacki method celestial mechanics       dominique tourn  l int gration approch e des  quations diff rentielles ordinaires      -       th se de doctorat de l universit  paris   - denis diderot  juin       r imp  villeneuve ascq   presses universitaires du septentrion            p   extensive online material ode numerical analysis history  english-language material history ode numerical analysis  see  example  paper books chabert goldstine quoted him  pchelintsev  a n           an accurate numerical method algorithm constructing solutions chaotic systems   pdf   journal applied nonlinear dynamics                  doi         jand             kv github  c   library rigorous ode solvers intlab  a library made matlab gnu octave includes rigorous ode solvers 
special functions particular mathematical functions less established names notations due importance mathematical analysis  functional analysis  geometry  physics  applications the term defined consensus  thus lacks general formal definition  list mathematical functions contains functions commonly accepted special    tables special functions   many special functions appear solutions differential equations integrals elementary functions  therefore  tables integrals usually include descriptions special functions  tables special functions include important integrals  least  integral representation special functions  because symmetries differential equations essential physics mathematics  theory special functions closely related theory lie groups lie algebras  well certain topics mathematical physics symbolic computation engines usually recognize majority special functions     notations used special functions    functions established international notations sine                      sin                displaystyle  sin       cosine                      cos                displaystyle  cos       exponential function                      exp                displaystyle  exp       error function                      erf                displaystyle  operatorname  erf                          erfc                displaystyle  operatorname  erfc       some special functions several notations the natural logarithm may denoted                     ln                displaystyle  ln                          log                displaystyle  log                                    log                      e                                  displaystyle  log   e                          log                displaystyle  operatorname  log      depending context the tangent function may denoted                     tan                displaystyle  tan                          tan                displaystyle  operatorname  tan                           tg                displaystyle  operatorname  tg                           tg                displaystyle  operatorname  tg      used mainly russian bulgarian literature  the arctangent may denoted                     arctan                displaystyle  arctan                          atan                displaystyle  operatorname  atan                           arctg                displaystyle  operatorname  arctg                                     tan                                                                      displaystyle  tan   -      the bessel functions may denoted                              j                      n                                   x                                  displaystyle j  n  x                         besselj                          n                 x                                  displaystyle  operatorname  besselj   n x                                               b            e                                  e            l            j                                   n                 x                                  displaystyle   rm  besselj   n x     subscripts often used indicate arguments  typically integers  in cases  semicolon     even backslash     used separator  in case  translation algorithmic languages admits ambiguity may lead confusion superscripts may indicate exponentiation  modification function  examples  particularly trigonometric functions hyperbolic functions  include                               cos                                                                   x                         displaystyle  cos      x     usually indicates                              cos                          x                                                                                     displaystyle   cos x                                       cos                                                                   x                         displaystyle  cos      x     typically                              cos                          x                                                                                     displaystyle   cos x           never                     cos                          cos                          x                                  displaystyle  cos  cos x                                   cos                                                                                x                         displaystyle  cos   -   x     usually means                     arccos                          x                         displaystyle  arccos x                                   cos                          x                                                                                                  displaystyle   cos x    -       one typically causes confusion  since interpretation exponent value inconsistent others     evaluation special functions    most special functions considered function complex variable  they analytic  singularities cuts described  differential integral representations known expansion taylor series asymptotic series available  in addition  sometimes exist relations special functions  complicated special function expressed terms simpler functions  various representations used evaluation   simplest way evaluate function expand taylor series  however  representation may converge slowly all  in algorithmic languages  rational approximations typically used  although may behave badly case complex argument     history special functions       classical theory    while trigonometry codified clear already expert mathematicians eighteenth century   search complete unified theory special functions continued since nineteenth century  the high point special function theory period           theory elliptic functions  treatises essentially complete  tannery molk  could written handbooks basic identities theory  they based techniques complex analysis from time onwards would assumed analytic function theory  already unified trigonometric exponential functions  fundamental tool  the end century also saw detailed discussion spherical harmonics     changing fixed motivations    of course wish broad theory including many possible known special functions intellectual appeal  worth noting motivations   for long time  special functions particular province applied mathematics  applications physical sciences engineering determined relative importance functions  in days electronic computer  ultimate compliment special function computation  hand  extended tables values  this capital-intensive process  intended make function available look-up  familiar logarithm tables  the aspects theory mattered might two numerical analysis  discovery infinite series analytical expression allowing rapid calculation  andreduction many functions possible given function in contrast  one might say  approaches typical interests pure mathematics  asymptotic analysis  analytic continuation monodromy complex plane  discovery symmetry principles structure behind fa ade endless formulae rows   there real conflict approaches  fact     twentieth century    the twentieth century saw several waves interest special function theory   the classic whittaker watson        textbook sought unify theory using complex variables  g  n  watson tome a treatise theory bessel functions pushed techniques far possible one important type particularly admitted asymptotics studied the later bateman manuscript project  editorship arthur erd lyi  attempted encyclopedic  came around time electronic computation coming fore tabulation ceased main issue     contemporary theories    the modern theory orthogonal polynomials definite limited scope  hypergeometric series became intricate theory  need later conceptual arrangement  lie groups  particular representation theory  explain spherical function general       onwards substantial parts classical theory could recast terms lie groups  further   work algebraic combinatorics also revived interest older parts theory  conjectures ian g  macdonald helped open large active new fields typical special function flavour  difference equations begun take place besides differential equations source special functions    special functions number theory   in number theory  certain special functions traditionally studied  particular dirichlet series modular forms  almost aspects special function theory reflected  well new ones  came monstrous moonshine theory    researchers      see also   list mathematical functionslist special functions eponymselementary function   references   andrews  george e   askey  richard  roy  ranjan         special functions  encyclopedia mathematics applications      cambridge university press  isbn    - -   -     -   mr            external links   national institute standards technology  united states department commerce  nist digital library mathematical functions  archived original december          weisstein  eric w   special function   mathworld online calculator  online scientific calculator     functions       digits  many complex   german language special functions eqworld  the world mathematical equationsspecial functions polynomials gerard  hooft stefan nobbenhuis  april         numerical methods special functions  a  gil  j  segura  n m  temme        r  jagannathan   p q -special functionsspecialfunctionswiki
in mathematics computer science  computer algebra  also called symbolic computation algebraic computation  scientific area refers study development algorithms software manipulating mathematical expressions mathematical objects  although computer algebra could considered subfield scientific computing  generally considered distinct fields scientific computing usually based numerical computation approximate floating point numbers  symbolic computation emphasizes exact computation expressions containing variables given value manipulated symbols software applications perform symbolic calculations called computer algebra systems  term system alluding complexity main applications  include  least  method represent mathematical data computer  user programming language  usually different language used implementation   dedicated memory manager  user interface input output mathematical expressions  large set routines perform usual operations  like simplification expressions  differentiation using chain rule  polynomial factorization  indefinite integration  etc computer algebra widely used experiment mathematics design formulas used numerical programs  it also used complete scientific computations  purely numerical methods fail  public key cryptography  non-linear problems    terminology   some authors distinguish computer algebra symbolic computation using latter name refer kinds symbolic computation computation mathematical formulas  some authors use symbolic computation computer science aspect subject  computer algebra  mathematical aspect  in languages name field direct translation english name  typically  called calcul formel french  means  formal computation   this name reflects ties field formal methods symbolic computation also referred  past  symbolic manipulation  algebraic manipulation  symbolic processing  symbolic mathematics  symbolic algebra  terms  also refer non-computational manipulation  longer used reference computer algebra    scientific community   there learned society specific computer algebra  function assumed special interest group association computing machinery named sigsam  special interest groupon symbolic algebraic manipulation  there several annual conferences computer algebra  premier issac  international symposium symbolic algebraic computation   regularly sponsored sigsam there several journals specializing computer algebra  top one journal symbolic computation founded      bruno buchberger  there also several journals regularly publish articles computer algebra    computer science aspects       data representation    as numerical software highly efficient approximate numerical computation  common  computer algebra  emphasize exact computation exactly represented data  such exact representation implies  even size output small  intermediate data generated computation may grow unpredictable way  this behavior called expression swell  to obviate problem  various methods used representation data  well algorithms manipulate them      numbers     the usual numbers systems used numerical computation floating point numbers integers fixed bounded size  none convenient computer algebra  due expression swell therefore  basic numbers used computer algebra integers mathematicians  commonly represented unbounded signed sequence digits base numeration  usually largest base allowed machine word  these integers allow define rational numbers  irreducible fractions two integers programming efficient implementation arithmetic operations hard task  therefore  free computer algebra systems commercial ones mathematica maple  software   use gmp library  thus de facto standard      expressions     except numbers variables  every mathematical expression may viewed symbol operator followed sequence operands  in computer algebra software  expressions usually represented way  this representation flexible  many things seem mathematical expressions first glance  may represented manipulated such  for example  equation expression     operator  matrix may represented expression  matrix  operator rows operands even programs may considered represented expressions operator  procedure   least  two operands  list parameters body  expression  body  operator sequence instructions operands  conversely  mathematical expression may viewed program  for example  expression   b may viewed program addition  b parameters  executing program consists evaluating expression given values b  value indeterminates   result evaluation simply input this process delayed evaluation fundamental computer algebra  for example  operator     equations also  computer algebra systems  name program equality test  normally  evaluation equation results equation   equality test needed  either explicitly asked user  evaluation boolean  command  automatically started system case test inside program evaluation boolean     executed as size operands expression unpredictable may change working session  sequence operands usually represented sequence either pointers  like macsyma  entries hash table  like maple      simplification    the raw application basic rules differentiation respect x expression                                                    x                                  displaystyle  x     gives result                     x                                                x                                                                                                              x                                                                                              log                                                 x                                                                                                                                                       displaystyle x cdot  x-   cdot    x  cdot  left   cdot  log x cdot   frac       right     such complicated expression clearly acceptable  procedure simplification needed soon one works general expressions this simplification normally done rewriting rules  there several classes rewriting rules considered  the simplest consists rewriting rules always reduce size expression  like e   e     sin         they systematically applied computer algebra systems the first difficulty occurs associative operations like addition multiplication  the standard way deal associativity consider addition multiplication arbitrary number operands    b   c represented      b  c   thus    b   c     b    c simplified      b  c   displayed   b   c  what   b   c  to deal problem  simplest way rewrite systematically  e  e   f  e f  respectively       e  e        f  e f    in words  internal representation expressions  subtraction division unary minus  outside representation numbers a second difficulty occurs commutativity addition multiplication  the problem recognize quickly like terms order combine cancel them  in fact  method finding like terms  consisting testing every pair terms  costly practicable long sums products  for solving problem  macsyma sorts operands sums products function comparison designed order like terms consecutive places  thus easily detected  in maple  hash function designed generating collisions like terms entered  allowing combine soon introduced  this design hash function allows also recognize immediately expressions subexpressions appear several times computation store once  this allows save memory space also speed computation  avoiding repetition operations several identical expressions some rewriting rules sometimes increase sometimes decrease size expressions applied  this case distributivity trigonometric identities  for example  distributivity law allows rewriting                              x                                                                                                         x                                                                             x                                                                             x                                                                   x                                  displaystyle  x        rightarrow x      x      x      x                                   x                                                      x                                                                    x                                                                    x                                                          x                                                      x                                                                            displaystyle  x-   x     x     x     x    rightarrow x    -      as way make good general choice applying rewriting rule  rewritings done explicitly asked user  for distributivity  computer function applies rewriting rule generally called  expand   the reverse rewriting rule  called  factor   requires non-trivial algorithm  thus key function computer algebra systems  see polynomial factorization     mathematical aspects   in section consider fundamental mathematical questions arise soon one wants manipulate mathematical expressions computer  we consider mainly case multivariate rational fractions  this real restriction   soon irrational functions appearing expression simplified  usually considered new indeterminates  for example                               sin                          x                                                                                             log                                    z                                                                                                                                                displaystyle   sin x       log z    -          viewed polynomial                     sin                          x                                         displaystyle  sin x                         log                                    z                                                                                    displaystyle  log z    -         equality    there two notions equality mathematical expressions  the syntactic equality equality expressions means written  represented computer  way  being trivial  syntactic equality rarely considered mathematicians  although equality easy test program  the semantic equality two expressions represent mathematical object  like                             x                                                                                                       x                                                                   x                                                                                                   displaystyle  x      x      xy        it known richardson theorem may exist algorithm decides two expressions representing numbers semantically equal  exponentials logarithms allowed expressions  therefore   semantical  equality may tested classes expressions polynomials rational fractions to test equality two expressions  instead designing specific algorithms  usual put expressions canonical form put difference normal form  test syntactic equality result unlike usual mathematics   canonical form   normal form  synonymous computer algebra  a canonical form two expressions canonical form semantically equal syntactically equal  normal form expression normal form semantically zero syntactically zero  in words  zero unique representation expressions normal form normal forms usually preferred computer algebra several reasons  firstly  canonical forms may costly compute normal forms  for example  put polynomial canonical form  one expand distributivity every product  necessary normal form  see   secondly  may case  like expressions involving radicals  canonical form  exists  depends arbitrary choices choices may different two expressions computed independently  this may make impracticable use canonical form    history   at beginning computer algebra  circa       long-known algorithms first put computers  turned highly inefficient  therefore  large part work researchers field consisted revisiting classical algebra order make effective discover efficient algorithms implement effectiveness  a typical example kind work computation polynomial greatest common divisors  required simplify fractions  surprisingly  classical euclid algorithm turned inefficient polynomials infinite fields  thus new algorithms needed developed  the also true classical algorithms linear algebra    see also   automated theorem provercomputer-assisted proofcomputational algebraic geometrycomputer algebra systemproof checkermodel checkersymbolic-numeric computationsymbolic simulationsymbolic artificial intelligence   references      further reading   for detailed definition subject  symbolic computation  an editorial   bruno buchberger  journal symbolic computation           pp      for textbooks devoted subject davenport  james h   siret  yvon  tournier   velyne         computer algebra  systems algorithms algebraic computation  translated french a  davenport j h  davenport  academic press  isbn    - -  -      -  von zur gathen  joachim  gerhard  j rgen         modern computer algebra  second ed    cambridge university press  isbn  -   -     -  geddes  k  o   czapor  s  r   labahn  g           algorithms computer algebra   doi         b        isbn    - -    -    -   buchberger  bruno  collins  george edwin  loos  r diger  albrecht  rudolf  eds           computer algebra   computing supplementa     doi            - -    -    -   isbn    - -   -     -  
in mathematics computer science  computer algebra  also called symbolic computation algebraic computation  scientific area refers study development algorithms software manipulating mathematical expressions mathematical objects  although computer algebra could considered subfield scientific computing  generally considered distinct fields scientific computing usually based numerical computation approximate floating point numbers  symbolic computation emphasizes exact computation expressions containing variables given value manipulated symbols software applications perform symbolic calculations called computer algebra systems  term system alluding complexity main applications  include  least  method represent mathematical data computer  user programming language  usually different language used implementation   dedicated memory manager  user interface input output mathematical expressions  large set routines perform usual operations  like simplification expressions  differentiation using chain rule  polynomial factorization  indefinite integration  etc computer algebra widely used experiment mathematics design formulas used numerical programs  it also used complete scientific computations  purely numerical methods fail  public key cryptography  non-linear problems    terminology   some authors distinguish computer algebra symbolic computation using latter name refer kinds symbolic computation computation mathematical formulas  some authors use symbolic computation computer science aspect subject  computer algebra  mathematical aspect  in languages name field direct translation english name  typically  called calcul formel french  means  formal computation   this name reflects ties field formal methods symbolic computation also referred  past  symbolic manipulation  algebraic manipulation  symbolic processing  symbolic mathematics  symbolic algebra  terms  also refer non-computational manipulation  longer used reference computer algebra    scientific community   there learned society specific computer algebra  function assumed special interest group association computing machinery named sigsam  special interest groupon symbolic algebraic manipulation  there several annual conferences computer algebra  premier issac  international symposium symbolic algebraic computation   regularly sponsored sigsam there several journals specializing computer algebra  top one journal symbolic computation founded      bruno buchberger  there also several journals regularly publish articles computer algebra    computer science aspects       data representation    as numerical software highly efficient approximate numerical computation  common  computer algebra  emphasize exact computation exactly represented data  such exact representation implies  even size output small  intermediate data generated computation may grow unpredictable way  this behavior called expression swell  to obviate problem  various methods used representation data  well algorithms manipulate them      numbers     the usual numbers systems used numerical computation floating point numbers integers fixed bounded size  none convenient computer algebra  due expression swell therefore  basic numbers used computer algebra integers mathematicians  commonly represented unbounded signed sequence digits base numeration  usually largest base allowed machine word  these integers allow define rational numbers  irreducible fractions two integers programming efficient implementation arithmetic operations hard task  therefore  free computer algebra systems commercial ones mathematica maple  software   use gmp library  thus de facto standard      expressions     except numbers variables  every mathematical expression may viewed symbol operator followed sequence operands  in computer algebra software  expressions usually represented way  this representation flexible  many things seem mathematical expressions first glance  may represented manipulated such  for example  equation expression     operator  matrix may represented expression  matrix  operator rows operands even programs may considered represented expressions operator  procedure   least  two operands  list parameters body  expression  body  operator sequence instructions operands  conversely  mathematical expression may viewed program  for example  expression   b may viewed program addition  b parameters  executing program consists evaluating expression given values b  value indeterminates   result evaluation simply input this process delayed evaluation fundamental computer algebra  for example  operator     equations also  computer algebra systems  name program equality test  normally  evaluation equation results equation   equality test needed  either explicitly asked user  evaluation boolean  command  automatically started system case test inside program evaluation boolean     executed as size operands expression unpredictable may change working session  sequence operands usually represented sequence either pointers  like macsyma  entries hash table  like maple      simplification    the raw application basic rules differentiation respect x expression                                                    x                                  displaystyle  x     gives result                     x                                                x                                                                                                              x                                                                                              log                                                 x                                                                                                                                                       displaystyle x cdot  x-   cdot    x  cdot  left   cdot  log x cdot   frac       right     such complicated expression clearly acceptable  procedure simplification needed soon one works general expressions this simplification normally done rewriting rules  there several classes rewriting rules considered  the simplest consists rewriting rules always reduce size expression  like e   e     sin         they systematically applied computer algebra systems the first difficulty occurs associative operations like addition multiplication  the standard way deal associativity consider addition multiplication arbitrary number operands    b   c represented      b  c   thus    b   c     b    c simplified      b  c   displayed   b   c  what   b   c  to deal problem  simplest way rewrite systematically  e  e   f  e f  respectively       e  e        f  e f    in words  internal representation expressions  subtraction division unary minus  outside representation numbers a second difficulty occurs commutativity addition multiplication  the problem recognize quickly like terms order combine cancel them  in fact  method finding like terms  consisting testing every pair terms  costly practicable long sums products  for solving problem  macsyma sorts operands sums products function comparison designed order like terms consecutive places  thus easily detected  in maple  hash function designed generating collisions like terms entered  allowing combine soon introduced  this design hash function allows also recognize immediately expressions subexpressions appear several times computation store once  this allows save memory space also speed computation  avoiding repetition operations several identical expressions some rewriting rules sometimes increase sometimes decrease size expressions applied  this case distributivity trigonometric identities  for example  distributivity law allows rewriting                              x                                                                                                         x                                                                             x                                                                             x                                                                   x                                  displaystyle  x        rightarrow x      x      x      x                                   x                                                      x                                                                    x                                                                    x                                                          x                                                      x                                                                            displaystyle  x-   x     x     x     x    rightarrow x    -      as way make good general choice applying rewriting rule  rewritings done explicitly asked user  for distributivity  computer function applies rewriting rule generally called  expand   the reverse rewriting rule  called  factor   requires non-trivial algorithm  thus key function computer algebra systems  see polynomial factorization     mathematical aspects   in section consider fundamental mathematical questions arise soon one wants manipulate mathematical expressions computer  we consider mainly case multivariate rational fractions  this real restriction   soon irrational functions appearing expression simplified  usually considered new indeterminates  for example                               sin                          x                                                                                             log                                    z                                                                                                                                                displaystyle   sin x       log z    -          viewed polynomial                     sin                          x                                         displaystyle  sin x                         log                                    z                                                                                    displaystyle  log z    -         equality    there two notions equality mathematical expressions  the syntactic equality equality expressions means written  represented computer  way  being trivial  syntactic equality rarely considered mathematicians  although equality easy test program  the semantic equality two expressions represent mathematical object  like                             x                                                                                                       x                                                                   x                                                                                                   displaystyle  x      x      xy        it known richardson theorem may exist algorithm decides two expressions representing numbers semantically equal  exponentials logarithms allowed expressions  therefore   semantical  equality may tested classes expressions polynomials rational fractions to test equality two expressions  instead designing specific algorithms  usual put expressions canonical form put difference normal form  test syntactic equality result unlike usual mathematics   canonical form   normal form  synonymous computer algebra  a canonical form two expressions canonical form semantically equal syntactically equal  normal form expression normal form semantically zero syntactically zero  in words  zero unique representation expressions normal form normal forms usually preferred computer algebra several reasons  firstly  canonical forms may costly compute normal forms  for example  put polynomial canonical form  one expand distributivity every product  necessary normal form  see   secondly  may case  like expressions involving radicals  canonical form  exists  depends arbitrary choices choices may different two expressions computed independently  this may make impracticable use canonical form    history   at beginning computer algebra  circa       long-known algorithms first put computers  turned highly inefficient  therefore  large part work researchers field consisted revisiting classical algebra order make effective discover efficient algorithms implement effectiveness  a typical example kind work computation polynomial greatest common divisors  required simplify fractions  surprisingly  classical euclid algorithm turned inefficient polynomials infinite fields  thus new algorithms needed developed  the also true classical algorithms linear algebra    see also   automated theorem provercomputer-assisted proofcomputational algebraic geometrycomputer algebra systemproof checkermodel checkersymbolic-numeric computationsymbolic simulationsymbolic artificial intelligence   references      further reading   for detailed definition subject  symbolic computation  an editorial   bruno buchberger  journal symbolic computation           pp      for textbooks devoted subject davenport  james h   siret  yvon  tournier   velyne         computer algebra  systems algorithms algebraic computation  translated french a  davenport j h  davenport  academic press  isbn    - -  -      -  von zur gathen  joachim  gerhard  j rgen         modern computer algebra  second ed    cambridge university press  isbn  -   -     -  geddes  k  o   czapor  s  r   labahn  g           algorithms computer algebra   doi         b        isbn    - -    -    -   buchberger  bruno  collins  george edwin  loos  r diger  albrecht  rudolf  eds           computer algebra   computing supplementa     doi            - -    -    -   isbn    - -   -     -  
computational physics study implementation numerical analysis solve problems physics quantitative theory already exists  historically  computational physics first application modern computers science  subset computational science  it sometimes regarded subdiscipline  offshoot  theoretical physics  others consider intermediate branch theoretical experimental physics - area study supplements theory experiment    overview   in physics  different theories based mathematical models provide precise predictions systems behave  unfortunately  often case solving mathematical model particular system order produce useful prediction feasible  this occur  instance  solution closed-form expression  complicated  in cases  numerical approximations required  computational physics subject deals numerical approximations  approximation solution written finite  typically large  number simple mathematical operations  algorithm   computer used perform operations compute approximated solution respective error     status physics    there debate status computation within scientific method  sometimes regarded akin theoretical physics  others regard computer simulation  computer experiments   yet still others consider intermediate different branch theoretical experimental physics  third way supplements theory experiment  while computers used experiments measurement recording  storage  data  clearly constitute computational approach    challenges computational physics   computational physics problems general difficult solve exactly  this due several  mathematical  reasons  lack algebraic analytic solvability  complexity  chaos  for example  - even apparently simple problems  calculating wavefunction electron orbiting atom strong electric field  stark effect   may require great effort formulate practical algorithm  one found   cruder brute-force techniques  graphical methods root finding  may required  on advanced side  mathematical perturbation theory also sometimes used  working shown particular example   in addition  computational cost computational complexity many-body problems  classical counterparts  tend grow quickly  a macroscopic system typically size order                                                                                           displaystyle            constituent particles  somewhat problem  solving quantum mechanical problems generally exponential order size system classical n-body order n-squared  finally  many physical systems inherently nonlinear best  worst chaotic  means difficult ensure numerical errors grow point rendering  solution  useless    methods algorithms   because computational physics uses broad class problems  generally divided amongst different mathematical problems numerically solves  methods applies  between  one consider root finding  using e g  newton-raphson method system linear equations  using e g  lu decomposition ordinary differential equations  using e g  runge kutta methods integration  using e g  romberg method monte carlo integration partial differential equations  using e g  finite difference method relaxation method matrix eigenvalue problem  using e g  jacobi eigenvalue algorithm power iteration all methods  several others  used calculate physical properties modeled systems computational physics also borrows number ideas computational chemistry - example  density functional theory used computational solid state physicists calculate properties solids basically used chemists calculate properties molecules furthermore  computational physics encompasses tuning software hardware structure solve problems  problems usually large  processing power need memory requests     divisions   it possible find corresponding computational branch every major field physics  example computational mechanics computational electrodynamics  computational mechanics consists computational fluid dynamics  cfd   computational solid mechanics computational contact mechanics  one subfield confluence cfd electromagnetic modelling computational magnetohydrodynamics  the quantum many-body problem leads naturally large rapidly growing field computational chemistry computational solid state physics important division computational physics dealing directly material science a field related computational condensed matter computational statistical mechanics  deals simulation models theories  percolation spin models  difficult solve otherwise  computational statistical physics makes heavy use monte carlo-like methods  more broadly   particularly use agent based modeling cellular automata  also concerns   finds application  use techniques  social sciences  network theory  mathematical models propagation disease  notably  sir model  spread forest fires numerical relativity  relatively  new field interested finding numerical solutions field equations general  special  relativity  computational particle physics deals problems motivated particle physics computational astrophysics application techniques methods astrophysical problems phenomena computational biophysics branch biophysics computational biology  applying methods computer science physics large complex biological problems    applications   due broad class problems computational physics deals  essential component modern research different areas physics  namely  accelerator physics  astrophysics  fluid mechanics  computational fluid dynamics   lattice field theory lattice gauge theory  especially lattice quantum chromodynamics   plasma physics  see plasma modeling   simulating physical systems  using e g  molecular dynamics   nuclear engineering computer codes  protein structure prediction  weather prediction  solid state physics  soft condensed matter physics  hypervelocity impact physics etc computational solid state physics  example  uses density functional theory calculate properties solids  method similar used chemists study molecules   other quantities interest solid state physics  electronic band structure  magnetic properties charge densities calculated several methods  including luttinger-kohn k p method ab-initio methods    see also   advanced simulation librarycecam - centre europ en de calcul atomique et mol culairedivision computational physics  dcomp  american physical societyimportant publications computational physicsmathematical theoretical physicsopen source physics  computational physics libraries pedagogical toolstimeline computational physicscar parrinello molecular dynamics   references      further reading   a k  hartmann  practical guide computer simulations  world scientific       international journal modern physics c  ijmpc   physics computers  world scientificsteven e  koonin  computational physics  addison-wesley       t  pang  an introduction computational physics  cambridge university press       b  stickler  e  schachinger  basic concepts computational physics  springer verlag         isbn               e  winsberg  science age computer simulation  chicago  university chicago press          external links   c   iupap commission computational physicsamerican physical society  division computational physicsinstitute physics  computational physics groupscidac  scientific discovery advanced computingopen source physicsscinet scientific software frameworkcomputational physics course youtube videos
computational chemistry branch chemistry uses computer simulation assist solving chemical problems  it uses methods theoretical chemistry  incorporated computer programs  calculate structures properties molecules  groups molecules  solids  it necessary  apart relatively recent results concerning hydrogen molecular ion  dihydrogen cation  see references therein details   quantum many-body problem cannot solved analytically  much less closed form   while computational results normally complement information obtained chemical experiments  cases predict hitherto unobserved chemical phenomena  it widely used design new drugs materials examples properties structure  i e   expected positions constituent atoms   absolute relative  interaction  energies  electronic charge density distributions  dipoles higher multipole moments  vibrational frequencies  reactivity  spectroscopic quantities  cross sections collision particles the methods used cover static dynamic situations  in cases  computer time resources  memory disk space  increase rapidly size system studied   that system one molecule  group molecules  solid   computational chemistry methods range approximate highly accurate  latter usually feasible small systems only  ab initio methods based entirely quantum mechanics basic physical constants  other methods called empirical semi-empirical use additional empirical parameters both ab initio semi-empirical approaches involve approximations   these range simplified forms first-principles equations easier faster solve  approximations limiting size system  example  periodic boundary conditions   fundamental approximations underlying equations required achieve solution all   for example  ab initio calculations make born oppenheimer approximation  greatly simplifies underlying schr dinger equation assuming nuclei remain place calculation   in principle  ab initio methods eventually converge exact solution underlying equations number approximations reduced   in practice  however  impossible eliminate approximations  residual error inevitably remains   the goal computational chemistry minimize residual error keeping calculations tractable in cases  details electronic structure less important long-time phase space behavior molecules  this case conformational studies proteins protein-ligand binding thermodynamics  classical approximations potential energy surface used  typically molecular mechanics force fields  computationally less intensive electronic calculations  enable longer simulations molecular dynamics  furthermore  cheminformatics uses even empirical  computationally cheaper  methods like machine learning based physicochemical properties  one typical problem cheminformatics predict binding affinity drug molecules given target  other problems include predicting binding specificity  off-target effects  toxicity  pharmacokinetic properties    history   building founding discoveries theories history quantum mechanics  first theoretical calculations chemistry walter heitler fritz london       using valence bond theory  the books influential early development computational quantum chemistry include linus pauling e  bright wilson      introduction quantum mechanics   applications chemistry  eyring  walter kimball      quantum chemistry  heitler      elementary wave mechanics   applications quantum chemistry  later coulson      textbook valence  served primary references chemists decades follow with development efficient computer technology      solutions elaborate wave equations complex atomic systems began realizable objective   in early      first semi-empirical atomic orbital calculations performed  theoretical chemists became extensive users early digital computers  one major advance came      paper reviews modern physics clemens c  j  roothaan       largely  lcao mo  approach  linear combination atomic orbitals molecular orbitals   many years second-most cited paper journal  a detailed account use united kingdom given smith sutcliffe  the first ab initio hartree fock method calculations diatomic molecules performed      mit  using basis set slater orbitals  for diatomic molecules  systematic study using minimum basis set first calculation larger basis set published ransil nesbet respectively       the first polyatomic calculations using gaussian orbitals performed late     s  the first configuration interaction calculations performed cambridge edsac computer     using gaussian orbitals boys coworkers  by       bibliography ab initio calculations published  largest molecules included naphthalene azulene  abstracts many earlier developments ab initio theory published schaefer in       h ckel method calculations  using simple linear combination atomic orbitals  lcao  method determine electron energies molecular orbitals   electrons conjugated hydrocarbon systems  molecules  ranging complexity butadiene benzene ovalene  generated computers berkeley oxford  these empirical methods replaced     semi-empirical methods cndo in early      efficient ab initio computer programs atmol  gaussian  ibmol  polyaytom  began used speed ab initio calculations molecular orbitals  of four programs  gaussian  vastly expanded  still use  many programs use  at time  methods molecular mechanics  mm  force field  developed  primarily norman allinger one first mentions term computational chemistry found      book computers their role physical sciences sidney fernbach abraham haskell taub  state  it seems  therefore   computational chemistry  finally more reality   during      widely different methods began seen part new emerging discipline computational chemistry  the journal computational chemistry first published      computational chemistry featured several nobel prize awards  notably            walter kohn   development density-functional theory   john pople   development computational methods quantum chemistry   received      nobel prize chemistry  martin karplus  michael levitt arieh warshel received      nobel prize chemistry  development multiscale models complex chemical systems     fields application   the term theoretical chemistry may defined mathematical description chemistry  whereas computational chemistry usually used mathematical method sufficiently well developed automated implementation computer  in theoretical chemistry  chemists  physicists  mathematicians develop algorithms computer programs predict atomic molecular properties reaction paths chemical reactions  computational chemists  contrast  may simply apply existing computer programs methodologies specific chemical questions computational chemistry two different aspects computational studies  used find starting point laboratory synthesis  assist understanding experimental data  position source spectroscopic peaks computational studies  used predict possibility far entirely unknown molecules explore reaction mechanisms readily studied via experiments thus  computational chemistry assist experimental chemist challenge experimental chemist find entirely new chemical objects several major areas may distinguished within computational chemistry the prediction molecular structure molecules use simulation forces  accurate quantum chemical methods  find stationary points energy surface position nuclei varied storing searching data chemical entities  see chemical databases  identifying correlations chemical structures properties  see quantitative structure property relationship  qspr  quantitative structure activity relationship  qsar   computational approaches help efficient synthesis compounds computational approaches design molecules interact specific ways molecules  e g  drug design catalysis     accuracy   computational chemistry exact description real-life chemistry  mathematical models physical laws nature provide us approximation  however  majority chemical phenomena described certain degree qualitative approximate quantitative computational scheme  molecules consist nuclei electrons  methods quantum mechanics apply  computational chemists often attempt solve non-relativistic schr dinger equation  relativistic corrections added  although progress made solving fully relativistic dirac equation  in principle  possible solve schr dinger equation either time-dependent time-independent form  appropriate problem hand  practice  possible except small systems  therefore  great number approximate methods strive achieve best trade-off accuracy computational cost accuracy always improved greater computational cost  significant errors present ab initio models comprising many electrons  due computational cost full relativistic-inclusive methods  this complicates study molecules interacting high atomic mass unit atoms  transitional metals catalytic properties  present algorithms computational chemistry routinely calculate properties small molecules contain    electrons errors energies less kj mol  for geometries  bond lengths predicted within picometers bond angles within     degrees  the treatment larger molecules contain dozen atoms computationally tractable approximate methods density functional theory  dft  there dispute within field whether latter methods sufficient describe complex chemical reactions  biochemistry  large molecules studied semi-empirical approximate methods  even larger molecules treated classical mechanics methods use called molecular mechanics  mm    in qm-mm methods  small parts large complexes treated quantum mechanically  qm   remainder treated approximately  mm     methods   one molecular formula represent one molecular isomer  set isomers  each isomer local minimum energy surface  called potential energy surface  created total energy  i e   electronic energy  plus repulsion energy nuclei  function coordinates nuclei  a stationary point geometry derivative energy respect displacements nuclei zero  a local  energy  minimum stationary point displacements lead increase energy  the local minimum lowest called global minimum corresponds stable isomer  if one particular coordinate change leads decrease total energy directions  stationary point transition structure coordinate reaction coordinate  this process determining stationary points called geometry optimization the determination molecular structure geometry optimization became routine efficient methods calculating first derivatives energy respect atomic coordinates became available  evaluation related second derivatives allows prediction vibrational frequencies harmonic motion estimated  more importantly  allows characterization stationary points  the frequencies related eigenvalues hessian matrix  contains second derivatives  if eigenvalues positive  frequencies real stationary point local minimum  if one eigenvalue negative  i e   imaginary frequency   stationary point transition structure  if one eigenvalue negative  stationary point complex one  usually little interest  when one found  necessary move search away experimenter looking solely local minima transition structures the total energy determined approximate solutions time-dependent schr dinger equation  usually relativistic terms included  making use born oppenheimer approximation  allows separation electronic nuclear motions  thereby simplifying schr dinger equation  this leads evaluation total energy sum electronic energy fixed nuclei positions repulsion energy nuclei  a notable exception certain approaches called direct quantum chemistry  treat electrons nuclei common footing  density functional methods semi-empirical methods variants major theme  for large systems  relative total energies compared using molecular mechanics  the ways determining total energy predict molecular structures     ab initio methods    the programs used computational chemistry based many different quantum-chemical methods solve molecular schr dinger equation associated molecular hamiltonian  methods include empirical semi-empirical parameters equations   derived directly theoretical principles  inclusion experimental data   called ab initio methods  this imply solution exact one  approximate quantum mechanical calculations  it means particular approximation rigorously defined first principles  quantum theory  solved within error margin qualitatively known beforehand  if numerical iterative methods must used  aim iterate full machine accuracy obtained  best possible finite word length computer  within mathematical physical approximations made  the simplest type ab initio electronic structure calculation hartree fock method  hf   extension molecular orbital theory  correlated electron-electron repulsion specifically taken account  average effect included calculation  as basis set size increased  energy wave function tend towards limit called hartree fock limit  many types calculations  termed post-hartree fock methods  begin hartree fock calculation subsequently correct electron-electron repulsion  referred also electronic correlation  as methods pushed limit  approach exact solution non-relativistic schr dinger equation  to obtain exact agreement experiment  necessary include relativistic spin orbit terms  far important heavy atoms  in approaches  along choice method  necessary choose basis set  this set functions  usually centered different atoms molecule  used expand molecular orbitals linear combination atomic orbitals  lcao  molecular orbital method ansatz  ab initio methods need define level theory  method  basis set the hartree fock wave function single configuration determinant  in cases  particularly bond breaking processes  inadequate  several configurations must used  here  coefficients configurations  basis functions  optimized together the total molecular energy evaluated function molecular geometry  words  potential energy surface  such surface used reaction dynamics  the stationary points surface lead predictions different isomers transition structures conversion isomers  determined without full knowledge complete surface a particularly important objective  called computational thermochemistry  calculate thermochemical quantities enthalpy formation chemical accuracy  chemical accuracy accuracy required make realistic chemical predictions generally considered   kcal mol   kj mol  to reach accuracy economic way necessary use series post-hartree fock methods combine results  these methods called quantum chemistry composite methods     density functional methods    density functional theory  dft  methods often considered ab initio methods determining molecular electronic structure  even though many common functionals use parameters derived empirical data  complex calculations  in dft  total energy expressed terms total one-electron density rather wave function  in type calculation  approximate hamiltonian approximate expression total electron density  dft methods accurate little computational cost  some methods combine density functional exchange functional hartree fock exchange term termed hybrid functional methods     semi-empirical methods    semi-empirical quantum chemistry methods based hartree fock method formalism  make many approximations obtain parameters empirical data  they important computational chemistry      especially treating large molecules full hartree fock method without approximations costly  the use empirical parameters appears allow inclusion correlation effects methods primitive semi-empirical methods designed even  two-electron part hamiltonian explicitly included  for  -electron systems  h ckel method proposed erich h ckel  valence electron systems  extended h ckel method proposed roald hoffmann  sometimes  h ckel methods referred  completely emprirical  derive hamiltonian yet  term  empirical methods    empirical force fields  usually used describe molecular mechanics     molecular mechanics    in many cases  large molecular systems modeled successfully avoiding quantum mechanical calculations entirely  molecular mechanics simulations  example  use one classical expression energy compound  instance harmonic oscillator  all constants appearing equations must obtained beforehand experimental data ab initio calculations the database compounds used parameterization  i e   resulting set parameters functions called force field  crucial success molecular mechanics calculations  a force field parameterized specific class molecules  instance proteins  would expected relevance describing molecules class these methods applied proteins large biological molecules  allow studies approach interaction  docking  potential drug molecules     methods solids    computational chemical methods applied solid state physics problems  the electronic structure crystal general described band structure  defines energies electron orbitals point brillouin zone  ab initio semi-empirical calculations yield orbital energies  therefore  applied band structure calculations  since time-consuming calculate energy molecule  even time-consuming calculate entire list points brillouin zone     chemical dynamics    once electronic nuclear variables separated  within born oppenheimer representation   time-dependent approach  wave packet corresponding nuclear degrees freedom propagated via time evolution operator  physics  associated time-dependent schr dinger equation  full molecular hamiltonian   in complementary energy-dependent approach  time-independent schr dinger equation solved using scattering theory formalism  the potential representing interatomic interaction given potential energy surfaces  in general  potential energy surfaces coupled via vibronic coupling terms the popular methods propagating wave packet associated molecular geometry split operator technique chebyshev  real  polynomial multi-configuration time-dependent hartree method  mctdh  semiclassical method     molecular dynamics    molecular dynamics  md  use either quantum mechanics  molecular mechanics mixture calculate forces used solve newton laws motion examine time-dependent behaviour systems  the result molecular dynamics simulation trajectory describes position velocity particles varies time  the phase point system described positions momenta particles previous time point  determine next phase point time integrating newton laws motion      monte carlo    monte carlo  mc  generates configurations system making random changes positions particles  together orientations conformations appropriate  it random sampling method  makes use so-called importance sampling  importance sampling methods able generate low energy states  enables properties calculated accurately  the potential energy configuration system calculated  together values properties  positions atoms     quantum mechanics molecular mechanics  qm mm     qm mm hybrid method attempts combine accuracy quantum mechanics speed molecular mechanics  it useful simulating large molecules enzymes    interpreting molecular wave functions   the atoms molecules  qtaim  model richard bader developed effectively link quantum mechanical model molecule  electronic wavefunction  chemically useful concepts atoms molecules  functional groups  bonding  theory lewis pairs  valence bond model  bader demonstrated empirically useful chemistry concepts related topology observable charge density distribution  whether measured calculated quantum mechanical wavefunction  qtaim analysis molecular wavefunctions implemented  example  aimall software package    software packages   many self-sufficient computational chemistry software packages exist  some include many methods covering wide range  others concentrate specific range even one method  details found biomolecular modelling programs  proteins  nucleic acid molecular mechanics programs quantum chemistry solid state physics software supporting several methods molecular design softwaresemi-empirical programs valence bond programs    see also      citations      general bibliography   c  j  cramer essentials computational chemistry  john wiley   sons        t  clark a handbook computational chemistry  wiley  new york        dronskowski  richard         computational chemistry solid state materials  a guide materials scientists  chemists  physicists others  doi                        isbn                s cid          a k  hartmann  practical guide computer simulations  world scientific       f  jensen introduction computational chemistry  john wiley   sons        k i  ramachandran  g deepa krishnan namboori  p k  computational chemistry molecular modeling principles applications springer-verlag gmbh isbn    - -   -     -  rogers  donald w          computational chemistry using pc  doi                     isbn            p  v  r  schleyer  editor-in-chief   encyclopedia computational chemistry  wiley        isbn  -   -     -x d  sherrill  notes quantum mechanics computational chemistry j  simons an introduction theoretical chemistry  cambridge        isbn    - -   -     -  a  szabo  n s  ostlund  modern quantum chemistry  mcgraw-hill        d  young computational chemistry  a practical guide applying techniques real world problems  john wiley   sons        d  young introduction computational chemistry lewars  errol g          computational chemistry  heidelberg  springer  bibcode     coch book     l  doi            -  -   -    -   isbn    -  -   -    -     specialized journals computational chemistry   annual reports computational chemistrycomputational theoretical chemistrycomputational theoretical polymer sciencecomputers   chemical engineeringjournal chemical information modelingjournal chemical information modelingjournal chemical softwarejournal chemical theory computationjournal cheminformaticsjournal computational chemistryjournal computer aided chemistryjournal computer chemistry japanjournal computer-aided molecular designjournal theoretical computational chemistrymolecular informaticstheoretical chemistry accounts   external links   nist computational chemistry comparison benchmark database   contains database thousands computational experimental results hundreds systemsamerican chemical society division computers chemistry   american chemical society computers chemistry division  resources grants  awards  contacts meetings cstb report mathematical research materials science  opportunities perspectives   cstb report      atomistic computer modeling materials  sma        free mit coursechem           computational chemistry free university minnesota coursetechnology roadmap computational chemistryapplications molecular materials modelling impact advances computing communications technologies chemical science technology cstb reportmd computational chemistry applications gpus
bioinformatics    listen   interdisciplinary field develops methods software tools understanding biological data  particular data sets large complex  as interdisciplinary field science  bioinformatics combines biology  computer science  information engineering  mathematics statistics analyze interpret biological data  bioinformatics used silico analyses biological queries using mathematical statistical techniques bioinformatics includes biological studies use computer programming part methodology  well specific analysis  pipelines  repeatedly used  particularly field genomics  common uses bioinformatics include identification candidates genes single nucleotide polymorphisms  snps   often  identification made aim better understand genetic basis disease  unique adaptations  desirable properties  esp  agricultural species   differences populations  in less formal way  bioinformatics also tries understand organizational principles within nucleic acid protein sequences  called proteomics    overview   bioinformatics become important part many areas biology  in experimental molecular biology  bioinformatics techniques image signal processing allow extraction useful results large amounts raw data  in field genetics  aids sequencing annotating genomes observed mutations  it plays role text mining biological literature development biological gene ontologies organize query biological data  it also plays role analysis gene protein expression regulation  bioinformatics tools aid comparing  analyzing interpreting genetic genomic data generally understanding evolutionary aspects molecular biology  at integrative level  helps analyze catalogue biological pathways networks important part systems biology  in structural biology  aids simulation modeling dna  rna  proteins well biomolecular interactions     history    historically  term bioinformatics mean means today  paulien hogeweg ben hesper coined      refer study information processes biotic systems  this definition placed bioinformatics field parallel biochemistry  study chemical processes biological systems       sequences     computers became essential molecular biology protein sequences became available frederick sanger determined sequence insulin early     s  comparing multiple sequences manually turned impractical  a pioneer field margaret oakley dayhoff  she compiled one first protein sequence databases  initially published books pioneered methods sequence alignment molecular evolution  another early contributor bioinformatics elvin a  kabat  pioneered biological sequence analysis      comprehensive volumes antibody sequences released tai te wu           in      new techniques sequencing dna applied bacteriophage ms   x     extended nucleotide sequences parsed informational statistical algorithms   these studies illustrated well known features  coding segments triplet code  revealed straightforward statistical analyses thus proof concept bioinformatics would insightful     goals    to study normal cellular activities altered different disease states  biological data must combined form comprehensive picture activities  therefore  field bioinformatics evolved pressing task involves analysis interpretation various types data  this also includes nucleotide amino acid sequences  protein domains  protein structures  the actual process analyzing interpreting data referred computational biology  important sub-disciplines within bioinformatics computational biology include development implementation computer programs enable efficient access  management use  various types information development new algorithms  mathematical formulas  statistical measures assess relationships among members large data sets  for example  methods locate gene within sequence  predict protein structure function  cluster protein sequences families related sequences the primary goal bioinformatics increase understanding biological processes  what sets apart approaches  however  focus developing applying computationally intensive techniques achieve goal  examples include  pattern recognition  data mining  machine learning algorithms  visualization  major research efforts field include sequence alignment  gene finding  genome assembly  drug design  drug discovery  protein structure alignment  protein structure prediction  prediction gene expression protein protein interactions  genome-wide association studies  modeling evolution cell division mitosis bioinformatics entails creation advancement databases  algorithms  computational statistical techniques  theory solve formal practical problems arising management analysis biological data over past decades  rapid developments genomic molecular research technologies developments information technologies combined produce tremendous amount information related molecular biology  bioinformatics name given mathematical computing approaches used glean understanding biological processes common activities bioinformatics include mapping analyzing dna protein sequences  aligning dna protein sequences compare  creating viewing  -d models protein structures     relation fields    bioinformatics science field similar distinct biological computation  often considered synonymous computational biology  biological computation uses bioengineering biology build biological computers  whereas bioinformatics uses computation better understand biology  bioinformatics computational biology involve analysis biological data  particularly dna  rna  protein sequences  the field bioinformatics experienced explosive growth starting mid-     driven largely human genome project rapid advances dna sequencing technology analyzing biological data produce meaningful information involves writing running software programs use algorithms graph theory  artificial intelligence  soft computing  data mining  image processing  computer simulation  the algorithms turn depend theoretical foundations discrete mathematics  control theory  system theory  information theory  statistics    sequence analysis   since phage  -x    sequenced       dna sequences thousands organisms decoded stored databases  this sequence information analyzed determine genes encode proteins  rna genes  regulatory sequences  structural motifs  repetitive sequences  a comparison genes within species different species show similarities protein functions  relations species  use molecular systematics construct phylogenetic trees   with growing amount data  long ago became impractical analyze dna sequences manually  computer programs blast used routinely search sequences               organisms  containing     billion nucleotides     dna sequencing    before sequences analyzed obtained data storage bank example genbank  dna sequencing still non-trivial problem raw data may noisy afflicted weak signals  algorithms developed base calling various experimental approaches dna sequencing     sequence assembly    most dna sequencing techniques produce short fragments sequence need assembled obtain complete gene genome sequences  the so-called shotgun sequencing technique  used  example  the institute genomic research  tigr  sequence first bacterial genome  haemophilus influenzae  generates sequences many thousands small dna fragments  ranging        nucleotides long  depending sequencing technology   the ends fragments overlap  aligned properly genome assembly program  used reconstruct complete genome  shotgun sequencing yields sequence data quickly  task assembling fragments quite complicated larger genomes  for genome large human genome  may take many days cpu time large-memory  multiprocessor computers assemble fragments  resulting assembly usually contains numerous gaps must filled later  shotgun sequencing method choice virtually genomes sequenced today  genome assembly algorithms critical area bioinformatics research     genome annotation    in context genomics  annotation process marking genes biological features dna sequence  this process needs automated genomes large annotate hand  mention desire annotate many genomes possible  rate sequencing ceased pose bottleneck  annotation made possible fact genes recognisable start stop regions  although exact sequence found regions vary genes the first description comprehensive genome annotation system published      team the institute genomic research performed first complete sequencing analysis genome free-living organism  bacterium haemophilus influenzae  owen white designed built software system identify genes encoding proteins  transfer rnas  ribosomal rnas  sites  make initial functional assignments  most current genome annotation systems work similarly  programs available analysis genomic dna  genemark program trained used find protein-coding genes haemophilus influenzae  constantly changing improving following goals human genome project left achieve closure       new project developed national human genome research institute u s appeared  the so-called encode project collaborative data collection functional elements human genome uses next-generation dna-sequencing technologies genomic tiling arrays  technologies able automatically generate large amounts data dramatically reduced per-base cost accuracy  base call error  fidelity  assembly error       gene function prediction     while genome annotation primarily based sequence similarity  thus homology   properties sequences used predict function genes  in fact  gene function prediction methods focus protein sequences informative feature-rich  for instance  distribution hydrophobic amino acids predicts transmembrane segments proteins  however  protein function prediction also use external information gene  protein  expression data  protein structure  protein-protein interactions     computational evolutionary biology    evolutionary biology study origin descent species  well change time  informatics assisted evolutionary biologists enabling researchers trace evolution large number organisms measuring changes dna  rather physical taxonomy physiological observations alone compare entire genomes  permits study complex evolutionary events  gene duplication  horizontal gene transfer  prediction factors important bacterial speciation build complex computational population genetics models predict outcome system timetrack share information increasingly large number species organismsfuture work endeavours reconstruct complex tree life the area research within computer science uses genetic algorithms sometimes confused computational evolutionary biology  two areas necessarily related     comparative genomics    the core comparative genome analysis establishment correspondence genes  orthology analysis  genomic features different organisms  it intergenomic maps make possible trace evolutionary processes responsible divergence two genomes  a multitude evolutionary events acting various organizational levels shape genome evolution  at lowest level  point mutations affect individual nucleotides  at higher level  large chromosomal segments undergo duplication  lateral transfer  inversion  transposition  deletion insertion  ultimately  whole genomes involved processes hybridization  polyploidization endosymbiosis  often leading rapid speciation  the complexity genome evolution poses many exciting challenges developers mathematical models algorithms  recourse spectrum algorithmic  statistical mathematical techniques  ranging exact  heuristics  fixed parameter approximation algorithms problems based parsimony models markov chain monte carlo algorithms bayesian analysis problems based probabilistic models many studies based detection sequence homology assign sequences protein families     pan genomics    pan genomics concept introduced      tettelin medini eventually took root bioinformatics  pan genome complete gene repertoire particular taxonomic group  although initially applied closely related strains species  applied larger context like genus  phylum etc  it divided two parts- the core genome  set genes common genomes study  these often housekeeping genes vital survival  the dispensable flexible genome  set genes present one genomes study  a bioinformatics tool bpga used characterize pan genome bacterial species     genetics disease    with advent next-generation sequencing obtaining enough sequence data map genes complex diseases infertility  breast cancer alzheimer disease  genome-wide association studies useful approach pinpoint mutations responsible complex diseases  through studies  thousands dna variants identified associated similar diseases traits  furthermore  possibility genes used prognosis  diagnosis treatment one essential applications  many studies discussing promising ways choose genes used problems pitfalls using genes predict disease presence prognosis     analysis mutations cancer    in cancer  genomes affected cells rearranged complex even unpredictable ways  massive sequencing efforts used identify previously unknown point mutations variety genes cancer  bioinformaticians continue produce specialized automated systems manage sheer volume sequence data produced  create new algorithms software compare sequencing results growing collection human genome sequences germline polymorphisms  new physical detection technologies employed  oligonucleotide microarrays identify chromosomal gains losses  called comparative genomic hybridization   single-nucleotide polymorphism arrays detect known point mutations  these detection methods simultaneously measure several hundred thousand sites throughout genome  used high-throughput measure thousands samples  generate terabytes data per experiment  again massive amounts new types data generate new opportunities bioinformaticians  the data often found contain considerable variability  noise  thus hidden markov model change-point analysis methods developed infer real copy number changes two important principles used analysis cancer genomes bioinformatically pertaining identification mutations exome  first  cancer disease accumulated somatic mutations genes  second cancer contains driver mutations need distinguished passengers with breakthroughs next-generation sequencing technology providing field bioinformatics  cancer genomics could drastically change  these new methods software allow bioinformaticians sequence many cancer genomes quickly affordably  this could create flexible process classifying types cancer analysis cancer driven mutations genome  furthermore  tracking patients disease progresses may possible future sequence cancer samples another type data requires novel informatics development analysis lesions found recurrent among many tumors    gene protein expression       analysis gene expression    the expression many genes determined measuring mrna levels multiple techniques including microarrays  expressed cdna sequence tag  est  sequencing  serial analysis gene expression  sage  tag sequencing  massively parallel signature sequencing  mpss   rna-seq  also known  whole transcriptome shotgun sequencing   wtss   various applications multiplexed in-situ hybridization  all techniques extremely noise-prone subject bias biological measurement  major research area computational biology involves developing statistical tools separate signal noise high-throughput gene expression studies  such studies often used determine genes implicated disorder  one might compare microarray data cancerous epithelial cells data non-cancerous cells determine transcripts up-regulated down-regulated particular population cancer cells     analysis protein expression    protein microarrays high throughput  ht  mass spectrometry  ms  provide snapshot proteins present biological sample  bioinformatics much involved making sense protein microarray ht ms data  former approach faces similar problems microarrays targeted mrna  latter involves problem matching large amounts mass data predicted masses protein sequence databases  complicated statistical analysis samples multiple  incomplete peptides protein detected  cellular protein localization tissue context achieved affinity proteomics displayed spatial data based immunohistochemistry tissue microarrays     analysis regulation    gene regulation complex orchestration events signal  potentially extracellular signal hormone  eventually leads increase decrease activity one proteins  bioinformatics techniques applied explore various steps process for example  gene expression regulated nearby elements genome  promoter analysis involves identification study sequence motifs dna surrounding coding region gene  these motifs influence extent region transcribed mrna  enhancer elements far away promoter also regulate gene expression  three-dimensional looping interactions  these interactions determined bioinformatic analysis chromosome conformation capture experiments expression data used infer gene regulation  one might compare microarray data wide variety states organism form hypotheses genes involved state  in single-cell organism  one might compare stages cell cycle  along various stress conditions  heat shock  starvation  etc    one apply clustering algorithms expression data determine genes co-expressed  for example  upstream regions  promoters  co-expressed genes searched over-represented regulatory elements  examples clustering algorithms applied gene clustering k-means clustering  self-organizing maps  soms   hierarchical clustering  consensus clustering methods    analysis cellular organization   several approaches developed analyze location organelles  genes  proteins  components within cells  this relevant location components affects events within cell thus helps us predict behavior biological systems  a gene ontology category  cellular component  devised capture subcellular localization many biological databases     microscopy image analysis    microscopic pictures allow us locate organelles well molecules  it may also help us distinguish normal abnormal cells  e g  cancer     protein localization    the localization proteins helps us evaluate role protein  for instance  protein found nucleus may involved gene regulation splicing  by contrast  protein found mitochondria  may involved respiration metabolic processes  protein localization thus important component protein function prediction  there well developed protein subcellular localization prediction resources available  including protein subcellular location databases  prediction tools     nuclear organization chromatin    data high-throughput chromosome conformation capture experiments  hi-c  experiment  chia-pet  provide information spatial proximity dna loci  analysis experiments determine three-dimensional structure nuclear organization chromatin  bioinformatic challenges field include partitioning genome domains  topologically associating domains  tads   organised together three-dimensional space    structural bioinformatics   protein structure prediction another important application bioinformatics  the amino acid sequence protein  so-called primary structure  easily determined sequence gene codes it  in vast majority cases  primary structure uniquely determines structure native environment   of course  exceptions  bovine spongiform encephalopathy  mad cow disease  prion   knowledge structure vital understanding function protein  structural information usually classified one secondary  tertiary quaternary structure  a viable general solution predictions remains open problem  most efforts far directed towards heuristics work time one key ideas bioinformatics notion homology  in genomic branch bioinformatics  homology used predict function gene  sequence gene a  whose function known  homologous sequence gene b  whose function unknown  one could infer b may share a function  in structural branch bioinformatics  homology used determine parts protein important structure formation interaction proteins  in technique called homology modeling  information used predict structure protein structure homologous protein known  this currently remains way predict protein structures reliably one example hemoglobin humans hemoglobin legumes  leghemoglobin   distant relatives protein superfamily  both serve purpose transporting oxygen organism  although proteins completely different amino acid sequences  protein structures virtually identical  reflects near identical purposes shared ancestor other techniques predicting protein structure include protein threading de novo  scratch  physics-based modeling another aspect structural bioinformatics include use protein structures virtual screening models quantitative structure-activity relationship models proteochemometric models  pcm   furthermore  protein crystal structure used simulation example ligand-binding studies silico mutagenesis studies    network systems biology   network analysis seeks understand relationships within biological networks metabolic protein protein interaction networks  although biological networks constructed single type molecule entity  genes   network biology often attempts integrate many different data types  proteins  small molecules  gene expression data  others  connected physically  functionally  both systems biology involves use computer simulations cellular subsystems  networks metabolites enzymes comprise metabolism  signal transduction pathways gene regulatory networks  analyze visualize complex connections cellular processes  artificial life virtual evolution attempts understand evolutionary processes via computer simulation simple  artificial  life forms     molecular interaction networks    tens thousands three-dimensional protein structures determined x-ray crystallography protein nuclear magnetic resonance spectroscopy  protein nmr  central question structural bioinformatics whether practical predict possible protein protein interactions based  d shapes  without performing protein protein interaction experiments  a variety methods developed tackle protein protein docking problem  though seems still much work done field other interactions encountered field include protein ligand  including drug  protein peptide  molecular dynamic simulation movement atoms rotatable bonds fundamental principle behind computational algorithms  termed docking algorithms  studying molecular interactions    others       literature analysis    the growth number published literature makes virtually impossible read every paper  resulting disjointed sub-fields research  literature analysis aims employ computational statistical linguistics mine growing library text resources  for example abbreviation recognition   identify long-form abbreviation biological termsnamed-entity recognition   recognizing biological terms gene namesprotein protein interaction   identify proteins interact proteins textthe area research draws statistics computational linguistics     high-throughput image analysis    computational technologies used accelerate fully automate processing  quantification analysis large amounts high-information-content biomedical imagery  modern image analysis systems augment observer ability make measurements large complex set images  improving accuracy  objectivity  speed  a fully developed analysis system may completely replace observer  although systems unique biomedical imagery  biomedical imaging becoming important diagnostics research  some examples high-throughput high-fidelity quantification sub-cellular localization  high-content screening  cytohistopathology  bioimage informatics morphometricsclinical image analysis visualizationdetermining real-time air-flow patterns breathing lungs living animalsquantifying occlusion size real-time imagery development recovery arterial injurymaking behavioral observations extended video recordings laboratory animalsinfrared measurements metabolic activity determinationinferring clone overlaps dna mapping  e g  sulston score    high-throughput single cell data analysis    computational techniques used analyse high-throughput  low-measurement single cell data  obtained flow cytometry  these methods typically involve finding populations cells relevant particular disease state experimental condition     biodiversity informatics    biodiversity informatics deals collection analysis biodiversity data  taxonomic databases  microbiome data  examples analyses include phylogenetics  niche modelling  species richness mapping  dna barcoding  species identification tools     ontologies data integration    biological ontologies directed acyclic graphs controlled vocabularies  they designed capture biological concepts descriptions way easily categorised analysed computers  when categorised way  possible gain added value holistic integrated analysis the obo foundry effort standardise certain ontologies  one widespread gene ontology describes gene function  there also ontologies describe phenotypes    databases   databases essential bioinformatics research applications  many databases exist  covering various information types  example  dna protein sequences  molecular structures  phenotypes biodiversity  databases may contain empirical data  obtained directly experiments   predicted data  obtained analysis    commonly  both  they may specific particular organism  pathway molecule interest  alternatively  incorporate data compiled multiple databases  these databases vary format  access mechanism  whether public not some commonly used databases listed below  for comprehensive list  please check link beginning subsection used biological sequence analysis  genbank  uniprotused structure analysis  protein data bank  pdb used finding protein families motif finding  interpro  pfamused next generation sequencing  sequence read archiveused network analysis  metabolic pathway databases  kegg  biocyc   interaction analysis databases  functional networksused design synthetic genetic circuits  genocad   software tools   software tools bioinformatics range simple command-line tools  complex graphical programs standalone web-services available various bioinformatics companies public institutions     open-source bioinformatics software    many free open-source software tools existed continued grow since     s  the combination continued need new algorithms analysis emerging types biological readouts  potential innovative silico experiments  freely available open code bases helped create opportunities research groups contribute bioinformatics range open-source software available  regardless funding arrangements  the open source tools often act incubators ideas  community-supported plug-ins commercial applications  they may also provide de facto standards shared object models assisting challenge bioinformation integration the range open-source software packages includes titles bioconductor  bioperl  biopython  biojava  biojs  bioruby  bioclipse  emboss   net bio  orange bioinformatics add-on  apache taverna  ugene genocad  to maintain tradition create opportunities  non-profit open bioinformatics foundation supported annual bioinformatics open source conference  bosc  since      an alternative method build public bioinformatics databases use mediawiki engine wikiopener extension  this system allows database accessed updated experts field     web services bioinformatics    soap- rest-based interfaces developed wide variety bioinformatics applications allowing application running one computer one part world use algorithms  data computing resources servers parts world  the main advantages derive fact end users deal software database maintenance overheads basic bioinformatics services classified ebi three categories  sss  sequence search services   msa  multiple sequence alignment   bsa  biological sequence analysis   the availability service-oriented bioinformatics resources demonstrate applicability web-based bioinformatics solutions  range collection standalone tools common data format single  standalone web-based interface  integrative  distributed extensible bioinformatics workflow management systems     bioinformatics workflow management systems    a bioinformatics workflow management system specialized form workflow management system designed specifically compose execute series computational data manipulation steps  workflow  bioinformatics application  such systems designed toprovide easy-to-use environment individual application scientists create workflows provide interactive tools scientists enabling execute workflows view results real-time simplify process sharing reusing workflows scientists  andenable scientists track provenance workflow execution results workflow creation steps some platforms giving service  galaxy  kepler  taverna  ugene  anduril  hive     biocompute biocompute objects    in       us food drug administration sponsored conference held national institutes health bethesda campus discuss reproducibility bioinformatics  over next three years  consortium stakeholders met regularly discuss would become biocompute paradigm  these stakeholders included representatives government  industry  academic entities  session leaders represented numerous branches fda nih institutes centers  non-profit entities including human variome project european federation medical informatics  research institutions including stanford  new york genome center  george washington university it decided biocompute paradigm would form digital  lab notebooks  allow reproducibility  replication  review  reuse  bioinformatics protocols  this proposed enable greater continuity within research group course normal personnel flux furthering exchange ideas groups  the us fda funded work information pipelines would transparent accessible regulatory staff in       group reconvened nih bethesda discussed potential biocompute object  instance biocompute paradigm  this work copied  standard trial use  document preprint paper uploaded biorxiv  the biocompute object allows json-ized record shared among employees  collaborators  regulators    education platforms   software platforms designed teach bioinformatics concepts methods include rosalind online courses offered swiss institute bioinformatics training portal  the canadian bioinformatics workshops provides videos slides training workshops website creative commons license  the       project     pi project also offers open source educational materials free  the course runs low cost raspberry pi computers used teach adults school pupils        actively developed consortium academics research staff run research level bioinformatics using raspberry pi computers       operating system mooc platforms also provide online certifications bioinformatics related disciplines  including coursera bioinformatics specialization  uc san diego  genomic data science specialization  johns hopkins  well edx data analysis life sciences xseries  harvard    university southern california offers masters in translational bioinformatics focusing biomedical applications    conferences   there several large conferences concerned bioinformatics  some notable examples intelligent systems molecular biology  ismb   european conference computational biology  eccb   research computational molecular biology  recomb     see also      references      further reading      external links    the dictionary definition bioinformatics wiktionary learning materials related bioinformatics wikiversity media related bioinformatics wikimedia commonsbioinformatics resource portal  sib 
computational biology involves development application data-analytical theoretical methods  mathematical modelling computational simulation techniques study biological  ecological  behavioural  social systems  the field broadly defined includes foundations biology  applied mathematics  statistics  biochemistry  chemistry  biophysics  molecular biology  genetics  genomics  computer science  ecology  evolution computational biology different biological computing  subfield computer engineering using bioengineering biology build computers    introduction   computational biology  includes many aspects bioinformatics much  science using biological data develop algorithms models order understand biological systems relationships  until recently  biologists access large amounts data  this data become commonplace  particularly molecular biology genomics  researchers able develop analytical methods interpreting biological information  unable share quickly among colleagues bioinformatics began develop early     s  it considered science analyzing informatics processes various biological systems  at time  research artificial intelligence using network models human brain order generate new algorithms  this use biological data develop fields pushed biological researchers revisit idea using computers evaluate compare large data sets  by       information shared among researchers use punch cards  the amount data shared began grow exponentially end     s  this required development new computational methods order quickly analyze interpret relevant information since late      computational biology become important part developing emerging technologies field biology the terms computational biology evolutionary computation similar name  confused  unlike computational biology  evolutionary computation concerned modeling analyzing biological data  it instead creates algorithms based ideas evolution across species  sometimes referred genetic algorithms  research field applied computational biology  while evolutionary computation inherently part computational biology  computational evolutionary biology subfield it computational biology used help sequence human genome  create accurate models human brain  assist modeling biological systems    subfields       computational anatomy    computational anatomy discipline focusing study anatomical shape form visible gross anatomical                                                                    displaystyle   -    mu     scale morphology  it involves development application computational  mathematical data-analytical methods modeling simulation biological structures  it focuses anatomical structures imaged  rather medical imaging devices  due availability dense  d measurements via technologies magnetic resonance imaging  mri   computational anatomy emerged subfield medical imaging bioengineering extracting anatomical coordinate systems morphome scale  d the original formulation computational anatomy generative model shape form exemplars acted upon via transformations  the diffeomorphism group used study different coordinate systems via coordinate transformations generated via lagrangian eulerian velocities flow one anatomical configuration                                                         r                                                                               displaystyle   mathbb  r           another  it relates shape statistics morphometrics  distinction diffeomorphisms used map coordinate systems  whose study known diffeomorphometry     computational biomodeling    computational biomodeling field concerned building computer models biological systems  computational biomodeling aims develop use visual simulations order assess complexity biological systems  this accomplished use specialized algorithms  visualization software  these models allow prediction systems react different environments  this useful determining system robust  a robust biological system one  maintain state functions external internal perturbations   essential biological system survive  computational biomodeling generates large archive data  allowing analysis multiple users  while current techniques focus small biological systems  researchers working approaches allow larger networks analyzed modeled  a majority researchers believe essential developing modern medical approaches creating new drugs gene therapy a useful modelling approach use petri nets via tools esyn     computational ecology    computational methods ecology seen increasing interest  until recent decades  theoretical ecology largely dealt analytic models largely detached statistical models used empirical ecologists  however  computational methods aided developing ecological theory via simulation ecological systems  addition increasing application methods computational statistics ecological analyses     computational evolutionary biology    computational biology assisted field evolutionary biology many capacities  this includes using dna data reconstruct tree life computational phylogeneticsfitting population genetics models  either forward time backward time  dna data make inferences demographic selective historybuilding population genetics models evolutionary systems first principles order predict likely evolve    computational genomics    computational genomics field within genomics studies genomes cells organisms  it sometimes referred computational statistical genetics encompasses much bioinformatics  the human genome project one example computational genomics  this project looks sequence entire human genome set data  once fully implemented  could allow doctors analyze genome individual patient   this opens possibility personalized medicine  prescribing treatments based individual pre-existing genetic patterns  this project created many similar programs  researchers looking sequence genomes animals  plants  bacteria  types life one main ways genomes compared sequence homology  homology study biological structures nucleotide sequences different organisms come common ancestor  research suggests        genes newly sequenced prokaryotic genomes identified way this field still development  an untouched project development computational genomics analysis intergenic regions  studies show roughly     human genome consists regions  researchers computational genomics working understanding functions non-coding regions human genome development computational statistical methods via large consortia projects encode  the encyclopedia dna elements  roadmap epigenomics project     computational neuropsychiatry    computational neuropsychiatry emerging field uses mathematical computer-assisted modeling brain mechanisms involved mental disorders  it already demonstrated several initiatives computational modeling important contribution understand neuronal circuits could generate mental functions dysfunctions     computational neuroscience    computational neuroscience study brain function terms information processing properties structures make nervous system  it subset field neuroscience  looks analyze brain data create practical applications  it looks model brain order examine specific aspects neurological system  various types models brain include realistic brain models  these models look represent every aspect brain  including much detail cellular level possible  realistic models provide information brain  also largest margin error  more variables brain model create possibility error occur  these models account parts cellular structure scientists know about  realistic brain models computationally heavy expensive implement simplifying brain models   these models look limit scope model order assess specific physical property neurological system  this allows intensive computational problems solved  reduces amount potential error realistic brain model it work computational neuroscientists improve algorithms data structures currently used increase speed calculations     computational oncology    computational oncology  sometimes also called cancer computational biology  field aims determine future mutations cancer algorithmic approach analyzing data  research field led use high-throughput measurement  high throughput measurement allows gathering millions data points using robotics sensing devices  this data collected dna  rna  biological structures  areas focus include determining characteristics tumors  analyzing molecules deterministic causing cancer  understanding human genome relates causation tumors cancer     computational pharmacology    computational pharmacology  computational biology perspective   study effects genomic data find links specific genotypes diseases screening drug data   the pharmaceutical industry requires shift methods analyze drug data  pharmacologists able use microsoft excel compare chemical genomic data related effectiveness drugs  however  industry reached referred excel barricade  this arises limited number cells accessible spreadsheet  this development led need computational pharmacology  scientists researchers develop computational methods analyze massive data sets  this allows efficient comparison notable data points allows accurate drugs developed analysts project major medications fail due patents  computational biology necessary replace current drugs market  doctoral students computational biology encouraged pursue careers industry rather take post-doctoral positions  this direct result major pharmaceutical companies needing qualified analysts large data sets required producing new drugs    software tools   computational biologists use wide range software  these range command line programs graphical web-based programs     open source software    open source software provides platform develop computational biological methods  specifically  open source means every person entity access benefit software developed research  plos cites four main reasons use open source software including reproducibility  this allows researchers use exact methods used calculate relations biological data faster development  developers researchers reinvent existing code minor tasks  instead use pre-existing programs save time development implementation larger projects increased quality  having input multiple researchers studying topic provides layer assurance errors code long-term availability  open source programs tied businesses patents  this allows posted multiple web pages ensure available future    conferences   there several large conferences concerned computational biology  some notable examples intelligent systems molecular biology  ismb   european conference computational biology  eccb  research computational molecular biology  recomb     journals   there numerous journals dedicated computational biology  some notable examples include journal computational biology plos computational biology  the plos computational biology journal peer-reviewed journal many notable research projects field computational biology  they provide reviews software  tutorials open source software  display information upcoming computational biology conferences  plos computational biology open access journal  the publication may openly used provided author cited    related fields   computational biology  bioinformatics mathematical biology interdisciplinary approaches life sciences draw quantitative disciplines mathematics information science  the nih describes computational mathematical biology use computational mathematical approaches address theoretical experimental questions biology  contrast  bioinformatics application information science understand complex life-sciences data specifically  nih definescomputational biology  the development application data-analytical theoretical methods  mathematical modeling computational simulation techniques study biological  behavioral  social systems bioinformatics  research  development  application computational tools approaches expanding use biological  medical  behavioral health data  including acquire  store  organize  archive  analyze  visualize data while field distinct  may significant overlap interface    see also      references      external links   bioinformatics org
biological data refers compound information derived living organisms products  a medicinal compound made living organisms  serum vaccine  could characterized biological data  biological data highly complex compared forms data  there many forms biological data  including text  sequence data  protein structure  genomic data amino acids  links among others    biological data bioinformatics   biological data works closely bioinformatics  recent discipline focusing addressing need analyze interpret vast amounts genomic data in past decades  leaps genomic research led massive amounts biological data  as result  bioinformatics created convergence genomics  biotechnology  information technology  concentrating biological data biological data also difficult define  bioinformatics wide-encompassing field  further  question constitutes living organism contentious   alive  represents nebulous term encompasses molecular evolution  biological modeling  biophysics  systems biology  from past decade onwards  bioinformatics analysis biological data thriving result leaps technology required manage interpret data  it currently thriving field  society become concentrated acquisition  transfer  exploitation bioinformatics biological data    types biological data   biological data extracted use domains omics  bio-imaging  medical imaging  life scientists value biological data provide molecular details living organisms  tools dna sequencing  gene expression  ge   bio-imaging  neuro-imaging  brain-machine interfaces domains utilize biological data  model biological systems high dimensionality moreover  raw biological sequence data usually refers dna  rna  amino acids biological data also described data biological entities  for instance  characteristics  sequences  graphs  geometric information  scalar vector fields  patterns  constraints  images  spatial information may characterized biological data  describe features biological beings  in many instances  biological data associated several categories  for instance  described national institute health report catalyzing inquiry interface computing biology  protein structure may associated one-dimensional sequence  two-dimensional image  three dimensional structure  on     biomedical databases    biomedical databases often referred databases electronic health records  ehrs   genomic data decentralized federal database systems  biological data  including genomic data  collected large-scale clinical studies    bio-hacking privacy threats       bio-hacking    bio-computing attacks become common recent studies shown common tools may allow assailant synthesize biological information used hijack information dna-analyses  the threat biohacking become apparent dna-analysis increases commonality fields forensic science  clinical research  genomics biohacking carried synthesizing malicious dna inserted biological samples  researchers established scenarios demonstrate threat biohacking  hacker reaching biological sample hiding malicious dna common surfaces  lab coats  benches  rubber gloves  would contaminate genetic data however  threat biohacking may mitigated using similar techniques used prevent conventional injection attacks  clinicians researchers may mitigate bio-hack extracting genetic information biological samples  comparing samples identify material unknown materials  studies shown comparing genetic information biological samples  identify bio-hacking code      effective detecting malicious dna inserts bio-hacking attacks     genetic samples personal data    privacy concerns genomic research arises around notion whether genomic samples contain personal data  regarded physical matter  moreover  concerns arise countries recognize genomic data personal data  apply data protection rules  countries regard samples terms physical matter apply data protection laws genomic samples  the forthcoming general data protection regulation  gdpr  cited potential legal instrument may better enforce privacy regulations bio-banking genomic research however  ambiguity surrounding definition  personal data  text gdpr  especially regarding biological data  led doubts whether regulation enforced genetic samples  article      states personal data defined  any information relating identified identifiable natural person   data subject      applications deep learning biological data   as result rapid advances data science computational power  life scientists able apply data-intensive machine learning methods biological data  deep learning  dl   reinforcement learning  rl   combination  deep rl   these methods  alongside increases data storage computing  allowed life scientists mine biological data analyze data sets previously large complex  deep learning  dl  reinforcement learning  rl  used field omics research  includes genomics  proteomics  metabolomics   typically  raw biological sequence data  dna  rna  amino acids  extracted used analyze features  functions  structures  molecular dynamics biological data  from point onwards  different analyses may performed  ge profiling splicing junction prediction  protein-protein interaction evaluation may performed reinforcement learning  term stemming behavioral psychology  method problem solving learning things trial error  reinforcement learning applied biological data  field omics  using rl predict bacterial genomes other studies shown reinforcement learning used accurately predict biological sequence annotation deep learning  dl  architectures also useful training biological data  for instance  dl architectures target pixel levels biological images used identify process mitosis histological images breast  dl architectures also used identify nuclei images breast cancer cells    challenges data mining biomedical informatics       complexity    the primary problem facing biomedical data models typically complexity  life scientists clinical settings biomedical research face possibility information overload  however  information overload often debated phenomenon medical fields  computational advances allowed separate communities form different philosophies  for instance  data mining machine learning researchers search relevant patterns biological data  architecture rely human intervention  however  risks involved modeling artifacts human intervention  end user comprehension control  lessened researchers pointed increasing health care costs tremendous amounts underutilized data  health information technologies may key improving efficiency quality healthcare     database errors abuses    electronic health records  ehr  contain genomic data millions patients  creation databases resulted praise concern legal scholars pointed towards three primary concerns increasing litigation pertaining biomedical databases  first  data contained biomedical databases may incorrect incomplete  second  systemic biases  may arise researcher biases nature biological data  may threaten validity research results  third  presence data mining biological databases make easier individuals political  social  economic agendas manipulate research findings sway public opinion an example database misuse occurred      journal psychiatric research published study associated abortion psychiatric disorders  the purpose study analyze associations abortion history psychiatric disorders  anxiety disorders  including panic disorder  ptsd  agoraphobia  alongside substance abuse disorders mood disorders however  study discredited      scientists scrutinized methodology study found severely faulty  the researchers used  national data sets reproductive history mental health variables  produce findings  however  researchers failed compare women  unplanned pregnancies abortions  group women abortions  focusing psychiatric problems occurred terminated pregnancies  as result  findings appeared give scientific credibility  gave rise several states enacting legislation required women seek counseling abortions  due potential long-term mental health consequences another article  published new york times  demonstrated electronic health records  ehr  systems could manipulated doctors exaggerate amount care provided purposes medicare reimbursement    biomedical data sharing   sharing biomedical data touted effective way enhance research reproducibility scientific discovery while researchers struggle technological issues sharing data  social issues also barrier sharing biological data  for instance  clinicians researchers face unique challenges sharing biological health data within medical communities  privacy concerns patient privacy laws hipaa     attitudes towards data sharing    according      study focusing attitudes practices clinicians scientific research staff  majority respondents reported data sharing important work  signified expertise subject low  of     respondents survey      identified clinical basic research scientists  population survey included clinical basic research scientists intramural research program national institute health  the study also found  among respondents  sharing data directly clinicians common practice  subjects study little practice uploading data repository within field biomedical research  data sharing promoted important way researchers share reuse data order fully capture benefits towards personalized precision medicine     challenges data sharing    data sharing healthcare remained challenge several reasons  despite research advances data sharing healthcare  many healthcare organizations remain reluctant unwilling release medical data account privacy laws health insurance portability accountability act  hipaa   moreover  sharing biological data institutions requires protecting confidentiality data may span several organizations  achieving data syntax semantic heterogeneity meeting diverse privacy requirements factors pose barriers data sharing    references   
protein folding physical process protein chain translated native three-dimensional structure  typically  folded  conformation protein becomes biologically functional  via expeditious reproducible process  polypeptide folds characteristic three-dimensional structure random coil  each protein exists first unfolded polypeptide random coil translated sequence mrna linear chain amino acids  at stage polypeptide lacks stable  long-lasting  three-dimensional structure  left hand side first figure   as polypeptide chain synthesized ribosome  linear chain begins fold three-dimensional structure folding many proteins begins even translation polypeptide chain  amino acids interact produce well-defined three-dimensional structure  folded protein  right hand side figure   known native state  the resulting three-dimensional structure determined amino acid sequence primary structure  anfinsen dogma  the correct three-dimensional structure essential function  although parts functional proteins may remain unfolded  protein dynamics important  failure fold native structure generally produces inactive proteins  instances misfolded proteins modified toxic functionality  several neurodegenerative diseases believed result accumulation amyloid fibrils formed misfolded proteins  many allergies caused incorrect folding proteins  immune system produce antibodies certain protein structures denaturation proteins process transition folded unfolded state  it happens cooking  burns  proteinopathies  contexts the duration folding process varies dramatically depending protein interest  when studied outside cell  slowest folding proteins require many minutes hours fold primarily due proline isomerization  must pass number intermediate states  like checkpoints  process complete  on hand  small single-domain proteins lengths hundred amino acids typically fold single step  time scales milliseconds norm fastest known protein folding reactions complete within microseconds understanding simulating protein folding process important challenge computational biology since late     s    process protein folding       primary structure    the primary structure protein  linear amino-acid sequence  determines native conformation  the specific amino acid residues position polypeptide chain determining factors portions protein fold closely together form three-dimensional conformation  the amino acid composition important sequence  the essential fact folding  however  remains amino acid sequence protein contains information specifies native structure pathway attain state  this say nearly identical amino acid sequences always fold similarly  conformations differ based environmental factors well  similar proteins fold differently based found     secondary structure    formation secondary structure first step folding process protein takes assume native structure  characteristic secondary structure structures known alpha helices beta sheets fold rapidly stabilized intramolecular hydrogen bonds  first characterized linus pauling  formation intramolecular hydrogen bonds provides another important contribution protein stability   -helices formed hydrogen bonding backbone form spiral shape  refer figure right   the   pleated sheet structure forms backbone bending form hydrogen bonds  displayed figure left   the hydrogen bonds amide hydrogen carbonyl oxygen peptide bond  there exists anti-parallel   pleated sheets parallel   pleated sheets stability hydrogen bonds stronger anti-parallel   sheet hydrogen bonds ideal     degree angle compared slanted hydrogen bonds formed parallel sheets     tertiary structure    the alpha helices beta pleated sheets amphipathic nature  contain hydrophilic portion hydrophobic portion  this property secondary structures aids tertiary structure protein folding occurs hydrophilic sides facing aqueous environment surrounding protein hydrophobic sides facing hydrophobic core protein  secondary structure hierarchically gives way tertiary structure formation  once protein tertiary structure formed stabilized hydrophobic interactions  may also covalent bonding form disulfide bridges formed two cysteine residues  tertiary structure protein involves single polypeptide chain  however  additional interactions folded polypeptide chains give rise quaternary structure formation     quaternary structure    tertiary structure may give way formation quaternary structure proteins  usually involves  assembly   coassembly  subunits already folded  words  multiple polypeptide chains could interact form fully functional quaternary protein     driving forces protein folding    folding spontaneous process mainly guided hydrophobic interactions  formation intramolecular hydrogen bonds  van der waals forces  opposed conformational entropy  the process folding often begins co-translationally  n-terminus protein begins fold c-terminal portion protein still synthesized ribosome  however  protein molecule may fold spontaneously biosynthesis  while macromolecules may regarded  folding   process also depends solvent  water lipid bilayer   concentration salts  ph  temperature  possible presence cofactors molecular chaperones proteins limitations folding abilities restricted bending angles conformations possible  these allowable angles protein folding described two-dimensional plot known ramachandran plot  depicted psi phi angles allowable rotation      hydrophobic effect     protein folding must thermodynamically favorable within cell order spontaneous reaction  since known protein folding spontaneous reaction  must assume negative gibbs free energy value  gibbs free energy protein folding directly related enthalpy entropy  for negative delta g arise protein folding become thermodynamically favorable  either enthalpy  entropy  terms must favorable minimizing number hydrophobic side-chains exposed water important driving force behind folding process  the hydrophobic effect phenomenon hydrophobic chains protein collapse core protein  away hydrophilic environment   in aqueous environment  water molecules tend aggregate around hydrophobic regions side chains protein  creating water shells ordered water molecules  an ordering water molecules around hydrophobic region increases order system therefore contributes negative change entropy  less entropy system   the water molecules fixed water cages drives hydrophobic collapse  inward folding hydrophobic groups  the hydrophobic collapse introduces entropy back system via breaking water cages frees ordered water molecules  the multitude hydrophobic groups interacting within core globular folded protein contributes significant amount protein stability folding  vastly accumulated van der waals forces  specifically london dispersion forces   the hydrophobic effect exists driving force thermodynamics presence aqueous medium amphiphilic molecule containing large hydrophobic region  the strength hydrogen bonds depends environment  thus  h-bonds enveloped hydrophobic core contribute h-bonds exposed aqueous environment stability native state in proteins globular folds  hydrophobic amino acids tend interspersed along primary sequence  rather randomly distributed clustered together  however  proteins recently born de novo  tend intrinsically disordered  show opposite pattern hydrophobic amino acid clustering along primary sequence      chaperones     molecular chaperones class proteins aid correct folding proteins vivo  chaperones exist cellular compartments interact polypeptide chain order allow native three-dimensional conformation protein form  however  chaperones included final structure protein assisting in  chaperones may assist folding even nascent polypeptide synthesized ribosome  molecular chaperones operate binding stabilize otherwise unstable structure protein folding pathway  chaperones contain necessary information know correct native structure protein aiding  rather  chaperones work preventing incorrect folding conformations  in way  chaperones actually increase rate individual steps involved folding pathway toward native structure  instead  work reducing possible unwanted aggregations polypeptide chain might otherwise slow search proper intermediate provide efficient pathway polypeptide chain assume correct conformations  chaperones confused folding catalyst proteins  catalyze chemical reactions responsible slow steps folding pathways  examples folding catalysts protein disulfide isomerases peptidyl-prolyl isomerases may involved formation disulfide bonds interconversion cis trans stereoisomers peptide group  chaperones shown critical process protein folding vivo provide protein aid needed assume proper alignments conformations efficiently enough become  biologically relevant   this means polypeptide chain could theoretically fold native structure without aid chaperones  demonstrated protein folding experiments conducted vitro  however  process proves inefficient slow exist biological systems  therefore  chaperones necessary protein folding vivo  along role aiding native structure formation  chaperones shown involved various roles protein transport  degradation  even allow denatured proteins exposed certain external denaturant factors opportunity refold correct native structures a fully denatured protein lacks tertiary secondary structure  exists so-called random coil  under certain conditions proteins refold  however  many cases  denaturation irreversible  cells sometimes protect proteins denaturing influence heat enzymes known heat shock proteins  type chaperone   assist proteins folding remaining folded   heat shock proteins found species examined  bacteria humans  suggesting evolved early important function   some proteins never fold cells except assistance chaperones either isolate individual proteins folding interrupted interactions proteins help unfold misfolded proteins  allowing refold correct native structure  this function crucial prevent risk precipitation insoluble amorphous aggregates  the external factors involved protein denaturation disruption native state include temperature  external fields  electric  magnetic   molecular crowding  even limitation space  i e  confinement   big influence folding proteins  high concentrations solutes  extremes ph  mechanical forces  presence chemical denaturants contribute protein denaturation  well  these individual factors categorized together stresses  chaperones shown exist increasing concentrations times cellular stress help proper folding emerging proteins well denatured misfolded ones under conditions proteins fold biochemically functional forms  temperatures range cells tend live cause thermally unstable proteins unfold denature  boiling makes egg white turn opaque   protein thermal stability far constant  however  example  hyperthermophilic bacteria found grow temperatures high      c  course requires full complement vital proteins protein assemblies stable temperature above the bacterium e  coli host bacteriophage t   phage encoded gp   protein  p       appears structurally functionally homologous e  coli chaperone protein groes able substitute assembly bacteriophage t  virus particles infection   like groes  gp   forms stable complex groel chaperonin absolutely necessary folding assembly vivo bacteriophage t  major capsid protein gp       fold switching    some proteins multiple native structures  change fold based external factors  for example  kaib protein switches fold throughout day  acting clock cyanobacteria  it estimated around        pdb  protein data bank  proteins switch folds    protein misfolding neurodegenerative disease   a protein considered misfolded cannot achieve normal native state  this due mutations amino acid sequence disruption normal folding process external factors  the misfolded protein typically contains  -sheets organized supramolecular arrangement known cross-  structure  these  -sheet-rich assemblies stable  insoluble  generally resistant proteolysis  the structural stability fibrillar assemblies caused extensive interactions protein monomers  formed backbone hydrogen bonds  -strands  the misfolding proteins trigger misfolding accumulation proteins aggregates oligomers  the increased levels aggregated proteins cell leads formation amyloid-like structures cause degenerative disorders cell death  the amyloids fibrillary structures contain intermolecular hydrogen bonds highly insoluble made converted protein aggregates  therefore  proteasome pathway may efficient enough degrade misfolded proteins prior aggregation  misfolded proteins interact one another form structured aggregates gain toxicity intermolecular interactions aggregated proteins associated prion-related illnesses creutzfeldt jakob disease  bovine spongiform encephalopathy  mad cow disease   amyloid-related illnesses alzheimer disease familial amyloid cardiomyopathy polyneuropathy  well intracellular aggregation diseases huntington parkinson disease  these age onset degenerative diseases associated aggregation misfolded proteins insoluble  extracellular aggregates intracellular inclusions including cross-  amyloid fibrils  it completely clear whether aggregates cause merely reflection loss protein homeostasis  balance synthesis  folding  aggregation protein turnover  recently european medicines agency approved use tafamidis vyndaqel  kinetic stabilizer tetrameric transthyretin  treatment transthyretin amyloid diseases  this suggests process amyloid fibril formation  fibrils  causes degeneration post-mitotic tissue human amyloid diseases  misfolding excessive degradation instead folding function leads number proteopathy diseases antitrypsin-associated emphysema  cystic fibrosis lysosomal storage diseases  loss function origin disorder  while protein replacement therapy historically used correct latter disorders  emerging approach use pharmaceutical chaperones fold mutated proteins render functional    experimental techniques studying protein folding   while inferences protein folding made mutation studies  typically  experimental techniques studying protein folding rely gradual unfolding folding proteins observing conformational changes using standard non-crystallographic techniques     x-ray crystallography    x-ray crystallography one efficient important methods attempting decipher three dimensional configuration folded protein  to able conduct x-ray crystallography  protein investigation must located inside crystal lattice  to place protein inside crystal lattice  one must suitable solvent crystallization  obtain pure protein supersaturated levels solution  precipitate crystals solution  once protein crystallized  x-ray beams concentrated crystal lattice would diffract beams shoot outwards various directions  these exiting beams correlated specific three-dimensional configuration protein enclosed within  the x-rays specifically interact electron clouds surrounding individual atoms within protein crystal lattice produce discernible diffraction pattern  only relating electron density clouds amplitude x-rays pattern read lead assumptions phases phase angles involved complicate method  without relation established mathematical basis known fourier transform   phase problem  would render predicting diffraction patterns difficult  emerging methods like multiple isomorphous replacement use presence heavy metal ion diffract x-rays predictable manner  reducing number variables involved resolving phase problem     fluorescence spectroscopy    fluorescence spectroscopy highly sensitive method studying folding state proteins  three amino acids  phenylalanine  phe   tyrosine  tyr  tryptophan  trp   intrinsic fluorescence properties  tyr trp used experimentally quantum yields high enough give good fluorescence signals  both trp tyr excited wavelength     nm  whereas trp excited wavelength     nm  because aromatic character  trp tyr residues often found fully partially buried hydrophobic core proteins  interface two protein domains  interface subunits oligomeric proteins  in apolar environment  high quantum yields therefore high fluorescence intensities  upon disruption protein tertiary quaternary structure  side chains become exposed hydrophilic environment solvent  quantum yields decrease  leading low fluorescence intensities  for trp residues  wavelength maximal fluorescence emission also depend environment fluorescence spectroscopy used characterize equilibrium unfolding proteins measuring variation intensity fluorescence emission wavelength maximal emission functions denaturant value  the denaturant chemical molecule  urea  guanidinium hydrochloride   temperature  ph  pressure  etc  the equilibrium different discrete protein states  i e  native state  intermediate states  unfolded state  depends denaturant value  therefore  global fluorescence signal equilibrium mixture also depends value  one thus obtains profile relating global protein signal denaturant value  the profile equilibrium unfolding may enable one detect identify intermediates unfolding  general equations developed hugues bedouelle obtain thermodynamic parameters characterize unfolding equilibria homomeric heteromeric proteins  trimers potentially tetramers  profiles  fluorescence spectroscopy combined fast-mixing devices stopped flow  measure protein folding kinetics  generate chevron plot derive phi value analysis     circular dichroism    circular dichroism one general basic tools study protein folding  circular dichroism spectroscopy measures absorption circularly polarized light  in proteins  structures alpha helices beta sheets chiral  thus absorb light  the absorption light acts marker degree foldedness protein ensemble  this technique used measure equilibrium unfolding protein measuring change absorption function denaturant concentration temperature  a denaturant melt measures free energy unfolding well protein value  denaturant dependence  a temperature melt measures denaturation temperature  tm  protein  as fluorescence spectroscopy  circular-dichroism spectroscopy combined fast-mixing devices stopped flow measure protein folding kinetics generate chevron plots     vibrational circular dichroism proteins    the recent developments vibrational circular dichroism  vcd  techniques proteins  currently involving fourier transform  ft  instruments  provide powerful means determining protein conformations solution even large protein molecules  such vcd studies proteins combined x-ray diffraction data protein crystals  ft-ir data protein solutions heavy water  d o   quantum computations     protein nuclear magnetic resonance spectroscopy    protein nuclear magnetic resonance  nmr  able collect protein structural data inducing magnet field samples concentrated protein  in nmr  depending chemical environment  certain nuclei absorb specific radio-frequencies  because protein structural changes operate time scale ns ms  nmr especially equipped study intermediate structures timescales ps s  some main techniques studying proteins structure non-folding protein structural changes include cosy  tocsy  hsqc  time relaxation  t    t    noe  noe especially useful magnetization transfers observed spatially proximal hydrogens observed  different nmr experiments varying degrees timescale sensitivity appropriate different protein structural changes  noe pick bond vibrations side chain rotations  however  noe sensitive pick protein folding occurs larger timescale because protein folding takes place           cpmg relaxation dispersion chemical exchange saturation transfer become primary techniques nmr analysis folding  in addition  techniques used uncover excited intermediate states protein folding landscape  to  cpmg relaxation dispersion takes advantage spin echo phenomenon  this technique exposes target nuclei    pulse followed one     pulses  as nuclei refocus  broad distribution indicates target nuclei involved intermediate excited state  by looking relaxation dispersion plots data collect information thermodynamics kinetics excited ground  saturation transfer measures changes signal ground state excited states become perturbed  it uses weak radio frequency irradiation saturate excited state particular nuclei transfers saturation ground state  this signal amplified decreasing magnetization  signal  ground state the main limitations nmr resolution decreases proteins larger    kda detailed x-ray crystallography  additionally  protein nmr analysis quite difficult propose multiple solutions nmr spectrum in study focused folding amyotrophic lateral sclerosis involved protein sod   excited intermediates studied relaxation dispersion saturation transfer  sod  previously tied many disease causing mutants assumed involved protein aggregation  however mechanism still unknown  by using relaxation dispersion saturation transfer experiments many excited intermediate states uncovered misfolding sod  mutants     dual-polarization interferometry    dual polarisation interferometry surface-based technique measuring optical properties molecular layers  when used characterize protein folding  measures conformation determining overall size monolayer protein density real time sub-angstrom resolution  although real-time measurement kinetics protein folding limited processes occur slower     hz  similar circular dichroism  stimulus folding denaturant temperature     studies folding high time resolution    the study protein folding greatly advanced recent years development fast  time-resolved techniques  experimenters rapidly trigger folding sample unfolded protein observe resulting dynamics  fast techniques use include neutron scattering  ultrafast mixing solutions  photochemical methods  laser temperature jump spectroscopy  among many scientists contributed development techniques jeremy cook  heinrich roder  harry gray  martin gruebele  brian dyer  william eaton  sheena radford  chris dobson  alan fersht  bengt n lting lars konermann     proteolysis    proteolysis routinely used probe fraction unfolded wide range solution conditions  e g  fast parallel proteolysis  fastpp      single-molecule force spectroscopy    single molecule techniques optical tweezers afm used understand protein folding mechanisms isolated proteins well proteins chaperones  optical tweezers used stretch single protein molecules c- n-termini unfold allow study subsequent refolding  the technique allows one measure folding rates single-molecule level  example  optical tweezers recently applied study folding unfolding proteins involved blood coagulation  von willebrand factor  vwf  protein essential role blood clot formation process  it discovered   using single molecule optical tweezers measurement   calcium-bound vwf acts shear force sensor blood  shear force leads unfolding a  domain vwf  whose refolding rate dramatically enhanced presence calcium  recently  also shown simple src sh  domain accesses multiple unfolding pathways force     biotin painting    biotin painting enables condition-specific cellular snapshots  un folded proteins  biotin  painting  shows bias towards predicted intrinsically disordered proteins    computational studies protein folding   computational studies protein folding includes three main aspects related prediction protein stability  kinetics  structure  a recent review summarizes available computational methods protein folding      levinthal paradox    in       cyrus levinthal noted  large number degrees freedom unfolded polypeptide chain  molecule astronomical number possible conformations  an estimate            made one papers  levinthal paradox thought experiment based observation protein folded sequential sampling possible conformations  would take astronomical amount time  even conformations sampled rapid rate  nanosecond picosecond scale   based upon observation proteins fold much faster  levinthal proposed random conformational search occur  protein must  therefore  fold series meta-stable intermediate states     energy landscape protein folding    the configuration space protein folding visualized energy landscape  according joseph bryngelson peter wolynes  proteins follow principle minimal frustration meaning naturally evolved proteins optimized folding energy landscapes  nature chosen amino acid sequences folded state protein sufficiently stable  in addition  acquisition folded state become sufficiently fast process  even though nature reduced level frustration proteins  degree remains observed presence local minima energy landscape proteins a consequence evolutionarily selected sequences proteins generally thought globally  funneled energy landscapes   coined jos  onuchic  largely directed toward native state  this  folding funnel  landscape allows protein fold native state large number pathways intermediates  rather restricted single mechanism  the theory supported computational simulations model proteins experimental studies  used improve methods protein structure prediction design  the description protein folding leveling free-energy landscape also consistent  nd law thermodynamics  physically  thinking landscapes terms visualizable potential total energy surfaces simply maxima  saddle points  minima  funnels  rather like geographic landscapes  perhaps little misleading  the relevant description really high-dimensional phase space manifolds might take variety complicated topological forms the unfolded polypeptide chain begins top funnel may assume largest number unfolded variations highest energy state  energy landscapes indicate large number initial possibilities  single native state possible  however  reveal numerous folding pathways possible  a different molecule exact protein may able follow marginally different folding pathways  seeking different lower energy intermediates  long native structure reached  different pathways may different frequencies utilization depending thermodynamic favorability pathway  this means one pathway found thermodynamically favorable another  likely used frequently pursuit native structure  as protein begins fold assume various conformations  always seeks thermodynamically favorable structure thus continues energy funnel  formation secondary structures strong indication increased stability within protein  one combination secondary structures assumed polypeptide backbone lowest energy therefore present native state protein  among first structures form polypeptide begins fold alpha helices beta turns  alpha helices form little     nanoseconds beta turns   microsecond there exists saddle point energy funnel landscape transition state particular protein found  the transition state energy funnel diagram conformation must assumed every molecule protein protein wishes finally assume native structure  no protein may assume native structure without first passing transition state  the transition state referred variant premature form native state rather another intermediary step  the folding transition state shown rate-determining  even though exists higher energy state native fold  greatly resembles native structure  within transition state  exists nucleus around protein able fold  formed process referred  nucleation condensation  structure begins collapse onto nucleus     modeling protein folding     de novo ab initio techniques computational protein structure prediction used simulating various aspects protein folding  molecular dynamics  md  used simulations protein folding dynamics silico  first equilibrium folding simulations done using implicit solvent model umbrella sampling  because computational cost  ab initio md folding simulations explicit water limited peptides small proteins  md simulations larger proteins remain restricted dynamics experimental structure high-temperature unfolding  long-time folding processes  beyond   millisecond   like folding small-size proteins     residues  larger  accessed using coarse-grained models several large-scale computational projects  rosetta home  folding home foldit  target protein folding long continuous-trajectory simulations performed anton  massively parallel supercomputer designed built around custom asics interconnects d  e  shaw research  the longest published result simulation performed using anton       millisecond simulation ntl      k    see also      references      external links   human proteome folding project
a phylogenetic tree  also phylogeny evolutionary tree   branching diagram tree showing evolutionary relationships among various biological species entities based upon similarities differences physical genetic characteristics  all life earth part single phylogenetic tree  indicating common ancestry in rooted phylogenetic tree  node descendants represents inferred recent common ancestor descendants  edge lengths trees may interpreted time estimates  each node called taxonomic unit  internal nodes generally called hypothetical taxonomic units  cannot directly observed  trees useful fields biology bioinformatics  systematics  phylogenetics  unrooted trees illustrate relatedness leaf nodes require ancestral root known inferred    history   the idea  tree life  arose ancient notions ladder-like progression lower higher forms life  great chain being   early representations  branching  phylogenetic trees include  paleontological chart  showing geological relationships among plants animals book elementary geology  edward hitchcock  first edition        charles darwin        also produced one first illustrations crucially popularized notion evolutionary  tree  seminal book the origin species  over century later  evolutionary biologists still use tree diagrams depict evolution diagrams effectively convey concept speciation occurs adaptive semirandom splitting lineages  over time  species classification become less static dynamic the term phylogenetic  phylogeny  derives two ancient greek words        ph lon   meaning  race  lineage            g nesis   meaning  origin  source     properties       rooted tree    a rooted phylogenetic tree  see two graphics top  directed tree unique node   root   corresponding  usually imputed  recent common ancestor entities leaves tree  the root node parent node  serves parent nodes tree  the root therefore node degree    internal nodes minimum degree     degree  refers total number incoming outgoing edges  the common method rooting trees use uncontroversial outgroup close enough allow inference trait data molecular sequencing  far enough clear outgroup     unrooted tree    unrooted trees illustrate relatedness leaf nodes without making assumptions ancestry  they require ancestral root known inferred  unrooted trees always generated rooted ones simply omitting root  by contrast  inferring root unrooted tree requires means identifying ancestry  this normally done including outgroup input data root necessarily outgroup rest taxa tree  introducing additional assumptions relative rates evolution branch  application molecular clock hypothesis     bifurcating versus multifurcating    both rooted unrooted trees either bifurcating multifurcating  a rooted bifurcating tree exactly two descendants arising interior node   forms binary tree   unrooted bifurcating tree takes form unrooted binary tree  free tree exactly three neighbors internal node  in contrast  rooted multifurcating tree may two children nodes unrooted multifurcating tree may three neighbors nodes     labeled versus unlabeled    both rooted unrooted trees either labeled unlabeled  a labeled tree specific values assigned leaves  unlabeled tree  sometimes called tree shape  defines topology only  some sequence-based trees built small genomic locus  phylotree  feature internal nodes labeled inferred ancestral haplotypes     enumerating trees    the number possible trees given number leaf nodes depends specific type tree  always labeled unlabeled trees  multifurcating bifurcating trees  rooted unrooted trees  the last distinction biologically relevant  arises many places unrooted tree put root  for bifurcating labeled trees  total number rooted trees                                       n                                                                                                                                n                                                                                                                                                     n                                                                                                 n                                                                                                          displaystyle   n-       frac    n-        n-   n-                             n                                  displaystyle n geq                           n                displaystyle n    represents number leaf nodes for bifurcating labeled trees  total number unrooted trees                                       n                                                                                                                                n                                                                                                                                                     n                                                                                                 n                                                                                                          displaystyle   n-       frac    n-        n-   n-                             n                                  displaystyle n geq      among labeled bifurcating trees  number unrooted trees                     n                displaystyle n    leaves equal number rooted trees                     n                                  displaystyle n-     leaves the number rooted trees grows quickly function number tips  for    tips                                                                                                              displaystyle    times           possible bifurcating trees  number multifurcating trees rises faster  ca    times many latter former    special tree types       dendrogram    a dendrogram general name tree  whether phylogenetic  hence also diagrammatic representation phylogenetic tree     cladogram    a cladogram represents branching pattern  i e   branch lengths represent time relative amount character change  internal nodes represent ancestors     phylogram    a phylogram phylogenetic tree branch lengths proportional amount character change a chronogram phylogenetic tree explicitly represents time branch lengths     dahlgrenogram    a dahlgrenogram diagram representing cross section phylogenetic tree    phylogenetic network    a phylogenetic network strictly speaking tree  rather general graph  directed acyclic graph case rooted networks  they used overcome limitations inherent trees     spindle diagram    a spindle diagram  bubble diagram  often called romerogram  popularisation american palaeontologist alfred romer it represents taxonomic diversity  horizontal width  geological time  vertical axis  order reflect variation abundance various taxa time however  spindle diagram evolutionary tree  taxonomic spindles obscure actual relationships parent taxon daughter taxon disadvantage involving paraphyly parental group this type diagram longer used form originally proposed     coral life     darwin also mentioned coral may suitable metaphor tree  indeed  phylogenetic corals useful portraying past present life  advantages trees  anastomoses allowed  etc      construction   phylogenetic trees composed nontrivial number input sequences constructed using computational phylogenetics methods  distance-matrix methods neighbor-joining upgma  calculate genetic distance multiple sequence alignments  simplest implement  invoke evolutionary model  many sequence alignment methods clustalw also create trees using simpler algorithms  i e  based distance  tree construction  maximum parsimony another simple method estimating phylogenetic trees  implies implicit model evolution  i e  parsimony   more advanced methods use optimality criterion maximum likelihood  often within bayesian framework  apply explicit model evolution phylogenetic tree estimation  identifying optimal tree using many techniques np-hard  heuristic search optimization methods used combination tree-scoring functions identify reasonably good tree fits data tree-building methods assessed basis several criteria efficiency  long take compute answer  much memory need  power  make good use data  information wasted  consistency  converge answer repeatedly  time given different data model problem  robustness  cope well violations assumptions underlying model  falsifiability  alert us good use  i e  assumptions violated  tree-building techniques also gained attention mathematicians  trees also built using t-theory     file formats    trees encoded number different formats  must represent nested structure tree  they may may encode branch lengths features  standardized formats critical distributing sharing trees without relying graphics output hard import existing software  commonly used formats arenexus file formatnewick format   limitations phylogenetic analysis   although phylogenetic trees produced basis sequenced genes genomic data different species provide evolutionary insight  analyses important limitations  most importantly  trees generate necessarily correct   necessarily accurately represent evolutionary history included taxa  as scientific result  subject falsification study  e g   gathering additional data  analyzing existing data improved methods   the data based may noisy  analysis confounded genetic recombination  horizontal gene transfer  hybridisation species nearest neighbors tree hybridisation takes place  convergent evolution  conserved sequences also  problems basing analysis single type character  single gene protein morphological analysis  trees constructed another unrelated data source often differ first  therefore great care needed inferring phylogenetic relationships among species  this true genetic material subject lateral gene transfer recombination  different haplotype blocks different histories  in types analysis  output tree phylogenetic analysis single gene estimate gene phylogeny  i e  gene tree  phylogeny taxa  i e  species tree  characters sampled  though ideally  close  for reason  serious phylogenetic studies generally use combination genes come different genomic sources  e g   mitochondrial plastid vs  nuclear genomes   genes would expected evolve different selective regimes  homoplasy  false homology  would unlikely result natural selection when extinct species included terminal nodes analysis  rather  example  constrain internal nodes   considered represent direct ancestors extant species  extinct species typically contain high-quality dna the range useful dna materials expanded advances extraction sequencing technologies  development technologies able infer sequences smaller fragments  spatial patterns dna degradation products  would expand range dna considered useful phylogenetic trees also inferred range data types  including morphology  presence absence particular types genes  insertion deletion events   observation thought contain evolutionary signal phylogenetic networks used bifurcating trees suitable  due complications suggest reticulate evolutionary history organisms sampled    see also      references      further reading   schuh  r  t  a  v  z  brower        biological systematics  principles applications   nd edn   isbn    - -    -    - manuel lima  the book trees  visualizing branches knowledge        princeton architectural press  new york mega  free software draw phylogenetic trees gontier  n         depicting tree life  philosophical historical roots evolutionary tree diagrams    evolution  education  outreach               external links       images    human y-chromosome      phylogenetic treeitol  interactive tree of lifephylogenetic tree artificial organisms evolved computersmiyamoto goodman phylogram eutherian mammals    general    an overview different methods tree visualization available page  r  d  m           space  time  form  viewing tree life   trends ecology   evolution                   doi         j tree              pmid          onezoom  tree life   living species intuitive zoomable fractal explorer  responsive design discover life an interactive tree based u s  national science foundation assembling tree life projectphylocodea multiple alignment     myosin sequences phylogenetic treetree life web projectphylogenetic inferring t-rex serverncbi taxonomy database   ete  a python environment tree exploration this programming library analyze  manipulate visualize phylogenetic trees  ref a daily-updated tree  sequenced  life fang  h   oates  m  e   pethica  r  b   greenwood  j  m   sardar  a  j   rackham  o  j  l   donoghue  p  c  j   stamatakis  a   de lima morais  d  a   gough  j           a daily-updated tree  sequenced  life reference genome research   scientific reports           bibcode     natsr    e    f  doi         srep       pmc          pmid          
computational neuroscience  also known theoretical neuroscience mathematical neuroscience  branch neuroscience employs mathematical models  theoretical analysis abstractions brain understand principles govern development  structure  physiology cognitive abilities nervous system computational neuroscience employs computational simulations validate solve mathematical models  seen sub-field theoretical neuroscience  however  two fields often synonymous  the term mathematical neuroscience also used sometimes  stress quantitative nature field computational neuroscience focuses description biologically plausible neurons  neural systems  physiology dynamics  therefore directly concerned biologically unrealistic models used connectionism  control theory  cybernetics  quantitative psychology  machine learning  artificial neural networks  artificial intelligence computational learning theory  although mutual inspiration exists sometimes strict limit fields  model abstraction computational neuroscience depending research scope granularity biological entities analyzed models theoretical neuroscience aimed capturing essential features biological system multiple spatial-temporal scales  membrane currents  chemical coupling via network oscillations  columnar topographic architecture  nuclei  way psychological faculties like memory  learning behavior  these computational models frame hypotheses directly tested biological psychological experiments    history   the term  computational neuroscience  introduced eric l  schwartz  organized conference  held      carmel  california  request systems development foundation provide summary current status field point referred variety names  neural modeling  brain theory neural networks  the proceedings definitional meeting published      book computational neuroscience  the first annual open international meetings focused computational neuroscience organized james m  bower  john miller san francisco  california       the first graduate educational program computational neuroscience organized computational neural systems ph d  program california institute technology      the early historical roots field traced work people including louis lapicque  hodgkin   huxley  hubel wiesel  david marr  lapicque introduced integrate fire model neuron seminal article published       model still popular artificial neural networks studies simplicity  see recent review  about    years later  hodgkin   huxley developed voltage clamp created first biophysical model action potential  hubel   wiesel discovered neurons primary visual cortex  first cortical area process information coming retina  oriented receptive fields organized columns  david marr work focused interactions neurons  suggesting computational approaches study functional groups neurons within hippocampus neocortex interact  store  process  transmit information  computational modeling biophysically realistic neurons dendrites began work wilfrid rall  first multicompartmental model using cable theory    major topics   research computational neuroscience roughly categorized several lines inquiry  most computational neuroscientists collaborate closely experimentalists analyzing novel data synthesizing new models biological phenomena     single-neuron modeling    even single neuron complex biophysical characteristics perform computations  e g    hodgkin huxley original model employed two voltage-sensitive currents  voltage sensitive ion channels glycoprotein molecules extend lipid bilayer  allowing ions traverse certain conditions axolemma   fast-acting sodium inward-rectifying potassium  though successful predicting timing qualitative features action potential  nevertheless failed predict number important features adaptation shunting  scientists believe wide variety voltage-sensitive currents  implications differing dynamics  modulations  sensitivity currents important topic computational neuroscience the computational functions complex dendrites also intense investigation  there large body literature regarding different currents interact geometric properties neurons some models also tracking biochemical pathways small scales spines synaptic clefts there many software packages   genesis neuron  allow rapid systematic silico modeling realistic neurons  blue brain  project founded henry markram  cole polytechnique f rale de lausanne  aims construct biophysically detailed simulation cortical column blue gene supercomputer modeling richness biophysical properties single-neuron scale supply mechanisms serve building blocks network dynamics  however  detailed neuron descriptions computationally expensive handicap pursuit realistic network investigations  many neurons need simulated  as result  researchers study large neural circuits typically represent neuron synapse artificially simple model  ignoring much biological detail  hence drive produce simplified neuron models retain significant biological fidelity low computational overhead  algorithms developed produce faithful  faster running  simplified surrogate neuron models computationally expensive  detailed neuron models     development  axonal patterning  guidance    computational neuroscience aims address wide array questions  how axons dendrites form development  how axons know target reach targets  how neurons migrate proper position central peripheral systems  how synapses form  we know molecular biology distinct parts nervous system release distinct chemical cues  growth factors hormones modulate influence growth development functional connections neurons theoretical investigations formation patterning synaptic connection morphology still nascent  one hypothesis recently garnered attention minimal wiring hypothesis  postulates formation axons dendrites effectively minimizes resource allocation maintaining maximal information storage     sensory processing    early models sensory processing understood within theoretical framework credited horace barlow  somewhat similar minimal wiring hypothesis described preceding section  barlow understood processing early sensory systems form  efficient coding  neurons encoded information minimized number spikes  experimental computational work since supported hypothesis one form another   for example visual processing  efficient coding manifested theforms efficient spatial coding  color coding  temporal motion coding   stereo coding  combinations them further along visual pathway  even efficiently coded visual information much capacity information bottleneck  visual attentional bottleneck  a subsequent theory  v  saliency hypothesis  v sh   developed exogenous attentional selection fraction visual input processing  guided bottom-up saliency map primary visual cortex current research sensory processing divided among biophysical modelling different subsystems theoretical modelling perception  current models perception suggested brain performs form bayesian inference integration different sensory information generating perception physical world     motor control    many models way brain controls movement developed  this includes models  processing brain cerebellum role error correction  skill learning motor cortex basal ganglia  control vestibulo ocular reflex  this also includes many normative models  bayesian optimal control flavor built idea brain efficiently solves problems     memory synaptic plasticity    earlier models memory primarily based postulates hebbian learning  biologically relevant models  hopfield net developed address properties associative  also known  content-addressable   style memory occur biological systems  these attempts primarily focusing formation medium- long-term memory  localizing hippocampus  models working memory  relying theories network oscillations persistent activity  built capture features prefrontal cortex context-related memory  additional models look close relationship basal ganglia prefrontal cortex contributes working memory one major problems neurophysiological memory maintained changed multiple time scales  unstable synapses easy train also prone stochastic disruption  stable  synapses forget less easily  also harder consolidate  one recent computational hypothesis involves cascades plasticity allow synapses function multiple time scales  stereochemically detailed models acetylcholine receptor-based synapse monte carlo method  working time scale microseconds  built  it likely computational tools contribute greatly understanding synapses function change relation external stimulus coming decades     behaviors networks    biological neurons connected complex  recurrent fashion  these connections  unlike artificial neural networks  sparse usually specific   it known information transmitted sparsely connected networks  although specific areas brain  visual cortex  understood detail  it also unknown computational functions specific connectivity patterns  any the interactions neurons small network often reduced simple models ising model  the statistical mechanics simple systems well-characterized theoretically  some recent evidence suggests dynamics arbitrary neuronal networks reduced pairwise interactions  it known  however  whether descriptive dynamics impart important computational function  with emergence two-photon microscopy calcium imaging  powerful experimental methods test new theories regarding neuronal networks in cases complex interactions inhibitory excitatory neurons simplified using mean-field theory  gives rise population model neural networks  while many neurotheorists prefer models reduced complexity  others argue uncovering structural-functional relations depends including much neuronal network structure possible  models type typically built large simulation platforms like genesis neuron  there attempts provide unified methods bridge integrate levels complexity     visual attention  identification  categorization    visual attention described set mechanisms limit processing subset incoming stimuli  attentional mechanisms shape see act upon  they allow concurrent selection  preferably  relevant  information inhibition information  in order concrete specification mechanism underlying visual attention binding features  number computational models proposed aiming explain psychophysical findings  in general  models postulate existence saliency priority map registering potentially interesting areas retinal input  gating mechanism reducing amount incoming visual information  limited computational resources brain handle it an example theory extensively tested behaviorally physiologically  v  saliency hypothesis  bottom-up saliency map created primary visual cortex guide attention exogenously  computational neuroscience provides mathematical framework studying mechanisms involved brain function allows complete simulation prediction neuropsychological syndromes     cognition  discrimination  learning    computational modeling higher cognitive functions recently begun  experimental data comes primarily single-unit recording primates   the frontal lobe parietal lobe function integrators information multiple sensory modalities  there tentative ideas regarding simple mutually inhibitory functional circuits areas may carry biologically relevant computation the brain seems able discriminate adapt particularly well certain contexts  for instance  human beings seem enormous capacity memorizing recognizing faces  one key goals computational neuroscience dissect biological systems carry complex computations efficiently potentially replicate processes building intelligent machines the brain large-scale organizational principles illuminated many fields  including biology  psychology  clinical practice  integrative neuroscience attempts consolidate observations unified descriptive models databases behavioral measures recordings  these bases quantitative modeling large-scale brain activity the computational representational understanding mind  crum  another attempt modeling human cognition simulated processes like acquired rule-based systems decision making manipulation visual representations decision making     consciousness    one ultimate goals psychology neuroscience able explain everyday experience conscious life  francis crick  giulio tononi christof koch made attempts formulate consistent frameworks future work neural correlates consciousness  ncc   though much work field remains speculative  specifically  crick cautioned field neuroscience approach topics traditionally left philosophy religion     computational clinical neuroscience    computational clinical neuroscience field brings together experts neuroscience  neurology  psychiatry  decision sciences computational modeling quantitatively define investigate problems neurological psychiatric diseases  train scientists clinicians wish apply models diagnosis treatment    technology       neuromorphic computing    a neuromorphic computer chip device uses physical artificial neurons  made silicon  computations  see  neuromorphic computing  physical neural network   one advantages using physical model computer takes computational load processor  sense structural functional elements programmed since hardware   in recent times  neuromorphic technology used build supercomputers used international neuroscience collaborations  examples include human brain project spinnaker supercomputer brainscales computer    see also      notes references      bibliography   chklovskii db          synaptic connectivity neuronal morphology  two sides coin   neuron                  doi         j neuron              pmid           s cid          sejnowski  terrence j   churchland  patricia smith         the computational brain  cambridge  mass  mit press  isbn    - -   -     -  gerstner  w   kistler  w   naud  r   paninski  l          neuronal dynamics  cambridge  uk  cambridge university press  isbn               dayan p   abbott  l  f          theoretical neuroscience  computational mathematical modeling neural systems  cambridge  mass  mit press  isbn    - -   -     -  eliasmith  chris  anderson  charles h          neural engineering  representation  computation  dynamics neurobiological systems  cambridge  mass  mit press  isbn    - -   -     -  hodgkin al  huxley af     august         a quantitative description membrane current application conduction excitation nerve   j  physiol                   doi         jphysiol      sp        pmc          pmid          william bialek  rieke  fred  david warland  rob de ruyter van steveninck         spikes  exploring neural code  cambridge  mass  mit  isbn    - -   -     -  schutter  erik de         computational neuroscience  realistic modeling experimentalists  boca raton  crc  isbn    - -    -    -  sejnowski  terrence j   hemmen  j  l  van            problems systems neuroscience  oxford  oxfordshire   oxford university press  isbn    - -  -      -  michael a  arbib  shun-ichi amari  prudence h  arbib         the handbook brain theory neural networks  cambridge  massachusetts  the mit press  isbn    - -   -     -  zhaoping  li         understanding vision  theory  models  data  oxford  uk  oxford university press  isbn    -              see also       software    brian  python based simulatorbudapest reference connectome  web based  d visualization tool browse connections human brainemergent  neural simulation software genesis  general neural simulation system nest simulator spiking neural network models focuses dynamics  size structure neural systems rather exact morphology individual neurons    external links       journals    journal mathematical neurosciencejournal computational neuroscienceneural computationcognitive neurodynamicsfrontiers computational neuroscienceplos computational biologyfrontiers neuroinformatics    conferences    computational systems neuroscience  cosyne    computational neuroscience meeting systems neuroscience focus annual computational neuroscience meeting  cns    yearly computational neuroscience meeting computational cognitive neuroscience - yearly computational neuroscience meeting focus cognitive phenomena neural information processing systems  nips   leading annual conference covering mostly machine learning international conference cognitive neurodynamics  iccn    yearly conference uk mathematical neurosciences meeting  yearly conference  focused mathematical aspects bernstein conference computational neuroscience  bccn   yearly computational neuroscience conference   areadne conferences  biennial meeting includes theoretical experimental results     websites    encyclopedia computational neuroscience  part scholarpedia  online expert curated encyclopedia computational neuroscience dynamical systems
neurophysiology study nerve cells  neurones  receive transmit information  it branch physiology neuroscience focuses functioning nervous system  the word originates greek word        meaning  nerve  physiology meaning knowledge function living systems        meaning  nature  -      meaning  knowledge    studies neurophysiology emerged early      bce  during time period  focus better understand nervous system brain spinal cord connection mental health  currently methods used utilise research neurophysiology include electrophysiological recordings  patch clamp  voltage clamp  extracellular single-unit recording recording local field potentials    history   neurophysiology subject study since early       b c in early b c  years  studies different natural sedatives like alcohol poppy plants  in      b c   edwin smith surgical papyrus written  this papyrus crucial understanding ancient egyptians understood nervous system   this papyrus looked different case studies injuries different parts body  notably head  beginning around     b c   hippocrates began study epilepsy  theorized origins brain  hippocrates also theorized brain involved sensation  intelligence derived from   hippocrates  well ancient greeks  believed relaxation stress free environment crucial helping treat neurological disorders  in     b c   erasistratus chios theorized divisions vestibular processing brain  well deducing observation sensation located there in     galen theorized human thought occurred brain  opposed heart aristotle theorized  the optic chiasm  crucial visual system  discovered around     c e  marinus  circa       al-zahrawi  living iberia  began write different surgical treatments neurological disorders  in       first anatomy textbook europe  included description brain  written mondino de luzzi  in       st mary bethlehem hospital  later known bedlam britain  first hospital used exclusively mentally ill in       leonardo da vinci continued study human body wax cast human ventricle system  in       nicolo massa described effects different diseases  syphilis nervous system  he also noticed ventricular cavities filled cerebrospinal fluid  in       term physiology used first time french physician named jean fernel  explain bodily function relation brain  in       andreas vesalius wrote de humani corporis fabrica  revolutionized study anatomy  in book  described pineal gland believed function  able draw corpus striatum made basal ganglia internal capsule  in       jason pratensis published de cerebri morbis  this book devoted neurological diseases  discussed symptoms  well ideas galen greek  roman arabic authors  it also looked anatomy specific functions different areas  in       andreas vesalius worked case hydrocephalus  fluid filling brain  in year  bartolomeo eustachi studied optic nerve  mainly focusing origin brain  in       giulio cesare aranzio discovered hippocampus  naming due shape resemblance sea horse in       robert burton published the anatomy melancholy  looked loss important characters one life leading depression  in       ren  descartes studied pineal gland  he mistakenly believed  soul  brain  believed thoughts formed  in       johann jakob wepfer studied patient believed broken blood vessel caused apoplexy  stroke in       david hartley published observations man  focused frame  neurology   duty  moral psychology  expectations  spirituality  integrated within one another  this text also first use english term psychology  in       society friends created asylum philadelphia  pennsylvania  the asylum intended give medical treatment mentally ill  also provide caretakers comfortable living conditions  in       jean-baptiste le roy began using electroconvulsive therapy mentally ill  treatment still used today specific cases  in       arne-charles studied different lesions cerebellum could affect motor movements  in       vincenzo malacarne studied cerebellum intensely  published book solely based function appearance in       f lix vicq-d azyr  discovered black colored structure midbrain  in      samuel thomas von s mmerring alluded structure  calling substantia nigra   in year  luigi galvani described role electricity nerves dissected frogs   in       franz joseph gall studied published work phrenology  phrenology faulty science looking head shape determine different aspects personality brain function  in       julien jean c sar legallois studied respiration animal dissection lesions found center respiration medulla oblongata  in year  charles bell finished work would later become known bell-magendie law  compared functional differences dorsal ventral roots spinal cord  in       karl friedrich burdach distinguished lateral medial geniculate bodies  well named cingulate gyrus  in       f  magendie studied produced first evidence cerebellum role equilibration complete bell-magendie law  in       theodor schwann began studying white grey matter brain  discovered myelin sheath  these cells  cover axons neurons brain  named schwann cells him  in       phineas gage  classical neurophysiology patient  brain pierced iron tamping rod blasting accident  he became excellent case study connection prefrontal cortex behavior  decision making consequences  in       hermann von helmholtz studied speed frog nerve impulses studying electricity body while developments neurophysiology       developments significant study brain body    see also   brainneuroscienceneural codingneurology   references      sources   fye wb  october         julien jean c sar legallois   clinical cardiology                    doi         clc             pmid          neurosurgery   on-call    cyber museum neurosurgery  retrieved    april      gallistel  c  r           bell  magendie proposals restrict use animals neurobehavioral research   pdf   the american psychologist  ruccs rutgers edu                  doi              -   x           pmid          archived original  pdf    april       retrieved    april       history biology     -       retrieved    april       history neuroscience   university washington  retrieved    april      duque-parra je  september         perspective vestibular cortex throughout history   the anatomical record part b  the new anatomist                 doi         ar b        pmid           article number  eons          cerebellum   pdf   retrieved    april       david hartley   stanford encyclopedia philosophy  retrieved    april      frank  leonard r           the electroshock quotationary   pdf   retrieved    april      pearce jm  april         johann jakob wepfer      -    cerebral haemorrhage   journal neurology  neurosurgery  psychiatry               doi         jnnp           pmc          pmid         finger  stanley         origins neuroscience  isbn                retrieved    april      waln  robert   an account asylum insane  established society friends  near frankford  vicinity philadelphia   retrieved    april       anatomy words   retrieved    april       andreas vesalius modern human anatomy   archived original    september       retrieved    april      o malley  charles donald         andreas vesalius brussels      -      university california press  retrieved    april      pestronk a  march         the first neurology book  de cerebri morbis          jason pratensis   archives neurology                 doi         archneur                      pmid          descartes pineal gland   stanford encyclopedia philosophy  retrieved    april      mccaffrey  patrick   chapter    the corpus striatum  rhinencephalon  connecting fibers  diencephalon   cmsd     neuroanatomy speech  swallowing language  the neuroscience web series  csu  archived original   january       retrieved    april      brink a  december         depression loss  theme robert burton  anatomy melancholy           canadian journal psychiatry                  doi                             pmid         s cid           al-zahrawi - father surgery   retrieved    april       andreas vesalius   encyclopedia com  retrieved    april      jeffery g  october         architecture optic chiasm mechanisms sculpt development   physiological reviews                    doi         physrev                 pmid           s cid         mondino de  luzzi   encyclopedia com  retrieved    april       a history brain   stanford university  retrieved    april      
in computer science  specifically software engineering hardware engineering  formal methods particular kind mathematically rigorous techniques specification  development verification software hardware systems  the use formal methods software hardware design motivated expectation  engineering disciplines  performing appropriate mathematical analysis contribute reliability robustness design formal methods best described application fairly broad variety theoretical computer science fundamentals  particular logic calculi  formal languages  automata theory  discrete event dynamic system program semantics  also type systems algebraic data types problems software hardware specification verification    background   semi-formal methods formalisms languages considered fully  formal   it defers task completing semantics later stage  done either human interpretation interpretation software like code test case generators    taxonomy   formal methods used number levels level    formal specification may undertaken program developed informally  this dubbed formal methods lite  this may cost-effective option many cases level    formal development formal verification may used produce program formal manner  for example  proofs properties refinement specification program may undertaken  this may appropriate high-integrity systems involving safety security level    theorem provers may used undertake fully formal machine-checked proofs  despite improving tools declining costs  expensive practically worthwhile cost mistakes high  e g   critical parts operating system microprocessor design  further information expanded below as programming language semantics  styles formal methods may roughly classified follows denotational semantics  meaning system expressed mathematical theory domains   proponents methods rely well-understood nature domains give meaning system  critics point every system may intuitively naturally viewed function operational semantics  meaning system expressed sequence actions  presumably  simpler computational model  proponents methods point simplicity models means expressive clarity  critics counter problem semantics delayed  defines semantics simpler model   axiomatic semantics  meaning system expressed terms preconditions postconditions true system performs task  respectively  proponents note connection classical logic  critics note semantics never really describe system  merely true afterwards      lightweight formal methods    some practitioners believe formal methods community overemphasized full formalization specification design  they contend expressiveness languages involved  well complexity systems modelled  make full formalization difficult expensive task  as alternative  various lightweight formal methods  emphasize partial specification focused application  proposed  examples lightweight approach formal methods include alloy object modelling notation  denney synthesis aspects z notation use case driven development  csk vdm tools    uses   formal methods applied various points development process     specification    formal methods may used give description system developed  whatever level  detail desired  this formal description used guide development activities  see following sections   additionally  used verify requirements system developed completely accurately specified  formalising system requirements expressing formal language precise unambiguously defined syntax semantics the need formal specification systems noted years  in algol    report  john backus presented formal notation describing programming language syntax  later named backus normal form renamed backus naur form  bnf   backus also wrote formal description meaning syntactically valid algol programs completed time inclusion report   therefore formal treatment semantics legal programs included subsequent paper   it never appeared     development    formal development use formal methods integrated part tool-supported system development process once formal specification produced  specification may used guide concrete system developed design process  i e   realized typically software  also potentially hardware   for example if formal specification operational semantics  observed behavior concrete system compared behavior specification  executable simulatable   additionally  operational commands specification may amenable direct translation executable code if formal specification axiomatic semantics  preconditions postconditions specification may become assertions executable code     verification    formal verification use software tools prove properties formal specification  prove formal model system implementation satisfies specification once formal specification developed  specification may used basis proving properties specification  hopefully inference developed system       sign-off verification     sign-off verification use formal verification tool highly trusted   such tool replace traditional verification methods  tool may even certified       human-directed proof     sometimes  motivation proving correctness system obvious need reassurance correctness system  desire understand system better  consequently  proofs correctness produced style mathematical proof  handwritten  typeset  using natural language  using level informality common proofs  a  good  proof one readable understandable human readers critics approaches point ambiguity inherent natural language allows errors undetected proofs  often  subtle errors present low-level details typically overlooked proofs  additionally  work involved producing good proof requires high level mathematical sophistication expertise      automated proof     in contrast  increasing interest producing proofs correctness systems automated means  automated techniques fall three general categories automated theorem proving  system attempts produce formal proof scratch  given description system  set logical axioms  set inference rules model checking  system verifies certain properties means exhaustive search possible states system could enter execution abstract interpretation  system verifies over-approximation behavioural property program  using fixpoint computation  possibly complete  lattice representing it some automated theorem provers require guidance properties  interesting  enough pursue  others work without human intervention  model checkers quickly get bogged checking millions uninteresting states given sufficiently abstract model proponents systems argue results greater mathematical certainty human-produced proofs  since tedious details algorithmically verified  the training required use systems also less required produce good mathematical proofs hand  making techniques accessible wider variety practitioners critics note systems like oracles  make pronouncement truth  yet give explanation truth  there also problem  verifying verifier   program aids verification unproven  may reason doubt soundness produced results  some modern model checking tools produce  proof log  detailing step proof  making possible perform  given suitable tools  independent verification the main feature abstract interpretation approach provides sound analysis  i e  false negatives returned  moreover  efficiently scalable  tuning abstract domain representing property analyzed  applying widening operators get fast convergence    applications   formal methods applied different areas hardware software  including routers  ethernet switches  routing protocols  security applications  operating system microkernels sel   there several examples used verify functionality hardware software used dcs  ibm used acl   theorem prover  amd x   processor development process  intel uses methods verify hardware firmware  permanent software programmed read-only memory   dansk datamatik center used formal methods     develop compiler system ada programming language went become long-lived commercial product there several projects nasa formal methods applied  next generation air transportation system  unmanned aircraft system integration national airspace system  airborne coordinated conflict resolution detection  accord  b-method atelier b  used develop safety automatisms various subways installed throughout world alstom siemens  also common criteria certification development system models atmel stmicroelectronics formal verification frequently used hardware well-known hardware vendors  ibm  intel  amd  there many areas hardware  intel used fms verify working products  parameterized verification cache-coherent protocol  intel core  processor execution engine validation   using theorem proving  bdds  symbolic evaluation   optimization intel ia-   architecture using hol light theorem prover  verification high-performance dual-port gigabit ethernet controller support pci express protocol intel advance management technology using cadence  similarly  ibm used formal methods verification power gates  registers  functional verification ibm power  microprocessor    in software development   in software development  formal methods mathematical approaches solving software  hardware  problems requirements  specification  design levels  formal methods likely applied safety-critical security-critical software systems  avionics software  software safety assurance standards  do-   c allows usage formal methods supplementation  common criteria mandates formal methods highest levels categorization for sequential software  examples formal methods include b-method  specification languages used automated theorem proving  raise  z notation in functional programming  property-based testing allowed mathematical specification testing  exhaustive testing  expected behaviour individual functions the object constraint language  specializations java modeling language  allowed object-oriented systems formally specified  necessarily formally verified for concurrent software systems  petri nets  process algebra  finite state machines  based automata theory - see also virtual finite state machine event driven finite state machine  allow executable software specification used build validate application behaviour another approach formal methods software development write specification form logic usually variation first-order logic  fol  directly execute logic though program  the owl language  based description logic  dl   example  there also work mapping version english  another natural language  automatically logic  well executing logic directly  examples attempto controlled english  internet business logic  seek control vocabulary syntax  a feature systems support bidirectional english-logic mapping direct execution logic made explain results  english  business scientific level    formal methods notations   there variety formal methods notations available     specification languages    abstract state machines  asms a computational logic applicative common lisp  acl  actor modelalloyansi iso c specification language  acsl autonomic system specification language  assl b-methodcadpcommon algebraic specification language  casl estereljava modeling language  jml knowledge based software assistant  kbsa lustremcrl perfect developerpetri netspredicative programmingprocess calculicsplotos -calculusraiserebeca modeling languagespark adaspecification description languagetla uslvdmvdm-slvdm  z notation    model checkers    esbmcmalpas software static analysis toolset   industrial-strength model checker used formal proof safety-critical systemspat   free model checker  simulator refinement checker concurrent systems csp extensions  e g   shared variables  arrays  fairness spinuppaal   organizations   apcbbcs-facsformal methods europez user group   see also   abstract interpretationautomated theorem provingdesign contractformal methods peopleformal specificationformal verificationformal systemmodel checkingsoftware engineeringspecification language   references      further reading      external links   formal methods europe  fme formal methods wikiformal methods foldocarchival materialformal method keyword microsoft academic search via archive orgevidence formal methods uses impact industry supported deploy project  eu fp   archive org
software engineering systematic application engineering approaches development software a software engineer person applies principles software engineering design  develop  maintain  test  evaluate computer software  the term programmer sometimes used synonym  may also lack connotations engineering education skills engineering techniques used inform software development process involves definition  implementation  assessment  measurement  management  change  improvement software life cycle process itself  it heavily uses software configuration management systematically controlling changes configuration  maintaining integrity traceability configuration code throughout system life cycle  modern processes use software versioning    history   beginning      software engineering seen type engineering  additionally  development software engineering seen struggle  it difficult keep hardware caused many problems software engineers  problems included software budget  exceeded deadlines  required extensive de-bugging maintenance  unsuccessfully met needs consumers never even completed  in      nato held first software engineering conference issues related software addressed  guidelines best practices development software established  the origins term  software engineering  attributed various sources  the term  software engineering  appeared list services offered companies june      issue computers automation used formally august      issue communications acm  volume    number     letter acm membership  acm president anthony a  oettinger   also associated title nato conference      professor friedrich l  bauer  first conference software engineering  independently  margaret hamilton named discipline  software engineering  apollo missions give legitimacy   at time perceived  software crisis   the   th international conference software engineering  icse       celebrates    years  software engineering  plenary sessions  keynotes frederick brooks margaret hamilton in       software engineering institute  sei  established federally funded research development center headquartered campus carnegie mellon university pittsburgh  pennsylvania  united states  watts humphrey founded sei software process program  aimed understanding managing software engineering process   the process maturity levels introduced would become capability maturity model integration development cmmi-dev   defined us government evaluates abilities software development team modern  generally accepted best-practices software engineering collected iso iec jtc   sc   subcommittee published software engineering body knowledge  swebok   software engineering considered one major computing disciplines    definitions terminology controversies   notable definitions software engineering include  the systematic application scientific technological knowledge  methods  experience design  implementation  testing  documentation software  the bureau labor statistics ieee systems software engineering   vocabulary the application systematic  disciplined  quantifiable approach development  operation  maintenance software  ieee standard glossary software engineering terminology engineering discipline concerned aspects software production  ian sommerville establishment use sound engineering principles order economically obtain software reliable works efficiently real machines  fritz bauer branch computer science deals design  implementation  maintenance complex computer programs  merriam-webster  software engineering  encompasses act writing code  tools processes organization uses build maintain code time        software engineering thought  programming integrated time    software engineering googlethe term also used less formally informal contemporary term broad range activities formerly called computer programming systems analysis broad term aspects practice computer programming  opposed theory computer programming  formally studied sub-discipline computer science term embodying advocacy specific approach computer programming  one urges treated engineering discipline rather art craft  advocates codification recommended practices     etymology  software engineer     margaret hamilton promoted term  software engineering  work apollo program  the term  engineering  used acknowledge work taken seriously contributions toward advancement technology  hamilton details use term when i first came term  one heard  least world  it ongoing joke long time  they liked kid radical ideas  it memorable day one respected hardware gurus explained everyone meeting agreed process building software also considered engineering discipline  like hardware  not acceptance new  term  per se  earned acceptance others room engineering field right     suitability term    individual commentators disagreed sharply define software engineering legitimacy engineering discipline  david parnas said software engineering  fact  form engineering  steve mcconnell said  be  donald knuth said programming art science  edsger w  dijkstra claimed terms software engineering software engineer misused  considered harmful  particularly united states    tasks large scale projects       software requirements    requirements engineering elicitation  analysis  specification  validation requirements software  software requirements three different types  there functional requirements  non-functional requirements  domain requirements  the operation software performed proper output expected user use  non-functional requirements deal issues like portability  security  maintainability  reliability  scalability  performance  reusability  flexibility  they classified following types  interference constraints  performance constraints  response time  security  storage space  etc    operating constraints  life cycle constraints  maintainability  portability  etc    economic constraints  knowledge system software works needed comes specifying non-functional requirements  domain requirements characteristic certain category domain projects     software design    software design process defining architecture  components  interfaces  characteristics system component  this also called software architecture  software design divided three different levels design  the three levels interface design  architectural design  detailed design  interface design interaction system environment  this happens high level abstraction along inner workings system  architectural design major components system responsibilities  properties  interfaces  relationships interactions occur them  detailed design internal elements major system components  properties  relationships  processing  usually algorithms data structures      software construction    software construction  main activity software development  combination programming  unit testing  integration testing  debugging  testing phase generally performed programmer software construction  verify written decide code ready sent next step     software testing    software testing empirical  technical investigation conducted provide stakeholders information quality product service test  different approaches unit testing integration testing  it one aspect software quality  as separate phase software development  typically performed quality assurance staff developer one wrote code     software maintenance    software maintenance refers activities required provide cost-effective support shipping software product  software maintenance modifying updating software applications distribution correct faults improve performance  software lot real world real world changes  software maintenance required  software maintenance includes  error correction  optimization  deletion unused discarded features  enhancement features already exist  usually  maintenance takes         project cost therefore  focusing maintenance keeps costs down    education   knowledge computer programming prerequisite becoming software engineer  in      ieee computer society produced swebok  published iso iec technical report            describing body knowledge recommend mastered graduate software engineer four years experience many software engineers enter profession obtaining university degree training vocational school  one standard international curriculum undergraduate software engineering degrees defined joint task force computing curricula ieee computer society association computing machinery  updated       a number universities software engineering degree programs            campus bachelor software engineering programs     online programs      masters-level programs     doctorate-level programs     certificate-level programs united states in addition university education  many companies sponsor internships students wishing pursue careers information technology  these internships introduce student interesting real-world tasks typical software engineers encounter every day  similar experience gained military service software engineering     software engineering degree programs    half practitioners today degrees computer science  information systems  information technology  a small  growing  number practitioners software engineering degrees  in       department computing imperial college london introduced first three-year software engineering bachelor degree uk world  following year  university sheffield established similar program   in       rochester institute technology established first software engineering bachelor degree program united states  however  obtain abet accreditation       time rice university  clarkson university  milwaukee school engineering mississippi state university obtained theirs  in       psg college technology coimbatore  india first start five-year integrated master science degree software engineering since  software engineering undergraduate degrees established many universities  a standard international curriculum undergraduate software engineering degrees  se      defined steering committee           funding association computing machinery ieee computer society  as       u s      universities offer software engineering degrees  teach computer science engineering principles practices  the first software engineering master degree established seattle university       since graduate software engineering degrees made available many universities   likewise canada  canadian engineering accreditation board  ceab  canadian council professional engineers recognized several software engineering programs in       us naval postgraduate school  nps  established first doctorate program software engineering world  additionally  many online advanced degrees software engineering appeared master science software engineering  mse  degree offered computer science engineering department california state university  fullerton  steve mcconnell opines universities teach computer science rather software engineering  shortage true software engineers  ets   cole de technologie sup rieure  university uqam  universit  du qu bec   montr al  mandated ieee develop software engineering body knowledge  swebok   become iso standard describing body knowledge covered software engineer    profession   legal requirements licensing certification professional software engineers vary around world  in uk  licensing legal requirement assume use job title software engineer   in areas canada  alberta  british columbia  ontario  quebec  software engineers hold professional engineer  p eng  designation information systems professional  i s p   designation  in europe  software engineers obtain european engineer  eur ing  professional title the united states  since       offered ncees professional engineer exam software engineering  thereby allowing software engineers licensed recognized  ncees end exam april      due lack participation  mandatory licensing currently still largely debated  perceived controversial  in parts us texas  use term engineer regulated law reserved use individuals professional engineer license the ieee computer society acm  two main us-based professional organizations software engineering  publish guides profession software engineering  the ieee guide software engineering body knowledge        version  swebok  defines field describes knowledge ieee expects practicing software engineer have  the current swebok v  updated version released       the ieee also promulgates  software engineering code ethics      employment    the u  s  bureau labor statistics  bls  counted           software developers holding jobs u s        due relative newness field study  formal education software engineering often taught part computer science curriculum  many software engineers hold computer science degrees  the bls estimates           computer software engineering would increase       this           bls estimate     software engineering  and                bls estimate  due trend  job growth may fast last decade  jobs would gone computer software engineers united states would instead outsourced computer software engineers countries india foreign countries  in addition  bls job outlook computer programmers          predicts      decline  words   decline job outlook      -   -        decline     -     program computers  furthermore  women many software fields also declining years compared engineering fields  however  trend may change slow future many current software engineers u s  market leave profession  age market next decades many software engineers work employees contractors  software engineers work businesses  government agencies  civilian military   non-profit organizations  some software engineers work freelancers  some organizations specialists perform tasks software development process  other organizations require software engineers many them  in large projects  people may specialize one role  in small projects  people may fill several roles time  many companies hire interns  often university college students summer break  externships  specializations include analysts  architects  developers  testers  technical support  middleware analysts  project managers  educators  researchers most software engineers programmers work    hours week     percent software engineers    percent programmers worked    hours week       potential injuries occupations possible like workers spend long periods sitting front computer terminal typing keyboard  engineers programmers susceptible eyestrain  back discomfort  hand wrist problems carpal tunnel syndrome     certification    the software engineering institute offers certifications specific topics like security  process improvement software architecture  ibm  microsoft companies also sponsor certification examinations  many it certification programs oriented toward specific technologies  managed vendors technologies  these certification programs tailored institutions would employ people use technologies broader certification general software engineering skills available various professional societies  as       ieee certified     software professionals certified software development professional  csdp   in      added entry-level certification known certified software development associate  csda   the acm professional certification program early      discontinued due lack interest  the acm examined possibility professional certification software engineers late      eventually decided certification inappropriate professional industrial practice software engineering in u k  british computer society developed legally recognized professional certification called chartered it professional  citp   available fully qualified members  mbcs   software engineers may eligible membership institution engineering technology qualify chartered engineer status  in canada canadian information processing society developed legally recognized professional certification called information systems professional  isp   in ontario  canada  software engineers graduate canadian engineering accreditation board  ceab  accredited program  successfully complete peo  professional engineers ontario  professional practice examination  ppe  least    months acceptable engineering experience eligible licensed professional engineers ontario become professional engineers p eng  the peo recognize online distance education however  consider computer science programs equivalent software engineering programs despite tremendous overlap two  this sparked controversy certification war  it also held number p eng holders profession exceptionally low  the vast majority working professionals field hold degree cs  se  given difficult certification path holders non-se degrees  never bother pursue license     impact globalization    the initial impact outsourcing  relatively lower cost international human resources developing third world countries led massive migration software development activities corporations north america europe india later  china  russia  developing countries  this approach flaws  mainly distance   time zone difference prevented human interaction clients developers massive job transfer  this negative impact many aspects software engineering profession  for example  students developed world avoid education related software engineering fear offshore outsourcing  importing software products services countries  displaced foreign visa workers  although statistics currently show threat software engineering  related career  computer programming appear affected  nevertheless  ability smartly leverage offshore near-shore resources via follow-the-sun workflow improved overall operational capability many organizations  when north americans leaving work  asians arriving work  when asians leaving work  europeans arriving work  this provides continuous ability human oversight business-critical processes    hours per day  without paying overtime compensation disrupting key human resource  sleep patterns while global outsourcing several advantages  global   generally distributed   development run serious difficulties resulting distance developers  this due key elements type distance identified geographical  temporal  cultural communication  includes use different languages dialects english different locations   research carried area global software development last    years extensive body relevant work published highlights benefits problems associated complex activity  as aspects software engineering research ongoing related areas     prizes    there several prizes field software engineering the codie awards yearly award issued software information industry association excellence software development within software industry jolt awards awards software industry stevens award software engineering award given memory wayne stevens    criticism   software engineering sees practitioners individuals follow well-defined engineering approaches problem-solving  these approaches specified various software engineering books research papers  always connotations predictability  precision  mitigated risk professionalism  this perspective led calls licensing  certification codified bodies knowledge mechanisms spreading engineering knowledge maturing field software engineering extends engineering draws engineering model  i e  engineering process  engineering project management  engineering requirements  engineering design  engineering construction  engineering validation  the concept new rarely understood  widely misinterpreted  including software engineering textbooks  papers  among communities programmers crafters one core issues software engineering approaches empirical enough real-world validation approaches usually absent  limited hence software engineering often misinterpreted feasible  theoretical environment  edsger dijkstra  founder many concepts used within software development today  rejected idea  software engineering  death       arguing terms poor analogies whathe called  radical novelty  computer science a number phenomena bundled name  software engineering   as economics known  the miserable science   software engineering known  the doomed discipline   doomed cannot even approach goal since goal self-contradictory  software engineering  course  presents another worthy cause  eyewash  carefully read literature analyse devotees actually  discover software engineering accepted charter  how program cannot     see also       study practice    computer scienceinformation engineeringsoftware craftsmanshipsoftware developmentrelease engineering    roles    programmersystems analystsystems architect    professional aspects    bachelor science information technologybachelor software engineeringlist software engineering conferenceslist computer science journals  including software engineering journals software engineering institute   references       citations        sources       further reading   guide software engineering body knowledge  swebok guide   version      pierre bourque  richard e  fairley  eds    ieee computer society        isbn    - -    -    -  cs  maint  others  link pressman  roger s         software engineering  a practitioner approach   th ed    boston  mass  mcgraw-hill  isbn    - -  -      -  sommerville  ian                software engineering   th ed    harlow  england  pearson education  isbn    - -  -      -  jalote  pankaj                an integrated approach software engineering   rd ed    springer  isbn    - -   -     -  bruegge  bernd  dutoit  allen         object-oriented software engineering   using uml  patterns  java   rd ed    prentice hall  isbn    - -  -      -  oshana  robert      -  -     software engineering embedded systems   methods  practical techniques  applications  second ed    kidlington  oxford  united kingdom  isbn    - -  -      -     external links   guide software engineering body knowledgethe open systems engineering software development life cycle framework opensdlc org integrated creative commons sdlcsoftware engineering institute carnegie mellon
in mathematics computer science  algorithm    listen   finite sequence well-defined instructions  typically used solve class specific problems perform computation  algorithms used specifications performing calculations  data processing  automated reasoning  automated decision-making tasks  in contrast  heuristic  technique used problem solving uses practical methods various estimates order produce solutions may optimal sufficient given circumstances as effective method  algorithm expressed within finite amount space time  well-defined formal language calculating function  starting initial state initial input  perhaps empty   instructions describe computation  executed  proceeds finite number well-defined successive states  eventually producing  output  terminating final ending state  the transition one state next necessarily deterministic  algorithms  known randomized algorithms  incorporate random input    history   the concept algorithm existed since antiquity  arithmetic algorithms  division algorithm  used ancient babylonian mathematicians c       bc egyptian mathematicians c       bc  greek mathematicians later used algorithms     bc sieve eratosthenes finding prime numbers  euclidean algorithm finding greatest common divisor two numbers  arabic mathematicians al-kindi  th century used cryptographic algorithms code-breaking  based frequency analysis the word algorithm derived name  th-century persian mathematician mu ammad ibn m  al-khw rizm   whose nisba  identifying khwarazm  latinized algoritmi  arabized persian           c           mu ammad ibn m  al-khw rizm  mathematician  astronomer  geographer  scholar house wisdom baghdad  whose name means  native khwarazm   region part greater iran uzbekistan  about      al-khwarizmi wrote arabic language treatise hindu arabic numeral system  translated latin   th century  the manuscript starts phrase dixit algorizmi   thus spake al-khwarizmi     algorizmi  translator latinization al-khwarizmi name  al-khwarizmi widely read mathematician europe late middle ages  primarily another books  algebra  in late medieval latin  algorismus  english  algorism   corruption name  simply meant  decimal number system   in   th century  influence greek word          arithmos    number   cf   arithmetic    latin word altered algorithmus  corresponding english term  algorithm  first attested   th century  modern sense introduced   th century in english  first used      chaucer       english adopted french term  late   th century  algorithm  took meaning modern english another early use word       manual titled carmen de algorismo composed alexandre de villedieu  it begins haec algorismus ars praesens dicitur  qua   talibus indorum fruimur bis quinque figuris which translates algorism art present use indian figures  number two times five the poem hundred lines long summarizes art calculating new styled indian dice  tali indorum   hindu numerals a partial formalization modern concept algorithm began attempts solve entscheidungsproblem   decision problem  posed david hilbert       later formalizations framed attempts define  effective calculability   effective method   those formalizations included g del herbrand kleene recursive functions                  alonzo church lambda calculus       emil post formulation         alan turing turing machines                 informal definition   an informal definition could  set rules precisely defines sequence operations   would include computer programs  including programs perform numeric calculations    example  prescribed bureaucratic procedureor cook-book recipe in general  program algorithm stops eventually even though infinite loops may sometimes prove desirable a prototypical example algorithm euclidean algorithm  used determine maximum common divisor two integers  example  others  described flowchart example later section boolos  jeffrey              offer informal meaning word  algorithm  following quotation no human write fast enough  long enough  small enough      smaller smaller without limit   trying write molecules  atoms  electrons   list members enumerably infinite set writing names  one another  notation  but humans something equally useful  case certain enumerably infinite sets  they give explicit instructions determining nth member set  arbitrary finite n  such instructions given quite explicitly  form could followed computing machine  human capable carrying elementary operations symbols an  enumerably infinite set  one whose elements put one-to-one correspondence integers  thus boolos jeffrey saying algorithm implies instructions process  creates  output integers arbitrary  input  integer integers  theory  arbitrarily large  for example  algorithm algebraic equation     n  i e   two arbitrary  input variables  n produce output   various authors  attempts define notion indicate word implies much  something order  addition example  precise instructions  language understood  computer   fast  efficient   good  process specifies  moves   computer   machine human  equipped necessary internally contained information capabilities  find  decode  process arbitrary input integers symbols n  symbols        effectively  produce   reasonable  time  output-integer specified place specified format the concept algorithm also used define notion decidability notion central explaining formal systems come starting small set axioms rules  in logic  time algorithm requires complete cannot measured  apparently related customary physical dimension  from uncertainties  characterize ongoing work  stems unavailability definition algorithm suits concrete  sense  abstract usage term    formalization   algorithms essential way computers process data  many computer programs contain algorithms detail specific instructions computer perform specific order carry specified task  calculating employees  paychecks printing students  report cards  thus  algorithm considered sequence operations simulated turing-complete system  authors assert thesis include minsky         savage        gurevich         minsky   but also maintain  turing   procedure could  naturally  called effective   fact  realized  simple  machine  although may seem extreme  arguments   favor hard refute   gurevich     turing informal argument favor thesis justifies stronger thesis  every algorithm simulated turing machine   according savage         algorithm computational process defined turing machine  turing machines define computational processes terminate  the informal definitions algorithms generally require algorithm always terminates  this requirement renders task deciding whether formal procedure algorithm impossible general case due major theorem computability theory known halting problem typically  algorithm associated processing information  data read input source  written output device stored processing  stored data regarded part internal state entity performing algorithm  in practice  state stored one data structures for computational processes  algorithm must rigorously defined  specified way applies possible circumstances could arise  this means conditional steps must systematically dealt  case-by-case  criteria case must clear  computable  because algorithm precise list precise steps  order computation always crucial functioning algorithm  instructions usually assumed listed explicitly  described starting  top  going  bottom  idea described formally flow control so far  discussion formalization algorithm assumed premises imperative programming  this common conception one attempts describe task discrete   mechanical  means  unique conception formalized algorithms assignment operation  sets value variable  it derives intuition  memory  scratchpad  an example assignment found below for alternate conceptions constitutes algorithm  see functional programming logic programming    expressing algorithms   algorithms expressed many kinds notation  including natural languages  pseudocode  flowcharts  drakon-charts  programming languages control tables  processed interpreters   natural language expressions algorithms tend verbose ambiguous  rarely used complex technical algorithms  pseudocode  flowcharts  drakon-charts control tables structured ways express algorithms avoid many ambiguities common statements based natural language  programming languages primarily intended expressing algorithms form executed computer  also often used way define document algorithms there wide variety representations possible one express given turing machine program sequence machine tables  see finite-state machine  state transition table control table   flowcharts drakon-charts  see state diagram   form rudimentary machine code assembly code called  sets quadruples   see turing machine  representations algorithms classed three accepted levels turing machine description  follows   high-level description  prose describe algorithm  ignoring implementation details  at level  need mention machine manages tape head    implementation description  prose used define way turing machine uses head way stores data tape  at level  give details states transition function    formal descriptionmost detailed   lowest level   gives turing machine  state table  for example simple algorithm  add n  described three levels  see algorithm examples    design   algorithm design refers method mathematical process problem-solving engineering algorithms  the design algorithms part many solution theories operation research  dynamic programming divide-and-conquer  techniques designing implementing algorithm designs also called algorithm design patterns  examples including template method pattern decorator pattern one important aspects algorithm design resource  run-time  memory usage  efficiency  big o notation used describe e g  algorithm run-time growth size input increases typical steps development algorithms problem definitiondevelopment modelspecification algorithmdesigning algorithmchecking correctness algorithmanalysis algorithmimplementation algorithmprogram testingdocumentation preparation   implementation   most algorithms intended implemented computer programs  however  algorithms also implemented means  biological neural network  example  human brain implementing arithmetic insect looking food   electrical circuit  mechanical device    computer algorithms   in computer systems  algorithm basically instance logic written software software developers  effective intended  target  computer  produce output given  perhaps null  input  an optimal algorithm  even running old hardware  would produce faster results non-optimal  higher time complexity  algorithm purpose  running efficient hardware  algorithms  like computer hardware  considered technology  elegant   compact  programs   good   fast  programs   the notion  simplicity elegance  appears informally knuth precisely chaitin knuth      want good algorithms loosely defined aesthetic sense  one criterion   length time taken perform algorithm    other criteria adaptability algorithm computers  simplicity elegance  etc chaitin      program  elegant   i mean smallest possible program producing output chaitin prefaces definition   i show prove program  elegant   proof would solve halting problem  ibid  algorithm versus function computable algorithm  for given function multiple algorithms may exist  this true  even without expanding available instruction set available programmer  rogers observes  it     important distinguish notion algorithm  i e  procedure notion function computable algorithm  i e  mapping yielded procedure  the function may several different algorithms  unfortunately  may tradeoff goodness  speed  elegance  compactness  elegant program may take steps complete computation one less elegant  an example uses euclid algorithm appears below computers  computors   models computation  a computer  human  computor   restricted type machine   discrete deterministic mechanical device  blindly follows instructions  melzak lambek primitive models reduced notion four elements    discrete  distinguishable locations   ii  discrete  indistinguishable counters  iii  agent   iv  list instructions effective relative capability agent minsky describes congenial variation lambek  abacus  model  very simple bases computability   minsky machine proceeds sequentially five  six  depending one counts  instructions unless either conditional if-then goto unconditional goto changes program flow sequence  besides halt  minsky machine includes three assignment  replacement  substitution  operations  zero  e g  contents location replaced    l       successor  e g  l   l     decrement  e g  l   l       rarely must programmer write  code  limited instruction set  but minsky shows  melzak lambek  machine turing complete four general types instructions  conditional goto  unconditional goto  assignment replacement substitution  halt   however  different assignment instructions  e g  decrement  increment  zero clear empty minsky machine  also required turing-completeness  exact specification somewhat designer  the unconditional goto convenience  constructed initializing dedicated location zero e g  instruction   z        thereafter instruction if z   then goto xxx unconditional simulation algorithm  computer  computor  language  knuth advises reader  best way learn algorithm try       immediately take pen paper work example   but simulation execution real thing  the programmer must translate algorithm language simulator computer computor effectively execute  stone gives example  computing roots quadratic equation computor must know take square root  if  algorithm  effective  must provide set rules extracting square root this means programmer must know  language  effective relative target computing agent  computer computor  but model used simulation  van emde boas observes  even base complexity theory abstract instead concrete machines  arbitrariness choice model remains  it point notion simulation enters   when speed measured  instruction set matters  for example  subprogram euclid algorithm compute remainder would execute much faster programmer  modulus  instruction available rather subtraction  worse  minsky  decrement   structured programming  canonical structures  per church turing thesis  algorithm computed model known turing complete  per minsky demonstrations  turing completeness requires four instruction types conditional goto  unconditional goto  assignment  halt  kemeny kurtz observe   undisciplined  use unconditional gotos conditional if-then gotos result  spaghetti code   programmer write structured programs using instructions  hand  also possible  hard  write badly structured programs structured language   tausworthe augments three b hm-jacopini canonical structures  sequence  if-then-else  while-do  two  do-while case  an additional benefit structured program lends proofs correctness using mathematical induction canonical flowchart symbols  the graphical aide called flowchart  offers way describe document algorithm  computer program one   like program flow minsky machine  flowchart always starts top page proceeds down  its primary symbols four  directed arrow showing program flow  rectangle  sequence  goto   diamond  if-then-else   dot  or-tie   the b hm jacopini canonical structures made primitive shapes  sub-structures  nest  rectangles  single exit occurs superstructure  the symbols  use build canonical structures shown diagram    examples       algorithm example    one simplest algorithms find largest number list numbers random order  finding solution requires looking every number list  from follows simple algorithm  stated high-level description english prose  high-level description if numbers set highest number assume first number set largest number set for remaining number set  number larger current largest number  consider number largest number set when numbers left set iterate  consider current largest number largest number set  quasi- formal description written prose much closer high-level language computer program  following formal coding algorithm pseudocode pidgin code     euclid algorithm    in mathematics  euclidean algorithm  euclid algorithm  efficient method computing greatest common divisor  gcd  two integers  numbers   largest number divides without remainder  it named ancient greek mathematician euclid  first described elements  c      bc   it one oldest algorithms common use  it used reduce fractions simplest form  part many number-theoretic cryptographic calculations  euclid poses problem thus   given two numbers prime one another  find greatest common measure   he defines  a number   multitude composed units   counting number  positive integer including zero  to  measure  place shorter measuring length successively  q times  along longer length l remaining portion r less shorter length s  in modern words  remainder r   l   q  q quotient  remainder r  modulus   integer-fractional part left division for euclid method succeed  starting lengths must satisfy two requirements    lengths must zero  and  ii  subtraction must  proper   i e   test must guarantee smaller two numbers subtracted larger  two equal subtraction yields zero  euclid original proof adds third requirement  two lengths must prime one another  euclid stipulated could construct reductio ad absurdum proof two numbers  common measure fact greatest  while nicomachus  algorithm euclid  numbers prime one another  yields number     common measure  so  precise  following really nicomachus  algorithm      computer language euclid algorithm     only instruction types required execute euclid algorithm logical tests  conditional goto   unconditional goto  assignment  replacement   subtraction a location symbolized upper case letter   e g  s  a  etc the varying quantity  number  location written lower case letter   usually  associated location name  for example  location l start might contain number l             an inelegant program euclid algorithm     the following algorithm framed knuth four-step version euclid nicomachus    rather using division find remainder  uses successive subtractions shorter length remaining length r r less s  the high-level description  shown boldface  adapted knuth          input    into two locations l s put numbers l represent two lengths    input l  s   initialize r  make remaining length r equal starting initial input length l    r   le    ensure r   s     ensure smaller two numbers s larger r    if r   s then    contents l larger number skip exchange-steps            goto step    else    swap contents r s     l   r  first step redundant  useful later discussion      r   s    s   le    find remainder   until remaining length r r less shorter length s  repeatedly subtract measuring number s remaining length r r   if s   r then    done measuring    goto     else    measure     r   r   s     remainder-loop      goto   e    is remainder zero    either   last measure exact  remainder r zero  program halt  or  ii  algorithm must continue  last measure left remainder r less measuring number s    if r     then     done     goto step      else     continue to step    e    interchange r   the nut euclid algorithm  use remainder r measure previously smaller number  l serves temporary location     l   r    r   s    s   l     repeat measuring process      goto  output     done  s contains greatest common divisor     print sdone    halt  end  stop      an elegant program euclid algorithm     the following version euclid algorithm requires six core instructions thirteen required  inelegant   worse   inelegant  requires types instructions  the flowchart  elegant  found top article  in  unstructured  basic language  steps numbered  instruction let         assignment instruction symbolized   how  elegant  works  in place outer  euclid loop    elegant  shifts back forth two  co-loops   a   b loop computes a   a   b  b   a loop computes b   b   a  this works  last minuend m less equal subtrahend s  difference   minuend   subtrahend   minuend become  new measuring length  subtrahend become new r  length measured   words  sense  subtraction reverses the following version used programming languages c-family     testing euclid algorithms    does algorithm author wants  a test cases usually give confidence core functionality  but tests enough  for test cases  one source uses           knuth suggested               another interesting case two relatively prime numbers            but  exceptional cases  must identified tested  will  inelegant  perform properly r   s  s   r  r   s  ditto  elegant   b   a  a   b  a   b   yes   what happens one number zero  numbers zero    inelegant  computes forever cases   elegant  computes forever a       what happens negative numbers entered  fractional numbers  if input numbers  i e  domain function computed algorithm program  include positive integers including zero  failures zero indicate algorithm  program instantiates  partial function rather total function  a notable failure due exceptions ariane   flight     rocket failure  june          proof program correctness use mathematical induction  knuth demonstrates application mathematical induction  extended  version euclid algorithm  proposes  general method applicable proving validity algorithm   tausworthe proposes measure complexity program length correctness proof     measuring improving euclid algorithms    elegance  compactness  versus goodness  speed   with six core instructions   elegant  clear winner  compared  inelegant  thirteen instructions  however   inelegant  faster  arrives halt fewer steps   algorithm analysis indicates case   elegant  two conditional tests every subtraction loop  whereas  inelegant  one  as algorithm  usually  requires many loop-throughs  average much time wasted  b       test needed remainder computed can algorithms improved   once programmer judges program  fit   effective   computes function intended author question becomes  improved the compactness  inelegant  improved elimination five steps  but chaitin proved compacting algorithm cannot automated generalized algorithm  rather  done heuristically  i e   exhaustive search  examples found busy beaver   trial error  cleverness  insight  application inductive reasoning  etc  observe steps        repeated steps            comparison  elegant  provides hint steps  together steps      eliminated  this reduces number core instructions thirteen eight  makes  elegant   elegant   nine steps the speed  elegant  improved moving  b     test outside two subtraction loops  this change calls addition three instructions  b       a       goto   now  elegant  computes example-numbers faster  whether always case given a  b  r  s would require detailed analysis    algorithmic analysis   it frequently important know much particular resource  time storage  theoretically required given algorithm  methods developed analysis algorithms obtain quantitative answers  estimates   example  sorting algorithm time requirement o n   using big o notation n length list  at times algorithm needs remember two values  largest number found far  current position input list  therefore  said space requirement o     space required store input numbers counted  o n  counted different algorithms may complete task different set instructions less time  space   effort  others  for example  binary search algorithm  cost o log n    outperforms sequential search  cost o n    used table lookups sorted lists arrays     formal versus empirical    the analysis  study algorithms discipline computer science  often practiced abstractly without use specific programming language implementation  in sense  algorithm analysis resembles mathematical disciplines focuses underlying properties algorithm specifics particular implementation  usually pseudocode used analysis simplest general representation  however  ultimately  algorithms usually implemented particular hardware software platforms algorithmic efficiency eventually put test using real code  for solution  one  problem  efficiency particular algorithm may significant consequences  unless n extremely large  algorithms designed fast interactive  commercial long life scientific usage may critical  scaling small n large n frequently exposes inefficient algorithms otherwise benign empirical testing useful may uncover unexpected interactions affect performance  benchmarks may used compare potential improvements algorithm program optimization empirical tests cannot replace formal analysis  though  trivial perform fair manner     execution efficiency    to illustrate potential improvements possible even well-established algorithms  recent significant innovation  relating fft algorithms  used heavily field image processing   decrease processing time       times applications like medical imaging  in general  speed improvements depend special properties problem  common practical applications  speedups magnitude enable computing devices make extensive use image processing  like digital cameras medical equipment  consume less power    classification   there various ways classify algorithms  merits     by implementation    one way classify algorithms implementation means recursiona recursive algorithm one invokes  makes reference  repeatedly certain condition  also known termination condition  matches  method common functional programming  iterative algorithms use repetitive constructs like loops sometimes additional data structures like stacks solve given problems  some problems naturally suited one implementation other  for example  towers hanoi well understood using recursive implementation  every recursive version equivalent  possibly less complex  iterative version  vice versa logicalan algorithm may viewed controlled logical deduction  this notion may expressed  algorithm   logic   control  the logic component expresses axioms may used computation control component determines way deduction applied axioms  this basis logic programming paradigm  in pure logic programming languages  control component fixed algorithms specified supplying logic component  the appeal approach elegant semantics  change axioms produces well-defined change algorithm serial  parallel distributedalgorithms usually discussed assumption computers execute one instruction algorithm time  those computers sometimes called serial computers  an algorithm designed environment called serial algorithm  opposed parallel algorithms distributed algorithms  parallel algorithms take advantage computer architectures several processors work problem time  whereas distributed algorithms utilize multiple machines connected computer network  parallel distributed algorithms divide problem symmetrical asymmetrical subproblems collect results back together  the resource consumption algorithms processor cycles processor also communication overhead processors  some sorting algorithms parallelized efficiently  communication overhead expensive  iterative algorithms generally parallelizable  some problems parallel algorithms called inherently serial problems deterministic non-deterministicdeterministic algorithms solve problem exact decision every step algorithm whereas non-deterministic algorithms solve problems via guessing although typical guesses made accurate use heuristics exact approximatewhile many algorithms reach exact solution  approximation algorithms seek approximation closer true solution  the approximation reached either using deterministic random strategy  such algorithms practical value many hard problems  one examples approximate algorithm knapsack problem  set given items  its goal pack knapsack get maximum total value  each item weight value  total weight carried fixed number x  so  solution must consider weights items well value quantum algorithmthey run realistic model quantum computation  the term usually used algorithms seem inherently quantum  use essential feature quantum computing quantum superposition quantum entanglement     by design paradigm    another way classifying algorithms design methodology paradigm  there certain number paradigms  different other  furthermore  categories includes many different types algorithms  some common paradigms brute-force exhaustive searchthis naive method trying every possible solution see best divide conquera divide conquer algorithm repeatedly reduces instance problem one smaller instances problem  usually recursively  instances small enough solve easily  one example divide conquer merge sorting  sorting done segment data dividing data segments sorting entire data obtained conquer phase merging segments  a simpler variant divide conquer called decrease conquer algorithm  solves identical subproblem uses solution subproblem solve bigger problem  divide conquer divides problem multiple subproblems conquer stage complex decrease conquer algorithms  an example decrease conquer algorithm binary search algorithm search enumerationmany problems  playing chess  modeled problems graphs  a graph exploration algorithm specifies rules moving around graph useful problems  this category also includes search algorithms  branch bound enumeration backtracking randomized algorithmsuch algorithms make choices randomly  pseudo-randomly   they useful finding approximate solutions problems finding exact solutions impractical  see heuristic method   for problems  known fastest approximations must involve randomness  whether randomized algorithms polynomial time complexity fastest algorithms problems open question known p versus np problem  there two large classes algorithms monte carlo algorithms return correct answer high-probability  e g  rp subclass run polynomial time las vegas algorithms always return correct answer  running time probabilistically bound  e g  zpp reduction complexitythis technique involves solving difficult problem transforming better-known problem  hopefully  asymptotically optimal algorithms  the goal find reducing algorithm whose complexity dominated resulting reduced algorithm s  for example  one selection algorithm finding median unsorted list involves first sorting list  expensive portion  pulling middle element sorted list  cheap portion   this technique also known transform conquer back trackingin approach  multiple solutions built incrementally abandoned determined cannot lead valid full solution     optimization problems    for optimization problems specific classification algorithms  algorithm problems may fall one general categories described well one following linear programmingwhen searching optimal solutions linear function bound linear equality inequality constraints  constraints problem used directly producing optimal solutions  there algorithms solve problem category  popular simplex algorithm  problems solved linear programming include maximum flow problem directed graphs  if problem additionally requires one unknowns must integer classified integer programming  a linear programming algorithm solve problem proved restrictions integer values superficial  i e   solutions satisfy restrictions anyway  in general case  specialized algorithm algorithm finds approximate solutions used  depending difficulty problem dynamic programmingwhen problem shows optimal substructures meaning optimal solution problem constructed optimal solutions subproblems overlapping subproblems  meaning subproblems used solve many different problem instances  quicker approach called dynamic programming avoids recomputing solutions already computed  for example  floyd warshall algorithm  shortest path goal vertex weighted graph found using shortest path goal adjacent vertices  dynamic programming memoization go together  the main difference dynamic programming divide conquer subproblems less independent divide conquer  whereas subproblems overlap dynamic programming  the difference dynamic programming straightforward recursion caching memoization recursive calls  when subproblems independent repetition  memoization help  hence dynamic programming solution complex problems  by using memoization maintaining table subproblems already solved  dynamic programming reduces exponential nature many problems polynomial complexity the greedy methoda greedy algorithm similar dynamic programming algorithm works examining substructures  case problem given solution  such algorithms start solution  may given constructed way  improve making small modifications  for problems find optimal solution others stop local optima   solutions cannot improved algorithm optimum  the popular use greedy algorithms finding minimal spanning tree finding optimal solution possible method  huffman tree  kruskal  prim  sollin greedy algorithms solve optimization problem the heuristic methodin optimization problems  heuristic algorithms used find solution close optimal solution cases finding optimal solution impractical  these algorithms work getting closer closer optimal solution progress  in principle  run infinite amount time  find optimal solution  their merit find solution close optimal solution relatively short time  such algorithms include local search  tabu search  simulated annealing  genetic algorithms  some  like simulated annealing  non-deterministic algorithms others  like tabu search  deterministic  when bound error non-optimal solution known  algorithm categorized approximation algorithm     by field study    every field science problems needs efficient algorithms  related problems one field often studied together  some example classes search algorithms  sorting algorithms  merge algorithms  numerical algorithms  graph algorithms  string algorithms  computational geometric algorithms  combinatorial algorithms  medical algorithms  machine learning  cryptography  data compression algorithms parsing techniques fields tend overlap  algorithm advances one field may improve  sometimes completely unrelated  fields  for example  dynamic programming invented optimization resource consumption industry used solving broad range problems many fields     by complexity    algorithms classified amount time need complete compared input size constant time  time needed algorithm  regardless input size  e g  access array element logarithmic time  time logarithmic function input size  e g  binary search algorithm linear time  time proportional input size  e g  traverse list polynomial time  time power input size  e g  bubble sort algorithm quadratic time complexity exponential time  time exponential function input size  e g  brute-force search some problems may multiple algorithms differing complexity  problems might algorithms known efficient algorithms  there also mappings problems problems  owing  found suitable classify problems instead algorithms equivalence classes based complexity best possible algorithms them    continuous algorithms   the adjective  continuous  applied word  algorithm  mean an algorithm operating data represents continuous quantities  even though data represented discrete approximations algorithms studied numerical analysis  oran algorithm form differential equation operates continuously data  running analog computer    legal issues   algorithms   usually patentable  in united states  claim consisting solely simple manipulations abstract concepts  numbers  signals constitute  processes   uspto        hence algorithms patentable  gottschalk v  benson   however practical applications algorithms sometimes patentable  for example  diamond v  diehr  application simple feedback algorithm aid curing synthetic rubber deemed patentable  the patenting software highly controversial  highly criticized patents involving algorithms  especially data compression algorithms  unisys  lzw patent additionally  cryptographic algorithms export restrictions  see export cryptography     history  development notion  algorithm        ancient near east    the earliest  evidence algorithms found babylonian mathematics ancient mesopotamia  modern iraq   a sumerian clay tablet found shuruppak near baghdad dated circa      bc described earliest division algorithm  during hammurabi dynasty circa     -     bc  babylonian clay tablets described algorithms computing formulas  algorithms also used babylonian astronomy  babylonian clay tablets describe employ algorithmic procedures compute time place significant astronomical events algorithms arithmetic also found ancient egyptian mathematics  dating back rhind mathematical papyrus circa      bc  algorithms later used ancient hellenistic mathematics  two examples sieve eratosthenes  described introduction arithmetic nicomachus   ch      euclidean algorithm  first described euclid elements  c      bc    ch         discrete distinguishable symbols    tally-marks  to keep track flocks  sacks grain money ancients used tallying  accumulating stones marks scratched sticks making discrete symbols clay  through babylonian egyptian use marks symbols  eventually roman numerals abacus evolved  dilson  p          tally marks appear prominently unary numeral system arithmetic used turing machine post turing machine computations     manipulation symbols  place holders  numbers  algebra    muhammad ibn m  al-khw rizm   persian mathematician  wrote al-jabr  th century  the terms  algorism   algorithm  derived name al-khw rizm   term  algebra  derived book al-jabr  in europe  word  algorithm  originally used refer sets rules techniques used al-khwarizmi solve algebraic equations  later generalized refer set rules techniques  this eventually culminated leibniz notion calculus ratiocinator  ca       a good century half ahead time  leibniz proposed algebra logic  algebra would specify rules manipulating logical concepts manner ordinary algebra specifies rules manipulating numbers     cryptographic algorithms    the first cryptographic algorithm deciphering encrypted code developed al-kindi   th-century arab mathematician  a manuscript on deciphering cryptographic messages  he gave first description cryptanalysis frequency analysis  earliest codebreaking algorithm     mechanical contrivances discrete states    the clock  bolter credits invention weight-driven clock  the key invention  europe middle ages    particular  verge escapement provides us tick tock mechanical clock   the accurate automatic machine  led immediately  mechanical automata  beginning   th century finally  computational machines  difference engine analytical engines charles babbage countess ada lovelace  mid-  th century  lovelace credited first creation algorithm intended processing computer babbage analytical engine  first device considered real turing-complete computer instead calculator sometimes called  history first programmer  result  though full implementation babbage second device would realized decades lifetime logical machines        stanley jevons   logical abacus   logical machine   the technical problem reduce boolean equations presented form similar known karnaugh maps  jevons        describes first simple  abacus   slips wood furnished pins  contrived part class  logical  combinations picked mechanically     more recently  however  i reduced system completely mechanical form  thus embodied whole indirect process inference may called logical machine  his machine came equipped  certain moveable wooden rods   foot    keys like piano  etc        with machine could analyze  syllogism simple logical argument  this machine displayed      fellows royal society  another logician john venn  however       symbolic logic  turned jaundiced eye effort   i high estimate interest importance sometimes called logical machines     seem contrivances present known likely discovered really deserve name logical machines   see algorithm characterizations  but outdone presented  plan somewhat analogous  i apprehend  prof  jevon abacus      and   gain  corresponding prof  jevons logical machine  following contrivance may described  i prefer call merely logical-diagram machine     i suppose could completely rationally expected logical machine  jacquard loom  hollerith punch cards  telegraphy telephony   electromechanical relay  bell newell        indicate jacquard loom         precursor hollerith cards  punch cards          telephone switching technologies  roots tree leading development first computers  by mid-  th century telegraph  precursor telephone  use throughout world  discrete distinguishable encoding letters  dots dashes  common sound  by late   th century ticker tape  ca      use  use hollerith cards      u s  census  then came teleprinter  ca        punched-paper use baudot code tape telephone-switching networks electromechanical relays  invented       behind work george stibitz         inventor digital adding device  as worked bell laboratories  observed  burdensome  use mechanical calculators gears   he went home one evening      intending test idea    when tinkering  stibitz constructed binary adding device  davis        observes particular importance electromechanical relay  two  binary states  open closed  it development  beginning      electromechanical calculators using electrical relays  machines built scope babbage envisioned      mathematics   th century mid-  th century    symbols rules  in rapid succession  mathematics george boole               gottlob frege         giuseppe peano             reduced arithmetic sequence symbols manipulated rules  peano the principles arithmetic  presented new method         first attempt axiomatization mathematics symbolic language  but heijenoort gives frege        kudos  frege  perhaps important single work ever written logic      see    formula language   lingua characterica  language written special symbols   pure thought    free rhetorical embellishments     constructed specific symbols manipulated according definite rules   the work frege simplified amplified alfred north whitehead bertrand russell principia mathematica             the paradoxes  at time number disturbing paradoxes appeared literature  particular  burali-forti paradox         russell paradox            richard paradox  the resultant considerations led kurt g del paper        specifically cites paradox liar completely reduces rules recursion numbers effective calculability  in effort solve entscheidungsproblem defined precisely hilbert       mathematicians first set define meant  effective method   effective calculation   effective calculability   i e   calculation would succeed   in rapid succession following appeared  alonzo church  stephen kleene j b  rosser  -calculus finely honed definition  general recursion  work g del acting suggestions jacques herbrand  cf  g del princeton lectures       subsequent simplifications kleene  church proof entscheidungsproblem unsolvable  emil post definition effective calculability worker mindlessly following list instructions move left right sequence rooms either mark erase paper observe paper make yes-no decision next instruction  alan turing proof entscheidungsproblem unsolvable use  a-  automatic-  machine  effect almost identical post  formulation   j  barkley rosser definition  effective method  terms  machine   kleene proposal precursor  church thesis  called  thesis i   years later kleene renaming thesis  church thesis  proposing  turing thesis      emil post        alan turing                    emil post        described actions  computer   human  follows     two concepts involved  symbol space work leading problem answer carried  fixed unalterable set directions his symbol space would two-way infinite sequence spaces boxes    the problem solver worker move work symbol space  capable  operating one box time     box admit two possible conditions  i e   empty unmarked  single mark  say vertical stroke  one box singled called starting point     a specific problem given symbolic form finite number boxes  i e   input  marked stroke  likewise  answer  i e   output  given symbolic form configuration marked boxes    a set directions applicable general problem sets deterministic process applied specific problem  this process terminates comes direction type  c    i e   stop    see post turing machinealan turing work preceded stibitz         unknown whether stibitz knew work turing  turing biographer believed turing use typewriter-like model derived youthful interest   alan dreamt inventing typewriters boy  mrs  turing typewriter  could well begun asking meant calling typewriter  mechanical    given prevalence morse code telegraphy  ticker tape machines  teletypewriters might conjecture influences turing model computation called turing machine begins  post  analysis human computer whittles simple set basic motions  states mind   but continues step creates machine model computation numbers  computing normally done writing certain symbols paper  we may suppose paper divided squares like child arithmetic book   i assume computation carried one-dimensional paper  i e   tape divided squares  i shall also suppose number symbols may printed finite    the behavior computer moment determined symbols observing   state mind  moment  we may suppose bound b number symbols squares computer observe one moment  if wishes observe  must use successive observations  we also suppose number states mind need taken account finite    let us imagine operations performed computer split  simple operations  elementary easy imagine divided  turing reduction yields following  the simple operations must therefore include    changes symbol one observed squares  b  changes one squares observed another square within l squares one previously observed squares  it may change necessarily invoke change state mind  the general single operation must  therefore  taken one following   a  a possible change   symbol together possible change state mind   b  a possible change  b  observed squares  together possible change state mind  we may construct machine work computer  a years later  turing expanded analysis  thesis  definition  forceful expression  a function said  effectively calculable  values found purely mechanical process  though fairly easy get intuitive grasp idea  nevertheless desirable definite  mathematical expressible definition      discusses history definition pretty much presented respect g del  herbrand  kleene  church  turing  post      we may take statement literally  understanding purely mechanical process one could carried machine  it possible give mathematical description  certain normal form  structures machines  the development ideas leads author definition computable function  identification computability   effective calculability         we shall use expression  computable function  mean function calculable machine  let  effectively calculable  refer intuitive idea without particular identification one definitions      j b  rosser        s c  kleene           j  barkley rosser defined  effective  mathematical  method  following manner  italicization added    effective method  used rather special sense method step precisely determined certain produce answer finite number steps  with special meaning  three different precise definitions given date   footnote     see discussion immediately   the simplest state  due post turing  says essentially effective method solving certain sets problems exists one build machine solve problem set human intervention beyond inserting question  later  reading answer  all three definitions equivalent  matter one used  moreover  fact three equivalent strong argument correctness one    rosser              rosser footnote no    references work     church kleene definition  -definability  particular church use an unsolvable problem elementary number theory             herbrand g del use recursion particular g del use famous paper on formally undecidable propositions principia mathematica related systems i             post        turing           mechanism-models computation stephen c  kleene defined now-famous  thesis i  known church turing thesis  but following context  boldface original       algorithmic theories    in setting complete algorithmic theory  describe procedure  performable set values independent variables  procedure necessarily terminates manner outcome read definite answer   yes     question   predicate value true     kleene              history         a number efforts directed toward refinement definition  algorithm   activity on-going issues surrounding  particular  foundations mathematics  especially church turing thesis  philosophy mind  especially arguments artificial intelligence   for  see algorithm characterizations    see also      notes      bibliography      further reading      external links    algorithm   encyclopedia mathematics  ems press             algorithms curlieweisstein  eric w   algorithm   mathworld dictionary algorithms data structures   national institute standards technologyalgorithm repositoriesthe stony brook algorithm repository   state university new york stony brookcollected algorithms acm   association computing machinerythe stanford graphbase   stanford university
computer programming process designing building executable computer program accomplish specific computing result perform specific task  programming involves tasks  analysis  generating algorithms  profiling algorithms  accuracy resource consumption  implementation algorithms chosen programming language  commonly referred coding   the source code program written one languages intelligible programmers  rather machine code  directly executed central processing unit  the purpose programming find sequence instructions automate performance task  complex operating system  computer  often solving given problem  proficient programming thus often requires expertise several different subjects  including knowledge application domain  specialized algorithms  formal logic tasks accompanying related programming include  testing  debugging  source code maintenance  implementation build systems  management derived artifacts  machine code computer programs  these might considered part programming process  often term software development used larger process term programming  implementation  coding reserved actual writing code  software engineering combines engineering techniques software development practices  reverse engineering related process used designers  analysts programmers understand re-create re-implement    history   programmable devices existed centuries  as early  th century  programmable music sequencer invented persian banu musa brothers  described automated mechanical flute player book ingenious devices  in       arab engineer al-jazari invented programmable drum machine musical mechanical automaton could made play different rhythms drum patterns  via pegs cams  in       jacquard loom could produce entirely different weaves changing  program    series pasteboard cards holes punched them code-breaking algorithms also existed centuries  in  th century  arab mathematician al-kindi described cryptographic algorithm deciphering encrypted code  a manuscript deciphering cryptographic messages  he gave first description cryptanalysis frequency analysis  earliest code-breaking algorithm the first computer program generally dated       mathematician ada lovelace published algorithm calculate sequence bernoulli numbers  intended carried charles babbage analytical engine in     herman hollerith invented concept storing data machine-readable form  later control panel  plug board  added      type i tabulator allowed programmed different jobs  late      unit record equipment ibm     ibm      programmed control panels similar way  first electronic computers  however  concept stored-program computer introduced       programs data stored manipulated way computer memory     machine language    machine code language early programs  written instruction set particular machine  often binary notation  assembly languages soon developed let programmer specify instruction text format   e g   add x  total   abbreviations operation code meaningful names specifying addresses  however  assembly language little different notation machine language  two machines different instruction sets also different assembly languages     compiler languages    high-level languages made process developing program simpler understandable  less bound underlying hardware  the first compiler related tool  a-  system  developed      grace hopper  also coined term  compiler   fortran  first widely used high-level language functional implementation  came       many languages soon developed particular  cobol aimed commercial data processing  lisp computer research these compiled languages allow programmer write programs terms syntactically richer  capable abstracting code  making easy target varying machine instruction sets via compilation declarations heuristics  compilers harnessed power computers make programming easier allowing programmers specify calculations entering formula using infix notation     source code entry    programs mostly still entered using punched cards paper tape  by late      data storage devices computer terminals became inexpensive enough programs could created typing directly computers  text editors also developed allowed changes corrections made much easily punched cards     modern programming       quality requirements    whatever approach development may  final program must satisfy fundamental properties  the following properties among important reliability  often results program correct  this depends conceptual correctness algorithms minimization programming mistakes  mistakes resource management  e g   buffer overflows race conditions  logic errors  division zero off-by-one errors  robustness  well program anticipates problems due errors  bugs   this includes situations incorrect  inappropriate corrupt data  unavailability needed resources memory  operating system services  network connections  user error  unexpected power outages usability  ergonomics program  ease person use program intended purpose cases even unanticipated purposes  such issues make break success even regardless issues  this involves wide range textual  graphical  sometimes hardware elements improve clarity  intuitiveness  cohesiveness completeness program user interface portability  range computer hardware operating system platforms source code program compiled interpreted run  this depends differences programming facilities provided different platforms  including hardware operating system resources  expected behavior hardware operating system  availability platform-specific compilers  sometimes libraries  language source code maintainability  ease program modified present future developers order make improvements customize  fix bugs security holes  adapt new environments  good practices initial development make difference regard  this quality may directly apparent end user significantly affect fate program long term efficiency performance  measure system resources program consumes  processor time  memory space  slow devices disks  network bandwidth extent even user interaction   less  better  this also includes careful management resources  example cleaning temporary files eliminating memory leaks  this often discussed shadow chosen programming language  although language certainly affects performance  even slower languages  python  execute programs instantly human perspective  speed  resource usage  performance important programs bottleneck system  efficient use programmer time also important related cost  hardware may cheaper     readability source code    in computer programming  readability refers ease human reader comprehend purpose  control flow  operation source code  it affects aspects quality  including portability  usability importantly maintainability readability important programmers spend majority time reading  trying understand modifying existing source code  rather writing new source code  unreadable code often leads bugs  inefficiencies  duplicated code  a study found simple readability transformations made code shorter drastically reduced time understand it following consistent programming style often helps readability  however  readability programming style  many factors  little nothing ability computer efficiently compile execute code  contribute readability  some factors include different indent styles  whitespace commentsdecompositionnaming conventions objects  variables  classes  functions  procedures  etc  the presentation aspects  indents  line breaks  color highlighting   often handled source code editor  content aspects reflect programmer talent skills various visual programming languages also developed intent resolve readability concerns adopting non-traditional approaches code structure display  integrated development environments  i d es  aim integrate help  techniques like code refactoring enhance readability     algorithmic complexity    the academic field engineering practice computer programming largely concerned discovering implementing efficient algorithms given class problems  for purpose  algorithms classified orders using so-called big o notation  expresses resource use  execution time memory consumption  terms size input  expert programmers familiar variety well-established algorithms respective complexities use knowledge choose algorithms best suited circumstances      chess algorithms example      programming computer playing chess       paper evaluated  minimax  algorithm part history algorithmic complexity  course ibm deep blue  chess computer  part computer science curriculum stanford university     methodologies    the first step formal software development processes requirements analysis  followed testing determine value modeling  implementation  failure elimination  debugging   there exist lot different approaches tasks  one approach popular requirements analysis use case analysis  many programmers use forms agile software development various stages formal software development integrated together short cycles take weeks rather years  there many approaches software development process popular modeling techniques include object-oriented analysis design  ooad  model-driven architecture  mda   the unified modeling language  uml  notation used ooad mda a similar technique used database design entity-relationship modeling  er modeling  implementation techniques include imperative languages  object-oriented procedural   functional languages  logic languages     measuring language usage    it difficult determine popular modern programming languages  methods measuring programming language popularity include  counting number job advertisements mention language  number books sold courses teaching language  overestimates importance newer languages   estimates number existing lines code written language  underestimates number users business languages cobol  some languages popular particular kinds applications  languages regularly used write many different kinds applications  for example  cobol still strong corporate data centers often large mainframe computers  fortran engineering applications  scripting languages web development  c embedded software  many applications use mix several languages construction use   new languages generally designed around syntax prior language new functionality added   example c   adds object-orientation c  java adds memory management bytecode c    result  loses efficiency ability low-level manipulation      debugging    debugging important task software development process since defects program significant consequences users  some languages prone kinds faults specification require compilers perform much checking languages  use static code analysis tool help detect possible problems  normally first step debugging attempt reproduce problem  this non-trivial task  example parallel processes unusual software bugs  also  specific user environment usage history make difficult reproduce problem after bug reproduced  input program may need simplified make easier debug  for example  bug compiler make crash parsing large source file  simplification test case results lines original source file sufficient reproduce crash  trial-and-error divide-and-conquer needed  programmer try remove parts original test case check problem still exists  when debugging problem gui  programmer try skip user interaction original problem description check remaining actions sufficient bugs appear  scripting breakpointing also part process debugging often done ides  standalone debuggers like gdb also used  often provide less visual environment  usually using command line  some text editors emacs allow gdb invoked  provide visual environment    programming languages   different programming languages support different styles programming  called programming paradigms   the choice language used subject many considerations  company policy  suitability task  availability third-party packages  individual preference  ideally  programming language best suited task hand selected  trade-offs ideal involve finding enough programmers know language build team  availability compilers language  efficiency programs written given language execute  languages form approximate spectrum  low-level   high-level    low-level  languages typically machine-oriented faster execute  whereas  high-level  languages abstract easier use execute less quickly  it usually easier code  high-level  languages  low-level  ones allen downey  book how to think like a computer scientist  writes the details look different different languages  basic instructions appear every language input  gather data keyboard  file  device output  display data screen send data file device arithmetic  perform basic arithmetical operations like addition multiplication conditional execution  check certain conditions execute appropriate sequence statements repetition  perform action repeatedly  usually variation many computer languages provide mechanism call functions provided shared libraries  provided functions library follow appropriate run-time conventions  e g   method passing arguments   functions may written language    programmers   computer programmers write computer software  their jobs usually involve although programming presented media somewhat mathematical subject  research shows good programmers strong skills natural human languages  learning code similar learning foreign language    see also      references       sources    ceruzzi  paul e          history computing  cambridge  massachusetts  mit press  isbn                 via ebscohost evans  claire l          broad band  the untold story women who made internet  new york  portfolio penguin  isbn               g rer  denise          pioneering women computer science   pdf   communications acm                 doi                        s cid         smith  erika e           recognizing collective inheritance history women computing   clcweb  comparative literature   culture  a wwweb journal                via ebscohost    further reading   a k  hartmann  practical guide computer simulations  singapore  world scientific       a  hunt  d  thomas  w  cunningham  the pragmatic programmer  from journeyman master  amsterdam  addison-wesley longman       brian w  kernighan  the practice programming  pearson       weinberg  gerald m   the psychology computer programming  new york  van nostrand reinhold       edsger w  dijkstra  a discipline programming  prentice-hall       o -j  dahl  e w dijkstra  c a r  hoare  structured programming  academic press       david gries  the science programming  springer-verlag          external links    media related computer programming wikimedia commons quotations related programming wikiquotesoftware engineering curlie
human computer interaction  hci  research design use computer technology  focuses interfaces people  users  computers  hci researchers observe ways humans interact computers design technologies allow humans interact computers novel ways as field research  human-computer interaction situated intersection computer science  behavioral sciences  design  media studies  several fields study  the term popularized stuart k  card  allen newell  thomas p  moran      book  the psychology human-computer interaction  although authors first used term       first known use       the term intended convey  unlike tools specific limited uses  computers many uses often involve open-ended dialogue user computer  the notion dialogue likens human-computer interaction human-to-human interaction  analogy crucial theoretical considerations field    introduction   humans interact computers many ways  interface two crucial facilitating interaction  hci also sometimes termed human machine interaction  hmi   man-machine interaction  mmi  computer-human interaction  chi   desktop applications  internet browsers  handheld computers  computer kiosks make use prevalent graphical user interfaces  gui  today  voice user interfaces  vui  used speech recognition synthesizing systems  emerging multi-modal graphical user interfaces  gui  allow humans engage embodied character agents way cannot achieved interface paradigms  the growth human computer interaction field led increase quality interaction  resulted many new areas research beyond  instead designing regular interfaces  different research branches focus concepts multimodality unimodality  intelligent adaptive interfaces command action based ones  active interfaces passive interfaces the association computing machinery  acm  defines human-computer interaction  discipline concerned design  evaluation  implementation interactive computing systems human use study major phenomena surrounding   an important facet hci user satisfaction  end-user computing satisfaction   it goes say  because human-computer interaction studies human machine communication  draws supporting knowledge machine human side  on machine side  techniques computer graphics  operating systems  programming languages  development environments relevant  on human side  communication theory  graphic industrial design disciplines  linguistics  social sciences  cognitive psychology  social psychology  human factors computer user satisfaction relevant  and  course  engineering design methods relevant  due multidisciplinary nature hci  people different backgrounds contribute success poorly designed human-machine interfaces lead many unexpected problems  a classic example three mile island accident  nuclear meltdown accident  investigations concluded design human-machine interface least partly responsible disaster  similarly  accidents aviation resulted manufacturers  decisions use non-standard flight instruments throttle quadrant layouts  even though new designs proposed superior basic human-machine interaction  pilots already ingrained  standard  layout  thus  conceptually good idea unintended results    human computer interface   the human-computer interface described point communication human user computer  the flow information human computer defined loop interaction  the loop interaction several aspects  including visual based  the visual-based human-computer interaction probably widespread human-computer interaction  hci  research area audio based  the audio-based interaction computer human another important area hci systems  this area deals information acquired different audio signals task environment  the conditions goals set upon user machine environment  the computer environment connected  e g   laptop college student dorm room areas interface  non-overlapping areas involve processes human computer  interaction  meanwhile  overlapping areas concern processes interaction input flow  the flow information begins task environment user task requiring using computer output  the flow information originates machine environment feedback  loops interface evaluate  moderate  confirm processes pass human interface computer back fit  this matches computer design  user  task optimize human resources needed accomplish task    goals computers   human computer interaction studies ways humans make make use computational artifacts  systems  infrastructures  much research field seeks improve human computer interaction improving usability computer interfaces  how usability precisely understood  relates social cultural values   may desirable property computer interfaces increasingly debated much research field human-computer interaction takes interest methods designing new computer interfaces  thereby optimizing design desired property learnability  findability  efficiency use methods implementing interfaces  e g   means software libraries methods evaluating comparing interfaces respect usability desirable properties methods studying human-computer use sociocultural implications broadly methods determining whether user human computer models theories human-computer use well conceptual frameworks design computer interfaces  cognitivist user models  activity theory  ethnomethodological accounts human-computer use perspectives critically reflect upon values underlie computational design  computer use  hci research practice visions researchers field seek achieve might vary  when pursuing cognitivist perspective  researchers hci may seek align computer interfaces mental model humans activities  when pursuing post-cognitivist perspective  researchers hci may seek align computer interfaces existing social practices existing sociocultural values researchers hci interested developing design methodologies  experimenting devices  prototyping software hardware systems  exploring interaction paradigms  developing models theories interaction    design       principles    the following experimental design principles considered  evaluating current user interface  designing new user interface early focus placed user  task   how many users needed perform task  established appropriate users determined  someone never used interface  use interface future  likely valid user   in addition  task  users performing often task  need performed defined empirical measurement  interface tested real users come contact interface daily  the results vary performance level user typical human-computer interaction may always represented  quantitative usability specifics  number users performing task   time complete task   number errors made task  determined iterative design  after determining users  tasks  empirical measurements include  following iterative design steps performed design user interfacetestanalyze resultsrepeatthe iterative design process repeated sensible  user-friendly interface created     methodologies    various strategies delineating methods human pc interaction design developed since conception field     s  most plan philosophies come model clients  originators  specialized frameworks interface  early techniques treated clients  psychological procedures unsurprising quantifiable urged plan specialists look subjective science establish zones   example  memory consideration  structuring uis  present-day models  general  center around steady input discussion clients  creators  specialists push specialized frameworks folded sorts encounters clients need  opposed wrapping user experience around finished framework activity theory  utilized hci characterize consider setting human cooperations pcs occur  action hypothesis gives structure reasoning activities specific circumstances illuminates design interactions action-driven perspective user-centered design  ucd   cutting-edge  broadly-rehearsed plan theory established possibility clients must become overwhelming focus plan pc framework  clients  architects  specialized experts cooperate determine requirements restrictions client make framework support components  frequently  client-focused plans informed ethnographic investigations situations clients associate framework  this training like participatory design  underscores likelihood end-clients contribute effectively shared plan sessions workshops principles ui design  standards may considered design client interface  resistance  effortlessness  permeability  affordance  consistency  structure  feedback value sensitive design  vsd   technique building innovation accounts individuals utilize design straightforwardly  well design influences  either directly indirectly  vsd utilizes iterative plan process includes three kinds examinations  theoretical  exact  specialized  applied examinations target understanding articulation different parts design  qualities clashes may emerge users design  exact examinations subjective quantitative plans explore things used advise creators  understanding regarding clients  qualities  needs  practices  specialized examinations include either investigation individuals use related advances framework plans    display designs   displays human-made artifacts designed support perception relevant system variables facilitate processing information  before display designed  task display intended support must defined  e g   navigating  controlling  decision making  learning  entertaining  etc    a user operator must able process whatever information system generates displays  therefore  information must displayed according principles support perception  situation awareness  understanding     thirteen principles display design    christopher wickens et al  defined    principles display design book an introduction human factors engineering these principles human perception information processing utilized create effective display design  a reduction errors  reduction required training time  increase efficiency  increase user satisfaction many potential benefits achieved utilizing principles certain principles may apply different displays situations  some principles may also appear conflicting  simple solution say one principle important another  the principles may tailored specific design situation  striking functional balance among principles critical effective design      perceptual principles        make displays legible  audible   a display legibility critical necessary designing usable display  if characters objects displayed cannot discernible  operator cannot effectively use them    avoid absolute judgment limits  do ask user determine level variable based single sensory variable  e g   color  size  loudness   these sensory variables contain many possible levels    top-down processing  signals likely perceived interpreted expected based user experience  if signal presented contrary user expectation  physical evidence signal may need presented assure understood correctly    redundancy gain  if signal presented  likely understood correctly  this done presenting signal alternative physical forms  e g   color shape  voice print  etc    redundancy imply repetition  a traffic light good example redundancy  color position redundant    similarity causes confusion  use distinguishable elements  signals appear similar likely confused  the ratio similar features different features causes signals similar  for example  a   b  similar a   b         unnecessarily similar features removed  dissimilar features highlighted      mental model principles        principle pictorial realism  a display look like variable represents  e g   high temperature thermometer shown higher vertical level   if multiple elements  configured manner looks like would represented environment    principle moving part  moving elements move pattern direction compatible user mental model actually moves system  for example  moving element altimeter move upward increasing altitude      principles based attention        minimizing information access cost interaction cost  when user attention diverted one location another access necessary information  associated cost time effort  a display design minimize cost allowing frequently accessed sources located nearest possible position  however  adequate legibility sacrificed reduce cost    proximity compatibility principle  divided attention two information sources may necessary completion one task  these sources must mentally integrated defined close mental proximity  information access costs low  achieved many ways  e g   proximity  linkage common colors  patterns  shapes  etc    however  close display proximity harmful causing much clutter     principle multiple resources  a user easily process information across different resources  for example  visual auditory information presented simultaneously rather presenting visual auditory information      memory principles         replace memory visual information  knowledge world  a user need retain important information solely working memory retrieve long-term memory  a menu  checklist  another display aid user easing use memory  however  memory use may sometimes benefit user eliminating need reference knowledge globally  e g   expert computer operator would rather use direct commands memory refer manual   the use knowledge user head knowledge world must balanced effective design     principle predictive aiding  proactive actions usually effective reactive actions  a display eliminate resource-demanding cognitive tasks replace simpler perceptual tasks reduce user mental resources  this allow user focus current conditions consider possible future conditions  an example predictive aid road sign displaying distance certain destination     principle consistency  old habits displays easily transfer support processing new displays designed consistently  a user long-term memory trigger actions expected appropriate  a design must accept fact utilize consistency among different displays    current research   topics human-computer interaction include following     social computing    social computing interactive collaborative behavior considered technology people  in recent years  explosion social science research focusing interactions unit analysis  lot social computing technologies include blogs  emails   social networking  quick messaging  various others  much research draws psychology  social psychology  sociology  for example  one study found people expected computer man name cost machine woman name  other research finds individuals perceive interactions computers negatively humans  despite behaving way towards machines     knowledge-driven human computer interaction    in human computer interactions  semantic gap usually exists human computer understandings towards mutual behaviors  ontology  formal representation domain-specific knowledge  used address problem solving semantic ambiguities two parties     emotions human-computer interaction    in interaction humans computers  research studied computers detect  process  react human emotions develop emotionally intelligent information systems  researchers suggested several  affect-detection channels   the potential telling human emotions automated digital fashion lies improvements effectiveness human-computer interaction  the influence emotions human-computer interaction studied fields financial decision-making using ecg organizational knowledge sharing using eye-tracking face readers affect-detection channels  in fields  shown affect-detection channels potential detect human emotions information systems incorporate data obtained affect-detection channels improve decision models     brain computer interfaces    a brain-computer interface  bci   direct communication pathway enhanced wired brain external device  bci differs neuromodulation allows bidirectional information flow  bcis often directed researching  mapping  assisting  augmenting  repairing human cognitive sensory-motor functions    factors change   traditionally  computer use modeled human-computer dyad two connected narrow explicit communication channel  text-based terminals  much work done make interaction computing system human reflective multidimensional nature everyday communication  because potential issues  human-computer interaction shifted focus beyond interface respond observations articulated d  engelbart   if ease use valid criterion  people would stick tricycles never try bicycles  how humans interact computers continues evolve rapidly  human computer interaction affected developments computing  these forces include decreasing hardware costs leading larger memory faster systemsminiaturization hardware leading portabilityreduction power requirements leading portabilitynew display technologies leading packaging computational devices new formsspecialized hardware leading new functionsincreased development network communication distributed computingincreasingly widespread use computers  especially people outside computing professionincreasing innovation input techniques  e g   voice  gesture  pen   combined lowering cost  leading rapid computerization people formerly left computer revolution wider social concerns leading improved access computers currently disadvantaged groupsas      future hci expected include following characteristics ubiquitous computing communication  computers expected communicate high-speed local networks  nationally wide-area networks  portably via infrared  ultrasonic  cellular  technologies  data computational services portably accessible many locations user travels high-functionality systems  systems large numbers functions associated them  there many systems users  technical non-technical  time learn traditionally  e g   thick user manuals  the mass availability computer graphics  computer graphics capabilities image processing  graphics transformations  rendering  interactive animation become widespread inexpensive chips become available inclusion general workstations mobile devices mixed media  commercial systems handle images  voice  sounds  video  text  formatted data  these exchangeable communication links among users  the separate consumer electronics fields  e g   stereo sets  dvd players  televisions  computers beginning merge  computer print fields expected cross-assimilate high-bandwidth interaction  the rate humans machines interact expected increase substantially due changes speed  computer graphics  new media  new input output devices  this lead qualitatively different interfaces  virtual reality computational video large thin displays  new display technologies maturing  enabling huge displays displays thin  lightweight  low power use  this large effects portability likely enable developing paper-like  pen-based computer interaction systems different feel present desktop workstations information utilities  public information utilities  home banking shopping  specialized industry services  e g   weather pilots  expected proliferate  the proliferation rate accelerate introduction high-bandwidth interaction improvement quality interfaces    scientific conferences   one main conferences new research human-computer interaction annually held association computing machinery  acm  conference human factors computing systems  usually referred short name chi  pronounced kai  khai   chi organized acm special interest group computer-human interaction  sigchi   chi large conference  thousands attendants  quite broad scope  it attended academics  practitioners  industry people  company sponsors google  microsoft  paypal there also dozens smaller  regional  specialized hci-related conferences held around world year  including    see also    human computer interaction portaloutline human computer interactioninformation designinformation architectureuser experience designmindfulness technologycaptchaturing testhci bibliography  web-based project provide bibliography human computer interaction literature   footnotes      further reading   academic overviews fieldjulie a  jacko  ed            human-computer interaction handbook   rd edition   crc press  isbn  -    -    - andrew sears julie a  jacko  eds            human-computer interaction handbook   nd edition   crc press  isbn  -    -    - julie a  jacko andrew sears  eds            human-computer interaction handbook  mahwah  lawrence erlbaum   associates  isbn  -    -    - historically important classicstuart k  card  thomas p  moran  allen newell         the psychology human computer interaction  erlbaum  hillsdale      isbn  -     -   - overviews history fieldjonathan grudin  a moving target  the evolution human-computer interaction  in andrew sears julie a  jacko  eds            human-computer interaction handbook   nd edition   crc press  isbn  -    -    - myers  brad          a brief history human computer interaction technology   interactions                citeseerx                 doi                        s cid         john m  carroll  human-computer interaction  history status  encyclopedia entry interaction-design orgcarroll  john m           conceptualizing possible discipline human computer interaction   interacting computers                doi         j intcom             sara candeias  s  a  veiga the dialogue man machine  role language theory technology  sandra m  alu sio   stella e  o  tagnin  new language technologies  linguistic research  a two-way road  cap      cambridge scholars publishing   isbn    - -    -    -  social science hcinass  clifford  fogg  b  j   moon  youngme          can computers teammates    international journal human-computer studies                   doi         ijhc           nass  clifford  moon  youngme          machines mindlessness  social responses computers   journal social issues                  doi             -            s cid          posard  marek n          status processes human computer interactions  does gender matter    computers human behavior               doi         j chb             posard  marek n   rinderknecht  r  gordon          do people like working computers human beings    computers human behavior               doi         j chb             academic journalsacm transactions computer-human interactionbehaviour   information technology    interacting computersinternational journal human computer interactioninternational journal human computer studieshuman computer interaction        collection papersronald m  baecker  jonathan grudin  william a  s  buxton  saul greenberg  eds           readings human-computer interaction  toward year          ed  morgan kaufmann  san francisco      isbn  -     -   - mithun ahamed  developing message interface architecture android operating systems             treatments one authors  often aimed general audiencejakob nielsen  usability engineering  academic press  boston      isbn  -  -      - donald a  norman  the psychology everyday things  basic books  new york      isbn  -   -     - jef raskin  the humane interface  new directions designing interactive systems  addison-wesley  boston      isbn  -   -     - bruce tognazzini  tog interface  addison-wesley  reading      isbn  -   -     - textbooksalan dix  janet finlay  gregory abowd  russell beale         human computer interaction   rd edition  prentice hall        http   hcibook com e   isbn  -  -      - yvonne rogers  helen sharp   jenny preece  interaction design  beyond human-computer interaction   rd ed  john wiley   sons ltd        isbn  -   -     - helen sharp  yvonne rogers   jenny preece  interaction design  beyond human-computer interaction   nd ed  john wiley   sons ltd        isbn  -   -     - matt jones  interaction designer  gary marsden         mobile interaction design  john wiley sons ltd    external links   bad human factors designsthe hci wiki bibliography         publications the hci bibliography over         publications hci human-centered computing education digital libraryhci webliography
reverse engineering  also known backwards engineering back engineering  process method application one attempts understand deductive reasoning device  process  system  piece software accomplishes task little   insight exactly so reverse engineering applicable fields computer engineering  mechanical engineering  design  electronic engineering  software engineering  chemical engineering  systems biology    overview   there many reasons performing reverse engineering various fields  reverse engineering origins analysis hardware commercial military advantage       however  reverse engineering process   concerned creating copy changing artifact way  it analysis deduce design features products little additional knowledge procedures involved original production      in cases  goal reverse engineering process simply redocumentation legacy systems       even reverse-engineered product competitor  goal may copy perform competitor analysis  reverse engineering may also used create interoperable products despite narrowly-tailored united states european union legislation  legality using specific reverse engineering techniques purpose hotly contested courts worldwide two decades software reverse engineering help improve understanding underlying source code maintenance improvement software  relevant information extracted make decision software development graphical representations code provide alternate views regarding source code  help detect fix software bug vulnerability  frequently  software develops  design information improvements often lost time  lost information usually recovered reverse engineering  the process also help cut time required understand source code  thus reducing overall cost software development  reverse engineering also help detect eliminate malicious code written software better code detectors  reversing source code used find alternate uses source code  detecting unauthorized replication source code intended used  revealing competitor product built  that process commonly used  cracking  software media remove copy protection      create possibly-improved copy even knockoff  usually goal competitor hacker     malware developers often use reverse engineering techniques find vulnerabilities operating system build computer virus exploit system vulnerabilities      reverse engineering also used cryptanalysis find vulnerabilities substitution cipher  symmetric-key algorithm public-key cryptography     there uses reverse engineering interfacing  reverse engineering used system required interface another system systems would negotiate established  such requirements typically exist interoperability military commercial espionage  learning enemy competitor latest research stealing capturing prototype dismantling may result development similar product better countermeasure it obsolescence  integrated circuits often designed proprietary systems built production lines  become obsolete years  when systems using parts longer maintained since parts longer made  way incorporate functionality new technology reverse-engineer existing chip redesign using newer tools using understanding gained guide  another obsolescence originated problem solved reverse engineering need support  maintenance supply continuous operation  existing legacy devices longer supported original equipment manufacturer  the problem particularly critical military operations product security analysis  that examines product works determining specifications components estimate costs identifies potential patent infringement  also part product security analysis acquiring sensitive data disassembling analyzing design system component  another intent may remove copy protection circumvent access restrictions competitive technical intelligence  that understand one competitor actually  rather says doing saving money  finding piece electronics may spare user purchasing separate product repurposing  obsolete objects reused different-but-useful manner design  production design companies applied reverse engineering practical craft-based manufacturing process  the companies work  historical  manufacturing collections  d scanning   d re-modeling re-design  in      italian manufactures baldi savio firmino together university florence optimized innovation  design  production processes    common situations       machines    as computer-aided design  cad  become popular  reverse engineering become viable method create  d virtual model existing physical part use  d cad  cam  cae  software  the reverse-engineering process involves measuring object reconstructing  d model  the physical object measured using  d scanning technologies like cmms  laser scanners  structured light digitizers  industrial ct scanning  computed tomography   the measured data alone  usually represented point cloud  lacks topological information design intent  the former may recovered converting point cloud triangular-faced mesh  reverse engineering aims go beyond producing mesh recover design intent terms simple analytical surfaces appropriate  planes  cylinders  etc   well possibly nurbs surfaces produce boundary-representation cad model  recovery model allows design modified meet new requirements  manufacturing plan generated  etc hybrid modeling commonly used term nurbs parametric modeling implemented together  using combination geometric freeform surfaces provide powerful method  d modeling  areas freeform data combined exact geometric surfaces create hybrid model  a typical example would reverse engineering cylinder head  includes freeform cast features  water jackets high-tolerance machined areas reverse engineering also used businesses bring existing physical geometry digital product development environments  make digital  d record products  assess competitors  products  it used analyze product works   components  estimate costs  identify potential patent infringement  etc value engineering  related activity also used businesses  involves deconstructing analyzing products  however  objective find opportunities cost-cutting     software    in       institute electrical electronics engineers  ieee  defined  software  reverse engineering  sre   process analyzing asubject system identify system components interrelationships create representations system another form higherlevel abstraction   subject system  end product software development  reverse engineering process examination  software system consideration modified  would otherwise re-engineering restructuring  reverse engineering performed stage product cycle  necessarily functional end product there two components reverse engineering  redocumentation design recovery  redocumentation creation new representation computer code easier understand  meanwhile  design recovery use deduction reasoning general knowledge personal experience product understand product functionality fully  it also seen  going backwards development cycle   in model  output implementation phase  source code form  reverse-engineered back analysis phase  inversion traditional waterfall model  another term technique program comprehension  the working conference reverse engineering  wcre  held yearly explore expand techniques reverse engineering  computer-aided software engineering  case  automated code generation contributed greatly field reverse engineering software anti-tamper technology like obfuscation used deter reverse engineering re-engineering proprietary software software-powered systems  in practice  two main types reverse engineering emerge  in first case  source code already available software  higher-level aspects program  perhaps poorly documented documented longer valid  discovered  in second case  source code available software  efforts towards discovering one possible source code software regarded reverse engineering  the second usage term familiar people  reverse engineering software make use clean room design technique avoid copyright infringement on related note  black box testing software engineering lot common reverse engineering  the tester usually api goals find bugs undocumented features bashing product outside other purposes reverse engineering include security auditing  removal copy protection   cracking    circumvention access restrictions often present consumer electronics  customization embedded systems  engine management systems   in-house repairs retrofits  enabling additional features low-cost  crippled  hardware  graphics card chip-sets   even mere satisfaction curiosity      binary software     binary reverse engineering performed source code software unavailable  this process sometimes termed reverse code engineering  rce  for example  decompilation binaries java platform accomplished using jad  one famous case reverse engineering first non-ibm implementation pc bios  launched historic ibm pc compatible industry overwhelmingly-dominant computer hardware platform many years  reverse engineering software protected us fair use exception copyright law  the samba software  allows systems run microsoft windows systems share files systems run  classic example software reverse engineering since samba project reverse-engineer unpublished information windows file sharing worked non-windows computers could emulate it  the wine project thing windows api  openoffice org one party microsoft office file formats  the reactos project even ambitious goals striving provide binary  abi api  compatibility current windows operating systems nt branch  allows software drivers written windows run clean-room reverse-engineered free software  gpl  counterpart  windowsscope allows reverse-engineering full contents windows system live memory including binary-level  graphical reverse engineering running processes another classic  well-known  example      bell laboratories reverse-engineered mac os system      originally running apple macintosh se  could run risc machines own       binary software techniques      reverse engineering software accomplished various methods the three main groups software reverse engineering areanalysis observation information exchange  prevalent protocol reverse engineering  involves using bus analyzers packet sniffers  accessing computer bus computer network connection revealing traffic data thereon  bus network behavior analyzed produce standalone implementation mimics behavior  that especially useful reverse engineering device drivers  sometimes  reverse engineering embedded systems greatly assisted tools deliberately introduced manufacturer  jtag ports debugging means  in microsoft windows  low-level debuggers softice popular disassembly using disassembler  meaning raw machine language program read understood terms  aid machine-language mnemonics  it works computer program take quite time  especially used machine code  the interactive disassembler particularly popular tool decompilation using decompiler  process tries  varying results  recreate source code high-level language program available machine code bytecode      software classification     software classification process identifying similarities different software binaries  two different versions binary  used detect code relations software samples  the task traditionally done manually several reasons  patch analysis vulnerability detection copyright infringement   done somewhat automatically large numbers samples this method used mostly long thorough reverse engineering tasks  complete analysis complex algorithm big piece software   in general  statistical classification considered hard problem  also true software classification  solutions tools handle task well     source code    a number uml tools refer process importing analysing source code generate uml diagrams  reverse engineering   see list uml tools although uml one approach providing  reverse engineering  recent advances international standards activities resulted development knowledge discovery metamodel  kdm   the standard delivers ontology intermediate  abstracted  representation programming language constructs interrelationships  an object management group standard  way becoming iso standard well   kdm started take hold industry development tools analysis environments deliver extraction analysis source  binary  byte code  for source code analysis  kdm granular standards  architecture enables extraction software system flows  data  control  call maps   architectures  business layer knowledge  rules  terms  process   the standard enables use common data format  xmi  enabling correlation various layers system knowledge either detailed analysis  root cause  impact  derived analysis  business process extraction   although efforts represent language constructs never-ending number languages  continuous evolution software languages  development new languages  standard allow use extensions support broad language set well evolution  kdm compatible uml  bpmn  rdf  standards enabling migration environments thus leverage system knowledge efforts software system transformation enterprise business layer analysis     protocols    protocols sets rules describe message formats messages exchanged  protocol state machine  accordingly  problem protocol reverse-engineering partitioned two subproblems  message format state-machine reverse-engineering the message formats traditionally reverse-engineered tedious manual process  involved analysis protocol implementations process messages  recent research proposed number automatic solutions  typically  automatic approaches group observe messages clusters using various clustering analyses  emulate protocol implementation tracing message processing there less work reverse-engineering state-machines protocols  in general  protocol state-machines learned either process offline learning  passively observes communication attempts build general state-machine accepting observed sequences messages  online learning  allows interactive generation probing sequences messages listening responses probing sequences  in general  offline learning small state-machines known np-complete  online learning done polynomial time  an automatic offline approach demonstrated comparetti et al  online approach cho et al other components typical protocols  like encryption hash functions  reverse-engineered automatically well  typically  automatic approaches trace execution protocol implementations try detect buffers memory holding unencrypted packets     integrated circuits smart cards    reverse engineering invasive destructive form analyzing smart card  the attacker uses chemicals etch away layer layer smart card takes pictures scanning electron microscope  sem   that technique reveal complete hardware software part smart card  the major problem attacker bring everything right order find everything works  the makers card try hide keys operations mixing memory positions  bus scrambling in cases  even possible attach probe measure voltages smart card still operational  the makers card employ sensors detect prevent attack  that attack common requires large investment effort special equipment generally available large chip manufacturers  furthermore  payoff attack low since security techniques often used shadow accounts  it still uncertain whether attacks chip-and-pin cards replicate encryption data crack pins would provide cost-effective attack multifactor authentication full reverse engineering proceeds several major steps the first step images taken sem stitching images together  necessary layer cannot captured single shot  a sem needs sweep across area circuit take several hundred images cover entire layer  image stitching takes input several hundred pictures outputs single properly-overlapped picture complete layer next  stitched layers need aligned sample  etching  cannot put exact position relative sem time  therefore  stitched versions overlap correct fashion  real circuit  usually  three corresponding points selected  transformation applied basis that to extract circuit structure  aligned  stitched images need segmented  highlights important circuitry separates uninteresting background insulating materials finally  wires traced one layer next  netlist circuit  contains circuit information  reconstructed     military applications    reverse engineering often used people copy nations  technologies  devices  information obtained regular troops fields intelligence operations  it often used second world war cold war  here well-known examples second world war later jerry  british american forces ww  noticed germans gasoline cans excellent design  they reverse-engineered copies cans  cans popularly known  jerry cans  panzerschreck  the germans captured american bazooka second world war reverse engineered create larger panzerschreck tupolev tu-   in       three american b-   bombers missions japan forced land soviet union  the soviets  similar strategic bomber  decided copy b-    within three years  developed tu-   nearly-perfect copy scr-    radar  copied soviet union second world war  known modifications -    -            -  v-  rocket  technical documents v-  related technologies captured western allies end war  the americans focused reverse engineering efforts via operation paperclip  led development pgm-   redstone rocket  the soviets used captured german engineers reproduce technical documents plans worked captured hardware make clone rocket  r-   thus began postwar soviet rocket program  led r-  beginning space race k-   r- s missile  nato reporting name aa-  atoll   soviet reverse-engineered copy aim-  sidewinder  made possible taiwanese aim- b hit chinese mig-   without exploding september       the missile became lodged within airframe  pilot returned base soviet scientists would describe university course missile development bgm-   tow missile  in may       negotiations iran hughes missile systems co-production tow maverick missiles stalled disagreements pricing structure  subsequent      revolution ending plans co-production  iran later successful reverse-engineering missile produces copy  toophan china reversed engineered many examples western russian hardware  fighter aircraft missiles hmmwv cars  mig-    became j-   su-    became j-     more recent analyses china military growth pointed inherent limitations reverse engineering advanced weapon systems during second world war  polish british cryptographers studied captured german   enigma  message encryption machines weaknesses  their operation simulated electromechanical devices   bombes  tried possible scrambler settings  enigma  machines helped breaking coded messages sent germans also second world war  british scientists analyzed defeated series increasingly-sophisticated radio navigation systems used luftwaffe perform guided bombing missions night  the british countermeasures system effective cases  german aircraft led signals land raf bases since believed returned german territory     gene networks    reverse engineering concepts applied biology well  specifically task understanding structure function gene regulatory networks  they regulate almost every aspect biological behavior allow cells carry physiological processes responses perturbations  understanding structure dynamic behavior gene networks therefore one paramount challenges systems biology  immediate practical repercussions several applications beyond basic research there several methods reverse engineering gene regulatory networks using molecular biology data science methods  they generally divided six classes coexpression methods based notion two genes exhibit similar expression profile  may related although causation simply inferred coexpression sequence motif methods analyze gene promoters find specific transcription factor binding domains  if transcription factor predicted bind promoter specific gene  regulatory connection hypothesized chromatin immunoprecipitation  chip  methods investigate genome-wide profile dna binding chosen transcription factors infer downstream gene networks orthology methods transfer gene network knowledge one species another literature methods implement text mining manual research identify putative experimentally-proven gene network connections transcriptional complexes methods leverage information protein-protein interactions transcription factors  thus extending concept gene networks include transcriptional regulatory complexes often  gene network reliability tested genetic perturbation experiments followed dynamic modelling  based principle removing one network node predictable effects functioning remaining nodes network applications reverse engineering gene networks range understanding mechanisms plant physiology highlighting new targets anticancer therapy     overlap patent law    reverse engineering applies primarily gaining understanding process artifact manner construction  use  internal processes made clear creator patented items reverse-engineered studied  essence patent inventors provide detailed public disclosure  return receive legal protection invention involved  however  item produced one patents could also include technology patented disclosed  indeed  one common motivation reverse engineering determine whether competitor product contains patent infringement copyright infringement    legality       united states    in united states  even artifact process protected trade secrets  reverse-engineering artifact process often lawful legitimately obtained reverse engineering computer software often falls contract law breach contract well relevant laws  that end user license agreements specifically prohibit  us courts ruled terms present  override copyright law expressly permits  see bowers v  baystate technologies   according section     f  digital millennium copyright act     u s c          f    person legal possession program may reverse-engineer circumvent protection necessary achieve  interoperability   term broadly covers devices programs interact  make use  use transfer data useful ways  a limited exemption exists allows knowledge thus gained shared used interoperability purposes     european union    eu directive         legal protection computer programs  superseded earlier        directive  governs reverse engineering european union    see also      references      sources   
computability theory  also known recursion theory  branch mathematical logic  computer science  theory computation originated     study computable functions turing degrees  the field since expanded include study generalized computability definability  in areas  computability theory overlaps proof theory effective descriptive set theory basic questions addressed computability theory include what mean function natural numbers computable how noncomputable functions classified hierarchy based level noncomputability although considerable overlap terms knowledge methods  mathematical computability theorists study theory relative computability  reducibility notions  degree structures  computer science field focus theory subrecursive hierarchies  formal methods  formal languages    computable uncomputable sets   computability theory originated      work kurt g del  alonzo church  r zsa p ter  alan turing  stephen kleene  emil post the fundamental results researchers obtained established turing computability correct formalization informal idea effective calculation  these results led stephen kleene        coin two names  church thesis   kleene            turing thesis   kleene            nowadays often considered single hypothesis  church turing thesis  states function computable algorithm computable function  although initially skeptical       g del argued favor thesis  tarski stressed lecture  i think justly  great importance concept general recursiveness  turing computability   it seems importance largely due fact concept one first time succeeded giving absolute notion interesting epistemological notion  i e   one depending formalism chosen    g del      davis          with definition effective calculation came first proofs problems mathematics cannot effectively decided  church           b  turing         inspired techniques used g del        prove incompleteness theorems  independently demonstrated entscheidungsproblem effectively decidable  this result showed algorithmic procedure correctly decide whether arbitrary mathematical propositions true false many problems mathematics shown undecidable initial examples established   in       markov post published independent papers showing word problem semigroups cannot effectively decided  extending result  pyotr novikov william boone showed independently     word problem groups effectively solvable  effective procedure  given word finitely presented group  decide whether element represented word identity element group  in       yuri matiyasevich proved  using results julia robinson  matiyasevich theorem  implies hilbert tenth problem effective solution  problem asked whether effective procedure decide whether diophantine equation integers solution integers  the list undecidable problems gives additional examples problems computable solution the study mathematical constructions effectively performed sometimes called recursive mathematics  handbook recursive mathematics  ershov et al        covers many known results field    turing computability   the main form computability studied computability theory introduced turing          a set natural numbers said computable set  also called decidable   recursive  turing computable set  turing machine  given number n  halts output   n set halts output   n set    a function f natural numbers natural numbers  turing  computable  recursive function turing machine  input n  halts returns output f n   the use turing machines necessary  many models computation computing power turing machines  example  -recursive functions obtained primitive recursion   operator the terminology computable functions sets completely standardized  the definition terms  -recursive functions well different definition rekursiv functions g del led traditional name recursive sets functions computable turing machine  the word decidable stems german word entscheidungsproblem used original papers turing others  in contemporary use  term  computable function  various definitions  according cutland         partial recursive function  undefined inputs   according soare        total recursive  equivalently  general recursive  function  this article follows second conventions   soare        gives additional comments terminology not every set natural numbers computable  the halting problem  set  descriptions  turing machines halt input    well-known example noncomputable set   the existence many noncomputable sets follows facts countably many turing machines  thus countably many computable sets  according cantor theorem  uncountably many sets natural numbers although halting problem computable  possible simulate program execution produce infinite list programs halt  thus halting problem example computably enumerable  c e   set  set enumerated turing machine  terms computably enumerable include recursively enumerable semidecidable   equivalently  set c e  range computable function   the c e  sets  although decidable general  studied detail computability theory    areas research   beginning theory computable sets functions described  field computability theory grown include study many closely related topics  these independent areas research  areas draws ideas results others  computability theorists familiar majority them     relative computability turing degrees    computability theory mathematical logic traditionally focused relative computability  generalization turing computability defined using oracle turing machines  introduced turing          an oracle turing machine hypothetical device  addition performing actions regular turing machine  able ask questions oracle  particular set natural numbers   the oracle machine may ask questions form  is n oracle set    each question immediately answered correctly  even oracle set computable  thus oracle machine noncomputable oracle able compute sets turing machine without oracle cannot informally  set natural numbers a turing reducible set b oracle machine correctly tells whether numbers a run b oracle set  case  set a also said  relatively  computable b recursive b    if set a turing reducible set b b turing reducible a sets said turing degree  also called degree unsolvability    the turing degree set gives precise measure uncomputable set is the natural examples sets computable  including many different sets encode variants halting problem  two properties common they computably enumerable  andeach translated via many-one reduction  that  given sets a b  total computable function f a    x   f x    b   these sets said many-one equivalent  m-equivalent  many-one reductions  stronger  turing reductions  set a many-one reducible set b  a turing reducible b  converse always hold  although natural examples noncomputable sets many-one equivalent  possible construct computably enumerable sets a b a turing reducible b many-one reducible b  it shown every computably enumerable set many-one reducible halting problem  thus halting problem complicated computably enumerable set respect many-one reducibility respect turing reducibility  post        asked whether every computably enumerable set either computable turing equivalent halting problem   whether computably enumerable set turing degree intermediate two as intermediate results  post defined natural types computably enumerable sets like simple  hypersimple hyperhypersimple sets  post showed sets strictly computable sets halting problem respect many-one reducibility  post also showed strictly intermediate reducibility notions stronger turing reducibility   but post left open main problem existence computably enumerable sets intermediate turing degree  problem became known post problem  after ten years  kleene post showed      intermediate turing degrees computable sets halting problem  failed show degrees contains computably enumerable set  very soon  friedberg muchnik independently solved post problem establishing existence computably enumerable sets intermediate degree  this groundbreaking result opened wide study turing degrees computably enumerable sets turned possess complicated non-trivial structure there uncountably many sets computably enumerable  investigation turing degrees sets central computability theory investigation computably enumerable turing degrees  many degrees special properties constructed  hyperimmune-free degrees every function computable relative degree majorized  unrelativized  computable function  high degrees relative one compute function f dominates every computable function g sense constant c depending g g x    f x  x   c  random degrees containing algorithmically random sets   -generic degrees  -generic sets  degrees halting problem limit-computable sets the study arbitrary  necessarily computably enumerable  turing degrees involves study turing jump   given set a  turing jump a set natural numbers encoding solution halting problem oracle turing machines running oracle a   the turing jump set always higher turing degree original set  theorem friedburg shows set computes halting problem obtained turing jump another set  post theorem establishes close relationship turing jump operation arithmetical hierarchy  classification certain subsets natural numbers based definability arithmetic much recent research turing degrees focused overall structure set turing degrees set turing degrees containing computably enumerable sets   a deep theorem shore slaman        states function mapping degree x degree turing jump definable partial order turing degrees   a recent survey ambos-spies fejer        gives overview research historical progression     other reducibilities    an ongoing area research computability theory studies reducibility relations turing reducibility  post        introduced several strong reducibilities  named imply truth-table reducibility  a turing machine implementing strong reducibility compute total function regardless oracle presented with   weak reducibilities reduction process may terminate oracles  turing reducibility one example the strong reducibilities include one-one reducibilitya one-one reducible   -reducible  b total computable injective function f n a f n  b many-one reducibilitythis essentially one-one reducibility without constraint f injective   a many-one reducible  m-reducible  b total computable function f n a f n  b truth-table reducibilitya truth-table reducible b a turing reducible b via oracle turing machine computes total function regardless oracle given   because compactness cantor space  equivalent saying reduction presents single list questions  depending input  oracle simultaneously  seen answers able produce output without asking additional questions regardless oracle answer initial queries  many variants truth-table reducibility also studied further reducibilities  positive  disjunctive  conjunctive  linear weak bounded versions  discussed article reduction  computability theory  the major research strong reducibilities compare theories  class computably enumerable sets well class subsets natural numbers  furthermore  relations reducibilities studied  for example  known every turing degree either truth-table degree union infinitely many truth-table degrees reducibilities weaker turing reducibility   reducibilities implied turing reducibility  also studied   the well known arithmetical reducibility hyperarithmetical reducibility  these reducibilities closely connected definability standard model arithmetic     rice theorem arithmetical hierarchy    rice showed every nontrivial class c  contains c e  sets  index set e    e  eth c e  set we c  property either halting problem complement many-one reducible e   mapped using many-one reduction e  see rice theorem detail   but  many index sets even complicated halting problem  these type sets classified using arithmetical hierarchy  for example  index set fin class finite sets level     index set rec class recursive sets level     index set cofin cofinite sets also level    index set comp class turing-complete sets     these hierarchy levels defined inductively   n   contains sets computably enumerable relative  n     contains computably enumerable sets  the index sets given even complete levels   sets levels many-one reduced given index sets     reverse mathematics    the program reverse mathematics asks set-existence axioms necessary prove particular theorems mathematics subsystems second-order arithmetic   this study initiated harvey friedman studied detail stephen simpson others  simpson        gives detailed discussion program  the set-existence axioms question correspond informally axioms saying powerset natural numbers closed various reducibility notions  the weakest axiom studied reverse mathematics recursive comprehension  states powerset naturals closed turing reducibility     numberings    a numbering enumeration functions  two parameters  e x outputs value e-th function numbering input x  numberings partial-computable although members total computable functions  admissible numberings others translated  a friedberg numbering  named discoverer  one-one numbering partial-computable functions  necessarily admissible numbering  later research dealt also numberings classes like classes computably enumerable sets  goncharov discovered example class computably enumerable sets numberings fall exactly two classes respect computable isomorphisms     the priority method    post problem solved method called priority method  proof using method called priority argument   this method primarily used construct computably enumerable sets particular properties  to use method  desired properties set constructed broken infinite list goals  known requirements  satisfying requirements cause set constructed desired properties    each requirement assigned natural number representing priority requirement    assigned important priority    second important  on   the set constructed stages  stage attempting satisfy one requirements either adding numbers set banning numbers set final set satisfy requirement  it may happen satisfying one requirement cause another become unsatisfied  priority order used decide event priority arguments employed solve many problems computability theory  classified hierarchy based complexity  soare        because complex priority arguments technical difficult follow  traditionally considered desirable prove results without priority arguments  see results proved priority arguments also proved without them  for example  kummer published paper proof existence friedberg numberings without using priority method     the lattice computably enumerable sets    when post defined notion simple set c e  set infinite complement containing infinite c e  set  started study structure computably enumerable sets inclusion  this lattice became well-studied structure  computable sets defined structure basic result set computable set complement computably enumerable  infinite c e  sets always infinite computable subsets  hand  simple sets exist always coinfinite computable superset  post        introduced already hypersimple hyperhypersimple sets  later maximal sets constructed c e  sets every c e  superset either finite variant given maximal set co-finite  post original motivation study lattice find structural notion every set satisfies property neither turing degree computable sets turing degree halting problem  post find property solution problem applied priority methods instead  harrington soare        found eventually property     automorphism problems    another important question existence automorphisms computability-theoretic structures  one structures one computably enumerable sets inclusion modulo finite difference  structure  a b set difference b   a finite  maximal sets  defined previous paragraph  property cannot automorphic non-maximal sets   automorphism computably enumerable sets structure mentioned  every maximal set mapped another maximal set  soare        showed also converse holds   every two maximal sets automorphic  so maximal sets form orbit   every automorphism preserves maximality two maximal sets transformed automorphism  harrington gave example automorphic property  creative sets  sets many-one equivalent halting problem besides lattice computably enumerable sets  automorphisms also studied structure turing degrees sets well structure turing degrees c e  sets  in cases  cooper claims constructed nontrivial automorphisms map degrees degrees  construction  however  verified colleagues believe construction contains errors question whether nontrivial automorphism turing degrees still one main unsolved questions area  slaman woodin       ambos-spies fejer           kolmogorov complexity    the field kolmogorov complexity algorithmic randomness developed         chaitin  kolmogorov  levin  martin-l f solomonoff  names given alphabetical order  much research independent  unity concept randomness understood time   the main idea consider universal turing machine u measure complexity number  string  x length shortest input p u p  outputs x  this approach revolutionized earlier ways determine infinite sequence  equivalently  characteristic function subset natural numbers  random invoking notion randomness finite objects  kolmogorov complexity became subject independent study also applied subjects tool obtaining proofs there still many open problems area  for reason  recent research conference area held january      list open problems maintained joseph miller andre nies     frequency computation    this branch computability theory analyzed following question  for fixed n       n  functions a possible compute different n inputs x   x        xn tuple n numbers       yn least equations a xk    yk true  such sets known   n -recursive sets  the first major result branch computability theory trakhtenbrot result set computable   n -recursive  n    n  on hand  jockusch semirecursive sets  already known informally jockusch introduced       examples set   n -recursive    n      there uncountably many sets also computably enumerable noncomputable sets type  later  degtev established hierarchy computably enumerable sets     n     -recursive     n -recursive  after long phase research russian scientists  subject became repopularized west beigel thesis bounded queries  linked frequency computation above-mentioned bounded reducibilities related notions  one major results kummer cardinality theory states set a computable n algorithm enumerates tuple n different numbers n many possible choices cardinality set n numbers intersected a  choices must contain true cardinality leave least one false one     inductive inference    this computability-theoretic branch learning theory  it based e  mark gold model learning limit      developed since more models learning  the general scenario following  given class s computable functions  learner   computable functional  outputs input form  f    f        f n   hypothesis  a learner m learns function f almost hypotheses index e f respect previously agreed acceptable numbering computable functions  m learns s m learns every f s  basic results computably enumerable classes functions learnable class rec computable functions learnable  many related models considered also learning classes computably enumerable sets positive data topic studied gold pioneering paper      onwards     generalizations turing computability    computability theory includes study generalized notions field arithmetic reducibility  hyperarithmetical reducibility  -recursion theory  described sacks          these generalized notions include reducibilities cannot executed turing machines nevertheless natural generalizations turing reducibility  these studies include approaches investigate analytical hierarchy differs arithmetical hierarchy permitting quantification sets natural numbers addition quantification individual numbers  these areas linked theories well-orderings trees  example set indices computable  nonbinary  trees without infinite branches complete level                                                                                                                          displaystyle  pi             analytical hierarchy  both turing reducibility hyperarithmetical reducibility important field effective descriptive set theory   the even general notion degrees constructibility studied set theory     continuous computability theory    computability theory digital computation well developed  computability theory less well developed analog computation occurs analog computers  analog signal processing  analog electronics  neural networks continuous-time control theory  modelled differential equations continuous dynamical systems  orponen       moore          relationships definability  proof computability   there close relationships turing degree set natural numbers difficulty  terms arithmetical hierarchy  defining set using first-order formula  one relationship made precise post theorem  a weaker relationship demonstrated kurt g del proofs completeness theorem incompleteness theorems  g del proofs show set logical consequences effective first-order theory computably enumerable set  theory strong enough set uncomputable   similarly  tarski indefinability theorem interpreted terms definability terms computability computability theory also linked second-order arithmetic  formal theory natural numbers sets natural numbers   the fact certain sets computable relatively computable often implies sets defined weak subsystems second-order arithmetic   the program reverse mathematics uses subsystems measure noncomputability inherent well known mathematical theorems  simpson        discusses many aspects second-order arithmetic reverse mathematics the field proof theory includes study second-order arithmetic peano arithmetic  well formal theories natural numbers weaker peano arithmetic   one method classifying strength weak systems characterizing computable functions system prove total  see fairtlough wainer           for example  primitive recursive arithmetic computable function provably total actually primitive recursive  peano arithmetic proves functions like ackermann function  primitive recursive  total  not every total computable function provably total peano arithmetic  however  example function provided goodstein theorem    name   the field mathematical logic dealing computability generalizations called  recursion theory  since early days  robert i  soare  prominent researcher field  proposed  soare       field called  computability theory  instead  he argues turing terminology using word  computable  natural widely understood terminology using word  recursive  introduced kleene  many contemporary researchers begun use alternate terminology  these researchers also use terminology partial computable function computably enumerable  c e   set instead partial recursive function recursively enumerable  r e   set  not researchers convinced  however  explained fortnow simpson some commentators argue names recursion theory computability theory fail convey fact objects studied computability theory computable rogers        suggested key property computability theory results structures invariant computable bijections natural numbers  suggestion draws ideas erlangen program geometry   the idea computable bijection merely renames numbers set  rather indicating structure set  much rotation euclidean plane change geometric aspect lines drawn it  since two infinite computable sets linked computable bijection  proposal identifies infinite computable sets  finite computable sets viewed trivial   according rogers  sets interest computability theory noncomputable sets  partitioned equivalence classes computable bijections natural numbers    professional organizations   the main professional organization computability theory association symbolic logic  holds several research conferences year  the interdisciplinary research association  computability europe  cie  also organizes series annual conferences    see also   recursion  computer science computability logictranscomputational problem   notes      references   undergraduate level textscooper  s b          computability theory  chapman   hall crc  isbn  -     -   -  cutland  n          computability  an introduction recursive function theory  cambridge university press  isbn  -   -     -  matiyasevich  y          hilbert tenth problem  mit press  isbn  -   -     -  advanced textsjain  s   osherson  d   royer  j   sharma  a          systems learn  introduction learning theory   nd ed    bradford book  isbn  -   -     -  kleene  s          introduction metamathematics  north-holland  isbn  -    -    -  lerman  m          degrees unsolvability  perspectives mathematical logic  springer-verlag  isbn  -   -     -  nies  andre         computability randomness  oxford university press  isbn    - -  -      -  odifreddi  p          classical recursion theory  north-holland  isbn  -   -     -  odifreddi  p          classical recursion theory  ii  elsevier  isbn  -   -     -x rogers  jr   h          the theory recursive functions effective computability   nd ed    mit press  isbn  -   -     -  sacks  g          higher recursion theory  springer-verlag  isbn  -   -     -  simpson  s g          subsystems second order arithmetic  springer-verlag  isbn  -   -     -  soare  r i          recursively enumerable sets degrees  perspectives mathematical logic  springer-verlag  isbn  -   -     -  survey papers collectionsambos-spies  k   fejer  p           degrees unsolvability   pdf   archived original  pdf      -  -    retrieved     -  -    unpublished preprint enderton  h           elements recursion theory    in barwise  j   ed    handbook mathematical logic  north-holland  pp           isbn  -    -    -x ershov  y l   goncharov  s s   nerode  a   remmel  j b          handbook recursive mathematics  north-holland  isbn  -    -    -x fairtlough  m   wainer  s s           hierarchies provably recursive functions    in buss  s r   ed    handbook proof theory  elsevier  pp           isbn    - -  -      -  soare  r i           computability recursion   pdf   bulletin symbolic logic                  doi                 jstor        research papers collectionsburgin  m   klinger  a           experience  generations  limits machine learning   theoretical computer science                    doi         j tcs             church  a           an unsolvable problem elementary number theory   american journal mathematics                   doi                  jstor          reprinted davis      church  a           a note entscheidungsproblem   journal symbolic logic                doi                  jstor           reprinted davis      davis  martin  ed                 the undecidable  basic papers undecidable propositions  unsolvable problems computable functions  courier  isbn    - -   -     -  friedberg  r m           three theorems recursive enumeration  i  decomposition  ii  maximal set  iii  enumeration without repetition   the journal symbolic logic                   doi                  jstor         gold  e  mark          language identification limit   pdf   information control                   doi            -             -      harrington  l   soare  r i           post program incomplete recursively enumerable sets   proc  natl  acad  sci  u s a                    bibcode     pnas          h  doi         pnas              pmc        pmid          jockusch jr  c g           semirecursive sets positive reducibility   trans  amer  math  soc                    doi         s    -    -    -       -   jstor         kleene  s c   post  e l           the upper semi-lattice degrees recursive unsolvability   annals mathematics  second                   doi                  jstor         moore  c           recursion theory reals continuous-time computation   theoretical computer science                  citeseerx                doi             -             -  myhill  j           the lattice recursively enumerable sets   the journal symbolic logic               doi         s               x orponen  p           a survey continuous-time computation theory   advances algorithms  languages  complexity           citeseerx                 doi            - -    -    -      isbn    - -    -    -  post  e           recursively enumerable sets positive integers decision problems   bulletin american mathematical society                   doi         s    -    -    -     -   mr         post  e           recursive unsolvability problem thue   journal symbolic logic                doi                  jstor          reprinted davis      shore  richard a   slaman  theodore a           defining turing jump   pdf   mathematical research letters                  doi         mrl      v  n  a    mr         slaman  t   woodin  w h           definability turing degrees   illinois j  math                   doi         ijm             mr         soare  r i           automorphisms lattice recursively enumerable sets  part i  maximal sets   annals mathematics                   doi                  jstor         turing  a           on computable numbers  application entscheidungsproblem   proceedings london mathematical society  -                 doi         plms -          turing  a m           on computable numbers  application entscheidungsproblem  a correction   proceedings london mathematical society  -               doi         plms -          reprinted davis       pdf comlab ox ac ukturing  a m           systems logic based ordinals   proceedings london mathematical society  -                 doi         plms -          hdl              -    -  ce-   reprinted davis         external links   association symbolic logic homepagecomputability europe homepagewebpage recursion theory course graduate level approximately     pages lecture notesgerman language lecture notes inductive inference
this article list notable unsolved problems computer science  a problem computer science considered unsolved solution known  experts field disagree proposed solutions    computational complexity   p versus np problemwhat relationship bqp np nc   p problemnp   co-np problemp   bpp problemp   pspace probleml   nl problemph   pspace probleml   p probleml   rl problemunique games conjectureis exponential time hypothesis true is strong exponential time hypothesis  seth  true do one-way functions exist is public-key cryptography possible log-rank conjecture   polynomial versus non-polynomial time specific algorithmic problems   can integer factorization done polynomial time classical  non-quantum  computer can discrete logarithm computed polynomial time classical  non-quantum  computer can shortest vector lattice computed polynomial time classical quantum computer can clustered planar drawings found polynomial time can graph isomorphism problem solved polynomial time can leaf powers k-leaf powers recognized polynomial time can parity games solved polynomial time can rotation distance two binary trees computed polynomial time can graphs bounded clique-width recognized polynomial time can one find simple closed quasigeodesic convex polyhedron polynomial time can simultaneous embedding fixed edges two given graphs found polynomial time    other algorithmic problems   the dynamic optimality conjecture  splay trees bounded competitive ratio is k-competitive online algorithm k-server problem can depth-first search tree constructed nc can fast fourier transform computed n log n  time what fastest algorithm multiplication two n-digit numbers what lowest possible average-case time complexity shellsort deterministic  fixed gap sequence can  sum solved strongly sub-quadratic time   time o n         can edit distance two strings length n computed strongly sub-quadratic time    this possible strong exponential time hypothesis false  can x   y sorting done n  log n  time what fastest algorithm matrix multiplication can all-pairs shortest paths computed strongly sub-cubic time   time o v         can schwartz zippel lemma polynomial identity testing derandomized does linear programming admit strongly polynomial-time algorithm    this problem    smale list problems  how many queries required envy-free cake-cutting what algorithm lookup table consistently generates playable mazes      atari      game entombed merely values five pixels adjacent next ones generated what algorithmic complexity minimum spanning tree problem  equivalently  decision tree complexity mst problem  the optimal algorithm compute msts known  relies decision trees  complexity unknown    natural language processing algorithms   is perfect syllabification algorithm english language is perfect stemming algorithm english language is perfect phrase chunking algorithm english language how computers discern pronoun ambiguity english language   also known winograd schema challenge     programming language theory   poplmarkbarendregt geuvers klop conjecture   other problems   aanderaa karp rosenberg conjecture ern  conjecturegeneralized star height problemseparating words problem   references      external links   open problems around exact algorithms gerhard j  woeginger  discrete applied mathematics                    the rta list open problems   open problems rewriting the tlca list open problems   open problems area typed lambda calculus 
computational complexity theory focuses classifying computational problems according resource usage  relating classes other  a computational problem task solved computer  a computation problem solvable mechanical application mathematical steps  algorithm a problem regarded inherently difficult solution requires significant resources  whatever algorithm used  the theory formalizes intuition  introducing mathematical models computation study problems quantifying computational complexity  i e   amount resources needed solve  time storage  other measures complexity also used  amount communication  used communication complexity   number gates circuit  used circuit complexity  number processors  used parallel computing   one roles computational complexity theory determine practical limits computers cannot do  the p versus np problem  one seven millennium prize problems  dedicated field computational complexity closely related fields theoretical computer science analysis algorithms computability theory  a key distinction analysis algorithms computational complexity theory former devoted analyzing amount resources needed particular algorithm solve problem  whereas latter asks general question possible algorithms could used solve problem  more precisely  computational complexity theory tries classify problems cannot solved appropriately restricted resources  in turn  imposing restrictions available resources distinguishes computational complexity computability theory  latter theory asks kinds problems  principle  solved algorithmically    computational problems       problem instances    a computational problem viewed infinite collection instances together set  possibly empty  solutions every instance  the input string computational problem referred problem instance  confused problem itself  in computational complexity theory  problem refers abstract question solved  in contrast  instance problem rather concrete utterance  serve input decision problem  for example  consider problem primality testing  the instance number  e g       solution  yes  number prime   otherwise  case     prime answer     stated another way  instance particular input problem  solution output corresponding given input to highlight difference problem instance  consider following instance decision version traveling salesman problem  is route      kilometres passing germany    largest cities  the quantitative answer particular problem instance little use solving instances problem  asking round trip sites milan whose total length    km  for reason  complexity theory addresses computational problems particular problem instances     representing problem instances    when considering computational problems  problem instance string alphabet  usually  alphabet taken binary alphabet  i e   set         thus strings bitstrings  as real-world computer  mathematical objects bitstrings must suitably encoded  for example  integers represented binary notation  graphs encoded directly via adjacency matrices  encoding adjacency lists binary even though proofs complexity-theoretic theorems regularly assume concrete choice input encoding  one tries keep discussion abstract enough independent choice encoding  this achieved ensuring different representations transformed efficiently     decision problems formal languages    decision problems one central objects study computational complexity theory  a decision problem special type computational problem whose answer either yes  alternately either      a decision problem viewed formal language  members language instances whose output yes  non-members instances whose output no  the objective decide  aid algorithm  whether given input string member formal language consideration  if algorithm deciding problem returns answer yes  algorithm said accept input string  otherwise said reject input an example decision problem following  the input arbitrary graph  the problem consists deciding whether given graph connected not  the formal language associated decision problem set connected graphs   obtain precise definition language  one decide graphs encoded binary strings     function problems    a function problem computational problem single output  total function  expected every input  output complex decision problem  output yes no  notable examples include traveling salesman problem integer factorization problem it tempting think notion function problems much richer notion decision problems  however  really case  since function problems recast decision problems  for example  multiplication two integers expressed set triples   b  c  relation   b   c holds  deciding whether given triple member set corresponds solving problem multiplying two numbers     measuring size instance    to measure difficulty solving computational problem  one may wish see much time best algorithm requires solve problem  however  running time may  general  depend instance  in particular  larger instances require time solve  thus time required solve problem  space required  measure complexity  calculated function size instance  this usually taken size input bits  complexity theory interested algorithms scale increase input size  for instance  problem finding whether graph connected  much time take solve problem graph  n vertices compared time taken graph n vertices if input size n  time taken expressed function n  since time taken different inputs size different  worst-case time complexity t n  defined maximum time taken inputs size n  if t n  polynomial n  algorithm said polynomial time algorithm  cobham thesis argues problem solved feasible amount resources admits polynomial time algorithm    machine models complexity measures       turing machine    a turing machine mathematical model general computing machine  it theoretical device manipulates symbols contained strip tape  turing machines intended practical computing technology  rather general model computing machine anything advanced supercomputer mathematician pencil paper  it believed problem solved algorithm  exists turing machine solves problem  indeed  statement church turing thesis  furthermore  known everything computed models computation known us today  ram machine  conway game life  cellular automata programming language computed turing machine  since turing machines easy analyze mathematically  believed powerful model computation  turing machine commonly used model complexity theory many types turing machines used define complexity classes  deterministic turing machines  probabilistic turing machines  non-deterministic turing machines  quantum turing machines  symmetric turing machines alternating turing machines  they equally powerful principle  resources  time space  bounded  may powerful others a deterministic turing machine basic turing machine  uses fixed set rules determine future actions  a probabilistic turing machine deterministic turing machine extra supply random bits  the ability make probabilistic decisions often helps algorithms solve problems efficiently  algorithms use random bits called randomized algorithms  a non-deterministic turing machine deterministic turing machine added feature non-determinism  allows turing machine multiple possible future actions given state  one way view non-determinism turing machine branches many possible computational paths step  solves problem branches  said solved problem  clearly  model meant physically realizable model  theoretically interesting abstract machine gives rise particularly interesting complexity classes  for examples  see non-deterministic algorithm     other machine models    many machine models different standard multi-tape turing machines proposed literature  example random-access machines  perhaps surprisingly  models converted another without providing extra computational power  the time memory consumption alternate models may vary  what models common machines operate deterministically however  computational problems easier analyze terms unusual resources  for example  non-deterministic turing machine computational model allowed branch check many different possibilities once  the non-deterministic turing machine little physically want compute algorithms  branching exactly captures many mathematical models want analyze  non-deterministic time important resource analyzing computational problems     complexity measures    for precise definition means solve problem using given amount time space  computational model deterministic turing machine used  the time required deterministic turing machine m input x total number state transitions  steps  machine makes halts outputs answer   yes      a turing machine m said operate within time f n  time required m input length n f n   a decision problem a solved time f n  exists turing machine operating time f n  solves problem  since complexity theory interested classifying problems based difficulty  one defines sets problems based criteria  for instance  set problems solvable within time f n  deterministic turing machine denoted dtime f n   analogous definitions made space requirements  although time space well-known complexity resources  complexity measure viewed computational resource  complexity measures generally defined blum complexity axioms  other complexity measures used complexity theory include communication complexity  circuit complexity  decision tree complexity the complexity algorithm often expressed using big o notation     best  worst average case complexity    the best  worst average case complexity refer three different ways measuring time complexity  complexity measure  different inputs size  since inputs size n may faster solve others  define following complexities best-case complexity  this complexity solving problem best input size n average-case complexity  this complexity solving problem average  this complexity defined respect probability distribution inputs  for instance  inputs size assumed equally likely appear  average case complexity defined respect uniform distribution inputs size n amortized analysis  amortized analysis considers costly less costly operations together whole series operations algorithm worst-case complexity  this complexity solving problem worst input size n the order cheap costly  best  average  discrete uniform distribution   amortized  worst for example  consider deterministic sorting algorithm quicksort  this solves problem sorting list integers given input  the worst-case pivot always largest smallest value list  list never divided   in case algorithm takes time o n    if assume possible permutations input list equally likely  average time taken sorting o n log n   the best case occurs pivoting divides list half  also needing o n log n  time     upper lower bounds complexity problems    to classify computation time  similar resources  space consumption   helpful demonstrate upper lower bounds maximum amount time required efficient algorithm solve given problem  the complexity algorithm usually taken worst-case complexity  unless specified otherwise  analyzing particular algorithm falls field analysis algorithms  to show upper bound t n  time complexity problem  one needs show particular algorithm running time t n   however  proving lower bounds much difficult  since lower bounds make statement possible algorithms solve given problem  the phrase  possible algorithms  includes algorithms known today  algorithm might discovered future  to show lower bound t n  problem requires showing algorithm time complexity lower t n  upper lower bounds usually stated using big o notation  hides constant factors smaller terms  this makes bounds independent specific details computational model used  for instance  t n     n      n       big o notation one would write t n    o n      complexity classes       defining complexity classes    a complexity class set problems related complexity  simpler complexity classes defined following factors the type computational problem  the commonly used problems decision problems  however  complexity classes defined based function problems  counting problems  optimization problems  promise problems  etc the model computation  the common model computation deterministic turing machine  many complexity classes based non-deterministic turing machines  boolean circuits  quantum turing machines  monotone circuits  etc the resource  resources  bounded bound  these two properties usually stated together   polynomial time    logarithmic space    constant depth   etc some complexity classes complicated definitions fit framework  thus  typical complexity class definition like following the set decision problems solvable deterministic turing machine within time f n    this complexity class known dtime f n    but bounding computation time concrete function f n  often yields complexity classes depend chosen machine model  for instance  language  xx   x binary string  solved linear time multi-tape turing machine  necessarily requires quadratic time model single-tape turing machines  if allow polynomial variations running time  cobham-edmonds thesis states  time complexities two reasonable general models computation polynomially related   goldreich       chapter       this forms basis complexity class p  set decision problems solvable deterministic turing machine within polynomial time  the corresponding set function problems fp     important complexity classes    many important complexity classes defined bounding time space used algorithm  some important complexity classes decision problems defined manner following the logarithmic-space classes  necessarily  take account space needed represent problem it turns pspace   npspace expspace   nexpspace savitch theorem other important complexity classes include bpp  zpp rp  defined using probabilistic turing machines  ac nc  defined using boolean circuits  bqp qma  defined using quantum turing machines   p important complexity class counting problems  decision problems   classes like ip am defined using interactive proof systems  all class decision problems     hierarchy theorems    for complexity classes defined way  desirable prove relaxing requirements  say  computation time indeed defines bigger set problems  in particular  although dtime n  contained dtime n    would interesting know inclusion strict  for time space requirements  answer questions given time space hierarchy theorems respectively  they called hierarchy theorems induce proper hierarchy classes defined constraining respective resources  thus pairs complexity classes one properly included other  having deduced proper set inclusions  proceed make quantitative statements much additional time space needed order increase number problems solved more precisely  time hierarchy theorem states                                          d            t            i            m            e                                                                           f                 n                                                                                                 d            t            i            m            e                                                                           f                 n                                    log                                                                   f                 n                                                                                   displaystyle   mathsf  dtime    big   f n   big    subsetneq   mathsf  dtime    big   f n  cdot  log      f n    big       the space hierarchy theorem states                                          d            s            p            a            c            e                                                                           f                 n                                                                                                 d            s            p            a            c            e                                                                           f                 n                          log                          f                 n                                                                                   displaystyle   mathsf  dspace    big   f n   big    subsetneq   mathsf  dspace    big   f n  cdot  log f n    big       the time space hierarchy theorems form basis separation results complexity classes  for instance  time hierarchy theorem tells us p strictly contained exptime  space hierarchy theorem tells us l strictly contained pspace     reduction    many complexity classes defined using concept reduction  a reduction transformation one problem another problem  it captures informal notion problem difficult another problem  for instance  problem x solved using algorithm y  x difficult y  say x reduces y  there many different types reductions  based method reduction  cook reductions  karp reductions levin reductions  bound complexity reductions  polynomial-time reductions log-space reductions the commonly used reduction polynomial-time reduction  this means reduction process takes polynomial time  for example  problem squaring integer reduced problem multiplying two integers  this means algorithm multiplying two integers used square integer  indeed  done giving input inputs multiplication algorithm  thus see squaring difficult multiplication  since squaring reduced multiplication this motivates concept problem hard complexity class  a problem x hard class problems c every problem c reduced x  thus problem c harder x  since algorithm x allows us solve problem c  the notion hard problems depends type reduction used  for complexity classes larger p  polynomial-time reductions commonly used  in particular  set problems hard np set np-hard problems if problem x c hard c  x said complete c  this means x hardest problem c   since many problems could equally hard  one might say x one hardest problems c   thus class np-complete problems contains difficult problems np  sense ones likely p  because problem p   np solved  able reduce known np-complete problem      another problem      would indicate known polynomial-time solution     this polynomial-time solution    would yield polynomial-time solution     similarly  np problems reduced set  finding np-complete problem solved polynomial time would mean p   np    important open problems       p versus np problem    the complexity class p often seen mathematical abstraction modeling computational tasks admit efficient algorithm  this hypothesis called cobham edmonds thesis  the complexity class np  hand  contains many problems people would like solve efficiently  efficient algorithm known  boolean satisfiability problem  hamiltonian path problem vertex cover problem  since deterministic turing machines special non-deterministic turing machines  easily observed problem p also member class np the question whether p equals np one important open questions theoretical computer science wide implications solution  if answer yes  many important problems shown efficient solutions  these include various types integer programming problems operations research  many problems logistics  protein structure prediction biology  ability find formal proofs pure mathematics theorems  the p versus np problem one millennium prize problems proposed clay mathematics institute  there us           prize resolving problem     problems np known p np-complete    it shown ladner p   np exist problems np neither p np-complete  such problems called np-intermediate problems  the graph isomorphism problem  discrete logarithm problem integer factorization problem examples problems believed np-intermediate  they np problems known p np-complete the graph isomorphism problem computational problem determining whether two finite graphs isomorphic  an important unsolved problem complexity theory whether graph isomorphism problem p  np-complete  np-intermediate  the answer known  believed problem least np-complete  if graph isomorphism np-complete  polynomial time hierarchy collapses second level  since widely believed polynomial hierarchy collapse finite level  believed graph isomorphism np-complete  the best algorithm problem  due l szl  babai eugene luks run time                     o                                                                n              log                             n                                                       displaystyle o     sqrt  n log n       graphs n vertices  although recent work babai offers potentially new perspectives this the integer factorization problem computational problem determining prime factorization given integer  phrased decision problem  problem deciding whether input prime factor less k  no efficient integer factorization algorithm known  fact forms basis several modern cryptographic systems  rsa algorithm  the integer factorization problem np co-np  even up co-up   if problem np-complete  polynomial time hierarchy collapse first level  i e   np equal co-np   the best known algorithm integer factorization general number field sieve  takes time                     o                           e                                                                                                                                                                                                                                                                                                                                                   log                                     n                                                                                                                                                                                               log                                     log                                     n                                                                                                                                                                                                                                                                displaystyle o e   left   sqrt       frac           right   sqrt        log n     sqrt        log  log n             factor odd integer n  however  best known quantum algorithm problem  shor algorithm  run polynomial time  unfortunately  fact say much problem lies respect non-quantum complexity classes     separations complexity classes    many known complexity classes suspected unequal  proved  for instance p   np   pp   pspace  possible p   pspace  if p equal np  p equal pspace either  since many known complexity classes p pspace  rp  bpp  pp  bqp  ma  ph  etc   possible complexity classes collapse one class  proving classes unequal would major breakthrough complexity theory along lines  co-np class containing complement problems  i e  problems yes answers reversed  np problems  it believed np equal co-np  however  yet proven  it clear two complexity classes equal p equal np  since p co-p   thus p np would co-p co-np whence np p co-p co-np  similarly  known l  set problems solved logarithmic space  strictly contained p equal p  again  many complexity classes two  nl nc  known distinct equal classes it suspected p bpp equal  however  currently open bpp   nexp    intractability   a problem solved theory  e g  given large finite resources  especially time   practice solution takes many resources useful  known intractable problem  conversely  problem solved practice called tractable problem  literally  problem handled   the term infeasible  literally  cannot done   sometimes used interchangeably intractable  though risks confusion feasible solution mathematical optimization tractable problems frequently identified problems polynomial-time solutions  p  ptime   known cobham edmonds thesis  problems known intractable sense include exptime-hard  if np p  np-hard problems also intractable sense however  identification inexact  polynomial-time solution large degree large leading coefficient grows quickly  may impractical practical size problems  conversely  exponential-time solution grows slowly may practical realistic input  solution takes long time worst case may take short time cases average case  thus still practical  saying problem p imply large cases problem hard even are  for example  decision problem presburger arithmetic shown p  yet algorithms written solve problem reasonable times cases  similarly  algorithms solve np-complete knapsack problem wide range sizes less quadratic time sat solvers routinely handle large instances np-complete boolean satisfiability problem to see exponential-time algorithms generally unusable practice  consider program makes  n operations halting  for small n  say      assuming sake example computer      operations second  program would run          years  order magnitude age universe  even much faster computer  program would useful small instances sense intractability problem somewhat independent technological progress  however  exponential-time algorithm takes       n operations practical n gets relatively large similarly  polynomial time algorithm always practical  if running time  say  n    unreasonable consider efficient still useless except small instances  indeed  practice even n  n  algorithms often impractical realistic sizes problems    continuous complexity theory   continuous complexity theory refer complexity theory problems involve continuous functions approximated discretizations  studied numerical analysis  one approach complexity theory numerical analysis information based complexity continuous complexity theory also refer complexity theory use analog computation  uses continuous dynamical systems differential equations  control theory considered form computation differential equations used modelling continuous-time hybrid discrete-continuous-time systems    history   an early example algorithm complexity analysis running time analysis euclidean algorithm done gabriel lam       before actual research explicitly devoted complexity algorithmic problems started  numerous foundations laid various researchers  most influential among definition turing machines alan turing       turned robust flexible simplification computer the beginning systematic studies computational complexity attributed seminal      paper  on computational complexity algorithms  juris hartmanis richard e  stearns  laid definitions time complexity space complexity  proved hierarchy theorems  in addition       edmonds suggested consider  good  algorithm one running time bounded polynomial input size earlier papers studying problems solvable turing machines specific bounded resources include john myhill definition linear bounded automata  myhill        raymond smullyan study rudimentary sets         well hisao yamada paper real-time computations         somewhat earlier  boris trakhtenbrot         pioneer field ussr  studied another specific complexity measure  as remembers however    initial interest  automata theory  increasingly set aside favor computational complexity  exciting fusion combinatorial methods  inherited switching theory  conceptual arsenal theory algorithms  these ideas occurred earlier      i coined term  signalizing function   nowadays commonly known  complexity measure  in       manuel blum formulated set axioms  known blum axioms  specifying desirable properties complexity measures set computable functions proved important result  so-called speed-up theorem  the field began flourish      stephen cook leonid levin proved existence practically relevant problems np-complete  in       richard karp took idea leap forward landmark paper   reducibility among combinatorial problems   showed    diverse combinatorial graph theoretical problems  infamous computational intractability  np-complete    see also      works complexity   wuppuluri  shyam  doria  francisco a   eds          unravelling complexity  the life work gregory chaitin  world scientific  doi                isbn    -   -  -    -    references       citations        textbooks    arora  sanjeev  barak  boaz         computational complexity  a modern approach  cambridge university press  isbn    - -   -     -   zbl           downey  rod  fellows  michael         parameterized complexity  monographs computer science  berlin  new york  springer-verlag  isbn              du  ding-zhu  ko  ker-i         theory computational complexity  john wiley   sons  isbn    - -   -     - garey  michael r   johnson  david s          computers intractability  a guide theory np-completeness  w  h  freeman  isbn  -    -    - goldreich  oded         computational complexity  a conceptual perspective  cambridge university pressvan leeuwen  jan  ed          handbook theoretical computer science  vol  a   algorithms complexity  mit press  isbn    - -   -     - papadimitriou  christos         computational complexity   st ed    addison wesley  isbn    - -   -     - sipser  michael         introduction theory computation   nd ed    usa  thomson course technology  isbn    - -   -     -     surveys    khalil  hatem  ulery  dana          a review current studies complexity algorithms partial differential equations   proceedings annual conference - acm     acm               doi                        s cid         cook  stephen          an overview computational complexity   commun  acm                   doi                        issn     -      s cid         fortnow  lance  homer  steven          a short history computational complexity   pdf   bulletin eatcs            mertens  stephan          computational complexity physicists   computing science eng                 arxiv cond-mat          bibcode     cse      c    m  doi                      issn     -      s cid          external links   the complexity zoo computational complexity classes   encyclopedia mathematics  ems press             what important results  papers  complexity theory every one know scott aaronson  why philosophers should care about computational complexity
quantum computing type computation harnesses collective properties quantum states  superposition  interference  entanglement  perform calculations  the devices perform quantum computations known quantum computers   i-   they believed able solve certain computational problems  integer factorization  underlies rsa encryption   substantially faster classical computers  the study quantum computing subfield quantum information science  expansion expected next years field shifts toward real-world use pharmaceutical  data security applications quantum computing began      physicist paul benioff proposed quantum mechanical model turing machine  richard feynman yuri manin later suggested quantum computer potential simulate things classical computer could feasibly do   in       peter shor developed  quantum algorithm factoring integers potential decrypt rsa-encrypted communications  despite ongoing experimental progress since late      researchers believe  fault-tolerant quantum computing   still rather distant dream   in recent years  investment quantum computing research increased public private sectors  on    october       google ai  partnership u s  national aeronautics space administration  nasa   claimed performed quantum computation infeasible classical computer  whether claim still valid topic active research there several types quantum computers  also known quantum computing systems   including quantum circuit model  quantum turing machine  adiabatic quantum computer  one-way quantum computer  various quantum cellular automata  the widely used model quantum circuit  based quantum bit   qubit   somewhat analogous bit classical computation  a qubit     quantum state  superposition     states  when measured  however  always      probability either outcome depends qubit quantum state immediately prior measurement efforts towards building physical quantum computer focus technologies transmons  ion traps topological quantum computers  aim create high-quality qubits         these qubits may designed differently  depending full quantum computer computing model  whether quantum logic gates  quantum annealing  adiabatic quantum computation  there currently number significant obstacles constructing useful quantum computers  it particularly difficult maintain qubits  quantum states  suffer quantum decoherence state fidelity  quantum computers therefore require error correction any computational problem solved classical computer also solved quantum computer  conversely  problem solved quantum computer also solved classical computer  least principle given enough time  in words  quantum computers obey church turing thesis  this means quantum computers provide additional advantages classical computers terms computability  quantum algorithms certain problems significantly lower time complexities corresponding known classical algorithms  notably  quantum computers believed able quickly solve certain problems classical computer could solve feasible amount time feat known  quantum supremacy   the study computational complexity problems respect quantum computers known quantum complexity theory    quantum circuit       definition    the prevailing model quantum computation describes computation terms network quantum logic gates  this model thought abstract linear-algebraic generalization classical circuit  since circuit model obeys quantum mechanics  quantum computer capable efficiently running circuits believed physically realizable a memory consisting                     n                textstyle n    bits information                                                      n                                  textstyle    n     possible states  a vector representing memory states thus                                                      n                                  textstyle    n     entries  one state   this vector viewed probability vector represents fact memory found particular state in classical view  one entry would value    i e       probability state  entries would zero  in quantum mechanics  probability vectors generalized density operators  the quantum state vector formalism usually introduced first conceptually simpler  used instead density matrix formalism pure states  whole quantum system known we begin considering simple memory consisting one bit  this memory may found one two states  zero state one state  we may represent state memory using dirac notation thata quantum memory may found quantum superposition                                                                          textstyle   psi  rangle     two classical states                                                                          textstyle    rangle                                                                              textstyle    rangle     in general  coefficients                                      textstyle  alpha                                          textstyle  beta     complex numbers  in scenario  one qubit information said encoded quantum memory  the state                                                                          textstyle   psi  rangle     probability vector connected probability vector via measurement operation  if quantum memory measured determine whether state                                                                          textstyle    rangle                                                                              textstyle    rangle      known computational basis measurement   zero state would observed probability                                                                                                                                                   textstyle   alpha          one state probability                                                                                                                                                   textstyle   beta           the numbers                                      textstyle  alpha                                          textstyle  beta     called quantum amplitudes the state one-qubit quantum memory manipulated applying quantum logic gates  analogous classical memory manipulated classical logic gates  one important gate classical quantum computation not gate  represented matrixmathematically  application logic gate quantum state vector modelled matrix multiplication  thus                     x                                                                                                                   textstyle x   rangle     rangle                         x                                                                                                                   textstyle x   rangle     rangle     the mathematics single qubit gates extended operate multi-qubit quantum memories two important ways  one way simply select qubit apply gate target qubit whilst leaving remainder memory unaffected  another way apply gate target another part memory desired state  these two choices illustrated using another example  the possible states two-qubit quantum memory arethe cnot gate represented using following matrix as mathematical consequence definition                      cnot                                                                                                                              textstyle  operatorname  cnot      rangle      rangle                          cnot                                                                                                                              textstyle  operatorname  cnot      rangle      rangle                          cnot                                                                                                                              textstyle  operatorname  cnot      rangle      rangle                          cnot                                                                                                                              textstyle  operatorname  cnot      rangle      rangle      in words  cnot applies not gate                      x                textstyle x     second qubit first qubit state                                                                          textstyle    rangle      if first qubit                                                                          textstyle    rangle      nothing done either qubit in summary  quantum computation described network quantum logic gates measurements  however  measurement deferred end quantum computation  though deferment may come computational cost  quantum circuits depict network consisting quantum logic gates measurements any quantum computation   formalism  unitary matrix                     n                displaystyle n    qubits  represented network quantum logic gates fairly small family gates  a choice gate family enables construction known universal gate set  since computer run circuits universal quantum computer  one common set includes single-qubit gates well cnot gate above  this means quantum computation performed executing sequence single-qubit gates together cnot gates  though gate set infinite  replaced finite gate set appealing solovay-kitaev theorem     quantum algorithms    progress finding quantum algorithms typically focuses quantum circuit model  though exceptions like quantum adiabatic algorithm exist  quantum algorithms roughly categorized type speedup achieved corresponding classical algorithms quantum algorithms offer polynomial speedup best known classical algorithm include shor algorithm factoring related quantum algorithms computing discrete logarithms  solving pell equation  generally solving hidden subgroup problem abelian finite groups  these algorithms depend primitive quantum fourier transform  no mathematical proof found shows equally fast classical algorithm cannot discovered  although considered unlikely  certain oracle problems like simon problem bernstein vazirani problem give provable speedups  though quantum query model  restricted model lower bounds much easier prove necessarily translate speedups practical problems other problems  including simulation quantum physical processes chemistry solid-state physics  approximation certain jones polynomials  quantum algorithm linear systems equations quantum algorithms appearing give super-polynomial speedups bqp-complete  because problems bqp-complete  equally fast classical algorithm would imply quantum algorithm gives super-polynomial speedup  believed unlikely some quantum algorithms  like grover algorithm amplitude amplification  give polynomial speedups corresponding classical algorithms  though algorithms give comparably modest quadratic speedup  widely applicable thus give speedups wide range problems  many examples provable quantum speedups query problems related grover algorithm  including brassard  h yer  tapp algorithm finding collisions two-to-one functions  uses grover algorithm  farhi  goldstone  gutmann algorithm evaluating nand trees  variant search problem    potential applications       cryptography    a notable application quantum computation attacks cryptographic systems currently use  integer factorization  underpins security public key cryptographic systems  believed computationally infeasible ordinary computer large integers product prime numbers  e g   products two    -digit primes   by comparison  quantum computer could efficiently solve problem using shor algorithm find factors  this ability would allow quantum computer break many cryptographic systems use today  sense would polynomial time  number digits integer  algorithm solving problem  in particular  popular public key ciphers based difficulty factoring integers discrete logarithm problem  solved shor algorithm  in particular  rsa  diffie hellman  elliptic curve diffie hellman algorithms could broken  these used protect secure web pages  encrypted email  many types data  breaking would significant ramifications electronic privacy security identifying cryptographic systems may secure quantum algorithms actively researched topic field post-quantum cryptography  some public-key algorithms based problems integer factorization discrete logarithm problems shor algorithm applies  like mceliece cryptosystem based problem coding theory  lattice-based cryptosystems also known broken quantum computers  finding polynomial time algorithm solving dihedral hidden subgroup problem  would break many lattice based cryptosystems  well-studied open problem  it proven applying grover algorithm break symmetric  secret key  algorithm brute force requires time equal roughly  n   invocations underlying cryptographic algorithm  compared roughly  n classical case  meaning symmetric key lengths effectively halved  aes-    would security attack using grover algorithm aes-    classical brute-force search  see key size  quantum cryptography could potentially fulfill functions public key cryptography  quantum-based cryptographic systems could  therefore  secure traditional systems quantum hacking     search problems    the well-known example problem admitting polynomial quantum speedup unstructured search  finding marked item list                     n                displaystyle n    items database  this solved grover algorithm using                     o                                       n                                           displaystyle o   sqrt  n       queries database  quadratically fewer                                       n                         displaystyle  omega  n     queries required classical algorithms  in case  advantage provable also optimal  shown grover algorithm gives maximal possible probability finding desired element number oracle lookups problems addressed grover algorithm following properties there searchable structure collection possible answers the number possible answers check number inputs algorithm  andthere exists boolean function evaluates input determines whether correct answerfor problems properties  running time grover algorithm quantum computer scales square root number inputs  elements database   opposed linear scaling classical algorithms  a general class problems grover algorithm applied boolean satisfiability problem  database algorithm iterates possible answers  an example  possible  application password cracker attempts guess password  symmetric ciphers triple des aes particularly vulnerable kind attack  this application quantum computing major interest government agencies     simulation quantum systems    since chemistry nanotechnology rely understanding quantum systems  systems impossible simulate efficient manner classically  many believe quantum simulation one important applications quantum computing  quantum simulation could also used simulate behavior atoms particles unusual conditions reactions inside collider quantum simulations might used predict future paths particles protons superposition double-slit experiment about    annual global energy output used nitrogen fixation produce ammonia haber process agricultural fertilizer industry naturally occurring organisms also produce ammonia  quantum simulations might used understand process increasing production     quantum annealing adiabatic optimization    quantum annealing adiabatic quantum computation relies adiabatic theorem undertake calculations  a system placed ground state simple hamiltonian  slowly evolved complicated hamiltonian whose ground state represents solution problem question  the adiabatic theorem states evolution slow enough system stay ground state times process     machine learning    since quantum computers produce outputs classical computers cannot produce efficiently  since quantum computation fundamentally linear algebraic  express hope developing quantum algorithms speed machine learning tasks for example  quantum algorithm linear systems equations   hhl algorithm   named discoverers harrow  hassidim  lloyd  believed provide speedup classical counterparts  some research groups recently explored use quantum annealing hardware training boltzmann machines deep neural networks     computational biology    in field computational biology  computing played big role solving many biological problems  one well-known examples would computational genomics computing drastically reduced time sequence human genome  given computational biology using generic data modeling storage  applications computational biology expected arise well     computer-aided drug design generative chemistry    deep generative chemistry models emerge powerful tools expedite drug discovery  however  immense size complexity structural space possible drug-like molecules pose significant obstacles  could overcome future quantum computers  quantum computers naturally good solving complex quantum many-body problems  thus may instrumental applications involving quantum chemistry   therefore  one expect quantum-enhanced generative models including quantum gans may eventually developed ultimate generative chemistry algorithms  hybrid architectures combining quantum computers deep classical networks  quantum variational autoencoders  already trained commercially available annealers used generate novel drug-like molecular structures     quantum supremacy    john preskill introduced term quantum supremacy refer hypothetical speedup advantage quantum computer would classical computer certain field  google announced      expected achieve quantum supremacy end year though happen  however  october      google  help nasa  achieved quantum supremacy  https   www nasa gov feature ames quantum-supremacy   ibm said      best classical computers beaten practical task within five years views quantum supremacy test potential future benchmark  although skeptics like gil kalai doubt quantum supremacy ever achieved  october       sycamore processor created conjunction google ai quantum reported achieved quantum supremacy  calculations           times fast summit  generally considered world fastest computer  in december       group ustc implemented type boson sampling    photons photonic quantum computer jiuzhang demonstrate quantum supremacy  the authors claim classical contemporary supercomputer would require computational time     million years generate number samples quantum processor generate    seconds  bill unruh doubted practicality quantum computers paper published back       paul davies argued    -qubit computer would even come conflict cosmological information bound implied holographic principle    obstacles   there number technical challenges building large-scale quantum computer  physicist david divincenzo listed requirements practical quantum computer physically scalable increase number qubitsqubits initialized arbitrary valuesquantum gates faster decoherence timeuniversal gate setqubits read easilysourcing parts quantum computers also difficult  many quantum computers  like constructed google ibm  need helium-   nuclear research byproduct  special superconducting cables made japanese company coax co the control multi-qubit systems requires generation coordination large number electrical signals tight deterministic timing resolution  this led development quantum controllers enable interfacing qubits  scaling systems support growing number qubits additional challenge     quantum decoherence    one greatest challenges involved constructing quantum computers controlling removing quantum decoherence  this usually means isolating system environment interactions external world cause system decohere  however  sources decoherence also exist  examples include quantum gates  lattice vibrations background thermonuclear spin physical system used implement qubits  decoherence irreversible  effectively non-unitary  usually something highly controlled  avoided  decoherence times candidate systems particular  transverse relaxation time t   nmr mri technology  also called dephasing time   typically range nanoseconds seconds low temperature  currently  quantum computers require qubits cooled    millikelvins order prevent significant decoherence  a      study argues ionizing radiation cosmic rays nevertheless cause certain systems decohere within milliseconds as result  time-consuming tasks may render quantum algorithms inoperable  maintaining state qubits long enough duration eventually corrupt superpositions these issues difficult optical approaches timescales orders magnitude shorter often-cited approach overcoming optical pulse shaping  error rates typically proportional ratio operating time decoherence time  hence operation must completed much quickly decoherence time as described quantum threshold theorem  error rate small enough  thought possible use quantum error correction suppress errors decoherence  this allows total calculation time longer decoherence time error correction scheme correct errors faster decoherence introduces them  an often cited figure required error rate gate fault-tolerant computation       assuming noise depolarizing meeting scalability condition possible wide range systems  however  use error correction brings cost greatly increased number required qubits  the number required factor integers using shor algorithm still polynomial  thought l l   l number digits number factored  error correction algorithms would inflate figure additional factor l  for     -bit number  implies need     bits without error correction  with error correction  figure would rise     bits  computation time l      steps   mhz     seconds a different approach stability-decoherence problem create topological quantum computer anyons  quasi-particles used threads relying braid theory form stable logic gates physicist mikhail dyakonov expressed skepticism quantum computing follows  so number continuous parameters describing state useful quantum computer given moment must be             could ever learn control       continuously variable parameters defining quantum state system  my answer simple  no  never     developments       quantum computing models    there number quantum computing models  distinguished basic elements computation decomposed  the four main models practical importance quantum gate array  computation decomposed sequence few-qubit quantum gates one-way quantum computer  computation decomposed sequence one-qubit measurements applied highly entangled initial state cluster state adiabatic quantum computer  based quantum annealing  computation decomposed slow continuous transformation initial hamiltonian final hamiltonian  whose ground states contain solution topological quantum computer  computation decomposed braiding anyons  d lattice the quantum turing machine theoretically important physical implementation model feasible  all four models computation shown equivalent  simulate polynomial overhead     physical realizations    for physically implementing quantum computer  many different candidates pursued  among  distinguished physical system used realize qubits  superconducting quantum computing  qubit implemented state small superconducting circuits  josephson junctions  trapped ion quantum computer  qubit implemented internal state trapped ions neutral atoms optical lattices  qubit implemented internal states neutral atoms trapped optical lattice quantum dot computer  spin-based  e g  loss-divincenzo quantum computer   qubit given spin states trapped electrons quantum dot computer  spatial-based  qubit given electron position double quantum dot quantum computing using engineered quantum wells  could principle enable construction quantum computers operate room temperaturecoupled quantum wire  qubit implemented pair quantum wires coupled quantum point contact nuclear magnetic resonance quantum computer  nmrqc  implemented nuclear magnetic resonance molecules solution  qubits provided nuclear spins within dissolved molecule probed radio wavessolid-state nmr kane quantum computers  qubit realized nuclear spin state phosphorus donors silicon electrons-on-helium quantum computers  qubit electron spin cavity quantum electrodynamics  cqed   qubit provided internal state trapped atoms coupled high-finesse cavities molecular magnet  qubit given spin states fullerene-based esr quantum computer  qubit based electronic spin atoms molecules encased fullerenes nonlinear optical quantum computer  qubits realized processing states different modes light linear nonlinear elements linear optical quantum computer  qubits realized processing states different modes light linear elements e g  mirrors  beam splitters phase shifters diamond-based quantum computer  qubit realized electronic nuclear spin nitrogen-vacancy centers diamond bose-einstein condensate-based quantum computertransistor-based quantum computer   string quantum computers entrainment positive holes using electrostatic traprare-earth-metal-ion-doped inorganic crystal based quantum computers  qubit realized internal electronic state dopants optical fibers metallic-like carbon nanospheres-based quantum computersthe large number candidates demonstrates quantum computing  despite rapid progress  still infancy    relation computability complexity theory       computability theory    any computational problem solvable classical computer also solvable quantum computer  intuitively  believed physical phenomena  including operation classical computers  described using quantum mechanics  underlies operation quantum computers conversely  problem solvable quantum computer also solvable classical computer  formally  quantum computer simulated turing machine  in words  quantum computers provide additional power classical computers terms computability  this means quantum computers cannot solve undecidable problems like halting problem existence quantum computers disprove church turing thesis as yet  quantum computers satisfy strong church thesis  while hypothetical machines realized  universal quantum computer yet physically constructed  the strong version church thesis requires physical computer  therefore quantum computer yet satisfies strong church thesis     quantum complexity theory    while quantum computers cannot solve problems classical computers cannot already solve  suspected solve certain problems faster classical computers  for instance  known quantum computers efficiently factor integers  believed case classical computers the class problems efficiently solved quantum computer bounded error called bqp   bounded error  quantum  polynomial time   more formally  bqp class problems solved polynomial-time quantum turing machine error probability      as class probabilistic problems  bqp quantum counterpart bpp   bounded error  probabilistic  polynomial time    class problems solved polynomial-time probabilistic turing machines bounded error  it known bpp                                     displaystyle  subseteq    bqp widely suspected bqp                                     displaystyle  subsetneq    bpp  intuitively would mean quantum computers powerful classical computers terms time complexity the exact relationship bqp p  np  pspace known  however  known p                                     displaystyle  subseteq    bqp                                     displaystyle  subseteq    pspace   problems efficiently solved deterministic classical computer also efficiently solved quantum computer  problems efficiently solved quantum computer also solved deterministic classical computer polynomial space resources  it suspected bqp strict superset p  meaning problems efficiently solvable quantum computers efficiently solvable deterministic classical computers  for instance  integer factorization discrete logarithm problem known bqp suspected outside p  on relationship bqp np  little known beyond fact np problems believed p also bqp  integer factorization discrete logarithm problem np  example   it suspected np                                     displaystyle  nsubseteq    bqp   believed efficiently checkable problems efficiently solvable quantum computer  as direct consequence belief  also suspected bqp disjoint class np-complete problems  np-complete problem bqp  would follow np-hardness problems np bqp  the relationship bqp basic classical complexity classes summarized follows                                           p                         b            p            p                         b            q            p                         p            p                         p            s            p            a            c            e                                  displaystyle   mathsf  p subseteq bpp subseteq bqp subseteq pp subseteq pspace     it also known bqp contained complexity class  p  precisely associated class decision problems p p   subclass pspace it speculated advances physics could lead even faster computers  for instance  shown non-local hidden variable quantum computer based bohmian mechanics could implement search                     n                displaystyle n   -item database                     o                                       n                                                                                  displaystyle o   sqrt      n       steps  slight speedup grover algorithm  runs                     o                                       n                                           displaystyle o   sqrt  n       steps  note  however  neither search method would allow quantum computers solve np-complete problems polynomial time  theories quantum gravity  m-theory loop quantum gravity  may allow even faster computers built  however  defining computation theories open problem due problem time   within physical theories currently obvious way describe means observer submit input computer one point time receive output later point time    see also      references      further reading       textbooks    nielsen  michael  chuang  isaac         quantum computation quantum information  cambridge  cambridge university press  isbn    - -   -     -   oclc           mermin  n  david         quantum computer science  an introduction  cambridge university press  isbn    - -   -     -  akama  seiki         elements quantum computing  history  theories engineering applications  springer international publishing  isbn    - -   -     -  benenti  giuliano         principles quantum computation information volume    new jersey  world scientific  isbn    -   -   -   -   oclc           stolze  joachim  suter  dieter         quantum computing  wiley-vch  isbn    - -   -     -  wichert  andreas         principles quantum artificial intelligence  world scientific publishing co  isbn    -   -    -  -  hiroshi  imai  masahito  hayashi         quantum computation information  berlin  springer  isbn    - -   -     -  jaeger  gregg         quantum information  an overview  berlin  springer  isbn    - -   -     -   oclc               academic papers    abbot  derek  doering  charles r   caves  carlton m   lidar  daniel m   brandt  howard e   hamilton  alexander r   ferry  david k   gea-banacloche  julio  bezrukov  sergey m   kish  laszlo b           dreams versus reality  plenary debate session quantum computing   quantum information processing                  arxiv quant-ph          doi         b qinp                   a  hdl                s cid          divincenzo  david p           the physical implementation quantum computation   fortschritte der physik                      arxiv quant-ph          bibcode     forph         d  doi             -                         aid-prop        co  -e berthiaume  andre          quantum computation  divincenzo  david p           quantum computation   science                       bibcode     sci           d  citeseerx                  doi         science               s cid            table   lists switching dephasing times various systems feynman  richard          simulating physics computers   international journal theoretical physics                     bibcode     ijtp          f  citeseerx                 doi         bf          s cid           mitchell  ian          computing power   st century  moore law beyond  simon  daniel r           on power quantum computation   institute electrical electronic engineers computer society press    external links   stanford encyclopedia philosophy   quantum computing  amit hagar michael e  cuffaro  quantum computation  theory   encyclopedia mathematics  ems press             quantum computing curious andy matuschak michael nielsenquantum computing made easy satalia bloglecturesquantum computing determined      video lectures michael nielsenvideo lectures david deutschlectures institut henri poincar   slides videos online lecture an introduction quantum computing  edward gerjuoy       lomonaco  sam  four lectures quantum computing given oxford university july     
quantum superposition fundamental principle quantum mechanics   it states  much like waves classical physics  two   quantum states added together   superposed   result another valid quantum state  conversely  every quantum state represented sum two distinct states   mathematically  refers property solutions schr dinger equation  since schr dinger equation linear  linear combination solutions also solution an example physically observable manifestation wave nature quantum systems interference peaks electron beam double-slit experiment  the pattern similar one obtained diffraction classical waves another example quantum logical qubit state  used quantum information processing  quantum superposition  basis states                                                                           displaystyle    rangle                                                                              displaystyle    rangle     here                                                                          displaystyle    rangle     dirac notation quantum state always give result   converted classical logic measurement  likewise                                                                          displaystyle    rangle     state always convert    contrary classical bit state corresponding   state corresponding    qubit may superposition states   this means probabilities measuring     qubit general neither          multiple measurements made qubits identical states always give result    concept   the principle quantum superposition states physical system may one many configurations arrangements particles fields general state combination possibilities  amount configuration specified complex number for example  two configurations labelled      general state would                              c                                                                                                                 c                                                                                                      displaystyle c      mid    rangle  c      mid    rangle    coefficients complex numbers describing much goes configuration the principle described paul dirac follows the general principle superposition quantum mechanics applies states  theoretically possible without mutual interference contradiction      one dynamical system  it requires us assume states exist peculiar relationships whenever system definitely one state consider partly two states  the original state must regarded result kind superposition two new states  way cannot conceived classical ideas  any state may considered result superposition two states  indeed infinite number ways  conversely  two states may superposed give new state   the non-classical nature superposition process brought clearly consider superposition two states  a b  exists observation  made system state a  certain lead one particular result  say  made system state b certain lead different result  b say  what result observation made system superposed state  the answer result sometimes sometimes b  according probability law depending relative weights a b superposition process  it never different b  i e   either b   the intermediate character state formed superposition thus expresses probability particular result observation intermediate corresponding probabilities original states  result intermediate corresponding results original states anton zeilinger  referring prototypical example double-slit experiment  elaborated regarding creation destruction quantum superposition   t superposition amplitudes     valid way know  even principle  path particle took  it important realize imply observer actually takes note happens  it sufficient destroy interference pattern  path information accessible principle experiment even dispersed environment beyond technical possibility recovered  principle still   there    the absence information essential criterion quantum interference appear    theory       examples    for equation describing physical phenomenon  superposition principle states combination solutions linear equation also solution it  when true equation said obey superposition principle  thus  state vectors f   f  f  solve linear equation        c  f    c  f    c  f  would also solution  c coefficient  the schr dinger equation linear  quantum mechanics follows this for example  consider electron two possible configurations  down  this describes physical system qubit                               c                                                                                                                                   c                                                                                                                        displaystyle c      mid    uparrow   rangle  c      mid    downarrow   rangle    general state  but coefficients dictate probabilities system either configuration  the probability specified configuration given square absolute value coefficient  so probabilities add    the electron one two states sure                               p                                                                                             c                                                                                                                                           displaystyle p   text     mid  c      mid                                       p                                                                                             c                                                                                                                     displaystyle p   text     mid  c     mid                                      p                                                                  p                                                                  p                                                                         displaystyle p   text   p   text   p   text       continuing example  if particle state    also state amount    amount     down                                                                                                                                                                                                                                                                                                                                                                      displaystyle   psi  rangle         mid    uparrow   rangle          mid    downarrow   rangle     in  probability                                                                                                                                                                                                                                                                                                                                             displaystyle  left   frac        right        frac              the probability                                                                                                                                                                                                                                                                                           displaystyle  left   frac         right        frac               note                                                                                                                                                                                       displaystyle   frac            frac                in description  relative size different components matter  angle complex plane  this usually stated declaring two states multiple one another far description situation concerned  either describe state nonzero                                      displaystyle  alpha                                                                                                                                            displaystyle   psi  rangle  approx  alpha   psi  rangle    the fundamental law quantum mechanics evolution linear  meaning state a turns a  b turns b     seconds     seconds superposition                                      displaystyle  psi     turns mixture a  b  coefficients a b for example  following                                                                                                                                                                   displaystyle   mid    uparrow   rangle    mid    downarrow   rangle                                                                                                                                                                                                                                                                                                                                                                                                                  displaystyle   mid    downarrow   rangle    frac         mid    uparrow   rangle    frac          mid    downarrow   rangle    then    seconds state change                              c                                                                                                                                   c                                                                                                                                   c                                                                                                                                                                                                                         cdisplaystyle c      mid    uparrow   rangle  c      mid    downarrow   rangle  c     left   mid    downarrow   rangle  right  c     left   frac         mid    uparrow   rangle    frac          mid    downarrow   rangle  right    so far   configurations  infinitely many  in illustration  particle position  different configurations value position x  these written                                                x                         displaystyle  x rangle    the principle superposition guarantees states arbitrary superpositions positions complex coefficients                                                      x                                            x                                            x                         displaystyle  sum   x  psi  x  x rangle    this sum defined index x discrete  if index                               r                        displaystyle  mathbb  r       sum replaced integral  the quantity                                       x                         displaystyle  psi  x     called wavefunction particle if consider qubit position spin  state superposition possibilities                                                      x                                                                                               x                                            x                                                                                                                                   x                                            x                                                                     displaystyle  sum   x  psi      x  x   uparrow   rangle   psi   -  x  x   downarrow   rangle      the configuration space quantum mechanical system cannot worked without physical knowledge  the input usually allowed different classical configurations  without duplication including position momentum a pair particles combination pairs positions  a state one particle position x position written                                                x                                         displaystyle  x rangle      the general state superposition possibilities                                                      x                                     a                 x                                                            x                                                 displaystyle  sum   xy a x  x rangle      the description two particles much larger description one particle function twice number dimensions  this also true probability  statistics two random variables correlated  if two particles uncorrelated  probability distribution joint position p x   product probability finding one one position other position                     p                 x                                                    p                      x                                   x                           p                                                                                        displaystyle p x  p  x  x p        this means wave function                     a                 x                                         displaystyle a x     system represented product wave functions                                                      x                                   x                         displaystyle  psi   x  x                                                                                                                    displaystyle  psi         parts                     a                 x                                                                           x                                   x                                                                                                                    displaystyle a x   psi   x  x  psi          in       heitler london  attempted quantitatively mechanically calculate ground steady state h  molecule   the calculations based quantum superposition two hydrogen atoms make system - h  molecule  the success attempt became basis development covalent bond     analogy probability    in probability theory similar principle  if system probabilistic description  description gives probability configuration  given two different configurations  state partly partly  positive real number coefficients  probabilities  say much is for example  probability distribution particle  described  state                                                      x                                            x                                            x                         displaystyle  sum   x  rho  x  x rangle    where                                      displaystyle  rho     probability density function  positive number measures probability particle found certain location the evolution equation also linear probability  fundamental reasons  if particle probability going position x  z  probability going starting state half-x half-z half-and-half mixture probability going options  this principle linear superposition probability quantum mechanics different  numbers positive negative  while complex nature numbers doubling  consider real imaginary parts separately  sign coefficients important  in probability  two different possible outcomes always add together  options get point z  probability always goes up  in quantum mechanics  different possibilities cancel in probability theory finite number states  probabilities always multiplied positive number make sum equal one  for example  three state probability system                     x                                                                                                                           z                                                                     displaystyle x   rangle    rangle  z   rangle      probabilities                     x                                 z                displaystyle x z    positive numbers  rescaling x z                    x                                 z                                          displaystyle x z       the geometry state space revealed triangle  in general simplex  there special points triangle simplex corresponding corners  points one probabilities equal   others zero  these unique locations position known certainty in quantum mechanical system three states  quantum mechanical wavefunction superposition states  time twice many quantities restriction sign                     a                                                              b                                                              c                                                                                 a                      r                                                    a                                                                                                                                 b                      r                                                    b                                                                                                                                 c                      r                                                    c                                                                                                                     displaystyle a   rangle  b   rangle  c   rangle   a  r  ia      rangle   b  r  ib      rangle   c  r  ic      rangle      rescaling variables sum squares    geometry space revealed high-dimensional sphere                              a                      r                                                                              a                                                                                                   b                      r                                                                              b                                                                                                   c                      r                                                                              c                                                                                                                  displaystyle a  r      a       b  r      b       c  r      c              a sphere large amount symmetry  viewed different coordinate systems bases  so unlike probability theory  quantum theory large number different bases equally well described  the geometry phase space viewed hint quantity quantum mechanics corresponds probability absolute square coefficient superposition     hamiltonian evolution    the numbers describe amplitudes different possibilities define kinematics  space different states  the dynamics describes numbers change time  for particle one infinitely many discrete positions  particle lattice  superposition principle tells make state                                                      n                                                           n                                                     n                                 displaystyle  sum   n  psi   n  n rangle      so infinite list amplitudes                                                                                                                                                                                                                                                                                                                                                                                                                                                             textstyle   ldots   psi   -    psi   -    psi       psi       psi       ldots      completely describes quantum state particle  this list called state vector  formally element hilbert space  infinite-dimensional complex vector space  it usual represent state sum absolute squares amplitudes one                                                               n                                                                                            n                                                    displaystyle  sum  psi   n      psi   n      for particle described probability theory random walking line  analogous thing list probabilities                                                          p                                                                                 p                                                                                 p                                                                    p                                                                    p                                                                                    textstyle   ldots  p  -   p  -   p     p     p      ldots       give probability position  the quantities describe change time transition probabilities                                           k                          x                                                                                                         displaystyle  scriptstyle k  x rightarrow       gives probability  starting x  particle ends time later  the total probability ending given sum possibilities                              p                                                                                                                                                                                     x                                    p                      x                                                                                                                k                      x                                                                                           displaystyle p         sum   x p  x      k  x rightarrow       the condition conservation probability states starting x  total probability end somewhere must add                                                                                           k                      x                                                                                    displaystyle  sum   k  x rightarrow        so total probability preserved  k is called stochastic matrix when time passes  nothing changes    elapsed time                               k                      x                                                                                                                               x                                                           displaystyle  scriptstyle k x rightarrow      delta   xy      k matrix zero except state itself  so case time short  better talk rate change probability instead absolute change probability                               p                                                                                                                  p                                                                                                                                        x                                    p                      x                                    r                      x                                                                  displaystyle p   dt  p    dt   sum   x p  x r  x rightarrow                                                r                          x                                                                          displaystyle  scriptstyle r  x rightarrow     time derivative k matrix                               r                      x                                                                                                               k                                  x                                                                                                                                                                                          x                                                                                                                                                                displaystyle r  x rightarrow   k  x rightarrow   dt- delta   xy   dt       the equation probabilities differential equation sometimes called master equation                                                                                      p                                                                                                                                                                                                 x                                    p                      x                                    r                      x                                                                  displaystyle  dp    dt   sum   x p  x r  x rightarrow      the r matrix probability per unit time particle make transition x y  the condition k matrix elements add one becomes condition r matrix elements add zero                                                                                         r                      x                                                                                    displaystyle  sum   r  x rightarrow        one simple case study r matrix equal probability go one unit left right  describing particle constant rate random walking  in case                                           r                          x                                                                          displaystyle  scriptstyle r  x rightarrow     zero unless either x      x  x      x     x      r matrix value c  order sum r matrix coefficients equal zero  value                               r                      x                         x                                  displaystyle r  x rightarrow x     must   c  so probabilities obey discretized diffusion equation                                                                                      p                                  x                                                                                                                               c                           p                      x                                                                                p                      x                                             p                      x                                                                             displaystyle  dp  x   dt  c p  x   - p  x  p  x-         c scaled appropriately p distribution smooth enough think system continuum limit becomes                                                                        p                             x                                                                                                                                              c                                                                                                                                            p                                                                     x                                                                                                                       displaystyle   partial p x    partial  c  partial     p   partial x          which diffusion equation quantum amplitudes give rate amplitudes change time  mathematically exactly except complex numbers  the analog finite time k matrix called u matrix                                                      n                                                                                                                                u                      n                                                                                                                                        displaystyle  psi   n    sum   u  nm   psi        since sum absolute squares amplitudes must constant                      u                displaystyle u    must unitary                                                      n                                    u                      n                                                                                u                      n            p                                                                               p                                          displaystyle  sum   n u  nm     u  np   delta   mp       matrix notation                               u                                                 u                 i                        displaystyle u   dagger  u i     the rate change u called hamiltonian h  traditional factor                               h                                 n                                                                                                                                                     u                                 n                                  displaystyle h  mn   dt u  mn    the hamiltonian gives rate particle amplitude go n  the reason multiplied condition u unitary translates condition                              i                                  h                                                                                         i                        h                                                i                displaystyle  i ih   dagger    dt  i-ih  dt  i                                 h                                                          h                                          displaystyle h   dagger  -h       says h hermitian  the eigenvalues hermitian matrix h real quantities  physical interpretation energy levels  if factor absent  h matrix would antihermitian would purely imaginary eigenvalues  traditional way quantum mechanics represents observable quantities like energy for particle equal amplitude move left right  hermitian matrix h zero except nearest neighbors  value c  if coefficient everywhere constant  condition h hermitian demands amplitude move left complex conjugate amplitude move right  the equation motion                                      displaystyle  psi     time differential equation                                                                                                                                n                                                                                                                                         c                                                                                  n                                                             c                                         n                                                            displaystyle psi   n   dt  c     psi   n    c psi   n-     in case left right symmetric  c real  by redefining phase wavefunction time                                                           e                                              c                                             displaystyle  psi  rightarrow  psi e  ct      amplitudes different locations rescaled  physical situation unchanged  but phase rotation introduces linear term                                                                                                                                n                                                                                                                               c                                         n                                                                      c                                         n                                   c                                         n                                                                     displaystyle psi   n   dt  c psi   n   - c psi   n  c psi   n-      right choice phase take continuum limit  when                     c                displaystyle c    large                                      displaystyle  psi     slowly varying lattice thought line  becomes free schr dinger equation                                                                                                                                                                                                                                                                                                                                                                                                      x                                                                                                               displaystyle  partial  psi    partial  -  partial      psi    partial x        if additional term h matrix extra phase rotation varies point point  continuum limit schr dinger equation potential energy                                                                                                                                                                                                                                                                                                                                                                                                      x                                                                                                                v                 x                                  displaystyle  partial  psi    partial  -  partial      psi    partial x      v x  psi    these equations describe motion single particle non-relativistic quantum mechanics     quantum mechanics imaginary time    the analogy quantum mechanics probability strong  many mathematical links them  in statistical system discrete time         described transition matrix one time step                                           k                                                      n                                              displaystyle  scriptstyle k  rightarrow n      probability go two points finite number time steps represented sum paths probability taking path                               k                      x                                                           t                                                           x                                                                                                                                   k                      x                                                 x                                                                                                         displaystyle k  x rightarrow  t   sum   x   prod   k  x x         sum extends paths                     x                                         displaystyle x     property                     x                                                             displaystyle x                             x                 t                                         displaystyle x t      the analogous expression quantum mechanics path integral a generic transition matrix probability stationary distribution  eventual probability found point matter starting point  if nonzero probability two paths reach point time  stationary distribution depend initial conditions  in probability theory  probability stochastic matrix obeys detailed balance stationary distribution                                                      n                                  displaystyle  rho   n     property                                                      n                                    k                      n                                                                                                                               k                                              n                                          displaystyle  rho   n k  n rightarrow   rho   k  rightarrow n      detailed balance says total probability going n stationary distribution  probability starting                                                                                       displaystyle  rho       times probability hopping n  equal probability going n  total back-and-forth flow probability equilibrium zero along hop  the condition automatically satisfied n  form written condition transition-probability r matrix                                                      n                                    r                      n                                                                                                                               r                                              n                                          displaystyle  rho   n r  n rightarrow   rho   r  rightarrow n      when r matrix obeys detailed balance  scale probabilities redefined using stationary distribution longer sum                                 p                      n                                                                                                                 n                                                                      p                      n                                          displaystyle p   n    sqrt   rho   n     p  n      in new coordinates  r matrix rescaled follows                                                                                        n                                                              r                      n                                                                                                                                                                                                                                                                                    h                      n                                                     displaystyle   sqrt   rho   n   r  n rightarrow       sqrt   rho       h  nm      h symmetric                              h                      n                                                        h                                 n                                          displaystyle h  nm  h  mn      this matrix h defines quantum mechanical system                                                                                                                                                              n                                                      h                      n                                                                                                               displaystyle  dt  psi   n   sum h  nm  psi        whose hamiltonian eigenvalues r matrix statistical system  the eigenvectors  except expressed rescaled basis  the stationary distribution statistical system ground state hamiltonian energy exactly zero  energies positive  if h exponentiated find u matrix                     u                                                    e                                              h                                                     displaystyle u  e  -iht      allowed take complex values  k  matrix found taking time imaginary                               k                                                                       e                                   h                                                     displaystyle k   e  -ht      for quantum systems invariant time reversal hamiltonian made real symmetric  action time-reversal wave-function complex conjugation  if hamiltonian unique lowest energy state positive real wave-function  often physical reasons  connected stochastic system imaginary time  this relationship stochastic systems quantum systems sheds much light supersymmetry    experiments applications   successful experiments involving superpositions relatively large  standards quantum physics  objects performed a  cat state  achieved photons a beryllium ion trapped superposed state a double slit experiment performed molecules large buckyballs a      experiment superposed molecules containing        protons  neutrons electrons  the molecules compounds selected good thermal stability  evaporated beam temperature     k  the beam prepared highly purified chemical substances  still contained mixture different molecular species  each species molecule interfered  verified mass spectrometry an experiment involving superconducting quantum interference device   squid   linked theme  cat state  thought experiment by use low temperatures  fine experimental arrangements made protect near isolation preserve coherence intermediate states  duration time  preparation detection  squid currents  such squid current coherent physical assembly perhaps billions electrons  because coherence  assembly may regarded exhibiting  collective states  macroscopic quantal entity  for principle superposition  prepared detected  may regarded exhibiting intermediate state  it single-particle state often considered discussions interference  example dirac famous dictum stated above  moreover  though  intermediate  state may loosely regarded  produced output secondary quantum analyser fed pure state primary analyser  example superposition strictly narrowly defined nevertheless  preparation  measurement  squid state may regarded manner speaking  pure  state superposition clockwise anti-clockwise current state   in squid  collective electron states physically prepared near isolation  low temperatures  result protected coherent intermediate states  what remarkable two well-separated self-coherent collective states exhibit metastability  the crowd electrons tunnels back forth clockwise anti-clockwise states  opposed forming single intermediate state definite collective sense current flow an experiment involving flu virus proposed a piezoelectric  tuning fork  constructed  placed superposition vibrating non-vibrating states  the resonator comprises    trillion atoms recent research indicates chlorophyll within plants appears exploit feature quantum superposition achieve greater efficiency transporting energy  allowing pigment proteins spaced apart would otherwise possible an experiment proposed  bacterial cell cooled    mk  using electromechanical oscillator  at temperature  metabolism would stopped  cell might behave virtually definite chemical species  for detection interference  would necessary cells supplied large numbers pure samples identical detectably recognizable virtual chemical species  it known whether requirement met bacterial cells  they would state suspended animation experiment in quantum computing phrase  cat state  often refers ghz state  special entanglement qubits wherein qubits equal superposition      i e                                                                                                                                                                                                                                                                                                                                                                                                                                displaystyle   psi  rangle    frac      sqrt        bigg       ldots   rangle      ldots   rangle   bigg          formal interpretation   applying superposition principle quantum mechanical particle  configurations particle positions  superpositions make complex wave space  the coefficients linear superposition wave describes particle best possible  whose amplitude interferes according huygens principle for physical property quantum mechanics  list states property value  these states necessarily perpendicular using euclidean notion perpendicularity comes sums-of-squares length  except also must multiples other  this list perpendicular states associated value value physical property  the superposition principle guarantees state written combination states form complex coefficients write state value q physical quantity vector basis                                                      n                                q                                  displaystyle  psi   n   q      list numbers value n vector value q physical quantity  now form outer product vectors multiplying vector components add coefficients make matrix                              a                      n                                                                               q                          q                                         n                                             q                                                                                          q                                  displaystyle a  nm   sum   q q psi   n    q  psi     q    sum extends possible values q  this matrix necessarily symmetric formed orthogonal states  eigenvalues q  the matrix a called observable associated physical quantity  it property eigenvalues eigenvectors determine physical quantity states definite values quantity every physical quantity hermitian linear operator associated  states value physical quantity definite eigenstates linear operator  the linear combination two eigenstates results quantum superposition two values quantity  if quantity measured  value physical quantity random  probability equal square coefficient superposition linear combination  immediately measurement  state given eigenvector corresponding measured eigenvalue    physical interpretation   it natural ask ordinary everyday objects events   seem display quantum mechanical features superposition  indeed  sometimes regarded  mysterious   instance richard feynman  in       erwin schr dinger devised well-known thought experiment  known schr dinger cat  highlighted dissonance quantum mechanics classical physics   one modern view mystery explained quantum decoherence   a macroscopic system  cat  may evolve time superposition classically distinct quantum states   alive   dead    the mechanism achieves subject significant research  one mechanism suggests state cat entangled state environment  instance  molecules atmosphere surrounding   averaged possible quantum states environment  physically reasonable procedure unless quantum state environment controlled measured precisely  resulting mixed quantum state cat close classical probabilistic state cat definite probability dead alive  classical observer would expect situation  another proposed class theories fundamental time evolution equation incomplete  requires addition type fundamental lindbladian  reason addition form additional term varies theory theory  a popular theory continuous spontaneous localization  lindblad term proportional spatial separation states  results quasi-classical probabilistic state    see also      references       bibliography cited references    bohr  n               the quantum postulate recent development atomic theory  nature supplement    april                    cohen-tannoudji  c   diu  b   lalo   f               quantum mechanics  translated french s  r  hemley  n  ostrowsky  d  ostrowsky  second edition  volume    wiley  new york  isbn            dirac  p  a  m               the principles quantum mechanics   th edition  oxford university press einstein  a          remarks concerning essays brought together co-operative volume  translated original german editor  pp          schilpp  p  a  editor         albert einstein  philosopher-scientist  volume ii  open court  la salle il feynman  r  p   leighton  r b   sands  m          the feynman lectures physics  volume    addison-wesley  reading  ma merzbacher  e               quantum mechanics  second edition  wiley  new york messiah  a          quantum mechanics  volume    translated g m  temmer french m canique quantique  north-holland  amsterdam wheeler  j  a   zurek  w h          quantum theory measurement  princeton nj  princeton university press 
the history computer science began long modern discipline computer science  usually appearing forms like mathematics physics  developments previous centuries alluded discipline know computer science  this progression  mechanical inventions mathematical theories towards modern computer concepts machines  led development major academic field  massive technological advancement across western world  basis massive worldwide trade culture    prehistory   the earliest known tool use computation abacus  developed period           bce sumer  the sumerians  abacus consisted table successive columns delimited successive orders magnitude sexagesimal number system       its original style usage lines drawn sand pebbles  abaci modern design still used calculation tools today  chinese abacus in  th century bc ancient india  grammarian p  ini formulated grammar sanskrit      rules known ashtadhyayi highly systematized technical  panini used metarules  transformations recursions the antikythera mechanism believed early mechanical analog computer   it designed calculate astronomical positions  it discovered      antikythera wreck greek island antikythera  kythera crete  dated circa     bc mechanical analog computer devices appeared thousand years later medieval islamic world developed muslim astronomers  mechanical geared astrolabe ab  rayh n al-b r n   torquetum jabir ibn aflah  according simon singh  muslim mathematicians also made important advances cryptography  development cryptanalysis frequency analysis alkindus  programmable machines also invented muslim engineers  automatic flute player ban  m  brothers  al-jazari programmable humanoid automata castle clock  considered first programmable analog computer  technological artifacts similar complexity appeared   th century europe  mechanical astronomical clocks when john napier discovered logarithms computational purposes early   th century  followed period considerable progress inventors scientists making calculating tools  in      wilhelm schickard designed calculating machine  abandoned project  prototype started building destroyed fire       around       blaise pascal  leading french mathematician  constructed mechanical adding device based design described greek mathematician hero alexandria  then      gottfried wilhelm leibniz invented stepped reckoner completed      in      charles babbage first described analytical engine accepted first design modern computer  the analytical engine expandable memory  arithmetic unit  logic processing capabilities able interpret programming language loops conditional branching  although never built  design studied extensively understood turing equivalent  the analytical engine would memory capacity less   kilobyte memory clock speed less    hertz considerable advancement mathematics electronics theory required first modern computers could designed    binary logic   in       gottfried wilhelm leibniz developed logic formal  mathematical sense writings binary numeral system  in system  ones zeros also represent true false values states  but took century george boole published boolean algebra      complete system allowed computational processes mathematically modeled by time  first mechanical devices driven binary pattern invented  the industrial revolution driven forward mechanization many tasks  included weaving  punched cards controlled joseph marie jacquard loom       hole punched card indicated binary one unpunched spot indicated binary zero  jacquard loom far computer  illustrate machines could driven binary systems    emergence discipline       charles babbage ada lovelace    charles babbage often regarded one first pioneers computing  beginning      babbage vision mechanically computing numbers tables  putting reality  babbage designed calculator compute numbers   decimal points long  continuing success idea  babbage worked develop machine could compute numbers    decimal places  by      babbage devised plan develop machine could use punched cards perform arithmetical operations  the machine would store numbers memory units  would form sequential control   this means one operation would carried another way machine would produce answer fail  this machine known  analytical engine   first true representation modern computer ada lovelace  augusta ada byron  credited pioneer computer programming regarded mathematical genius  lovelace began working charles babbage assistant babbage working  analytical engine   first mechanical computer  during work babbage  ada lovelace became designer first computer algorithm  ability compute bernoulli numbers  moreover  lovelace work babbage resulted prediction future computers perform mathematical calculations  also manipulate symbols  mathematical not  while never able see results work   analytical engine  created lifetime  efforts later years  beginning      go unnoticed     charles sanders peirce electrical switching circuits    in      letter  charles sanders peirce described logical operations could carried electrical switching circuits  during         showed nor gates alone  alternatively nand gates alone  used reproduce functions logic gates  work unpublished       the first published proof henry m  sheffer       nand logical operation sometimes called sheffer stroke  logical nor sometimes called peirce arrow  consequently  gates sometimes called universal logic gates eventually  vacuum tubes replaced relays logic operations  lee de forest modification        fleming valve used logic gate  ludwig wittgenstein introduced version   -row truth table proposition       tractatus logico-philosophicus         walther bothe  inventor coincidence circuit  got part      nobel prize physics  first modern electronic and gate       konrad zuse designed built electromechanical logic gates computer z              up      electrical engineers able build electronic circuits solve mathematical logic problems  ad hoc manner  lacking theoretical rigor   this changed switching circuit theory     s  from            akira nakashima  claude shannon  viktor shetakov published series papers showing two-valued boolean algebra  describe operation switching circuits  this concept  utilizing properties electrical switches logic  basic concept underlies electronic digital computers  switching circuit theory provided mathematical foundations tools digital system design almost areas modern technology while taking undergraduate philosophy class  shannon exposed boole work  recognized could used arrange electromechanical relays  used telephone routing switches  solve logic problems  his thesis became foundation practical digital circuit design became widely known among electrical engineering community world war ii     alan turing turing machine    before      computers  sometimes computors  human clerks performed computations  they usually lead physicist  many thousands computers employed commerce  government  research establishments  many clerks served human computers women  some performed astronomical calculations calendars  others ballistic tables military after      expression computing machine referred machine performed work human computer  especially accordance effective methods church-turing thesis  the thesis states mathematical method effective could set list instructions able followed human clerk paper pencil  long necessary  without ingenuity insight machines computed continuous values became known analog kind  they used machinery represented continuous numeric quantities  like angle shaft rotation difference electrical potential digital machinery  contrast analog  able render state numeric value store individual digit  digital machinery used difference engines relays invention faster memory devices the phrase computing machine gradually gave way  late      computer onset electronic digital machinery became common  these computers able perform calculations performed previous human clerks since values stored digital machines bound physical properties like analog devices  logical computer  based digital equipment  able anything could described  purely mechanical   the theoretical turing machine  created alan turing  hypothetical device theorized order study properties hardware the mathematical foundations modern computer science began laid kurt g del incompleteness theorem         in theorem  showed limits could proved disproved within formal system  this led work g del others define describe formal systems  including concepts mu-recursive functions lambda-definable functions in       alan turing alonzo church independently  also together  introduced formalization algorithm  limits computed   purely mechanical  model computing  this became church turing thesis  hypothesis nature mechanical calculation devices  electronic computers  the thesis states calculation possible performed algorithm running computer  provided sufficient time storage space available in       alan turing also published seminal work turing machines  abstract digital computing machine simply referred universal turing machine  this machine invented principle modern computer birthplace stored program concept almost modern day computers use  these hypothetical machines designed formally determine  mathematically  computed  taking account limitations computing ability  if turing machine complete task  considered turing computable the los alamos physicist stanley frankel  described john von neumann view fundamental importance turing      paper  letter  i know          von neumann well aware fundamental importance turing paper       von neumann introduced paper urging i studied care  many people acclaimed von neumann  father computer   modern sense term  i sure would never made mistake himself  he might well called midwife  perhaps  firmly emphasized  others i sure  fundamental conception owing turing       early computer hardware    the world first electronic digital computer  atanasoff berry computer  built iowa state campus           john v  atanasoff  professor physics mathematics  clifford berry  engineering graduate student in       konrad zuse developed world first functional program-controlled computer  z   in       shown turing-complete principle  zuse also developed s  computing machine  considered first process control computer  he founded one earliest computer businesses       producing z   became world first commercial computer   in       designed first high-level programming language  plankalk l in       manchester baby completed  world first electronic digital computer ran programs stored memory  like almost modern computers  the influence max newman turing seminal      paper turing machines logico-mathematical contributions project  crucial successful development baby in       britain national physical laboratory completed pilot ace  small scale programmable computer  based turing philosophy  with operating speed   mhz  pilot model ace time fastest computer world  turing design ace much common today risc architectures called high-speed memory roughly capacity early macintosh computer  enormous standards day  had turing ace built planned full  would different league early computers the first actual computer bug moth  it stuck relays harvard mark ii while invention term  bug  often erroneously attributed grace hopper  future rear admiral u s  navy  supposedly logged  bug  september          accounts conflict least details  according accounts  actual date september         operators filed  incident    along insect notation  first actual case bug found   see software bug details      shannon information theory    claude shannon went found field information theory      paper titled a mathematical theory communication  applied probability theory problem best encode information sender wants transmit   this work one theoretical foundations many areas study  including data compression cryptography     wiener cybernetics    from experiments anti-aircraft systems interpreted radar images detect enemy planes  norbert wiener coined term cybernetics greek word  steersman   he published  cybernetics        influenced artificial intelligence  wiener also compared computation  computing machinery  memory devices  cognitive similarities analysis brain waves     john von neumann von neumann architecture    in       model computer architecture introduced became known von neumann architecture  since       von neumann model provided uniformity subsequent computer designs  the von neumann architecture considered innovative introduced idea allowing machine instructions data share memory space   the von neumann model composed three major parts  arithmetic logic unit  alu   memory  instruction processing unit  ipu   in von neumann machine design  ipu passes addresses memory  memory  turn  routed either back ipu instruction fetched alu data fetched von neumann machine design uses risc  reduced instruction set computing  architecture  means instruction set uses total    instructions perform tasks   this contrast cisc  complex instruction set computing  instruction sets instructions choose    with von neumann architecture  main memory along accumulator  register holds result logical operations  two memories addressed  operations carried simple arithmetic  performed alu include addition  subtraction  multiplication division   conditional branches  commonly seen statements loops  the branches serve go statements   logical moves different components machine  i e   move accumulator memory vice versa  von neumann architecture accepts fractions instructions data types  finally  von neumann architecture simple one  register management also simple  the architecture uses set seven registers manipulate interpret fetched data instructions  these registers include  ir   instruction register    ibr   instruction buffer register    mq   multiplier quotient register    mar   memory address register    mdr   memory data register     the architecture also uses program counter   pc   keep track program machine is     john mccarthy  marvin minsky artificial intelligence    the term artificial intelligence credited john mccarthy explain research proposal dartmouth summer research  the naming artificial intelligence also led birth new field computer science  on august           research project proposed consisting john mccarthy  marvin l  minsky  nathaniel rochester  claude e  shannon  the official project began      consisted several significant parts felt would help better understand artificial intelligence makeup mccarthy colleagues  ideas behind automatic computers machine capable completing task  confirmed computer compiling program perform desired results  they also discovered human brain complex replicate  machine program  the knowledge produce program sophisticated yet the concept behind looking humans understand language structure form sentences  giving different meaning rule sets comparing machine process  the way computers understand hardware level  this language written binary       this written specific format gives computer ruleset run particular hardware piece minsky process determined artificial neural networks could arranged similar qualities human brain  however  could produce partial results needed research idea mccarthy shannon idea behind theory develop way use complex problems determine measure machine efficiency mathematical theory computations  however  receive partial test results the idea behind self-improvement machine would use self-modifying code make smarter  this would allow machine grow intelligence increase calculation speeds  the group believed could study machine could improve upon process completing task abstractions part research the group thought research category could broken smaller groups  this would consist sensory forms information artificial intelligence  abstractions computer science refer mathematics programing language their idea computational creativity program machine seen similar ways human thinking  they wanted see machine could take piece incomplete information improve upon fill missing details human mind do  if machine could  needed think machine determine outcome    see also   computer museumlist computer term etymologies  origins computer science wordslist pioneers computer sciencehistory computinghistory computing hardwarehistory softwarehistory personal computerstimeline algorithmstimeline women computingtimeline computing             references       sources    evans  claire l          broad band  the untold story women who made internet  new york  portfolio penguin  isbn               grier  david alan         when computers were human  princeton  princeton university press  isbn                 via project muse    further reading   tedre  matti         the science computing  shaping discipline  taylor francis   crc press  isbn    - -    -    -  kak  subhash   computing science ancient india  munshiram manoharlal publishers pvt  ltd       the development computer science  a sociocultural perspective matti tedre ph d  thesis  university joensuu       ceruzzi  paul e          a history modern computing  the mit press  isbn    - -   -     -  copeland  b  jack   the modern history computing    in zalta  edward n   ed    stanford encyclopedia philosophy    external links   computer history museumcomputers  from past presentthe first  computer bug  naval history heritage command photo archives bitsavers  effort capture  salvage  archive historical computer software manuals minicomputers mainframes                    soral history interviews
this article presents list individuals made transformative breakthroughs creation  development imagining computers could do    pioneers   to put list chronological order  click small  up-down  icon date column  the person column also sorted alphabetically  up-down   items marked tilde circa dates    see also   computer pioneer awardieee john von neumann medalgrace murray hopper awardlist computer science awardslist computer scientistslist internet pioneerslist people considered father mother field   computinglist russian it developerslist women technology international hall fame inducteesthe man who invented computer       book timeline computingturing awardwomen computing   references       sources    hamming  richard w           error detecting error correcting codes   pdf   bell system technical journal                   doi         j     -          tb      x  mr          archived original  pdf      -  -   ling  san  xing  chaoping         coding theory  first course  cambridge  cambridge university press  isbn    - -   -     -  pless  vera         introduction theory error-correcting codes  new york  wiley  isbn    - -   -     -  morgan  samuel p   september         richard wesley hamming               pdf   notices ams                   issn     -      retrieved     -  -      external links   pioneers computing virtual museum computinginternet pioneers
a teacher  also called schoolteacher formally educator  person helps students acquire knowledge  competence virtue informally role teacher may taken anyone  e g  showing colleague perform specific task   in countries  teaching young people school age may carried informal setting  within family  homeschooling   rather formal setting school college  some professions may involve significant amount teaching  e g  youth worker  pastor  in countries  formal teaching students usually carried paid professional teachers  this article focuses employed  main role  teach others formal education context  school place initial formal education training    duties functions   a teacher role may vary among cultures teachers may provide instruction literacy numeracy  craftsmanship vocational training  arts  religion  civics  community roles  life skills formal teaching tasks include preparing lessons according agreed curricula  giving lessons  assessing pupil progress a teacher professional duties may extend beyond formal teaching  outside classroom teachers may accompany students field trips  supervise study halls  help organization school functions  serve supervisors extracurricular activities  in education systems  teachers may responsible student discipline    competences qualities required teachers   teaching highly complex activity this partially teaching social practice  takes place specific context  time  place  culture  socio-political-economic situation etc   therefore shaped values specific context  factors influence expected  required  teachers include history tradition  social views purpose education  accepted theories learning  etc     competences    the competences required teacher affected different ways role understood around world  broadly  seem four models  teacher manager instruction teacher caring person teacher expert learner  andthe teacher cultural civic person the organisation economic co-operation development argued necessary develop shared definition skills knowledge required teachers  order guide teachers  career-long education professional development  some evidence-based international discussions tried reach common understanding  for example  european union identified three broad areas competences teachers require working othersworking knowledge  technology information  andworking society scholarly consensus emerging required teachers grouped three headings knowledge   subject matter knowledge teach  curricular knowledge  knowledge educational sciences  psychology  assessment etc  craft skills  lesson planning  using teaching technologies  managing students groups  monitoring assessing learning etc   anddispositions  essential values attitudes  beliefs commitment      qualities         enthusiasm     it found teachers showed enthusiasm towards course materials students create positive learning experience  these teachers teach rote attempt invigorate teaching course materials everyday  teachers cover curriculum repeatedly may find challenging maintain enthusiasm  lest boredom content bore students turn  enthusiastic teachers rated higher students teachers show much enthusiasm course materials teachers exhibit enthusiasm likely engaged  interested energetic students curious learning subject matter  recent research found correlation teacher enthusiasm students  intrinsic motivation learn vitality classroom  controlled  experimental studies exploring intrinsic motivation college students shown nonverbal expressions enthusiasm  demonstrative gesturing  dramatic movements varied  emotional facial expressions  result college students reporting higher levels intrinsic motivation learn  but even teacher enthusiasm shown improve motivation increase task engagement  necessarily improve learning outcomes memory material there various mechanisms teacher enthusiasm may facilitate higher levels intrinsic motivation  teacher enthusiasm may contribute classroom atmosphere energy enthusiasm feeds student interest excitement learning subject matter  enthusiastic teachers may also lead students becoming self-determined learning process  the concept mere exposure indicates teacher enthusiasm may contribute student expectations intrinsic motivation context learning   also  enthusiasm may act  motivational embellishment   increasing student interest variety  novelty  surprise enthusiastic teacher presentation material  finally  concept emotional contagion may also apply  students may become intrinsically motivated catching onto enthusiasm energy teacher      interaction learners     research shows student motivation attitudes towards school closely linked student-teacher relationships  enthusiastic teachers particularly good creating beneficial relations students  their ability create effective learning environments foster student achievement depends kind relationship build students  useful teacher-to-student interactions crucial linking academic success personal achievement  here  personal success student internal goal improving  whereas academic success includes goals receive superior  a teacher must guide student aligning personal goals academic goals  students receive positive influence show stronger self-confidence greater personal academic success without teacher interactions students likely build stronger relations teachers friendly supportive show interest courses taught teachers  teachers spend time interacting working directly students perceived supportive effective teachers  effective teachers shown invite student participation decision making  allow humor classroom  demonstrate willingness play    teaching qualifications   in many countries  person wishes become teacher must first obtain specified professional qualifications credentials university college  these professional qualifications may include study pedagogy  science teaching  teachers  like professionals  may  choose  continue education qualify  process known continuing professional development the issue teacher qualifications linked status profession  in societies  teachers enjoy status par physicians  lawyers  engineers  accountants  others  status profession low  in twentieth century  many intelligent women unable get jobs corporations governments many chose teaching default profession  as women become welcomed corporations governments today  may difficult attract qualified teachers future teachers often required undergo course initial education college education ensure possess necessary knowledge  competences adhere relevant codes ethics there variety bodies designed instill  preserve update knowledge professional standing teachers  around world many teachers  colleges exist  may controlled government teaching profession itself they generally established serve protect public interest certifying  governing  quality controlling  enforcing standards practice teaching profession     professional standards    the functions teachers  colleges may include setting clear standards practice  providing ongoing education teachers  investigating complaints involving members  conducting hearings allegations professional misconduct taking appropriate disciplinary action accrediting teacher education programs  in many situations teachers publicly funded schools must members good standing college  private schools may also require teachers college members  in areas roles may belong state board education  superintendent public instruction  state education agency governmental bodies  in still areas teaching unions may responsible duties      professional misconduct     misconduct teachers  especially sexual misconduct  getting increased scrutiny media courts  a study american association university women reported      students united states claim received unwanted sexual attention adult associated education  volunteer  bus driver  teacher  administrator adult  sometime educational career a study england showed      prevalence sexual abuse professional  group included priests  religious leaders  case workers well teachers  it important note  however  british study one kind consisted  random     probability sample       young people ages       computer-assisted study  questions referred  sexual abuse professional   necessarily teacher  it therefore logical conclude information percentage abuses teachers united kingdom explicitly available therefore necessarily reliable  the aauw study  however  posed questions fourteen types sexual harassment various degrees frequency included abuses teachers   the sample drawn list        schools create stratified two-stage sample design        th   th grade students   its reliability gauged        margin error in united states especially  several high-profile cases debra lafave  pamela rogers turner  mary kay letourneau caused increased scrutiny teacher misconduct chris keates  general secretary national association schoolmasters union women teachers  said teachers sex pupils age consent placed sex offenders register prosecution statutory rape  real anomaly law concerned about   this led outrage child protection parental rights groups  fears labelled pedophile hebephile led several men enjoy teaching avoiding profession  this jurisdictions reportedly led shortage male teachers    pedagogy teaching   teachers facilitate student learning  often school academy perhaps another environment outdoors the objective typically accomplished either informal formal approach learning  including course study lesson plan teaches skills  knowledge thinking skills  different ways teach often referred pedagogy  when deciding teaching method use teachers consider students  background knowledge  environment  learning goals well standardized curricula determined relevant authority  many times  teachers assist learning outside classroom accompanying students field trips  the increasing use technology  specifically rise internet past decade  begun shape way teachers approach roles classroom the objective typically course study  lesson plan  practical skill  a teacher may follow standardized curricula determined relevant authority  the teacher may interact students different ages  infants adults  students different abilities students learning disabilities teaching using pedagogy also involve assessing educational levels students particular skills  understanding pedagogy students classroom involves using differentiated instruction well supervision meet needs students classroom  pedagogy thought two manners  first  teaching taught many different ways  hence  using pedagogy teaching styles  second  pedagogy learners comes play teacher assesses pedagogic diversity students differentiates individual students accordingly  for example  experienced teacher parent described place teacher learning follows   the real bulk learning takes place self-study problem solving lot feedback around loop  the function teacher pressure lazy  inspire bored  deflate cocky  encourage timid  detect correct individual flaws  broaden viewpoint all  this function looks like coach using whole gamut psychology get new class rookies bench game  perhaps significant difference primary school secondary school teaching relationship teachers children  in primary schools class teacher stays week teach whole curriculum  in secondary schools taught different subject specialists session week may ten different teachers  the relationship children teachers tends closer primary school act form tutor  specialist teacher surrogate parent course day this true throughout united states well  however  alternative approaches primary education exist  one  sometimes referred  platoon  system  involves placing group students together one class moves one specialist another every subject  the advantage students learn teachers specialize one subject tend knowledgeable one area teacher teaches many subjects  students still derive strong sense security staying group peers classes co-teaching also become new trend amongst educational institutions  co-teaching defined two teachers working harmoniously fulfill needs every student classroom  co-teaching focuses student learning providing social networking support allows reach full cognitive potential  co-teachers work sync one another create climate learning     classroom management         teachers school discipline     throughout history education common form school discipline corporal punishment  while child school  teacher expected act substitute parent  normal forms parental discipline open them  in past times  corporal punishment  spanking paddling caning strapping birching student order cause physical pain  one common forms school discipline throughout much world  most western countries  others  banned  remains lawful united states following us supreme court decision      held paddling violate us constitution    us states banned corporal punishment  others  mostly south  not  it still used significant  though declining  degree public schools alabama  arkansas  georgia  louisiana  mississippi  oklahoma  tennessee texas  private schools states may also use it  corporal punishment american schools administered seat student trousers skirt specially made wooden paddle  this often used take place classroom hallway  nowadays punishment usually given privately principal office official corporal punishment  often caning  remains commonplace schools asian  african caribbean countries currently detention one common punishments schools united states  uk  ireland  singapore countries  it requires pupil remain school given time school day  lunch  recess school   even attend school non-school day  e g   saturday detention  held schools  during detention  students normally sit classroom work  write lines punishment essay  sit quietly a modern example school discipline north america western europe relies upon idea assertive teacher prepared impose upon class  positive reinforcement balanced immediate fair punishment misbehavior firm  clear boundaries define appropriate inappropriate behavior  teachers expected respect students  sarcasm attempts humiliate pupils seen falling outside constitutes reasonable discipline whilst consensus viewpoint amongst majority academics  teachers parents advocate assertive confrontational style discipline  refer canter model discipline   such individuals claim many problems modern schooling stem weakness school discipline teachers exercised firm control classroom would able teach efficiently  this viewpoint supported educational attainment countries east asia instance combine strict discipline high standards education it clear  however stereotypical view reflects reality east asian classrooms educational goals countries commensurable western countries  in japan  example  although average attainment standardized tests may exceed western countries  classroom discipline behavior highly problematic  although  officially  schools extremely rigid codes behavior  practice many teachers find students unmanageable enforce discipline all where school class sizes typically       students  maintaining order classroom divert teacher instruction  leaving little opportunity concentration focus taught  in response  teachers may concentrate attention motivated students  ignoring attention-seeking disruptive students  the result motivated students  facing demanding university entrance examinations  receive disproportionate resources  given emphasis attainment university places  administrators governors may regard policy appropriate      obligation honor students rights     sudbury model democratic schools claim popularly based authority maintain order effectively dictatorial authority governments schools alike  they also claim schools preservation public order easier efficient anywhere else  primarily rules regulations made community whole  thence school atmosphere one persuasion negotiation  rather confrontation since one confront  sudbury model democratic schools  proponents argue school good  clear laws  fairly democratically passed entire school community  good judicial system enforcing laws  school community discipline prevails  increasingly sophisticated concept law order develops  schools today  rules arbitrary  authority absolute  punishment capricious  due process law unknown    occupational hazards   teachers face several occupational hazards line work  including occupational stress  negatively impact teachers  mental physical health  productivity  students  performance  stress caused organizational change  relationships students  fellow teachers  administrative personnel  working environment  expectations substitute  long hours heavy workload  inspections  teachers also high risk occupational burnout a      study found     uk teachers experienced occupational stress  twice figure average profession  a      study found teachers experienced double rate anxiety  depression  stress average workers there several ways mitigate occupational hazards teaching  organizational interventions  like changing teachers  schedules  providing support networks mentoring  changing work environment  offering promotions bonuses  may effective helping reduce occupational stress among teachers  individual-level interventions  including stress-management training counseling  also used relieve occupational stress among teachers apart  teachers often given sufficient opportunities professional growth promotions  this leads stagnancy  sufficient interests enter profession  an organisation india called centre teacher accreditation  centa  working reduce hazard  trying open opportunities teachers india    teaching around world   there many similarities differences among teachers around world  in almost countries teachers educated university college  governments may require certification recognized body teach school  in many countries  elementary school education certificate earned completion high school  the high school student follows education specialty track  obtain prerequisite  student-teaching  time  receive special diploma begin teaching graduation  in addition certification  many educational institutions especially within us  require prospective teachers pass background check psychiatric evaluation able teach classroom  this always case adult learning institutions fast becoming norm many countries security concerns grow international schools generally follow english-speaking  western curriculum aimed expatriate communities     australia    education australia primarily responsibility individual states territories  generally  education australia follows three-tier model includes primary education  primary schools   followed secondary education  secondary schools high schools  tertiary education  universities tafe colleges      canada    teaching canada requires post-secondary degree bachelor degree  in provinces second bachelor degree bachelor education required become qualified teacher  salary ranges         year         yr  teachers option teach public school funded provincial government teaching private school funded private sector  businesses sponsors     france    in france  teachers  professors  mainly civil servants  recruited competitive examination     germany    in germany  teachers mainly civil servants recruited special university classes  called lehramtstudien  teaching education studies   there many differences teachers elementary schools  grundschule   lower secondary schools  hauptschule   middle level secondary schools  realschule  higher level secondary schools  gymnasium  salaries teachers depend civil servants  salary index scale  bundesbesoldungsordnung      india    in ancient india  common form education gurukula based guru-shishya tradition  teacher-disciple tradition  involved disciple guru living  nearby  residence  these gurukulam supported public donations guru would accept fees shishya  this organized system stayed prominent form education indian subcontinent british invasion  through strong efforts            gurukula system revived india the role success teacher modern indian education system clearly defined  centa standards define competencies good teacher possess  schools look competent teachers across grades  teachers appointed directly schools private sector  eligibility tests government schools     ireland    salaries primary teachers ireland depend mainly seniority  i e  holding position principal  deputy principal assistant principal   experience qualifications  extra pay also given teaching irish language  gaeltacht area island  the basic pay starting teacher         p a   rising incrementally         teacher    years service  a principal large school many years experience several qualifications  m a   h dip   etc   could earn         teachers required registered teaching council  section    teaching council act       person employed capacity recognised teaching post - registered teaching council - may paid oireachtas funds from      garda vetting introduced new entrants teaching profession  these procedures apply teaching also non-teaching posts refuse vetting  cannot appointed engaged school capacity including voluntary role   existing staff vetted phased basis     united kingdom    education united kingdom devolved matter countries united kingdom separate systems      england     salaries nursery  primary secondary school teachers ranged                 september       although salaries go much higher depending experience extra responsibilities  preschool teachers may earn average salary         annually  teachers state schools must least bachelor degree  complete approved teacher education program  licensed many counties offer alternative licensing programs attract people teaching  especially hard-to-fill positions  excellent job opportunities expected retirements  especially among secondary school teachers  outweigh slowing enrollment growth  opportunities vary geographic area subject taught      scotland     in scotland  anyone wishing teach must registered general teaching council scotland  gtcs   teaching scotland graduate profession normal route graduates wishing teach complete programme initial teacher education  ite  one seven scottish universities offer courses  once successfully completed   provisional registration  given gtcs raised  full registration  status year sufficient evidence show  standard full registration  met for salary year beginning april       unpromoted teachers scotland earned         probationer            years teaching  could go earn         complete modules earn chartered teacher status  requiring least   years two modules per year   promotion principal teacher positions attracts salary                  deputy head  head teachers earn                 teachers scotland registered members trade unions main ones educational institute scotland scottish secondary teachers  association      wales     education wales differs certain respects education elsewhere united kingdom  for example  significant number students wales educated either wholly largely medium welsh              per cent classes maintained primary schools used welsh sole main medium instruction  welsh medium education available age groups nurseries  schools  colleges universities adult education  lessons language compulsory pupils age    teachers wales registered members trade unions atl  nut nasuwt reports recent years suggest average age teachers wales falling teachers younger previous years  a growing cause concern attacks teachers welsh schools reached all-time high               united states    in united states  state determines requirements getting license teach public schools  teaching certification generally lasts three years  teachers receive certificates last long ten years  public school teachers required bachelor degree majority must certified state teach  many charter schools require teachers certified  provided meet standards highly qualified set no child left behind  additionally  requirements substitute temporary teachers generally rigorous full-time professionals  the bureau labor statistics estimates     million elementary school teachers          middle school teachers    million secondary school teachers employed u s in past  teachers paid relatively low salaries  however  average teacher salaries improved rapidly recent years  us teachers generally paid graduated scales  income depending experience  teachers experience higher education earn standard bachelor degree certificate  salaries vary greatly depending state  relative cost living  grade taught  salaries also vary within states wealthy suburban school districts generally higher salary schedules districts  the median salary primary secondary teachers               average entry salary teacher bachelor degree estimated          median salaries preschool teachers  however  less half national median secondary teachers  clock estimated               for high school teachers  median salaries      ranged         south dakota         new york  national median          some contracts may include long-term disability insurance  life insurance  emergency personal leave investment options the american federation teachers  teacher salary survey         school year found average teacher salary          in salary survey report k-   teachers  elementary school teachers lowest median salary earning          high school teachers highest median salary earning          many teachers take advantage opportunity increase income supervising after-school programs extracurricular activities  in addition monetary compensation  public school teachers may also enjoy greater benefits  like health insurance  compared occupations  merit pay systems rise teachers  paying teachers extra money based excellent classroom evaluations  high test scores high success overall school  also  advent internet  many teachers selling lesson plans teachers web order earn supplemental income  notably teacherspayteachers com  the united nations sustainable development goal   also aims substantially increase supply qualified teachers international cooperation      effort improve quality teaching around world    assistant teachers   assistant teachers additional teachers assisting primary teacher  often classroom   there different types around world  well variety formal programs defining roles responsibilities one type foreign language assistant  germany run educational exchange service  p dagogischer austauschdienst  british schools employ teaching assistants  considered fully qualified teachers   guided teachers may supervise teach groups pupils independently  in united kingdom  term  assistant teacher  used used refer qualified unqualified teacher head deputy head teacher the japanese education system employs assistant language teachers elementary  junior high high schools learning teaching  german short form  ldl  method allows pupils students prepare teach lessons parts lessons  understanding student learning enhanced teaching process    see also      references      external links   oecd education gps  review education policy analysis statistics  teachers
software engineering systematic application engineering approaches development software a software engineer person applies principles software engineering design  develop  maintain  test  evaluate computer software  the term programmer sometimes used synonym  may also lack connotations engineering education skills engineering techniques used inform software development process involves definition  implementation  assessment  measurement  management  change  improvement software life cycle process itself  it heavily uses software configuration management systematically controlling changes configuration  maintaining integrity traceability configuration code throughout system life cycle  modern processes use software versioning    history   beginning      software engineering seen type engineering  additionally  development software engineering seen struggle  it difficult keep hardware caused many problems software engineers  problems included software budget  exceeded deadlines  required extensive de-bugging maintenance  unsuccessfully met needs consumers never even completed  in      nato held first software engineering conference issues related software addressed  guidelines best practices development software established  the origins term  software engineering  attributed various sources  the term  software engineering  appeared list services offered companies june      issue computers automation used formally august      issue communications acm  volume    number     letter acm membership  acm president anthony a  oettinger   also associated title nato conference      professor friedrich l  bauer  first conference software engineering  independently  margaret hamilton named discipline  software engineering  apollo missions give legitimacy   at time perceived  software crisis   the   th international conference software engineering  icse       celebrates    years  software engineering  plenary sessions  keynotes frederick brooks margaret hamilton in       software engineering institute  sei  established federally funded research development center headquartered campus carnegie mellon university pittsburgh  pennsylvania  united states  watts humphrey founded sei software process program  aimed understanding managing software engineering process   the process maturity levels introduced would become capability maturity model integration development cmmi-dev   defined us government evaluates abilities software development team modern  generally accepted best-practices software engineering collected iso iec jtc   sc   subcommittee published software engineering body knowledge  swebok   software engineering considered one major computing disciplines    definitions terminology controversies   notable definitions software engineering include  the systematic application scientific technological knowledge  methods  experience design  implementation  testing  documentation software  the bureau labor statistics ieee systems software engineering   vocabulary the application systematic  disciplined  quantifiable approach development  operation  maintenance software  ieee standard glossary software engineering terminology engineering discipline concerned aspects software production  ian sommerville establishment use sound engineering principles order economically obtain software reliable works efficiently real machines  fritz bauer branch computer science deals design  implementation  maintenance complex computer programs  merriam-webster  software engineering  encompasses act writing code  tools processes organization uses build maintain code time        software engineering thought  programming integrated time    software engineering googlethe term also used less formally informal contemporary term broad range activities formerly called computer programming systems analysis broad term aspects practice computer programming  opposed theory computer programming  formally studied sub-discipline computer science term embodying advocacy specific approach computer programming  one urges treated engineering discipline rather art craft  advocates codification recommended practices     etymology  software engineer     margaret hamilton promoted term  software engineering  work apollo program  the term  engineering  used acknowledge work taken seriously contributions toward advancement technology  hamilton details use term when i first came term  one heard  least world  it ongoing joke long time  they liked kid radical ideas  it memorable day one respected hardware gurus explained everyone meeting agreed process building software also considered engineering discipline  like hardware  not acceptance new  term  per se  earned acceptance others room engineering field right     suitability term    individual commentators disagreed sharply define software engineering legitimacy engineering discipline  david parnas said software engineering  fact  form engineering  steve mcconnell said  be  donald knuth said programming art science  edsger w  dijkstra claimed terms software engineering software engineer misused  considered harmful  particularly united states    tasks large scale projects       software requirements    requirements engineering elicitation  analysis  specification  validation requirements software  software requirements three different types  there functional requirements  non-functional requirements  domain requirements  the operation software performed proper output expected user use  non-functional requirements deal issues like portability  security  maintainability  reliability  scalability  performance  reusability  flexibility  they classified following types  interference constraints  performance constraints  response time  security  storage space  etc    operating constraints  life cycle constraints  maintainability  portability  etc    economic constraints  knowledge system software works needed comes specifying non-functional requirements  domain requirements characteristic certain category domain projects     software design    software design process defining architecture  components  interfaces  characteristics system component  this also called software architecture  software design divided three different levels design  the three levels interface design  architectural design  detailed design  interface design interaction system environment  this happens high level abstraction along inner workings system  architectural design major components system responsibilities  properties  interfaces  relationships interactions occur them  detailed design internal elements major system components  properties  relationships  processing  usually algorithms data structures      software construction    software construction  main activity software development  combination programming  unit testing  integration testing  debugging  testing phase generally performed programmer software construction  verify written decide code ready sent next step     software testing    software testing empirical  technical investigation conducted provide stakeholders information quality product service test  different approaches unit testing integration testing  it one aspect software quality  as separate phase software development  typically performed quality assurance staff developer one wrote code     software maintenance    software maintenance refers activities required provide cost-effective support shipping software product  software maintenance modifying updating software applications distribution correct faults improve performance  software lot real world real world changes  software maintenance required  software maintenance includes  error correction  optimization  deletion unused discarded features  enhancement features already exist  usually  maintenance takes         project cost therefore  focusing maintenance keeps costs down    education   knowledge computer programming prerequisite becoming software engineer  in      ieee computer society produced swebok  published iso iec technical report            describing body knowledge recommend mastered graduate software engineer four years experience many software engineers enter profession obtaining university degree training vocational school  one standard international curriculum undergraduate software engineering degrees defined joint task force computing curricula ieee computer society association computing machinery  updated       a number universities software engineering degree programs            campus bachelor software engineering programs     online programs      masters-level programs     doctorate-level programs     certificate-level programs united states in addition university education  many companies sponsor internships students wishing pursue careers information technology  these internships introduce student interesting real-world tasks typical software engineers encounter every day  similar experience gained military service software engineering     software engineering degree programs    half practitioners today degrees computer science  information systems  information technology  a small  growing  number practitioners software engineering degrees  in       department computing imperial college london introduced first three-year software engineering bachelor degree uk world  following year  university sheffield established similar program   in       rochester institute technology established first software engineering bachelor degree program united states  however  obtain abet accreditation       time rice university  clarkson university  milwaukee school engineering mississippi state university obtained theirs  in       psg college technology coimbatore  india first start five-year integrated master science degree software engineering since  software engineering undergraduate degrees established many universities  a standard international curriculum undergraduate software engineering degrees  se      defined steering committee           funding association computing machinery ieee computer society  as       u s      universities offer software engineering degrees  teach computer science engineering principles practices  the first software engineering master degree established seattle university       since graduate software engineering degrees made available many universities   likewise canada  canadian engineering accreditation board  ceab  canadian council professional engineers recognized several software engineering programs in       us naval postgraduate school  nps  established first doctorate program software engineering world  additionally  many online advanced degrees software engineering appeared master science software engineering  mse  degree offered computer science engineering department california state university  fullerton  steve mcconnell opines universities teach computer science rather software engineering  shortage true software engineers  ets   cole de technologie sup rieure  university uqam  universit  du qu bec   montr al  mandated ieee develop software engineering body knowledge  swebok   become iso standard describing body knowledge covered software engineer    profession   legal requirements licensing certification professional software engineers vary around world  in uk  licensing legal requirement assume use job title software engineer   in areas canada  alberta  british columbia  ontario  quebec  software engineers hold professional engineer  p eng  designation information systems professional  i s p   designation  in europe  software engineers obtain european engineer  eur ing  professional title the united states  since       offered ncees professional engineer exam software engineering  thereby allowing software engineers licensed recognized  ncees end exam april      due lack participation  mandatory licensing currently still largely debated  perceived controversial  in parts us texas  use term engineer regulated law reserved use individuals professional engineer license the ieee computer society acm  two main us-based professional organizations software engineering  publish guides profession software engineering  the ieee guide software engineering body knowledge        version  swebok  defines field describes knowledge ieee expects practicing software engineer have  the current swebok v  updated version released       the ieee also promulgates  software engineering code ethics      employment    the u  s  bureau labor statistics  bls  counted           software developers holding jobs u s        due relative newness field study  formal education software engineering often taught part computer science curriculum  many software engineers hold computer science degrees  the bls estimates           computer software engineering would increase       this           bls estimate     software engineering  and                bls estimate  due trend  job growth may fast last decade  jobs would gone computer software engineers united states would instead outsourced computer software engineers countries india foreign countries  in addition  bls job outlook computer programmers          predicts      decline  words   decline job outlook      -   -        decline     -     program computers  furthermore  women many software fields also declining years compared engineering fields  however  trend may change slow future many current software engineers u s  market leave profession  age market next decades many software engineers work employees contractors  software engineers work businesses  government agencies  civilian military   non-profit organizations  some software engineers work freelancers  some organizations specialists perform tasks software development process  other organizations require software engineers many them  in large projects  people may specialize one role  in small projects  people may fill several roles time  many companies hire interns  often university college students summer break  externships  specializations include analysts  architects  developers  testers  technical support  middleware analysts  project managers  educators  researchers most software engineers programmers work    hours week     percent software engineers    percent programmers worked    hours week       potential injuries occupations possible like workers spend long periods sitting front computer terminal typing keyboard  engineers programmers susceptible eyestrain  back discomfort  hand wrist problems carpal tunnel syndrome     certification    the software engineering institute offers certifications specific topics like security  process improvement software architecture  ibm  microsoft companies also sponsor certification examinations  many it certification programs oriented toward specific technologies  managed vendors technologies  these certification programs tailored institutions would employ people use technologies broader certification general software engineering skills available various professional societies  as       ieee certified     software professionals certified software development professional  csdp   in      added entry-level certification known certified software development associate  csda   the acm professional certification program early      discontinued due lack interest  the acm examined possibility professional certification software engineers late      eventually decided certification inappropriate professional industrial practice software engineering in u k  british computer society developed legally recognized professional certification called chartered it professional  citp   available fully qualified members  mbcs   software engineers may eligible membership institution engineering technology qualify chartered engineer status  in canada canadian information processing society developed legally recognized professional certification called information systems professional  isp   in ontario  canada  software engineers graduate canadian engineering accreditation board  ceab  accredited program  successfully complete peo  professional engineers ontario  professional practice examination  ppe  least    months acceptable engineering experience eligible licensed professional engineers ontario become professional engineers p eng  the peo recognize online distance education however  consider computer science programs equivalent software engineering programs despite tremendous overlap two  this sparked controversy certification war  it also held number p eng holders profession exceptionally low  the vast majority working professionals field hold degree cs  se  given difficult certification path holders non-se degrees  never bother pursue license     impact globalization    the initial impact outsourcing  relatively lower cost international human resources developing third world countries led massive migration software development activities corporations north america europe india later  china  russia  developing countries  this approach flaws  mainly distance   time zone difference prevented human interaction clients developers massive job transfer  this negative impact many aspects software engineering profession  for example  students developed world avoid education related software engineering fear offshore outsourcing  importing software products services countries  displaced foreign visa workers  although statistics currently show threat software engineering  related career  computer programming appear affected  nevertheless  ability smartly leverage offshore near-shore resources via follow-the-sun workflow improved overall operational capability many organizations  when north americans leaving work  asians arriving work  when asians leaving work  europeans arriving work  this provides continuous ability human oversight business-critical processes    hours per day  without paying overtime compensation disrupting key human resource  sleep patterns while global outsourcing several advantages  global   generally distributed   development run serious difficulties resulting distance developers  this due key elements type distance identified geographical  temporal  cultural communication  includes use different languages dialects english different locations   research carried area global software development last    years extensive body relevant work published highlights benefits problems associated complex activity  as aspects software engineering research ongoing related areas     prizes    there several prizes field software engineering the codie awards yearly award issued software information industry association excellence software development within software industry jolt awards awards software industry stevens award software engineering award given memory wayne stevens    criticism   software engineering sees practitioners individuals follow well-defined engineering approaches problem-solving  these approaches specified various software engineering books research papers  always connotations predictability  precision  mitigated risk professionalism  this perspective led calls licensing  certification codified bodies knowledge mechanisms spreading engineering knowledge maturing field software engineering extends engineering draws engineering model  i e  engineering process  engineering project management  engineering requirements  engineering design  engineering construction  engineering validation  the concept new rarely understood  widely misinterpreted  including software engineering textbooks  papers  among communities programmers crafters one core issues software engineering approaches empirical enough real-world validation approaches usually absent  limited hence software engineering often misinterpreted feasible  theoretical environment  edsger dijkstra  founder many concepts used within software development today  rejected idea  software engineering  death       arguing terms poor analogies whathe called  radical novelty  computer science a number phenomena bundled name  software engineering   as economics known  the miserable science   software engineering known  the doomed discipline   doomed cannot even approach goal since goal self-contradictory  software engineering  course  presents another worthy cause  eyewash  carefully read literature analyse devotees actually  discover software engineering accepted charter  how program cannot     see also       study practice    computer scienceinformation engineeringsoftware craftsmanshipsoftware developmentrelease engineering    roles    programmersystems analystsystems architect    professional aspects    bachelor science information technologybachelor software engineeringlist software engineering conferenceslist computer science journals  including software engineering journals software engineering institute   references       citations        sources       further reading   guide software engineering body knowledge  swebok guide   version      pierre bourque  richard e  fairley  eds    ieee computer society        isbn    - -    -    -  cs  maint  others  link pressman  roger s         software engineering  a practitioner approach   th ed    boston  mass  mcgraw-hill  isbn    - -  -      -  sommerville  ian                software engineering   th ed    harlow  england  pearson education  isbn    - -  -      -  jalote  pankaj                an integrated approach software engineering   rd ed    springer  isbn    - -   -     -  bruegge  bernd  dutoit  allen         object-oriented software engineering   using uml  patterns  java   rd ed    prentice hall  isbn    - -  -      -  oshana  robert      -  -     software engineering embedded systems   methods  practical techniques  applications  second ed    kidlington  oxford  united kingdom  isbn    - -  -      -     external links   guide software engineering body knowledgethe open systems engineering software development life cycle framework opensdlc org integrated creative commons sdlcsoftware engineering institute carnegie mellon
a software architect software development expert makes high-level design choices tries enforce technical standards  including software coding standards  tools  platforms    history   the software architect concept began take hold object-oriented programming oop  coming widespread use  late     early years   st century   oop allowed ever-larger complex applications built  turn required increased high-level application system oversight    duties   the role software architect generally certain common traits software architects make high-level design choices based programming experience  in addition  software architect may sometimes propose technical standards  including coding standards  tools  platforms software architects may also engaged design architecture hardware environment  may focus entirely design methodology code architects use various architectural-oriented software packages specialize communicating architecture    other types it-related architects   the enterprise architect handles interaction business it sides organization principally involved determining as-is to-be states business it process perspective  many organizations bundling software architect duties within role enterprise architecture an application architect works single software application other similar titles use  without consensus exact meaning  include solution architect  may refer person directly involved advancing particular business solution needing interactions multiple applications  may also refer application architect system architect  singular   often used synonym application architect  however  one subscribes systems theory idea enterprise system  system architect could also mean enterprise architect systems architect  plural   often used synonym enterprise architect solution architect cloud architect  plural   software architect deep knowledge architecting solutions applications cloud-based infrastructures the table indicates many differences various kinds software architects    see also   electrical engineeringelectronics engineeringhardware architecture   hardware architectrequirements analysis   requirements engineersoftware architectural modelsoftware architecturesoftware engineering   software engineersystems architecture   systems architectsystems designsystems engineering   systems engineer   references      external links   international association software architects  iasa 
software testing investigation conducted provide stakeholders information quality software product service test  software testing also provide objective  independent view software allow business appreciate understand risks software implementation  test techniques include process executing program application intent finding failures       verifying software product fit use software testing involves execution software component system component evaluate one properties interest  in general  properties indicate extent component system test meets requirements guided design development responds correctly kinds inputs performs functions within acceptable time sufficiently usable installed run intended environmentsachieves general result stakeholders desire as number possible tests even simple software components practically infinite  software testing uses strategy select tests feasible available time resources  as result  software testing typically  exclusively  attempts execute program application intent finding failures      due software faults       the job testing iterative process one fault fixed  illuminate failures due deeper faults  even create new ones software testing provide objective  independent information quality software risk failure users sponsors software testing conducted soon executable software  even partially complete  exists  the overall approach software development often determines testing conducted  for example  phased process  testing occurs system requirements defined implemented testable programs  in contrast  agile approach  requirements  programming  testing often done concurrently    overview   although software testing determine correctness software assumption specific hypotheses  see hierarchy testing difficulty   testing cannot identify failures within software  instead  furnishes criticism comparison compares state behavior product test oracles   principles mechanisms someone might recognize problem  these oracles may include  limited  specifications  contracts  comparable products  past versions product  inferences intended expected purpose  user customer expectations  relevant standards  applicable laws  criteria a primary purpose testing detect software failures defects may discovered corrected  testing cannot establish product functions properly conditions  function properly specific conditions  the scope software testing may include examination code well execution code various environments conditions well examining aspects code  supposed needs do  in current culture software development  testing organization may separate development team  there various roles testing team members  information derived software testing may used correct process software developed         every software product target audience  for example  audience video game software completely different banking software  therefore  organization develops otherwise invests software product  assess whether software product acceptable end users  target audience  purchasers  stakeholders  software testing assists making assessment     faults failures    software faults occur following process  a programmer makes error  mistake   results fault  defect  bug  software source code  if fault executed  certain situations system produce wrong results  causing failure      not faults necessarily result failures  for example  faults dead code never result failures  a fault reveal failures may result failure environment changed  examples changes environment include software run new computer hardware platform  alterations source data  interacting different software  a single fault may result wide range failure symptoms not software faults caused coding errors  one common source expensive defects requirement gaps  i e   unrecognized requirements result errors omission program designer        requirement gaps often non-functional requirements testability  scalability  maintainability  performance  security     input combinations preconditions    a fundamental problem software testing testing combinations inputs preconditions  initial state  feasible  even simple product          this means number faults software product large defects occur infrequently difficult find testing debugging  more significantly  non-functional dimensions quality  supposed versus supposed    usability  scalability  performance  compatibility  reliability   highly subjective  something constitutes sufficient value one person may intolerable another software developers test everything  use combinatorial test design identify minimum number tests needed get coverage want  combinatorial test design enables users get greater test coverage fewer tests  whether looking speed test depth  use combinatorial test design methods build structured variation test cases     economics    a study conducted nist      reports software bugs cost u s  economy       billion annually  more third cost could avoided  better software testing performed outsourcing software testing costs common  china  philippines  india preferred destinations     roles    software testing done dedicated software testers       term  software tester  used generally  later also seen separate profession  regarding periods different goals software testing  different roles established  test manager  test lead  test analyst  test designer  tester  automation developer  test administrator  software testing also performed non-dedicated software testers    history   glenford j  myers initially introduced separation debugging testing       although attention breakage testing   a successful test case one detects as-yet undiscovered error          illustrated desire software engineering community separate fundamental development activities  debugging  verification    testing approach       static  dynamic  passive testing    there many approaches available software testing  reviews  walkthroughs  inspections referred static testing  whereas executing programmed code given set test cases referred dynamic testing static testing often implicit  like proofreading  plus programming tools text editors check source code structure compilers  pre-compilers  check syntax data flow static program analysis  dynamic testing takes place program run  dynamic testing may begin program      complete order test particular sections code applied discrete functions modules  typical techniques either using stubs drivers execution debugger environment static testing involves verification  whereas dynamic testing also involves validation passive testing means verifying system behavior without interaction software product  contrary active testing  testers provide test data look system logs traces  they mine patterns specific behavior order make kind decisions  this related offline runtime verification log analysis     exploratory approach    exploratory testing approach software testing concisely described simultaneous learning  test design  test execution  cem kaner  coined term           defines exploratory testing  style software testing emphasizes personal freedom responsibility individual tester continually optimize quality work treating test-related learning  test design  test execution  test result interpretation mutually supportive activities run parallel throughout project           the  box  approach    software testing methods traditionally divided white- black-box testing  these two approaches used describe point view tester takes designing test cases  a hybrid approach called grey-box testing may also applied software testing methodology  with concept grey-box testing develops tests specific design elements gaining prominence   arbitrary distinction  black- white-box testing faded somewhat      white-box testing     white-box testing  also known clear box testing  glass box testing  transparent box testing  structural testing  verifies internal structures workings program  opposed functionality exposed end-user  in white-box testing  internal perspective system  source code   well programming skills  used design test cases  the tester chooses inputs exercise paths code determine appropriate outputs  this analogous testing nodes circuit  e g   in-circuit testing  ict  while white-box testing applied unit  integration  system levels software testing process  usually done unit level  it test paths within unit  paths units integration  subsystems system level test  though method test design uncover many errors problems  might detect unimplemented parts specification missing requirements techniques used white-box testing include api testing   testing application using public private apis  application programming interfaces code coverage   creating tests satisfy criteria code coverage  e g   test designer create tests cause statements program executed least fault injection methods   intentionally introducing faults gauge efficacy testing strategiesmutation testing methodsstatic testing methodscode coverage tools evaluate completeness test suite created method  including black-box testing  this allows software team examine parts system rarely tested ensures important function points tested  code coverage software metric reported percentage function coverage  reports functions executedstatement coverage  reports number lines executed complete testdecision coverage  reports whether true false branch given test executed     statement coverage ensures code paths branches  terms control flow  executed least once  this helpful ensuring correct functionality  sufficient since code may process different inputs correctly incorrectly  pseudo-tested functions methods are covered specified  possible remove body without breaking test case       black-box testing     black-box testing  also known functional testing  treats software  black box   examining functionality without knowledge internal implementation  without seeing source code  the testers aware software supposed  it  black-box testing methods include  equivalence partitioning  boundary value analysis  all-pairs testing  state transition tables  decision table testing  fuzz testing  model-based testing  use case testing  exploratory testing  specification-based testing specification-based testing aims test functionality software according applicable requirements  this level testing usually requires thorough test cases provided tester  simply verify given input  output value  behavior   either     expected value specified test case test cases built around specifications requirements  i e   application supposed do  it uses external descriptions software  including specifications  requirements  designs derive test cases  these tests functional non-functional  though usually functional specification-based testing may necessary assure correct functionality  insufficient guard complex high-risk situations one advantage black box technique programming knowledge required  whatever biases programmers may  tester likely different set may emphasize different areas functionality  on hand  black-box testing said  like walk dark labyrinth without flashlight   because examine source code  situations tester writes many test cases check something could tested one test case leaves parts program untested this method test applied levels software testing  unit  integration  system acceptance  it typically comprises testing higher levels  also dominate unit testing well component interface testingcomponent interface testing variation black-box testing  focus data values beyond related actions subsystem component  the practice component interface testing used check handling data passed various units  subsystem components  beyond full integration testing units  the data passed considered  message packets  range data types checked  data generated one unit  tested validity passed another unit  one option interface testing keep separate log file data items passed  often timestamp logged allow analysis thousands cases data passed units days weeks  tests include checking handling extreme data values interface variables passed normal values  unusual data values interface help explain unexpected performance next unit       visual testing      the aim visual testing provide developers ability examine happening point software failure presenting data way developer easily find information requires  information expressed clearly at core visual testing idea showing someone problem  test failure   rather describing  greatly increases clarity understanding  visual testing  therefore  requires recording entire test process   capturing everything occurs test system video format  output videos supplemented real-time tester input via picture-in-a-picture webcam audio commentary microphones visual testing provides number advantages  the quality communication increased drastically testers show problem  events leading  developer opposed describing need replicate test failures cease exist many cases  the developer evidence requires test failure instead focus cause fault fixed ad hoc testing exploratory testing important methodologies checking software integrity  require less preparation time implement  important bugs found quickly  in ad hoc testing  testing takes place improvised  impromptu way  ability tester  base testing documented methods improvise variations tests result rigorous examination defect fixes  however  unless strict documentation procedures maintained  one limits ad hoc testing lack repeatability      grey-box testing     grey-box testing  american spelling  gray-box testing  involves knowledge internal data structures algorithms purposes designing tests executing tests user  black-box level  the tester often access  source code executable binary   grey-box testing may also include reverse engineering  using dynamic code analysis  determine  instance  boundary values error messages  manipulating input data formatting output qualify grey-box  input output clearly outside  black box  calling system test  this distinction particularly important conducting integration testing two modules code written two different developers  interfaces exposed test by knowing underlying concepts software works  tester makes better-informed testing choices testing software outside  typically  grey-box tester permitted set isolated testing environment activities seeding database  the tester observe state product tested performing certain actions executing sql statements database executing queries ensure expected changes reflected  grey-box testing implements intelligent test scenarios  based limited information  this particularly apply data type handling  exception handling  on    testing levels   broadly speaking  least three levels testing  unit testing  integration testing  system testing  however  fourth level  acceptance testing  may included developers  this may form operational acceptance testing simple end-user  beta  testing  testing ensure software meets functional expectations  based istqb certified test foundation level syllabus  test levels includes four levels  fourth level named acceptance testing  tests frequently grouped one levels added software development process  level specificity test     unit testing    unit testing refers tests verify functionality specific section code  usually function level  in object-oriented environment  usually class level  minimal unit tests include constructors destructors these types tests usually written developers work code  white-box style   ensure specific function working expected  one function might multiple tests  catch corner cases branches code  unit testing alone cannot verify functionality piece software  rather used ensure building blocks software work independently other unit testing software development process involves synchronized application broad spectrum defect prevention detection strategies order reduce software development risks  time  costs  it performed software developer engineer construction phase software development life cycle  unit testing aims eliminate construction errors code promoted additional testing  strategy intended increase quality resulting software well efficiency overall development process depending organization expectations software development  unit testing might include static code analysis  data-flow analysis  metrics analysis  peer code reviews  code coverage analysis software testing practices     integration testing    integration testing type software testing seeks verify interfaces components software design  software components may integrated iterative way together   big bang    normally former considered better practice since allows interface issues located quickly fixed integration testing works expose defects interfaces interaction integrated components  modules   progressively larger groups tested software components corresponding elements architectural design integrated tested software works system integration tests usually involve lot code  produce traces larger produced unit tests  this impact ease localizing fault integration test fails  to overcome issue  proposed automatically cut large tests smaller pieces improve fault localization     system testing    system testing tests completely integrated system verify system meets requirements       for example  system test might involve testing login interface  creating editing entry  plus sending printing results  followed summary processing deletion  archiving  entries  logoff     acceptance testing    commonly level acceptance testing include following four types user acceptance testingoperational acceptance testingcontractual regulatory acceptance testingalpha beta testinguser acceptance testing alpha beta testing described next testing types section operational acceptance used conduct operational readiness  pre-release  product  service system part quality management system  oat common type non-functional software testing  used mainly software development software maintenance projects  this type testing focuses operational readiness system supported  become part production environment  hence  also known operational readiness testing  ort  operations readiness assurance  or a  testing  functional testing within oat limited tests required verify non-functional aspects system in addition  software testing ensure portability system  well working expected  also damage partially corrupt operating environment cause processes within environment become inoperative contractual acceptance testing performed based contract acceptance criteria defined agreement contract  regulatory acceptance testing performed based relevant regulations software product  both two testings performed users independent testers  regulation acceptance testing sometimes involves regulatory agencies auditing test results    testing types  techniques tactics   different labels ways grouping testing may testing types  software testing tactics techniques     installation testing    most software systems installation procedures needed used main purpose  testing procedures achieve installed software system may used known installation testing     compatibility testing    a common cause software failure  real perceived  lack compatibility application software  operating systems  operating system versions  old new   target environments differ greatly original  terminal gui application intended run desktop required become web application  must render web browser   for example  case lack backward compatibility  occur programmers develop test software latest version target environment  users may running  this results unintended consequence latest work may function earlier versions target environment  older hardware earlier versions target environment capable using  sometimes issues fixed proactively abstracting operating system functionality separate program module library     smoke sanity testing    sanity testing determines whether reasonable proceed testing smoke testing consists minimal attempts operate software  designed determine whether basic problems prevent working all  such tests used build verification test     regression testing    regression testing focuses finding defects major code change occurred  specifically  seeks uncover software regressions  degraded lost features  including old bugs come back  such regressions occur whenever software functionality previously working correctly  stops working intended  typically  regressions occur unintended consequence program changes  newly developed part software collides previously existing code  regression testing typically largest test effort commercial software development  due checking numerous details prior software features  even new software developed using old test cases test parts new design ensure prior functionality still supported common methods regression testing include re-running previous sets test cases checking whether previously fixed faults re-emerged  the depth testing depends phase release process risk added features  they either complete  changes added late release deemed risky  shallow  consisting positive tests feature  changes early release deemed low risk  in regression testing  important strong assertions existing behavior  for  possible generate add new assertions existing test cases  known automatic test amplification     acceptance testing    acceptance testing mean one two things a smoke test used build acceptance test prior testing  e g   integration regression acceptance testing performed customer  often lab environment hardware  known user acceptance testing  uat   acceptance testing may performed part hand-off process two phases development     alpha testing    alpha testing simulated actual operational testing potential users customers independent test team developers  site  alpha testing often employed off-the-shelf software form internal acceptance testing software goes beta testing     beta testing    beta testing comes alpha testing considered form external user acceptance testing  versions software  known beta versions  released limited audience outside programming team known beta testers  the software released groups people testing ensure product faults bugs  beta versions made available open public increase feedback field maximal number future users deliver value earlier  extended even indefinite period time  perpetual beta      functional vs non-functional testing    functional testing refers activities verify specific action function code  these usually found code requirements documentation  although development methodologies work use cases user stories  functional tests tend answer question  user   particular feature work  non-functional testing refers aspects software may related specific function user action  scalability performance  behavior certain constraints  security  testing determine breaking point  point extremes scalability performance leads unstable execution  non-functional requirements tend reflect quality product  particularly context suitability perspective users     continuous testing    continuous testing process executing automated tests part software delivery pipeline obtain immediate feedback business risks associated software release candidate  continuous testing includes validation functional requirements non-functional requirements  scope testing extends validating bottom-up requirements user stories assessing system requirements associated overarching business goals     destructive testing    destructive testing attempts cause software sub-system fail  it verifies software functions properly even receives invalid unexpected inputs  thereby establishing robustness input validation error-management routines  software fault injection  form fuzzing  example failure testing  various commercial non-functional testing tools linked software fault injection page  also numerous open-source free software tools available perform destructive testing     software performance testing    performance testing generally executed determine system sub-system performs terms responsiveness stability particular workload  it also serve investigate  measure  validate verify quality attributes system  scalability  reliability resource usage load testing primarily concerned testing system continue operate specific load  whether large quantities data large number users  this generally referred software scalability  the related load testing activity performed non-functional activity often referred endurance testing  volume testing way test software functions even certain components  example file database  increase radically size  stress testing way test reliability unexpected rare workloads  stability testing  often referred load endurance testing  checks see software continuously function well acceptable period there little agreement specific goals performance testing are  the terms load testing  performance testing  scalability testing  volume testing  often used interchangeably real-time software systems strict timing constraints  to test timing constraints met  real-time testing used     usability testing    usability testing check user interface easy use understand  it concerned mainly use application   this kind testing automated  actual human users needed  monitored skilled ui designers     accessibility testing    accessibility testing may include compliance standards americans disabilities act     section     amendment rehabilitation act     web accessibility initiative  wai  world wide web consortium  w c     security testing    security testing essential software processes confidential data prevent system intrusion hackers the international organization standardization  iso  defines  type testing conducted evaluate degree test item  associated data information  protected unauthorised persons systems cannot use  read modify  authorized persons systems denied access them      internationalization localization    testing internationalization localization validates software used different languages geographic regions  the process pseudolocalization used test ability application translated another language  make easier identify localization process may introduce new bugs product globalization testing verifies software adapted new culture  different currencies time zones  actual translation human languages must tested  too  possible localization globalization failures include software often localized translating list strings context  translator may choose wrong translation ambiguous source string technical terminology may become inconsistent  project translated several people without proper coordination translator imprudent literal word-for-word translations may sound inappropriate  artificial technical target language untranslated messages original language may left hard coded source code some messages may created automatically run time resulting string may ungrammatical  functionally incorrect  misleading confusing software may use keyboard shortcut function source language keyboard layout  used typing characters layout target language software may lack support character encoding target language fonts font sizes appropriate source language may inappropriate target language  example  cjk characters may become unreadable  font small a string target language may longer software handle  this may make string partly invisible user cause software crash malfunction software may lack proper support reading writing bi-directional text software may display images text localized localized operating systems may differently named system configuration files environment variables different formats date currency     development testing    development testing software development process involves synchronized application broad spectrum defect prevention detection strategies order reduce software development risks  time  costs  it performed software developer engineer construction phase software development lifecycle  development testing aims eliminate construction errors code promoted testing  strategy intended increase quality resulting software well efficiency overall development process depending organization expectations software development  development testing might include static code analysis  data flow analysis  metrics analysis  peer code reviews  unit testing  code coverage analysis  traceability  software testing practices     a b testing    a b testing method running controlled experiment determine proposed change effective current approach  customers routed either current version  control  feature  modified version  treatment  data collected determine version better achieving desired outcome     concurrent testing    concurrent concurrency testing assesses behaviour performance software systems use concurrent computing  generally normal usage conditions  typical problems type testing expose deadlocks  race conditions problems shared memory resource handling     conformance testing type testing    in software testing  conformance testing verifies product performs according specified standards  compilers  instance  extensively tested determine whether meet recognized standard language     output comparison testing    creating display expected output  whether data comparison text screenshots ui        sometimes called snapshot testing golden master testing unlike many forms testing  cannot detect failures automatically instead requires human evaluate output inconsistencies     property testing    property testing testing technique  instead asserting specific inputs produce specific expected outputs  practitioner randomly generates many inputs  runs program  asserts truth  property  true every pair input output  for example  every input sort function length output  every output sort function monotonically increasing list property testing libraries allow user control strategy random inputs constructed  ensure coverage degenerate cases  inputs featuring specific patterns needed fully exercise aspects implementation test property testing also sometimes known  generative testing   quickcheck testing  since introduced popularized haskell library  quickcheck      vcr testing    vcr testing  also known  playback testing   record replay  testing  testing technique increasing reliability speed regression tests involve component slow unreliable communicate  often third-party api outside tester control  it involves making recording   cassette   system interactions external component  replaying recorded interactions substitute communicating external system subsequent runs test the technique popularized web development ruby library vcr    testing process       traditional waterfall development model    a common practice waterfall development testing performed independent group testers  this happen functionality developed  shipped customer  this practice often results testing phase used project buffer compensate project delays  thereby compromising time devoted testing           moment development project starts  continuous process project finishes however  even waterfall development model  unit testing often done software development team even testing done separate team     agile xp development model    in contrast  emerging software disciplines extreme programming agile software development movement  adhere  test-driven software development  model  in process  unit tests written first  software engineers  often pair programming extreme programming methodology   the tests expected fail initially  each failing test followed writing enough code make pass  this means test suites continuously updated new failure conditions corner cases discovered  integrated regression tests developed  unit tests maintained along rest software source code generally integrated build process  inherently interactive tests relegated partially manual build acceptance process  the ultimate goals test process support continuous integration reduce defect rates this methodology increases testing effort done development  reaching formal testing team  in development models  test execution occurs requirements defined coding process completed     a sample testing cycle    although variations exist organizations  typical cycle testing  the sample common among organizations employing waterfall development model  the practices commonly found development models  might clear explicit requirements analysis  testing begin requirements phase software development life cycle  during design phase  testers work determine aspects design testable parameters tests work test planning  test strategy  test plan  testbed creation  since many activities carried testing  plan needed test development  test procedures  test scenarios  test cases  test datasets  test scripts use testing software test execution  testers execute software based plans test documents report errors found development team  this part could complex running tests lack programming knowledge test reporting  once testing completed  testers generate metrics make final reports test effort whether software tested ready release test result analysis  or defect analysis  done development team usually along client  order decide defects assigned  fixed  rejected  i e  found software working properly  deferred dealt later defect retesting  once defect dealt development team  retested testing team regression testing  it common small test program built subset tests  integration new  modified  fixed software  order ensure latest delivery ruined anything software product whole still working correctly test closure  once test meets exit criteria  activities capturing key outputs  lessons learned  results  logs  documents related project archived used reference future projects    automated testing   many programming groups relying more automated testing  especially groups use test-driven development  there many frameworks write tests  continuous integration software run tests automatically every time code checked version control system while automation cannot reproduce everything human  ways think   useful regression testing  however  require well-developed test suite testing scripts order truly useful     testing tools    program testing fault detection aided significantly testing tools debuggers testing debug tools include features program monitors  permitting full partial monitoring program code  including instruction set simulator  permitting complete instruction level monitoring trace facilitieshypervisor  permitting complete control execution program code including -program animation  permitting step-by-step execution conditional breakpoint source level machine codecode coverage reportsformatted dump symbolic debugging  tools allowing inspection program variables error chosen pointsautomated functional graphical user interface  gui  testing tools used repeat system-level tests guibenchmarks  allowing run-time performance comparisons madeperformance analysis  profiling tools  help highlight hot spots resource usagesome features may incorporated single composite tool integrated development environment  ide      capture replay    capture replay consists collecting end-to-end usage scenario interacting application turning scenarios test cases  possible applications capture replay include generation regression tests  the scarpe tool  selectively captures subset application study executes  jrapture  captures sequence interactions executing java program components host system files  events graphical user interfaces  these sequences replayed observation-based testing  saieva et al  propose generate ad-hoc tests replay recorded user execution traces order test candidate patches critical security bugs  pankti collects object profiles production generate focused differential unit tests  this tool enhances capture replay systematic generation  derived test oracles    measurement software testing   quality measures include topics correctness  completeness  security iso iec      requirements capability  reliability  efficiency  portability  maintainability  compatibility  usability there number frequently used software metrics  measures  used assist determining state software adequacy testing     hierarchy testing difficulty    based number test cases required construct complete test suite context  i e  test suite  applied implementation test  collect enough information precisely determine whether system correct incorrect according specification   hierarchy testing difficulty proposed  it includes following testability classes class i  exists finite complete test suite class ii  partial distinguishing rate  i e   incomplete capability distinguish correct systems incorrect systems  reached finite test suite class iii  exists countable complete test suite class iv  exists complete test suite class v  cases it proved class strictly included next  for instance  testing assume behavior implementation test denoted deterministic finite-state machine known finite sets inputs outputs known number states belongs class i  subsequent classes   however  number states known  belongs classes class ii on  if implementation test must deterministic finite-state machine failing specification single trace  continuations   number states unknown  belongs classes class iii on  testing temporal machines transitions triggered inputs produced within real-bounded interval belongs classes class iv  whereas testing many non-deterministic systems belongs class v   even belong class i   the inclusion class i require simplicity assumed computation model  testing cases involving implementations written programming language  testing implementations defined machines depending continuous magnitudes  proved class i  other elaborated cases  testing framework matthew hennessy must semantics  temporal machines rational timeouts  belong class ii    testing artifacts   a software testing process produce several artifacts  the actual artifacts produced factor software development model used  stakeholder organisational needs test plana test plan document detailing approach taken intended test activities  the plan may include aspects objectives  scope  processes procedures  personnel requirements  contingency plans  the test plan could come form single plan includes test types  like acceptance system test plan  planning considerations  may issued master test plan provides overview one detailed test plan  plan plan   a test plan  cases  part wide  test strategy  documents overall testing approaches  may master test plan even separate artifact traceability matrixa traceability matrix table correlates requirements design documents test documents  it used change tests related source documents changed  select test cases execution planning regression tests considering requirement coverage test casea test case normally consists unique identifier  requirement references design specification  preconditions  events  series steps  also known actions  follow  input  output  expected result  actual result  clinically defined  test case input expected result  this terse  condition x derived result   although normally test cases describe detail input scenario results might expected  it occasionally series steps  often steps contained separate test procedure exercised multiple test cases  matter economy  one expected result expected outcome  the optional fields test case id  test step  order execution number  related requirement   depth  test category  author  check boxes whether test automatable automated  larger test cases may also contain prerequisite states steps  descriptions  a test case also contain place actual result  these steps stored word processor document  spreadsheet  database  common repositories  in database system  may also able see past test results  generated results  system configuration used generate results  these past results would usually stored separate table test scripta test script procedure programming code replicates user actions  initially  term derived product work created automated regression test tools  a test case baseline create test scripts using tool program test suitethe common term collection test cases test suite  the test suite often also contains detailed instructions goals collection test cases  it definitely contains section tester identifies system configuration used testing  a group test cases may also contain prerequisite states steps  descriptions following tests test fixture test datain cases  multiple sets values data used test functionality particular feature  all test values changeable environmental components collected separate files stored test data  it also useful provide data client product project  there techniques generate test data test harnessthe software  tools  samples data input output  configurations referred collectively test harness test runa report results running test case test suite   certifications   several certification programs exist support professional aspirations software testers quality assurance specialists  note practitioners argue testing field ready certification  mentioned controversy section    controversy   some major software testing controversies include agile vs  traditionalshould testers learn work conditions uncertainty constant change aim process  maturity   the agile testing movement received growing popularity since      mainly commercial circles  whereas government military software providers use methodology also traditional test-last models  e g   waterfall model  manual vs  automated testingsome writers believe test automation expensive relative value used sparingly  the test automation considered way capture implement requirements  as general rule  larger system greater complexity  greater roi test automation  also  investment tools expertise amortized multiple projects right level knowledge sharing within organization is existence iso       software testing standard justified significant opposition formed ranks context-driven school software testing iso       standard  professional testing associations  international society software testing  attempted standard withdrawn some practitioners declare testing field ready certification no certification offered actually requires applicant show ability test software  no certification based widely accepted body knowledge  certification cannot measure individual productivity  skill  practical knowledge  cannot guarantee competence  professionalism tester studies used show relative expense fixing defectsthere opposing views applicability studies used show relative expense fixing defects depending introduction detection  for example it commonly believed earlier defect found  cheaper fix it  the following table shows cost fixing defect depending stage found  for example  problem requirements found post-release  would cost        times fix already found requirements review  with advent modern continuous deployment practices cloud-based services  cost re-deployment maintenance may lessen time the data table extrapolated scant  laurent bossavit says analysis the  smaller projects  curve turns two teams first-year students  sample size small extrapolating  smaller projects general  totally indefensible  the gte study explain data  say came two projects  one large one small  the paper cited bell labs  safeguard  project specifically disclaims collected fine-grained data boehm data points suggest  the ibm study  fagan paper  contains claims seem contradict boehm graph numerical results clearly correspond data points boehm even cite paper trw data  except writing  making software        cited original      article  there exists large study conducted trw right time boehm cite  paper contain sort data would support boehm claims    related processes       software verification validation    software testing used association verification validation verification  have built software right   i e   implement requirements  validation  have built right software   i e   deliverables satisfy customer  the terms verification validation commonly used interchangeably industry  also common see two terms defined contradictory definitions  according ieee standard glossary software engineering terminology         verification process evaluating system component determine whether products given development phase satisfy conditions imposed start phase validation process evaluating system component end development process determine whether satisfies specified requirements and  according iso      standard verification confirmation examination provision objective evidence specified requirements fulfilled validation confirmation examination provision objective evidence requirements specific intended use application fulfilled the contradiction caused use concepts requirements specified requirements different meanings in case ieee standards  specified requirements  mentioned definition validation  set problems  needs wants stakeholders software must solve satisfy  such requirements documented software requirements specification  srs   and  products mentioned definition verification  output artifacts every phase software development process  these products  fact  specifications architectural design specification  detailed design specification  etc  the srs also specification  cannot verified  least sense used  subject  but  iso       specified requirements set specifications  mentioned  must verified  a specification  previously explained  product software development process phase receives another specification input  a specification verified successfully correctly implements input specification  all specifications verified except srs first one  validated  though   examples  the design specification must implement srs   construction phase artifacts must implement design specification so  words defined common terms  apparent contradiction disappears both srs software must validated  the srs validated statically consulting stakeholders  nevertheless  running partial implementation software prototype kind  dynamic testing  obtaining positive feedback  increase certainty srs correctly formulated  on hand  software  final running product  artifacts documents  including source code  must validated dynamically stakeholders executing software try it some might argue  srs  input words stakeholders  therefore  srs validation srs verification  thinking way advisable causes confusion  it better think verification process involving formal technical input document     software quality assurance    software testing may considered part software quality assurance  sqa  process        in sqa  software process specialists auditors concerned software development process rather artifacts documentation  code systems  they examine change software engineering process reduce number faults end delivered software  so-called defect rate  what constitutes acceptable defect rate depends nature software  flight simulator video game would much higher defect tolerance software actual airplane  although close links sqa  testing departments often exist independently  may sqa function companies software testing activity investigate software test order provide quality-related information stakeholders  by contrast  qa  quality assurance  implementation policies procedures intended prevent defects reaching customers    see also      references      further reading   meyer  bertrand  august         seven principles software testing   pdf   computer  vol     no     pp          doi         mc           retrieved november          what software testing  - answered community software testers software testing board   external links   software testing tools products curlie software makes software better  economist com
computer engineering  coe cpe  branch engineering integrates several fields computer science electronic engineering required develop computer hardware software  computer engineers usually training electronic engineering  electrical engineering   software design  hardware-software integration instead software engineering electronic engineering  computer engineers involved many hardware software aspects computing  design individual microcontrollers  microprocessors  personal computers  supercomputers  circuit design  this field engineering focuses computer systems work also integrate larger picture usual tasks involving computer engineers include writing software firmware embedded microcontrollers  designing vlsi chips  designing analog sensors  designing mixed signal circuit boards  designing operating systems  computer engineers also suited robotics research  relies heavily using digital systems control monitor electrical systems like motors  communications  sensors in many institutions higher learning  computer engineering students allowed choose areas in-depth study junior senior year full breadth knowledge used design application computers beyond scope undergraduate degree  other institutions may require engineering students complete one two years general engineering declaring computer engineering primary focus    history   computer engineering began      john vincent atanasoff clifford berry began developing world first electronic digital computer physics  mathematics  electrical engineering  john vincent atanasoff physics mathematics teacher iowa state university clifford berry former graduate electrical engineering physics  together  created atanasoff-berry computer  also known abc took   years complete while original abc dismantled discarded     tribute made late inventors  replica abc made      took team researchers engineers four years          build the modern personal computer emerged      several breakthroughs semiconductor technology  these include first working transistor william shockley  john bardeen walter brattain bell labs       silicon surface passivation process  via thermal oxidation  mohamed atalla bell labs       monolithic integrated circuit chip robert noyce fairchild semiconductor       metal-oxide-semiconductor field-effect transistor  mosfet  mos transistor  mohamed atalla dawon kahng bell labs       single-chip microprocessor  intel       federico faggin  marcian hoff  masatoshi shima stanley mazor intel          history computer engineering education    the first computer engineering degree program united states established      case western reserve university cleveland  ohio  as           abet-accredited computer engineering programs u s  in europe  accreditation computer engineering schools done variety agencies part eqanie network  due increasing job requirements engineers concurrently design hardware  software  firmware  manage forms computer systems used industry  tertiary institutions around world offer bachelor degree generally called computer engineering   both computer engineering electronic engineering programs include analog digital circuit design curriculum  as engineering disciplines  sound knowledge mathematics science necessary computer engineers    education   computer engineering referred computer science engineering universities  most entry-level computer engineering jobs require least bachelor degree computer engineering  computer science engineering   typically one must learn array mathematics calculus  algebra trigonometry computer science classes  sometimes degree electronic engineering accepted  due similarity two fields  because hardware engineers commonly work computer software systems  strong background computer programming necessary  according bls   computer engineering major similar electrical engineering computer science courses added curriculum   some large firms specialized jobs require master degree it also important computer engineers keep rapid advances technology  therefore  many continue learning throughout careers  this helpful  especially comes learning new skills improving existing ones  for example  relative cost fixing bug increases along software development cycle  greater cost savings attributed developing testing quality code soon possible process  particularly release    profession  computer engineer   a person profession computer engineering called computer engineer    applications practice   there two major focuses computer engineering  hardware software     computer hardware engineering    according bls  job outlook employment computer hardware engineers  expected ten-year growth           computer hardware engineering estimated    total        jobs    slower average  words compared occupations    this decrease           bls computer hardware engineering estimate     total        jobs                 bls estimate    bls           estimate   today  computer hardware somehow equal electronic computer engineering  ece  divided many subcategories  significant embedded system design     computer software engineering    according u s  bureau labor statistics  bls    computer applications software engineers computer systems software engineers projected among faster average growing occupations  the expected ten-year growth      computer software engineering estimated seventeen percent total           jobs year  this           bls estimate     software developers  and                bls estimate  in addition  growing concerns cybersecurity add put computer software engineering high average rate increase fields  however  work outsourced foreign countries  due  job growth fast last decade  jobs would gone computer software engineers united states would instead go computer software engineers countries india  in addition  bls job outlook computer programmers               decline  words  job outlook      -    -    decline  program computers  i e  embedded systems  computer application developers  furthermore  women software fields declining years even faster engineering fields     computer engineering licensing practice    computer engineering generally practiced within larger product development firms  practice may subject licensing   however  independent consultants advertise computer engineering  like form engineering  may subject state laws restrict professional engineer practice received appropriate license   national council examiners engineering surveying  ncees  first offered principles practice engineering examination computer engineering          specialty areas   there many specialty areas field computer engineering     processor design    processor design process involves choosing instruction set certain execution paradigm  e g  vliw risc  results microarchitecture  might described e g  vhdl verilog  cpu design divided design following components  datapaths  alus pipelines   control unit  logic controls datapaths  memory components register files  caches  clock circuitry clock drivers  plls  clock distribution networks  pad transceiver circuitry  logic gate cell library used implement logic     coding  cryptography  information protection    computer engineers work coding  cryptography  information protection develop new methods protecting various information  digital images music  fragmentation  copyright infringement forms tampering  examples include work wireless communications  multi-antenna systems  optical transmission  digital watermarking     communications wireless networks    those focusing communications wireless networks  work advancements telecommunications systems networks  especially wireless networks   modulation error-control coding  information theory  high-speed network design  interference suppression modulation  design  analysis fault-tolerant system  storage transmission schemes part specialty     compilers operating systems    this specialty focuses compilers operating systems design development  engineers field develop new operating system architecture  program analysis techniques  new techniques assure quality  examples work field include post-link-time code transformation algorithm development new operating system development     computational science engineering    computational science engineering relatively new discipline  according sloan career cornerstone center  individuals working area   computational methods applied formulate solve complex mathematical problems engineering physical social sciences  examples include aircraft design  plasma processing nanometer features semiconductor wafers  vlsi circuit design  radar detection systems  ion transport biological channels  much      computer networks  mobile computing  distributed systems    in specialty  engineers build integrated environments computing  communications  information access  examples include shared-channel wireless networks  adaptive resource management various systems  improving quality service mobile atm environments  some examples include work wireless network systems fast ethernet cluster wired systems     computer systems  architecture  parallel processing  dependability    engineers working computer systems work research projects allow reliable  secure  high-performance computer systems  projects designing processors multi-threading parallel processing included field  other examples work field include development new theories  algorithms  tools add performance computer systems computer architecture includes cpu design  cache hierarchy layout  memory organization load balancing     computer vision robotics    in specialty  computer engineers focus developing visual sensing technology sense environment  representation environment  manipulation environment  the gathered three-dimensional information implemented perform variety tasks  these include improved human modeling  image communication  human-computer interfaces  well devices special-purpose cameras versatile vision sensors     embedded systems    individuals working area design technology enhancing speed  reliability  performance systems  embedded systems found many devices small fm radio space shuttle  according sloan cornerstone career center  ongoing developments embedded systems include  automated vehicles equipment conduct search rescue  automated transportation systems  human-robot coordination repair equipment space   as       computer embedded computer engineering specializations include system-on-chip design  architecture edge computing internet things     integrated circuits  vlsi design  testing cad    this specialty computer engineering requires adequate knowledge electronics electrical systems  engineers working area work enhancing speed  reliability  energy efficiency next-generation very-large-scale integrated  vlsi  circuits microsystems  an example specialty work done reducing power consumption vlsi algorithms architecture     signal  image speech processing    computer engineers area develop improvements human-computer interaction  including speech recognition synthesis  medical scientific imaging  communications systems  other work area includes computer vision development recognition human facial features     quantum computing       see also       related fields        associations    association computer engineers techniciansieee computer societyassociation computing machinery   references      external links    media related computer engineering wikimedia commons
data analysis process inspecting  cleansing  transforming  modelling data goal discovering useful information  informing conclusions  supporting decision-making  data analysis multiple facets approaches  encompassing diverse techniques variety names  used different business  science  social science domains  in today business world  data analysis plays role making decisions scientific helping businesses operate effectively data mining particular data analysis technique focuses statistical modelling knowledge discovery predictive rather purely descriptive purposes  business intelligence covers data analysis relies heavily aggregation  focusing mainly business information  in statistical applications  data analysis divided descriptive statistics  exploratory data analysis  eda   confirmatory data analysis  cda   eda focuses discovering new features data cda focuses confirming falsifying existing hypotheses  predictive analytics focuses application statistical models predictive forecasting classification  text analytics applies statistical  linguistic  structural techniques extract classify information textual sources  species unstructured data  all varieties data analysis data integration precursor data analysis  data analysis closely linked data visualization data dissemination    the process data analysis   analysis  refers dividing whole separate components individual examination  data analysis  process obtaining raw data  subsequently converting information useful decision-making users  data  collected analyzed answer questions  test hypotheses  disprove theories statistician john tukey  defined data analysis        procedures analyzing data  techniques interpreting results procedures  ways planning gathering data make analysis easier  precise accurate  machinery results  mathematical  statistics apply analyzing data  there several phases distinguished  described below  the phases iterative  feedback later phases may result additional work earlier phases  the crisp framework  used data mining  similar steps     data requirements    the data necessary inputs analysis  specified based upon requirements directing analysis  customers  use finished product analysis   the general type entity upon data collected referred experimental unit  e g   person population people   specific variables regarding population  e g   age income  may specified obtained   data may numerical categorical  i e   text label numbers      data collection    data collected variety sources  the requirements may communicated analysts custodians data   information technology personnel within organization  the data may also collected sensors environment  including traffic cameras  satellites  recording devices  etc  it may also obtained interviews  downloads online sources  reading documentation     data processing    data  initially obtained  must processed organized analysis  for instance  may involve placing data rows columns table format  known structured data  analysis  often use spreadsheet statistical software     data cleaning    once processed organized  data may incomplete  contain duplicates  contain errors  the need data cleaning arise problems way datum entered stored  data cleaning process preventing correcting errors  common tasks include record matching  identifying inaccuracy data  overall quality existing data  deduplication  column segmentation  such data problems also identified variety analytical techniques  for example  financial information  totals particular variables may compared separately published numbers believed reliable  unusual amounts  predetermined thresholds  may also reviewed   there several types data cleaning  dependent upon type data set  could phone numbers  email addresses  employers  values  quantitative data methods outlier detection  used get rid data appears higher likelihood input incorrectly  textual data spell checkers used lessen amount mis-typed words  however  harder tell words correct     exploratory data analysis    once datasets cleaned  analyzed  analysts may apply variety techniques  referred exploratory data analysis  begin understanding messages contained within obtained data  the process data exploration may result additional data cleaning additional requests data  thus  initialization iterative phases mentioned lead paragraph section  descriptive statistics   average median  generated aid understanding data  data visualization also technique used  analyst able examine data graphical format order obtain additional insights  regarding messages within data     modelling algorithms    mathematical formulas models  known algorithms   may applied data order identify relationships among variables  example  using correlation causation  in general terms  models may developed evaluate specific variable based variable  contained within dataset  residual error depending implemented model accuracy  e g   data   model   error  inferential statistics  includes utilizing techniques measure relationships particular variables  for example  regression analysis may used model whether change advertising  independent variable x   provides explanation variation sales  dependent variable y   in mathematical terms  y  sales  function x  advertising   it may described  y   ax   b   error   model designed    b  minimize error model predicts y given range values x  analysts may also attempt build models descriptive data  aim simplify analysis communicate results     data product    a data product computer application takes data inputs generates outputs  feeding back environment  it may based model algorithm  for instance  application analyzes data customer purchase history  uses results recommend purchases customer might enjoy     communication    once data analyzed  may reported many formats users analysis support requirements  the users may feedback  results additional analysis  as  much analytical cycle iterative when determining communicate results  analyst may consider implementing variety data visualization techniques help communicate message clearly efficiently audience  data visualization uses information displays  graphics  tables charts  help communicate key messages contained data  tables valuable tool enabling ability user query focus specific numbers  charts  e g   bar charts line charts   may help explain quantitative messages contained data    quantitative messages   stephen few described eight types quantitative messages users may attempt understand communicate set data associated graphs used help communicate message  customers specifying requirements analysts performing data analysis may consider messages course process time-series  a single variable captured period time  unemployment rate   -year period  a line chart may used demonstrate trend ranking  categorical subdivisions ranked ascending descending order  ranking sales performance  measure  salespersons  category  salesperson categorical subdivision  single period   a bar chart may used show comparison across salespersons part-to-whole  categorical subdivisions measured ratio whole  i e   percentage         a pie chart bar chart show comparison ratios  market share represented competitors market deviation  categorical subdivisions compared reference  comparison actual vs  budget expenses several departments business given time period   a bar chart show comparison actual versus reference amount frequency distribution  shows number observations particular variable given interval  number years stock market return intervals                etc  a histogram  type bar chart  may used analysis correlation  comparison observations represented two variables  x y  determine tend move opposite directions  for example  plotting unemployment  x  inflation  y  sample months  a scatter plot typically used message nominal comparison  comparing categorical subdivisions particular order  sales volume product code  a bar chart may used comparison geographic geospatial  comparison variable across map layout  unemployment rate state number persons various floors building  a cartogram typical graphic used    techniques analyzing quantitative data   author jonathan koomey recommended series best practices understanding quantitative data   these include check raw data anomalies prior performing analysis re-perform important calculations  verifying columns data formula driven confirm main totals sum subtotals check relationships numbers related predictable way  ratios time normalize numbers make comparisons easier  analyzing amounts per person relative gdp index value relative base year break problems component parts analyzing factors led results  dupont analysis return equity for variables examination  analysts typically obtain descriptive statistics  mean  average   median  standard deviation  they may also analyze distribution key variables see individual values cluster around mean  the consultants mckinsey company named technique breaking quantitative problem component parts called mece principle  each layer broken components  sub-components must mutually exclusive collectively add layer them  the relationship referred  mutually exclusive collectively exhaustive  mece   for example  profit definition broken total revenue total cost  in turn  total revenue analyzed components  revenue divisions a  b  c  mutually exclusive  add total revenue  collectively exhaustive  analysts may use robust statistical measurements solve certain analytical problems  hypothesis testing used particular hypothesis true state affairs made analyst data gathered determine whether state affairs true false  for example  hypothesis might  unemployment effect inflation   relates economics concept called phillips curve  hypothesis testing involves considering likelihood type i type ii errors  relate whether data supports accepting rejecting hypothesis regression analysis may used analyst trying determine extent independent variable x affects dependent variable y  e g    to extent changes unemployment rate  x  affect inflation rate  y      this attempt model fit equation line curve data  y function x necessary condition analysis  nca  may used analyst trying determine extent independent variable x allows variable y  e g    to extent certain unemployment rate  x  necessary certain inflation rate  y      whereas  multiple  regression analysis uses additive logic x-variable produce outcome x compensate  sufficient necessary   necessary condition analysis  nca  uses necessity logic  one x-variables allow outcome exist  may produce  necessary sufficient   each single necessary condition must present compensation possible    analytical activities data users   users may particular data points interest within data set  opposed general messaging outlined above  such low-level user analytic activities presented following table  the taxonomy also organized three poles activities  retrieving values  finding data points  arranging data points    barriers effective analysis   barriers effective analysis may exist among analysts performing data analysis among audience  distinguishing fact opinion  cognitive biases  innumeracy challenges sound data analysis     confusing fact opinion    effective analysis requires obtaining relevant facts answer questions  support conclusion formal opinion  test hypotheses  facts definition irrefutable  meaning person involved analysis able agree upon them  for example  august       congressional budget office  cbo  estimated extending bush tax cuts                     time period would add approximately      trillion national debt  everyone able agree indeed cbo reported  examine report  this makes fact  whether persons agree disagree cbo opinion as another example  auditor public company must arrive formal opinion whether financial statements publicly traded corporations  fairly stated  material respects   this requires extensive analysis factual data evidence support opinion  when making leap facts opinions  always possibility opinion erroneous     cognitive biases    there variety cognitive biases adversely affect analysis  for example  confirmation bias tendency search interpret information way confirms one preconceptions  in addition  individuals may discredit information support views analysts may trained specifically aware biases overcome them  in book psychology intelligence analysis  retired cia analyst richards heuer wrote analysts clearly delineate assumptions chains inference specify degree source uncertainty involved conclusions  he emphasized procedures help surface debate alternative points view     innumeracy    effective analysts generally adept variety numerical techniques  however  audiences may literacy numbers numeracy  said innumerate   persons communicating data may also attempting mislead misinform  deliberately using bad numerical techniques for example  whether number rising falling may key factor  more important may number relative another number  size government revenue spending relative size economy  gdp  amount cost relative revenue corporate financial statements  this numerical technique referred normalization common-sizing  there many techniques employed analysts  whether adjusting inflation  i e   comparing real vs  nominal data  considering population increases  demographics  etc  analysts apply variety techniques address various quantitative messages described section above analysts may also analyze data different assumptions scenario  for example  analysts perform financial statement analysis  often recast financial statements different assumptions help arrive estimate future cash flow  discount present value based interest rate  determine valuation company stock   similarly  cbo analyzes effects various policy options government revenue  outlays deficits  creating alternative future scenarios key measures    other topics       smart buildings    a data analytics approach used order predict energy consumption buildings  the different steps data analysis process carried order realise smart buildings  building management control operations including heating  ventilation  air conditioning  lighting security realised automatically miming needs building users optimising resources like energy time     analytics business intelligence    analytics  extensive use data  statistical quantitative analysis  explanatory predictive models  fact-based management drive decisions actions   it subset business intelligence  set technologies processes uses data understand analyze business performance drive decision-making      education    in education  educators access data system purpose analyzing student data  these data systems present data educators over-the-counter data format  embedding labels  supplemental documentation  help system making key package display content decisions  improve accuracy educators  data analyses    practitioner notes   this section contains rather technical explanations may assist practitioners beyond typical scope wikipedia article     initial data analysis    the important distinction initial data analysis phase main analysis phase  initial data analysis one refrains analysis aimed answering original research question  the initial data analysis phase guided following four questions      quality data     the quality data checked early possible  data quality assessed several ways  using different types analysis  frequency counts  descriptive statistics  mean  standard deviation  median   normality  skewness  kurtosis  frequency histograms   normal imputation needed analysis extreme observations  outlying observations data analyzed see seem disturb distribution comparison correction differences coding schemes  variables compared coding schemes variables external data set  possibly corrected coding schemes comparable test common-method variance the choice analyses assess data quality initial data analysis phase depends analyses conducted main analysis phase      quality measurements     the quality measurement instruments checked initial data analysis phase focus research question study  one check whether structure measurement instruments corresponds structure reported literature there two ways assess measurement quality confirmatory factor analysisanalysis homogeneity  internal consistency   gives indication reliability measurement instrument  during analysis  one inspects variances items scales  cronbach   scales  change cronbach alpha item would deleted scale     initial transformations     after assessing quality data measurements  one might decide impute missing data  perform initial transformations one variables  although also done main analysis phase possible transformations variables square root transformation  distribution differs moderately normal log-transformation  distribution differs substantially normal inverse transformation  distribution differs severely normal make categorical  ordinal   dichotomous   distribution differs severely normal  transformations help      did implementation study fulfill intentions research design      one check success randomization procedure  instance checking whether background substantive variables equally distributed within across groups  if study need use randomization procedure  one check success non-random sampling  instance checking whether subgroups population interest represented sample other possible data distortions checked dropout  identified initial data analysis phase item non-response  whether random assessed initial data analysis phase treatment quality  using manipulation checks       characteristics data sample     in report article  structure sample must accurately described  it especially important exactly determine structure sample  specifically size subgroups  subgroup analyses performed main analysis phase the characteristics data sample assessed looking basic statistics important variablesscatter plotscorrelations associationscross-tabulations     final stage initial data analysis     during final stage  findings initial data analysis documented  necessary  preferable  possible corrective actions taken also  original plan main data analyses specified detail rewritten  in order  several decisions main data analyses made in case non-normals  one transform variables  make variables categorical  ordinal dichotomous   adapt analysis method in case missing data  one neglect impute missing data  imputation technique used in case outliers  one use robust analysis techniques in case items fit scale  one adapt measurement instrument omitting items  rather ensure comparability  uses  measurement instrument  in case   small subgroups  one drop hypothesis inter-group differences  use small sample techniques  like exact tests bootstrapping in case randomization procedure seems defective  one calculate propensity scores include covariates main analyses      analysis     several analyses used initial data analysis phase univariate statistics  single variable bivariate associations  correlations graphical techniques  scatter plots it important take measurement levels variables account analyses  special statistical techniques available level nominal ordinal variablesfrequency counts  numbers percentages associationscircumambulations  crosstabulations hierarchical loglinear analysis  restricted maximum   variables loglinear analysis  identify relevant important variables possible confounders exact tests bootstrapping  case subgroups small computation new variablescontinuous variablesdistributionstatistics  m  sd  variance  skewness  kurtosis stem-and-leaf displaysbox plots     nonlinear analysis     nonlinear analysis often necessary data recorded nonlinear system  nonlinear systems exhibit complex dynamic effects including bifurcations  chaos  harmonics subharmonics cannot analyzed using simple linear methods   nonlinear data analysis closely related nonlinear system identification     main data analysis    in main analysis phase  analyses aimed answering research question performed well relevant analysis needed write first draft research report      exploratory confirmatory approaches     in main analysis phase  either exploratory confirmatory approach adopted  usually approach decided data collected  in exploratory analysis clear hypothesis stated analysing data  data searched models describe data well  in confirmatory analysis clear hypotheses data tested exploratory data analysis interpreted carefully  when testing multiple models high chance finding least one significant  due type   error  it important always adjust significance level testing multiple models  example  bonferroni correction  also  one follow exploratory analysis confirmatory analysis dataset  an exploratory analysis used find ideas theory  test theory well  when model found exploratory dataset  following analysis confirmatory analysis dataset could simply mean results confirmatory analysis due type   error resulted exploratory model first place  the confirmatory analysis therefore informative original exploratory analysis      stability results     it important obtain indication generalizable results are  while often difficult check  one look stability results  are results reliable reproducible  there two main ways that cross-validation  by splitting data multiple parts  check analysis  like fitted model  based one part data generalizes another part data well  cross-validation generally inappropriate  though  correlations within data  e g  panel data  hence methods validation sometimes need used  for topic  see statistical model validation sensitivity analysis  a procedure study behavior system model global parameters  systematically  varied  one way via bootstrapping    free software data analysis   notable free software data analysis include devinfo   a database system endorsed united nations development group monitoring analyzing human development elki   data mining framework java data mining oriented visualization functions knime   the konstanz information miner  user friendly comprehensive data analytics framework orange   a visual programming tool featuring interactive data visualization methods statistical data analysis  data mining  machine learning pandas   python library data analysis paw   fortran c data analysis framework developed cern r   a programming language software environment statistical computing graphics root    c   data analysis framework developed cern scipy   python library data analysis julia - a programming language well-suited numerical analysis computational science    international data analysis contests   different companies organizations hold data analysis contests encourage researchers utilize data solve particular question using data analysis  a examples well-known international data analysis contests follows kaggle competition  held kaggle ltpp data analysis contest held fhwa asce    see also      references       citations        bibliography    ad r  herman j          chapter     phases initial steps data analysis    in ad r  herman j   mellenbergh  gideon j   hand  david j  eds    advising research methods   consultant companion  huizen  netherlands  johannes van kessel pub  pp           isbn                oclc           ad r  herman j       b    chapter     the main analysis phase    in ad r  herman j   mellenbergh  gideon j   hand  david j  eds    advising research methods   consultant companion  huizen  netherlands  johannes van kessel pub  pp           isbn                oclc           tabachnick  b g    fidell  l s          chapter    cleaning act  screening data prior analysis  in b g  tabachnick   l s  fidell  eds    using multivariate statistics  fifth edition  pp           boston  pearson education  inc    allyn bacon    further reading   ad r  h j    mellenbergh  g j   contributions d j  hand          advising research methods  a consultant companion  huizen  netherlands  johannes van kessel publishing   isbn    -  -     -  - chambers  john m   cleveland  william s   kleiner  beat  tukey  paul a          graphical methods data analysis  wadsworth duxbury press  isbn  -   -     -xfandango  armando         python data analysis   nd edition  packt publishers  isbn    -          juran  joseph m   godfrey  a  blanton         juran quality handbook   th edition  new york  mcgraw hill  isbn  -  -      -xlewis-beck  michael s          data analysis  introduction  sage publications inc  isbn  -    -    - nist sematech        handbook statistical methods pyzdek  t          quality engineering handbook  isbn  -    -    - richard veryard         pragmatic data analysis  oxford   blackwell scientific publications  isbn  -   -     - tabachnick  b g   fidell  l s          using multivariate statistics   th edition  boston  pearson education  inc    allyn bacon  isbn    - -   -     - 
interaction design  often abbreviated ixd   practice designing interactive digital products  environments  systems  services    xxxi     beyond digital aspect  interaction design also useful creating physical  non-digital  products  exploring user might interact it  common topics interaction design include design  human computer interaction  software development  while interaction design interest form  similar design fields   main area focus rests behavior      rather analyzing things  interaction design synthesizes imagines things could be  this element interaction design characterizes ixd design field opposed science engineering field   xviii while disciplines software engineering heavy focus designing technical stakeholders  interaction design focused meeting needs optimizing experience users  within relevant technical business constraints   xviii    history   the term interaction design coined bill moggridge bill verplank mid-     took    years concept started take hold   xviii  to verplank  adaptation computer science term user interface design industrial design profession  to moggridge  improvement soft-face  coined      refer application industrial design products containing software the earliest programs design interactive technologies visible language workshop  started muriel cooper mit       interactive telecommunications program founded nyu      martin elton later headed red burns the first academic program officially named  interaction design  established carnegie mellon university      master design interaction design  at outset  program focused mainly screen interfaces  shifting greater emphasis  big picture  aspects interaction people  organizations  culture  service system in       gillian crampton smith founded computer-related design ma royal college art  rca  london  changed      design interactions  headed anthony dunne  in       crampton smith helped found interaction design institute ivrea  small institute olivetti hometown northern italy  dedicated solely interaction design  the institute moved milan october      merged domus academy  in       people originally involved idii set copenhagen institute interaction design  ciid   after ivrea  crampton smith philip tabor added interaction design  ixd  track visual multimedia communication iuav  university venice  italy            in       swedish foundation strategic research founded the interactive institute swedish research institute field interaction design    methodologies       goal-oriented design    goal-oriented design  goal-directed design   concerned satisfying needs desires users product service    xviii alan cooper argues the inmates are running asylum need new approach solving interactive software-based problems      the problems designing computer interfaces fundamentally different include software  e g   hammers    cooper introduces concept cognitive friction  interface design complex difficult use  behaves inconsistently unexpectedly  possessing different modes      alternatively  interfaces designed serve needs service product provider  user needs may poorly served approach     usability    usability answers question  someone use interface    jakob nielsen describes usability quality attribute describes usable interface is  shneiderman proposes principles designing usable interfaces called  eight golden rules interface design  well-known heuristics creating usable systems     personas    personas archetypes describe various goals observed behaviour patterns among users a persona encapsulates critical behavioural data way designers stakeholders understand  remember  relate to  personas use storytelling engage users  social emotional aspects  helps designers either visualize best product behaviour see recommended design successful     cognitive dimensions    the cognitive dimensions framework provides vocabulary evaluate modify design solutions  cognitive dimensions offer lightweight approach analysis design quality  rather in-depth  detailed description  they provide common vocabulary discussing notation  user interface programming language design dimensions provide high-level descriptions interface user interacts  examples include consistency  error-proneness  hard mental operations  viscosity premature commitment  these concepts aid creation new designs existing ones design maneuvers alter design within particular dimension     affective interaction design    designers must aware elements influence user emotional responses  for instance  products must convey positive emotions avoiding negative ones  other important aspects include motivational  learning  creative  social persuasive influences  one method help convey aspects example  use dynamic icons  animations sound help communicate  creating sense interactivity  interface aspects fonts  color palettes graphical layouts influence acceptance  studies showed affective aspects affect perceptions usability emotion pleasure theories exist explain interface responses  these include don norman emotional design model  patrick jordan pleasure model mccarthy wright technology experience framework    five dimensions   the concept dimensions interaction design introduced moggridge book designing interactions  crampton smith wrote interaction design draws four existing design languages   d   d   d   d  silver later proposed fifth dimension  behaviour     words    this dimension defines interactions  words element users interact with     visual representations    visual representations elements interface user perceives  may include limited  typography  diagrams  icons  graphics      physical objects space    this dimension defines objects space  within users interact      time    the time user interacts interface  an example includes  content changes time sound  video animation      behavior    behavior defines users respond interface  users may different reactions interface    interaction design association   the interaction design association created      serve community  the organization        members     local groups  ixda hosts interaction annual interaction design conference  interaction awards    related disciplines   industrial designthe core principles industrial design overlap interaction design  industrial designers use knowledge physical form  color  aesthetics  human perception desire  usability create fit object person using it human factors ergonomicscertain basic principles ergonomics provide grounding interaction design  these include anthropometry  biomechanics  kinesiology  physiology psychology relate human behavior built environment cognitive psychologycertain basic principles cognitive psychology provide grounding interaction design  these include mental models  mapping  interface metaphors  affordances  many laid donald norman influential book the design everyday things human computer interactionacademic research human computer interaction  hci  includes methods describing testing usability interacting interface  cognitive dimensions cognitive walkthrough design researchinteraction designers typically informed iterative cycles user research  user research used identify needs  motivations behaviors end users  they design emphasis user goals experience  evaluate designs terms usability affective influence architectureas interaction designers increasingly deal ubiquitous computing  urban informatics urban computing  architects  ability make  place  create context becomes point contact disciplines user interface designlike user interface design experience design  interaction design often associated design system interfaces variety media concentrates aspects interface define present behavior time  focus developing system respond user experience way around    see also      references      further reading   bolter  jay d   gromala  diane         windows mirrors  interaction design  digital art  myth transparency  cambridge  massachusetts  mit press  isbn    - -   -     -  buchenau  marion  suri  jane fulton  experience prototyping  dis       isbn  -     -   -  buxton  bill         sketching user experience  new riders press  isbn  -   -     -  cooper  alan         the inmates running asylum  sams  isbn            cooper  alan  reimann  robert  cronin  david  noessel  christopher         about face   th ed    wiley  isbn               dawes  brendan         analog in  digital out  berkeley  california  new riders press goodwin  kim         designing digital age  how create human-centered products services  isbn    - -   -     -  houde  stephanie  hill  charles          what do prototypes prototype     in helander  m  landauer  t  prabhu  p  eds    handbook human computer interaction   nd ed    elsevier science jones  matt   gary marsden  mobile interaction design  john wiley   sons        isbn  -   -     -  kolko  jon         thoughts interaction design  isbn    - -  -      -  laurel  brenda  lunenfeld  peter         design research  methods perspectives  mit press  isbn  -   -     -  tinauli  musstanser  pillan  margherita          interaction design experiential factors  a novel case study digital pen paper   mobility      proceedings international conference mobile technology  applications  systems  new york  acm  doi                          isbn    - -     -   -  norman  donald         the design everyday things  new york  basic books  isbn    - -   -     -  raskin  jef         the humane interface  acm press  isbn  -   -     -  saffer  dan         designing interaction  new riders press  isbn  -   -     -   
network management process administering managing computer networks  services provided discipline include fault analysis  performance management  provisioning networks maintaining quality service  network management software used network administrators help perform functions    technologies   a small number accessory methods exist support network network device management  network management allows it professionals monitor network components within large network area  access methods include snmp  command-line interface  cli   custom xml  cmip  windows management instrumentation  wmi   transaction language    tl    corba  netconf  java management extensions  jmx  schemas include structure management information  smi   wbem  common information model  cim schema   mtosi amongst others    see also      references      external links   network management curlieinternet network management curlienetwork monitoring management toolssoftware-defined network management
data science interdisciplinary field uses scientific methods  processes  algorithms systems extract knowledge insights noisy  structured unstructured data  apply knowledge actionable insights data across broad range application domains  data science related data mining  machine learning big data data science  concept unify statistics  data analysis  informatics  related methods  order  understand analyze actual phenomena  data  it uses techniques theories drawn many fields within context mathematics  statistics  computer science  information science  domain knowledge  however  data science different computer science information science  turing award winner jim gray imagined data science  fourth paradigm  science  empirical  theoretical  computational  data-driven  asserted  everything science changing impact information technology  data deluge a data scientist someone creates programming code  combines statistical knowledge create insights data    foundations   data science interdisciplinary field focused extracting knowledge data sets  typically large  see big data   applying knowledge actionable insights data solve problems wide range application domains  the field encompasses preparing data analysis  formulating data science problems  analyzing data  developing data-driven solutions  presenting findings inform high-level decisions broad range application domains  as  incorporates skills computer science  statistics  information science  mathematics  information visualization  data integration  graphic design  complex systems  communication business  statistician nathan yau  drawing ben fry  also links data science human-computer interaction  users able intuitively control explore data  in       american statistical association identified database management  statistics machine learning  distributed parallel systems three emerging foundational professional communities     relationship statistics    many statisticians  including nate silver  argued data science new field  rather another name statistics  others argue data science distinct statistics focuses problems techniques unique digital data  vasant dhar writes statistics emphasizes quantitative data description  in contrast  data science deals quantitative qualitative data  e g  images  emphasizes prediction action  andrew gelman columbia university described statistics nonessential part data science stanford professor david donoho writes data science distinguished statistics size datasets use computing  many graduate programs misleadingly advertise analytics statistics training essence data science program  he describes data science applied field growing traditional statistics  in summary  data science therefore described applied branch statistics    etymology       early usage    in       john tukey described field called  data analysis   resembles modern data science  in       lecture given chinese academy sciences beijing  c f  jeff wu used term data science first time alternative name statistics  later  attendees      statistics symposium university montpellier ii acknowledged emergence new discipline focused data various origins forms  combining established concepts principles statistics data analysis computing the term  data science  traced back       peter naur proposed alternative name computer science  in       international federation classification societies became first conference specifically feature data science topic  however  definition still flux  after      lecture chinese academy sciences beijing       c f  jeff wu suggested statistics renamed data science  he reasoned new name would help statistics shed inaccurate stereotypes  synonymous accounting  limited describing data  in       hayashi chikio argued data science new  interdisciplinary concept  three aspects  data design  collection  analysis during      popular terms process finding patterns datasets  increasingly large  included  knowledge discovery   data mining      modern usage    the modern conception data science independent discipline sometimes attributed william s  cleveland  in      paper  advocated expansion statistics beyond theory technical areas  would significantly change field  warranted new name   data science  became widely used next years        committee data science technology launched data science journal  in       columbia university launched the journal data science  in       american statistical association section statistical learning data mining changed name section statistical learning data science  reflecting ascendant popularity data science the professional title  data scientist  attributed dj patil jeff hammerbacher       though used national science board      report   long-lived digital data collections  enabling research education   st century   referred broadly key role managing digital data collection there still consensus definition data science considered buzzword    market   big data becoming tool businesses companies sizes  the availability interpretation big data altered business models old industries enabled creation new ones  data scientists responsible breaking big data usable information creating software algorithms help companies organizations determine optimal operations    technologies techniques   there variety different technologies techniques used data science depend application  more recently  full-featured  end-to-end platforms developed heavily used data science machine learning     techniques    linear regressionlogistic regressiondecision trees used prediction models classification data fitting  the decision tree structure used generate rules able classify predict target class label variable based observation attributes support-vector machine  svm cluster analysis technique used group data together dimensionality reduction used reduce complexity data computation performed quickly machine learning technique used perform tasks inferencing patterns datanaive bayes classifiers used classify applying bayes  theorem  they mainly used datasets large amounts data  aptly generate accurate results    see also   international journal population data science   references   
in computer science computer programming  data type simply type attribute data tells compiler interpreter programmer intends use data  most programming languages support basic data types integer numbers  varying sizes   floating-point numbers  approximate real numbers   characters booleans  a data type constrains values expression  variable function  might take  this data type defines operations done data  meaning data  way values type stored  a data type provides set values expression  i e  variable  function  etc   may take values    concept   data types used within type systems  offer various ways defining  implementing  using them  different type systems ensure varying degrees type safety almost programming languages explicitly include notion data type  though different languages may use different terminology common data types include integerfloating-point numbercharacterstringbooleanfor example  java programming language  type int represents set   -bit integers ranging value                               well operations performed integers  addition  subtraction  multiplication  a color  hand  might represented three bytes denoting amounts red  green  blue  string representing color name most programming languages also allow programmer define additional data types  usually combining multiple elements types defining valid operations new data type   for example  programmer might create new data type named  complex number  would include real imaginary parts  a data type also represents constraint placed upon interpretation data type system  describing representation  interpretation structure values objects stored computer memory  the type system uses data type information check correctness computer programs access manipulate data most data types statistics comparable types computer programming  vice versa  shown following table    definition    parnas  shore   weiss       identified five definitions  type  used sometimes implicitly literature   types including behavior align closely object-oriented models  whereas structured programming model would tend include code  called plain old data structures the five types syntactica type purely syntactic label associated variable declared  such definitions  type  give semantic meaning types representationa type defined terms composition primitive types often machine types representation behavioura type defined representation set operators manipulating representations value spacea type set possible values variable possess  such definitions make possible speak  disjoint  unions cartesian products types value space behavioura type set values variable possess set functions one apply values the definition terms representation often done imperative languages algol pascal  definition terms value space behaviour used higher-level languages simula clu    classes data types       primitive data types    primitive data types typically types built-in basic language implementation      machine data types     all data computers based digital electronics represented bits  alternatives      lowest level  the smallest addressable unit data usually group bits called byte  usually octet    bits   the unit processed machine code instructions called word        typically       bits   most instructions interpret word binary number    -bit word represent unsigned integer values                                                                                                              displaystyle       -     signed integer values                                                                                                   displaystyle -                                                                                                                     displaystyle       -      because two complement  machine language machine need distinguish unsigned signed data types part floating-point numbers used floating-point arithmetic use different interpretation bits word  see floating-point arithmetic details machine data types need exposed made available systems low-level programming languages  allowing fine-grained control hardware  the c programming language  instance  supplies integer types various widths  short long  if corresponding native type exist target platform  compiler break code using types exist  for instance    -bit integer requested    bit platform  compiler tacitly treat array two    bit integers in higher level programming  machine data types often hidden abstracted implementation detail would render code less portable exposed   for instance  generic numeric type might supplied instead integers specific bit-width      boolean type     the boolean type represents values true false  although two values possible  rarely implemented single binary digit efficiency reasons  many programming languages explicit boolean type  instead interpreting  instance    false values true boolean data refers logical structure language interpreted machine language  in case boolean   refers logic false  true always non zero  especially one known boolean        enumerations     the enumerated type distinct values  compared assigned  necessarily particular concrete representation computer memory  compilers interpreters represent arbitrarily  for example  four suits deck playing cards may four enumerators named club  diamond  heart  spade  belonging enumerated type named suit   if variable v declared suit data type  one assign four values it  some implementations allow programmers assign integer values enumeration values  even treat type-equivalent integers      numeric types     such the integer data types   non-fractional numbers   may sub-typed according ability contain negative values  e g  unsigned c c     may also small number predefined subtypes  short long c c     allow users freely define subranges        e g  pascal ada  floating point data types  usually represent values high-precision fractional values  rational numbers  mathematically   sometimes misleadingly called reals  evocative mathematical real numbers   they usually predefined limits maximum values precision  typically stored internally form    b  b integers   displayed familiar decimal form fixed point data types convenient representing monetary values  they often implemented internally integers  leading predefined limits bignum arbitrary precision numeric types lack predefined limits  they primitive types  used sparingly efficiency reasons     composite types    composite types derived one primitive type  this done number ways  the ways combined called data structures  composing primitive type compound type generally results new type  e g  array-of-integer different type integer an array  also called vector  list  sequence  stores number elements provide random access individual elements  the elements array typically  contexts  required type  arrays may fixed-length expandable  indices array typically required integers   one may stress relaxation speaking associative array  specific range  indices range correspond elements  may sparse array  record  also called tuple struct  records among simplest data structures  a record value contains values  typically fixed number sequence typically indexed names  the elements records usually called fields members union  a union type definition specify number permitted primitive types may stored instances  e g   float long integer   contrast record  could defined contain float integer  whereas  union  one type allowed time a tagged union  also called variant  variant record  discriminated union  disjoint union  contains additional field indicating current type enhanced type safety a set abstract data structure store certain values  without particular order  repeated values  values retrieved sets  rather one tests value membership obtain boolean     an object contains number data fields  like record  also number subroutines accessing modifying  called methods many others possible  tend variations compounds above  for example  linked list store data array  provides sequential access rather random built records dynamic memory  though arguably data structure rather type per se  also common distinct enough including discussion composite types justified      string text types     such a character  may letter alphabet  digit  blank space  punctuation mark  etc a string  sequence characters  strings typically used represent words text  although text trivial cases involves much sequence characters character string types store sequences characters character set ascii  since character sets include digits  possible numeric string          however  many languages treat belonging different type numeric value      character string types different subtypes according required character  width   the original  -bit wide ascii found limited  superseded     -bit sets  encode wide variety non-latin alphabets  hebrew chinese  symbols  strings may either stretch-to-fit fixed size  even programming language  they may also subtyped maximum size note  strings primitive data type languages  in c  instance  composed array characters     abstract data types    any data type specify concrete representation data abstract data type   instead  formal specification based data type operations used describe it  any implementation specification must fulfill rules given  abstract data types used formal semantics program verification  less strictly  design beyond verification  specification might immediately turned implementation  the obj family programming languages instance bases option using equations specification rewriting run them  algebraic specification important subject research cs around      almost synonym abstract data types time  it mathematical foundation universal algebra  the specification language made expressive allowing formulas equations a typical example hierarchy list  bag set data types  all data types declared three operations  null  constructs empty container  single  constructs container single element append  combines two containers type  the complete specification three data types given following rules operation access data specified likely  e g  member function containers     other types    types based  derived  basic types explained above  in languages  c  functions type derived type return value      pointers references     the main non-composite  derived type pointer  data type whose value refers directly   points   another value stored elsewhere computer memory using address  it primitive kind reference   in everyday terms  page number book could considered piece data refers another one   pointers often stored format similar integer  however  attempting dereference  look  pointer whose value never valid memory address would cause program crash  to ameliorate potential problem  pointers considered separate type type data point  even underlying representation same      function types     while functions assigned type   type considered data type setting article  here  data viewed distinct algorithms  in programming  functions strongly related latter  but  central tenet universal data processing algorithms represented data  e g   textual description binary programs  contrast data functions limits  in fact  functions represented data  functions also used encode data  many contemporary type systems focus strongly function types many modern languages allow functions operate first-class citizens to exclude functions treated data types uncommon related fields  predicate logic instance allow application quantifiers function predicate names      meta types     some programming languages represent type information data  enabling type introspection reflection  in contrast  higher order type systems  allowing types constructed types passed functions values  typically avoid basing computational decisions them      utility types     for convenience  high-level languages may supply ready-made  real world  data types  instance times  dates  monetary values  memory  even language would allow built primitive types    type systems   a type system associates types computed values  by examining flow values  type system attempts prove type errors occur  the type system question determines constitutes type error  type system generally seeks guarantee operations expecting certain kind value used values operation make sense a compiler may use static type value optimize storage needs choice algorithms operations value  in many c compilers float data type  example  represented    bits  accord ieee specification single-precision floating point numbers  they thus use floating-point-specific microprocessor operations values  floating-point addition  multiplication  etc   the depth type constraints manner evaluation affect typing language  a programming language may associate operation varying concrete algorithms type case type polymorphism  type theory study type systems  although concrete type systems programming languages originate practical issues computer architecture  compiler implementation  language design type systems may variously static dynamic  strong weak typing  forth    see also   c data typesdata dictionaryfunctional programmingkindtype theory mathematical models typestype system different choices programming language typingtype conversion   references      further reading   parnas  david l   shore  john e   weiss  david          abstract types defined classes variables   proceedings      conference data   abstraction  definition structure           doi                        s cid          cardelli  luca  wegner  peter  december         on understanding types  data abstraction  polymorphism   pdf   acm computing surveys                   citeseerx                 doi                    issn     -      s cid         cleaveland  j  craig         an introduction data types  addison-wesley  isbn    -              external links    media related data types wikimedia commons
in computer science  associative array  map  symbol table  dictionary abstract data type composed collection  key  value  pairs  possible key appears collection   not confused associative processorsoperations associated data type allow add pair collection remove pair collection modify existing pair lookup value associated particular key implementing associative arrays poses dictionary problem  classic computer science problem  task designing data structure maintains set data  search    delete    insert  operations the two major solutions dictionary problem hash table search tree in cases also possible solve problem using directly addressed arrays  binary search trees  specialized structures many programming languages include associative arrays primitive data types  available software libraries many others  content-addressable memory form direct hardware-level support associative arrays associative arrays many applications including fundamental programming patterns memoization decorator pattern the name come associative property known mathematics  rather  arises fact associate values keys    operations   in associative array  association key value often known  mapping   word mapping may also used refer process creating new association the operations usually defined associative array add insert  add new                              k        e                        v               l        u        e                         displaystyle  key value     pair collection  mapping new key new value  the arguments operation key value reassign  replace value one                              k        e                        v               l        u        e                         displaystyle  key value     pairs already collection  mapping existing key new value  as insertion  arguments operation key value remove delete  remove                              k        e                        v               l        u        e                         displaystyle  key value     pair collection  unmapping given key value  the argument operation key lookup  find value   bound given key  the argument operation key  value returned operation  if value found  associative array implementations raise exception  others create pair given key default value value type  zero  empty container     often  instead add reassign single set operation adds new                              k        e                        v               l        u        e                         displaystyle  key value     pair one already exist  otherwise reassigns it in addition  associative arrays may also include operations determining number mappings constructing iterator loop mappings  usually  operation  order mappings returned may implementation-defined a multimap generalizes associative array allowing multiple values associated single key  a bidirectional map related abstract data type mappings operate directions  value must associated unique key  second lookup operation takes value argument looks key associated value    example   suppose set loans made library represented data structure   each book library may checked single library patron time   however  single patron may able check multiple books   therefore  information books checked patrons may represented associative array  books keys patrons values   using notation python json  data structure would a lookup operation key  great expectations  would return  john    if john returns book  would cause deletion operation  pat checks book  would cause insertion operation  leading different state    implementation   for dictionaries small numbers mappings  may make sense implement dictionary using association list  linked list mappings  with implementation  time perform basic dictionary operations linear total number mappings  however  easy implement constant factors running time small another simple implementation technique  usable keys restricted narrow range  direct addressing array  value given key k stored array cell a k   mapping k cell stores special sentinel value indicates absence mapping  as well simple  technique fast  dictionary operation takes constant time  however  space requirement structure size entire keyspace  making impractical unless keyspace small the two major approaches implementing dictionaries hash table search tree     hash table implementations    the frequently used general purpose implementation associative array hash table  array combined hash function separates key separate  bucket  array  the basic idea behind hash table accessing element array via index simple  constant-time operation  therefore  average overhead operation hash table computation key hash  combined accessing corresponding bucket within array  as  hash tables usually perform o    time  outperform alternatives situations hash tables need able handle collisions  hash function maps two different keys bucket array  the two widespread approaches problem separate chaining open addressing  in separate chaining  array store value stores pointer another container  usually association list  stores values matching hash  on hand  open addressing  hash collision found  table seeks empty spot array store value deterministic manner  usually looking next immediate position array open addressing lower cache miss ratio separate chaining table mostly empty  however  table becomes filled elements  open addressing performance degrades exponentially  additionally  separate chaining uses less memory cases  unless entries small  less four times size pointer      tree implementations         self-balancing binary search trees     another common approach implement associative array self-balancing binary search tree  avl tree red black tree compared hash tables  structures advantages weaknesses  the worst-case performance self-balancing binary search trees significantly better hash table  time complexity big o notation o log n   this contrast hash tables  whose worst-case performance involves elements sharing single bucket  resulting o n  time complexity  in addition  like binary search trees  self-balancing binary search trees keep elements order  thus  traversing elements follows least-to-greatest pattern  whereas traversing hash table result elements seemingly random order  however  hash tables much better average-case time complexity self-balancing binary search trees o     worst-case performance highly unlikely good hash function used it worth noting self-balancing binary search tree used implement buckets hash table uses separate chaining  this allows average-case constant lookup  assures worst-case performance o log n   however  introduces extra complexity implementation  may cause even worse performance smaller hash tables  time spent inserting balancing tree greater time needed perform linear search elements linked list similar data structure      other trees     associative arrays may also stored unbalanced binary search trees data structures specialized particular type keys radix trees  tries  judy arrays  van emde boas trees  though ability implementation methods within comparison hash tables varies  instance  judy trees remain indicated perform smaller quantity efficiency hash tables  carefully selected hash tables generally perform increased efficiency comparison adaptive radix trees  potentially greater restrictions types data handle  the advantages alternative structures come ability handle operations beyond basic ones associative array  finding mapping whose key closest queried key  query present set mappings     comparison       ordered dictionary   the basic definition dictionary mandate order  to guarantee fixed order enumeration  ordered versions associative array often used  there two senses ordered dictionary the order enumeration always deterministic given set keys sorting  this case tree-based implementations  one representative  map  container c   the order enumeration key-independent instead based order insertion  this case  ordered dictionary   net framework python the latter sense ordered dictionaries commonly encountered  they implemented using association list  overlaying doubly linked list top normal dictionary  the latter approach  used cpython version      advantage keeping potentially better complexity another implementation  cpython      makes dictionaries ordered splitting hash table insertion-ordered array k-v pairs sparse array   hash table   indices    language support   associative arrays implemented programming language package many language systems provide part standard library  in languages  built standard system  special syntax  often using array-like subscripting built-in syntactic support associative arrays introduced      snobol   name  table   tmg offered tables string keys integer values  mumps made multi-dimensional associative arrays  optionally persistent  key data structure  setl supported one possible implementation sets maps  most modern scripting languages  starting awk including rexx   perl  php  tcl  javascript  maple  python  ruby  wolfram language  go  lua  support associative arrays primary container type  in many languages  available library functions without special syntax in smalltalk  objective-c   net  python  realbasic  swift  vba delphi called dictionaries  perl  ruby seed  called hashes  c    java  go  clojure  scala  ocaml  haskell called maps  see map  c     unordered map  c     map   common lisp windows powershell  called hash tables  since typically use implementation    maple lua  called tables  in php  arrays associative  except keys limited integers strings  in javascript  see also json   objects behave associative arrays string-valued keys  map weakmap types take arbitrary objects keys  in lua  used primitive building block data structures  in visual foxpro  called collections  the d language also support associative arrays    permanent storage   many programs using associative arrays point need store data permanent form  like computer file  a common solution problem generalized concept known archiving serialization  produces text binary representation original objects written directly file  this commonly implemented underlying object model  like  net cocoa  include standard functions convert internal data text form  the program create complete text representation group objects calling methods  almost always already implemented base associative array class for programs use large data sets  sort individual file storage appropriate  database management system  db  required  some db systems natively store associative arrays serializing data storing serialized data key  individual arrays loaded saved database using key refer them  these key value stores used many years history long as common relational database  rdbs   lack standardization  among reasons  limited use certain niche roles  rdbs used roles cases  although saving objects rdb complicated  problem known object-relational impedance mismatch after c        need high performance databases suitable cloud computing closely matching internal structure programs using led renaissance key value store market  these systems store retrieve associative arrays native fashion  greatly improve performance common web-related workflows    see also   key value databasetuplefunction  mathematics json   references      external links   nist dictionary algorithms data structures  associative array
in computing  hash table  hash map  data structure implements associative array abstract data type  structure map keys values  a hash table uses hash function compute index  also called hash code  array buckets slots  desired value found  during lookup  key hashed resulting hash indicates corresponding value stored ideally  hash function assign key unique bucket  hash table designs employ imperfect hash function  might cause hash collisions hash function generates index one key  such collisions typically accommodated way in well-dimensioned hash table  average cost  number instructions  lookup independent number elements stored table  many hash table designs also allow arbitrary insertions deletions key value pairs   amortized  constant average cost per operation in many situations  hash tables turn average efficient search trees table lookup structure  for reason  widely used many kinds computer software  particularly associative arrays  database indexing  caches  sets    hashing   the advantage using hashing table address record directly computed key  hashing implies function                     h                displaystyle h     applied key                     k                displaystyle k     produces hash                     m                displaystyle m     however  since                     m                displaystyle m    could potentially large  hash result mapped finite entries hash table slots several methods used map keys size hash table                     n                displaystyle n     the common method division method  modular arithmetic used computing slot                           h                 k                                            m                                               n                displaystyle h k      m  mod  n   this often done two steps                               hash                                   hash-fuction key                         displaystyle   text hash     text hash-fuction key                                    index                                   hash                                                     hash-table-size                        displaystyle   text index     text hash          text hash-table-size         choosing hash function    a basic requirement function provide uniform distribution hash values  a non-uniform distribution increases number collisions cost resolving them  uniformity sometimes difficult ensure design  may evaluated empirically using statistical tests  e g   pearson chi-squared test discrete uniform distributions the distribution needs uniform table sizes occur application  in particular  one uses dynamic resizing exact doubling halving table size  hash function needs uniform size power two  here index computed range bits hash function  on hand  hashing algorithms prefer size prime number  the modulus operation may provide additional mixing  especially useful poor hash function for open addressing schemes  hash function also avoid clustering  mapping two keys consecutive slots  such clustering may cause lookup cost skyrocket  even load factor low collisions infrequent  the popular multiplicative hash claimed particularly poor clustering behavior cryptographic hash functions believed provide good hash functions table size  either modulo reduction bit masking  they may also appropriate risk malicious users trying sabotage network service submitting requests designed generate large number collisions server hash tables  however  risk sabotage also avoided cheaper methods  applying secret salt data   a drawback cryptographic hashing functions often slower compute  means cases uniformity  size necessary  non-cryptographic hashing function might preferable k-independent hashing offers way prove certain hash function bad keysets given type hashtable a number results known collision resolution schemes linear probing cuckoo hashing since k-independence prove hash function works  one focus finding fastest possible hash function universal hash function approach choosing hash function randomly way hash function independent keys hashed function  the possibility collision two distinct keys set                                                                        displaystyle                                         displaystyle    cardinality           perfect hash function    if keys known ahead time  perfect hash function used create perfect hash table collisions  if minimal perfect hashing used  every location hash table used well perfect hashing allows constant time lookups cases  this contrast chaining open addressing methods  time lookup low average  may large  o n   instance keys hash values    key statistics   a critical statistic hash table load factor  defined                    l                             f               c                      r                                                                           n            k                                  displaystyle loadfactor    alpha     frac  n  k                         n                displaystyle n    number entries occupied hash table                     k                displaystyle k    number buckets the performance hash table worsens relation load factor                                       displaystyle  alpha      i e                                       displaystyle  alpha     approaches    hence  essential resize  rehash  hash table load factor exceeds ideal value  it also efficient resize hash table size smaller usually done load factor drops                                                                            x                                                                      displaystyle  alpha   max        generally  load factor          acceptable figure          collision resolution   the search algorithm uses hashing consists two parts  the first part computing hash function transforms search key array index  the ideal case two search keys hashes array index  however  always case  since theoretically impossible        hence second part algorithm collision resolution  the two common methods collision resolution separate chaining open addressing           separate chaining    hashing example space-time tradeoff  if exists condition memory infinite  single memory access using key index  potentially huge  array would retrieve value also implies possible key values huge  on hand  time infinite  values stored minimum possible memory linear search array used retrieve element        in separate chaining  process involves building linked list key-value pair search array indices  the collided items chained together single linked list  traversed access item unique search key        collision resolution charming i e  linked list common method implementation  let                     t                displaystyle t                        x                displaystyle x    hash table node respectively  operation involves follows       if keys elements ordered  efficient insert item maintaining order key comparable either numerically lexically  thus resulting faster insertions unsuccessful searches      -     however  standard method using linked list cache-conscious since little spatial locality locality reference since nodes list scattered across memory  hence make efficient use cpu cache           separate chaining structures     if keys ordered  could efficient use  self-organizing  concepts using self-balancing binary search tree  theoretical worse case could bought                     o                 log                           n                                 displaystyle o  log  n       although introduces additional complexities       in cache-conscious variants  dynamic array found cache-friendly used place linked list self-balancing binary search trees usually deployed collision resolution separate chaining  since contiguous allocation patten  array could exploited hardware-cache prefetchers translation lookaside buffer resulting reduced access time memory consumption in dynamic perfect hashing  two level hash tables used reduce look-up complexity guaranteed                     o                                           displaystyle o       worse case  in technique  buckets                     k                displaystyle k    entries organized perfect hash tables                               k                                                         displaystyle k        slots providing constant worst-case lookup time  low amortized time insertion  a study shows array based separate chaining     performant compared standard linked list method heavy load      techniques using fusion tree buckets also result constant time operations high probability     open addressing    in another strategy  called open addressing  entry records stored bucket array itself  when new entry inserted  buckets examined  starting hashed-to slot proceeding probe sequence  unoccupied slot found  when searching entry  buckets scanned sequence   either target record found  unused array slot found  indicates key table  the name  open addressing  refers location   address   item determined hash value   this method also called  closed hashing  confused  open hashing   closed addressing  usually means separate chaining  well-known probe sequences include linear probing  interval probes fixed  usually     since slots located successive locations  linear probing could lead better utilization cpu cache due locality references quadratic probing  interval probes increased adding successive outputs quadratic polynomial starting value given original hash computationdouble hashing  interval probes computed second hash functionin practice  performance open addressing slower separate chaining used conjunction array buckets collusion resolution       since longer sequence array indices may need tried find given element load factor approaches    the load factor must maintained   since reaches   case completely full table search miss would go infinite loop table        the average cost linear probing depends chosen hash function ability distribute keys uniformly throughout table avoid clustering  since formation clusters would result increased search time leading inefficiency            coalesced hashing     coalesced hashing hybrid separate charming open addressing buckets nodes link within table    -   the algorithm ideally suited fixed memory allocation      the collision coalesced hashing resolved identifying largest-indexed empty slot hash table  colliding value inserted slot  the bucket also linked inserted node slot contains colliding hash address          cuckoo hashing     cuckoo hashing form open addressing collision resolution technique provides guarantees                     o                                           displaystyle o       worst-case lookup complexity constant amortized time insertions  the collision resolved maintaining two hash tables  hashing function  collided slot gets replaced given item  preoccupied element slot gets displaced hash table  the process continues every key spot empty buckets tables  procedure enters infinite loop identified maintaining threshold loop counter hash tables get rehashed newer hash functions procedure continues      -         hopscotch hashing     hopscotch hashing open addressing based algorithm combines elements cuckoo hashing  linear probing chaining notion neighbourhood buckets subsequent buckets around given occupied bucket  also called  virtual  bucket      -     the algorithm designed deliver better performance load factor hash table grows beyond      also provides high throughput concurrent settings  thus well suited implementing resizable concurrent hash table        the neighbourhood characteristic hopscotch hashing guarantees property  cost finding desired item given buckets within neighbourhood close cost finding bucket  algorithm attempts item neighbourhood possible cost involved displacing items       each bucket within hash table includes additional  hop-information  h-bit bit array indicating relative distance item originally hashed current virtual bucket within h-  entries        let                     k                displaystyle k                        b        k                displaystyle bk    key inserted bucket key hashed respectively  several cases involved insertion procedure neighbourhood property algorithm vowed      -                         b        k                displaystyle bk    empty  element inserted  leftmost bit bitmap set    empty  linear probing used finding empty slot table  bitmap bucket gets updated followed insertion  empty slot within range neighbourhood  i e  h-   subsequent swap hop-info bit array manipulation bucket performed accordance neighbourhood invariant properties            robin hood hashing     robin hood hashing open addressing based collision resolution algorithm  collisions resolved flavouring displacement element farthest highest probe sequence length  psl   home location  i e  bucket item hashed into       although robin hood hashing change theoritical search cost  significantly effects variance distribution items buckets      i e  dealing cluster formation hash table  each node within hash table uses robin hood hashing augmented store extra psl value  let                     x                displaystyle x    key inserted                      x                 p               l                displaystyle x psl     incremental  psl length                     x                displaystyle x                         t                displaystyle t    hash table                     j                displaystyle j    index  insertion procedure follows     -       if                     x                 p               l                                   t                 j                          p               l                displaystyle x psl   leq   t j  psl     iteration goes next bucket without attempting external prob if                     x                 p               l                                   t                 j                          p               l                displaystyle x psl     t j  psl     insert item                     x                displaystyle x    bucket                     j                displaystyle j     swap                     x                displaystyle x                        t                 j                         displaystyle t j     let                               x                                   displaystyle x      continue prob                     j                                  displaystyle j      bucket insert                               x                                   displaystyle x      repeat procedure every element inserted    dynamic resizing   when insert made number entries hash table exceeds product load factor current capacity hash table need rehashed  rehashing includes increasing size underlying data structure mapping existing items new bucket locations  in implementations  initial capacity greater maximum number entries divided load factor  rehash operations ever occur to limit proportion memory wasted due empty buckets  implementations also shrink size table followed rehash items deleted  from point space time tradeoffs  operation similar deallocation dynamic arrays     resizing copying entries    a common approach automatically trigger complete resizing load factor exceeds threshold rmax  then new larger table allocated  entry removed old table  inserted new table  when entries removed old table old table returned free storage pool  likewise  load factor falls second threshold rmin  entries moved new smaller table for hash tables shrink grow frequently  resizing downward skipped entirely  in case  table size proportional maximum number entries ever hash table one time  rather current number  the disadvantage memory usage higher  thus cache behavior may worse  for best control   shrink-to-fit  operation provided request if table size increases decreases fixed percentage expansion  total cost resizings  amortized insert delete operations  still constant  independent number entries n number operations performed for example  consider table created minimum possible size doubled time load ratio exceeds threshold  if elements inserted table  total number extra re-insertions occur dynamic resizings table      in words  dynamic resizing roughly doubles cost insert delete operation     alternatives all-at-once rehashing    some hash table implementations  notably real-time systems  cannot pay price enlarging hash table  may interrupt time-critical operations  if one cannot avoid dynamic resizing  solution perform resizing gradually disk-based hash tables almost always use alternative all-at-once rehashing  since cost rebuilding entire table disk would high      incremental resizing     one alternative enlarging table perform rehashing gradually during resize  allocate new hash table  keep old table unchanged in lookup delete operation  check tables perform insertion operations new table at insertion also move r elements old table new table when elements removed old table  deallocate it to ensure old table completely copied new table needs enlarged  itis necessary increase size table factor least  r      r resizing      monotonic keys     if known keys stored monotonically increasing  decreasing  order  variation consistent hashing achieved given initial key k   subsequent key ki partitions key domain  k      set   k   ki    ki       in general  repeating process gives finer partition   k   ki     ki   ki          kin -    kin    kin      sequence monotonically increasing keys  ki        kin   n number refinements  the process applies  mutatis mutandis  monotonically decreasing keys  by assigning subinterval partition different hash function hash table    refining partition whenever hash table resized  approach guarantees key hash  issued  never change  even hash table grown since common grow overall number entries doubling  o log n   subintervals check  binary search time redirection o log log n         linear hashing     linear hashing hash table algorithm permits incremental hash table expansion  it implemented using single hash table  two possible lookup functions      hashing distributed hash tables     another way decrease cost table resizing choose hash function way hashes values change table resized  such hash functions prevalent disk-based distributed hash tables  rehashing prohibitively costly the problem designing hash values change table resized known distributed hash table problem the four popular approaches rendezvous hashing  consistent hashing  content addressable network algorithm  kademlia distance    performance       speed analysis    in simplest model  hash function completely unspecified table resize  with ideal hash function  table size                     k                displaystyle k    open addressing collisions holds                     k                displaystyle k    elements single comparison successful lookup  table size                     k                displaystyle k    chaining                     n                displaystyle n    keys minimum                     max                                   n                 k                         displaystyle  max   n-k     collisions                                                             n            k                                           displaystyle  theta    frac  n  k       comparisons lookup  with worst possible hash function  every insertion causes collision  hash tables degenerate linear search                                        n                         displaystyle  theta  n     amortized comparisons per insertion                     n                displaystyle n    comparisons successful lookup adding rehashing model straightforward  as dynamic array  geometric resizing factor                     b                displaystyle b    implies                                           n                          b                                                                                         displaystyle   frac  n  b        keys inserted                                    displaystyle    times  total number insertions bounded                                                         b              n                                      b                                                                            displaystyle   frac  bn  b-                                              n                         displaystyle  theta  n      by using rehashing maintain                     n                 k                displaystyle n k     tables using chaining open addressing unlimited elements perform successful lookup single comparison best choice hash function in realistic models  hash function random variable probability distribution hash functions  performance computed average choice hash function  when distribution uniform  assumption called  simple uniform hashing  shown hashing chaining requires                                                                                                                       n                k                                                                       displaystyle  theta  left     frac  n  k   right     comparisons average unsuccessful lookup  hashing open addressing requires                                                                                                                                              n                                                                   k                                                                       displaystyle  theta  left   frac      -n k   right      both bounds constant  maintain                                            n            k                                   c                displaystyle   frac  n  k   c    using table resizing                      c                displaystyle c    fixed constant less   two factors affect significantly latency operations hash table cache missing  with increasing load factor  search insertion performance hash tables degraded lot due rise average cache missing cost resizing  resizing becomes extreme time-consuming task hash tables grow massive in latency-sensitive programs  time consumption operations average worst cases required small  stable  even predictable  the k hash table  designed general scenario low-latency applications  aiming achieve cost-stable operations growing huge-sized table     memory utilization    sometimes memory requirement table needs minimized   one way reduce memory usage chaining methods eliminate chaining pointers replace form abbreviated pointers another technique introduced donald knuth called abbreviated keys    bender et al  wrote knuth called quotienting    for discussion assume key  reversibly-hashed version key  integer                m-   number buckets n   divided n produce quotient q remainder r   the remainder r used select bucket  bucket quotient q need stored   this saves log  n  bits per element  significant applications quotienting works readily chaining hash tables  simple cuckoo hash tables   to apply technique ordinary open-addressing hash tables  john g  cleary introduced method two bits  virgin bit change bit  included bucket allow original bucket index  r  reconstructed in scheme described  log  m n      bits used store key   it interesting note theoretical minimum storage would log  m n           bits          log  e     features       advantages    the main advantage hash tables table data structures speed  this advantage apparent number entries large  hash tables particularly efficient maximum number entries predicted  bucket array allocated optimum size never resized if set key value pairs fixed known ahead time  insertions deletions allowed   one may reduce average lookup cost careful choice hash function  bucket table size  internal data structures  in particular  one may able devise hash function collision-free  even perfect  in case keys need stored table     drawbacks    although operations hash table take constant time average  cost good hash function significantly higher inner loop lookup algorithm sequential list search tree  thus hash tables effective number entries small   however  cases high cost computing hash function mitigated saving hash value together key  for certain string processing applications  spell-checking  hash tables may less efficient tries  finite automata  judy arrays  also  many possible keys store  key represented small enough number bits  instead hash table  one may use key directly index array values  note collisions case the entries stored hash table enumerated efficiently  constant cost per entry   pseudo-random order  therefore  efficient way locate entry whose key nearest given key  listing n entries specific order generally requires separate sorting step  whose cost proportional log n  per entry  in comparison  ordered search trees lookup insertion cost proportional log n   allow finding nearest key cost  ordered enumeration entries constant cost per entry  however  linkinghashmap made create hash table non-random sequence if keys stored  hash function collision-free   may easy way enumerate keys present table given moment although average cost per operation constant fairly small  cost single operation may quite high  in particular  hash table uses dynamic resizing  insertion deletion operation may occasionally take time proportional number entries  this may serious drawback real-time interactive applications hash tables general exhibit poor locality reference  data accessed distributed seemingly random memory  because hash tables cause access patterns jump around  trigger microprocessor cache misses cause long delays  compact data structures arrays searched linear search may faster  table relatively small keys compact  the optimal performance point varies system system hash tables become quite inefficient many collisions  while extremely uneven hash distributions extremely unlikely arise chance  malicious adversary knowledge hash function may able supply information hash creates worst-case behavior causing excessive collisions  resulting poor performance  e g   denial service attack  in critical applications  data structure better worst-case guarantees used  however  universal hashing keyed hash function  prevents attacker predicting inputs cause worst-case behavior  may preferable the hash function used hash table linux routing table cache changed linux version       countermeasure attacks  the ad hoc short-keyed hash construction later updated use  jhash   siphash    uses       associative arrays    hash tables commonly used implement many types in-memory tables  they used implement associative arrays  arrays whose indices arbitrary strings complicated objects   especially interpreted programming languages like ruby  python  php when storing new item multimap hash collision occurs  multimap unconditionally stores items when storing new item typical associative array hash collision occurs  actual keys different  associative array likewise stores items  however  key new item exactly matches key old item  associative array typically erases old item overwrites new item  every item table unique key     database indexing    hash tables may also used disk-based data structures database indices  dbm  although b-trees popular applications  in multi-node database systems  hash tables commonly used distribute rows amongst nodes  reducing network traffic hash joins     caches    hash tables used implement caches  auxiliary data tables used speed access data primarily stored slower media  in application  hash collisions handled discarding one two colliding entries usually erasing old item currently stored table overwriting new item  every item table unique hash value     sets    besides recovering entry given key  many hash table implementations also tell whether entry exists not those structures therefore used implement set data structure  merely records whether given key belongs specified set keys  in case  structure simplified eliminating parts entry values  hashing used implement static dynamic sets     object representation    several dynamic languages  perl  python  javascript  lua  ruby  use hash tables implement objects  in representation  keys names members methods object  values pointers corresponding member method     unique data representation    hash tables used programs avoid creating multiple character strings contents  for purpose  strings use program stored single string pool implemented hash table  checked whenever new string created  this technique introduced lisp interpreters name hash consing  used many kinds data  expression trees symbolic algebra system  records database  files file system  binary decision diagrams  etc       transposition table    a transposition table complex hash table stores information section searched    implementations       in programming languages    many programming languages provide hash table functionality  either built-in associative arrays standard library modules  in c      example  unordered map class provides hash tables keys values arbitrary type the java programming language  including variant used android  includes hashset  hashmap  linkedhashset  linkedhashmap generic collections in php      zend   engine zend   engine  respectively  use one hash functions daniel j  bernstein generate hash values used managing mappings data pointers stored hash table  in php source code  labelled djbx  a  daniel j  bernstein  times    addition  python built-in hash table implementation  form dict type  well perl hash type     used internally implement namespaces therefore need pay attention security  i e   collision attacks   python sets also use hashes internally  fast lookup  though store keys  values   cpython      uses insertion-ordered variant hash table  implemented splitting value storage array vanilla hash table store set indices in  net framework  support hash tables provided via non-generic hashtable generic dictionary classes  store key value pairs  generic hashset class  stores values in ruby hash table uses open addressing model ruby     onwards in rust standard library  generic hashmap hashset structs use linear probing robin hood bucket stealing ansi smalltalk defines classes set   identityset dictionary   identitydictionary  all smalltalk implementations provide additional  yet standardized  versions weakset  weakkeydictionary weakvaluedictionary tcl array variables hash tables  tcl dictionaries immutable values based hashes  the functionality also available c library functions tcl inithashtable et al   generic hash tables  tcl newdictobj et al   dictionary values   the performance independently benchmarked extremely competitive the wolfram language supports hash tables since version     they implemented name association common lisp provides hash-table class efficient mappings  in spite naming  language standard mandate actual adherence hashing technique implementations    history   the idea hashing arose independently different places  in january       hans peter luhn wrote internal ibm memorandum used hashing chaining  gene amdahl  elaine m  mcgraw  nathaniel rochester  arthur samuel implemented program using hashing time  open addressing linear probing  relatively prime stepping  credited amdahl  ershov  russia  idea    see also   rabin karp string search algorithmstable hashingconsistent hashingextendible hashinglazy deletionpearson hashingphotodnasearch data structureconcurrent hash tablerecord  computer science     related data structures    there several data structures use hash functions cannot considered special cases hash tables bloom filter  memory-efficient data structure designed constant-time approximate lookups  uses hash function  seen approximate hash table distributed hash table  dht   resilient dynamic table spread several nodes network hash array mapped trie  trie structure  similar array mapped trie  key hashed first    references      further reading   tamassia  roberto  goodrich  michael t           chapter nine  maps dictionaries   data structures algorithms java    updated java        th ed    hoboken  nj  wiley  pp           isbn    - -   -     -  mckenzie  b  j   harries  r   bell  t   february         selecting hashing algorithm   software practice   experience                   doi         spe             hdl             s cid             external links   a hash function hash table lookup bob jenkins hash functions paul hsiehdesign compact efficient hash tables javanist entry hash tableslecture hash tables stanford cs   aopen data structures   chapter     hash tables  pat morinmit introduction algorithms  hashing   mit ocw lecture videomit introduction algorithms  hashing   mit ocw lecture video
in computer science  array data structure  simply array  data structure consisting collection elements  values variables   identified least one array index key  an array stored position element computed index tuple mathematical formula  the simplest type data structure linear array  also called one-dimensional array for example  array      -bit   -byte  integer variables  indices      may stored    words memory addresses                               hexadecimal   x d    x d    x d         x f   element index address              the memory address first element array called first address  foundation address  base address because mathematical concept matrix represented two-dimensional grid  two-dimensional arrays also sometimes called matrices  in cases term  vector  used computing refer array  although tuples rather vectors mathematically correct equivalent  tables often implemented form arrays  especially lookup tables  word table sometimes used synonym array arrays among oldest important data structures  used almost every program  they also used implement many data structures  lists strings  they effectively exploit addressing logic computers  in modern computers many external storage devices  memory one-dimensional array words  whose indices addresses  processors  especially vector processors  often optimized array operations arrays useful mostly element indices computed run time  among things  feature allows single iterative statement process arbitrarily many elements array  for reason  elements array data structure required size use data representation  the set valid index tuples addresses elements  hence element addressing formula  usually  always  fixed array use the term array often used mean array data type  kind data type provided high-level programming languages consists collection values variables selected one indices computed run-time  array types often implemented array structures  however  languages may implemented hash tables  linked lists  search trees  data structures the term also used  especially description algorithms  mean associative array  abstract array   theoretical computer science model  abstract data type adt  intended capture essential properties arrays    history   the first digital computers used machine-language programming set access array structures data tables  vector matrix computations  many purposes  john von neumann wrote first array-sorting program  merge sort        building first stored-program computer p      array indexing originally done self-modifying code  later using index registers indirect addressing  some mainframes designed      burroughs b     successors  used memory segmentation perform index-bounds checking hardware assembly languages generally special support arrays  machine provides  the earliest high-level programming languages  including fortran         lisp         cobol         algol            support multi-dimensional arrays  c         in c           class templates exist multi-dimensional arrays whose dimension fixed runtime well runtime-flexible arrays    applications   arrays used implement mathematical vectors matrices  well kinds rectangular tables  many databases  small large  consist  include  one-dimensional arrays whose elements records arrays used implement data structures  lists  heaps  hash tables  deques  queues  stacks  strings  vlists  array-based implementations data structures frequently simple space-efficient  implicit data structures   requiring little space overhead  may poor space complexity  particularly modified  compared tree-based data structures  compare sorted array search tree  one large arrays sometimes used emulate in-program dynamic memory allocation  particularly memory pool allocation  historically  sometimes way allocate  dynamic memory  portably arrays used determine partial complete control flow programs  compact alternative  otherwise repetitive  multiple if statements  they known context control tables used conjunction purpose built interpreter whose control flow altered according values contained array  the array may contain subroutine pointers  relative subroutine numbers acted upon switch statements  direct path execution    element identifier addressing formulas   when data objects stored array  individual objects selected index usually non-negative scalar integer  indexes also called subscripts  an index maps array value stored object there three ways elements array indexed    zero-based indexing the first element array indexed subscript      one-based indexing the first element array indexed subscript   n  n-based indexing the base index array freely chosen  usually programming languages allowing n-based indexing also allow negative index values scalar data types like enumerations  characters may used array index using zero based indexing design choice many influential programming languages  including c  java lisp  this leads simpler implementation subscript refers offset starting position array  first element offset zero arrays multiple dimensions  thus uncommon access array using multiple indices  for example  two-dimensional array a three rows four columns might provide access element  nd row  th column expression a       case zero-based indexing system  thus two indices used two-dimensional array  three three-dimensional array  n n-dimensional array the number indices needed specify element called dimension  dimensionality  rank array in standard arrays  index restricted certain range consecutive integers  consecutive values enumerated type   address element computed  linear  formula indices     one-dimensional arrays    a one-dimensional array  single dimension array  type linear array  accessing elements involves single subscript either represent row column index as example consider c declaration int anarrayname      declares one-dimensional array ten integers  here  array store ten elements type int   this array indices starting zero nine  for example  expressions anarrayname    anarrayname    first last elements respectively for vector linear addressing  element index located address b   c    b fixed base address c fixed constant  sometimes called address increment stride if valid element indices begin    constant b simply address first element array  for reason  c programming language specifies array indices always begin    many programmers call element  zeroth  rather  first  however  one choose index first element appropriate choice base address b  for example  array five elements  indexed      base address b replaced b     c  indices elements        if numbering start    constant b may address element     multidimensional arrays    for multidimensional array  element indices j would address b   c       j  coefficients c row column address increments  respectively more generally  k-dimensional array  address element indices          ik isb   c       c           ck   ik for example  int       this means array   rows   columns  array integer type  here store   elements stored linearly starting first row linear continuing second row  the array stored                  this formula requires k multiplications k additions  array fit memory  moreover  coefficient fixed power    multiplication replaced bit shifting the coefficients ck must chosen every valid index tuple maps address distinct element if minimum legal value every index    b address element whose indices zero  as one-dimensional case  element indices may changed changing base address b  thus  two-dimensional array rows columns indexed            respectively  replacing b b   c     c  cause renumbered           respectively  taking advantage feature  languages  like fortran     specify array indices begin    mathematical tradition languages  like fortran     pascal algol  let user choose minimum value index     dope vectors    the addressing formula completely defined dimension  base address b  increments c   c        ck  it often useful pack parameters record called array descriptor stride vector dope vector  the size element  minimum maximum values allowed index may also included dope vector  the dope vector complete handle array  convenient way pass arrays arguments procedures  many useful array slicing operations  selecting sub-array  swapping indices  reversing direction indices  performed efficiently manipulating dope vector     compact layouts    often coefficients chosen elements occupy contiguous area memory  however  necessary  even arrays always created contiguous elements  array slicing operations may create non-contiguous sub-arrays them there two systematic compact layouts two-dimensional array  for example  consider matrix                    adisplaystyle a   begin bmatrix                     end bmatrix      in row-major order layout  adopted c statically declared arrays   elements row stored consecutive positions elements row lower address elements consecutive row in column-major order  traditionally used fortran   elements column consecutive memory elements column lower address elements consecutive column for arrays three indices   row major order  puts consecutive positions two elements whose index tuples differ one last index   column major order  analogous respect first index in systems use processor cache virtual memory  scanning array much faster successive elements stored consecutive positions memory  rather sparsely scattered  many algorithms use multidimensional arrays scan predictable order  a programmer  sophisticated compiler  may use information choose row- column-major layout array  for example  computing product a b two matrices  would best a stored row-major order  b column-major order     resizing    static arrays size fixed created consequently allow elements inserted removed  however  allocating new array copying contents old array  possible effectively implement dynamic version array  see dynamic array  if operation done infrequently  insertions end array require amortized constant time some array data structures reallocate storage  store count number elements array use  called count size  this effectively makes array dynamic array fixed maximum size capacity  pascal strings examples this     non-linear formulas    more complicated  non-linear  formulas occasionally used  for compact two-dimensional triangular array  instance  addressing formula polynomial degree      efficiency   both store select take  deterministic worst case  constant time  arrays take linear  o n   space number elements n hold in array element size k machine cache line size b bytes  iterating array n elements requires minimum ceiling nk b  cache misses  elements occupy contiguous memory locations  this roughly factor b k better number cache misses needed access n elements random memory locations  as consequence  sequential iteration array noticeably faster practice iteration many data structures  property called locality reference  mean however  using perfect hash trivial hash within  local  array  even faster - achievable constant time   libraries provide low-level optimized facilities copying ranges memory  memcpy  used move contiguous blocks array elements significantly faster achieved individual element access  the speedup optimized routines varies array element size  architecture  implementation memory-wise  arrays compact data structures per-element overhead  there may per-array overhead  e g   store index bounds  language-dependent  it also happen elements stored array require less memory elements stored individual variables  several array elements stored single word  arrays often called packed arrays  an extreme  commonly used  case bit array  every bit represents single element  a single octet thus hold     different combinations   different conditions  compact form array accesses statically predictable access patterns major source data parallelism     comparison data structures    dynamic arrays growable arrays similar arrays add ability insert delete elements  adding deleting end particularly efficient  however  reserve linear    n   additional storage  whereas arrays reserve additional storage associative arrays provide mechanism array-like functionality without huge storage overheads index values sparse  for example  array contains values indexes     billion may benefit using structure  specialized associative arrays integer keys include patricia tries  judy arrays  van emde boas trees balanced trees require o log n  time indexed access  also permit inserting deleting elements o log n  time  whereas growable arrays require linear    n   time insert delete elements arbitrary position linked lists allow constant time removal insertion middle take linear time indexed access  their memory use typically worse arrays  still linear an iliffe vector alternative multidimensional array structure  it uses one-dimensional array references arrays one dimension less  for two dimensions  particular  alternative structure would vector pointers vectors  one row pointer c c     thus element row column j array a would accessed double indexing  a  j  typical notation   this alternative structure allows jagged arrays  row may different size  general  valid range index depends values preceding indices  it also saves one multiplication  column address increment  replacing bit shift  index vector row pointers  one extra memory access  fetching row address   may worthwhile architectures    dimension   the dimension array number indices needed select element  thus  array seen function set possible index combinations  dimension space domain discrete subset  thus one-dimensional array list data  two-dimensional array rectangle data  three-dimensional array block data  etc this confused dimension set matrices given domain   number elements array  for example  array   rows   columns two-dimensional  matrices form   -dimensional space  similarly  three-dimensional vector represented one-dimensional array size three    see also      references   
this list computing mascots  a mascot person  animal  object thought bring luck  anything used represent group common public identity  in case computing mascots  either represent software  hardware  project collective entity behind them    a   adiumy  cartoon duck  mascot adium  free open-source instant messaging client macos amanda panda  cartoon panda  mascot window maker  free open-source window manager x window system      b   blinky  cartoon fish  mascot freedos  free open-source dos implementation ibm pc compatible computers the bsd daemon  cartoon demon  mascot bsd  free open-source unix operating system derivative also many derivations itself buggie  cartoon anthropomorphic bug   mascot bugzilla  free open-source web-based general-purpose bugtracker testing tool        c   camelia  cartoon bug butterfly-like wings  mascot raku cowduck  cartoon hybrid head cow body duck mascot terminusdb      d   dotnet bot  typically stylized  dotnet bot   dotnet-bot   official community mascot  net free open source software framework duke  stylized  unspecified creature  mascot java  system developing application software deploying cross-platform computing environment      e   elephpant  cartoon elephant  mascot php  server-side scripting language designed primarily web development emule  free open-source peer-to-peer file sharing application microsoft windows  represented cartoon mule name      f   freedo  cartoon anthropomorphic penguin  mascot linux-libre  free open-source operating system kernel derived linux kernel  packaged gnu proprietary components removed ferris  crab  unofficial mascot rust language      g   gavroche  cartoon goblin  mascot gnu mediagoblin  free open-source decentralized server software hosting sharing digital media geeko  stylized chameleon  mascot suse linux  linux-based free open-source computer operating system family glenda  plan   bunny  cartoon rabbit  mascot plan   bell labs  free open-source distributed operating system manages computing resources file system rather specialized interfaces gnu   drawing  gnu head   anthropomorphic wildebeest head mascot logo gnu  free open-source operating system extensive collection computer software  also mascot gnu project  free-software  mass-collaboration project gooey  cartoon octopus  mascot webgui  free open-source content management system the free open-source go programming language represented gopher              h   hexley  cartoon platypus  mascot darwin    k   kandalf  cartoon wizard  former mascot kde kate cyber woodpecker  cartoon robotic woodpecker  mascot kate  free open-source advanced text editor software developers kiki cyber squirrel  cartoon anthropomorphic robotic squirrel  mascot krita  free open-source raster graphics editor designed digital painting animation kitty  cartoon anthropomorphic cat  created eric w  schwartz  mascot aros research operating system  free open-source multimedia centric implementation amigaos     apis konqi primary mascot kde  international community develops free open-source software  kde projects  software developed  including kde plasma workspace  kde frameworks  software foundation kde applications  a number dragons also exist  katie  associated kde women project                l   lenny  penguin blue hair  mascot lubuntu larry  hand-drawn cow  one gentoo unofficial mascots the lisp mascot quadruped alien four eyes single arm extending nose       m   moby dock  cartoon whale hauls shipping containers back  mascot docker  set platform service  paas  products mozilla  cartoon anthropomorphic lizard later stylized tyrannosaurus rex  retired mascot mozilla foundation  non-profit organization supports leads mozilla  free-software community developed firefox  free open-source web browser many related projects      o   octocat  anthropomorphized cat five octopus-like arms github mascot    p   the apache pig  anthropomorphic pig  mascot apache pig puffy  cartoon pufferfish  mascot openbsd  free open-source unix-like operating system descended bsd  dedicated security stability features purple pidgin  cartoon pigeon  mascot pidgin  free open-source multi-platform instant messaging client      r   the raft consensus algorithm mascot log raft face  created andrea ruygt  made vector diego ongarorocky raccoon  cartoon raccoon  mascot minix    free open-source project create small  high availability  high functioning unix-like operating system      t   tux  cartoon anthropomorphic penguin  mascot linux kernel  free open-source monolithic unix-like computer operating system kernel included many os distributions    w   wilber mascot gimp  free open-source raster graphics editor designed image editing  drawing  image format conversion others wombats associated datatrieve  adopted mascot product group   references included help system product  graphic demonstration using  plot wombat  command    x   xenia  transgender anthropomorphic fox  unofficial mascot linux  xenia originally designed alan mackey alternative official linux mascot  tux  her character design undergone additional iterations mackey artists developers community xue  stylized mouse  mascot xfce  free open-source desktop environment unix-like operating systems aims fast lightweight  still visually appealing easy use    z   zero ziguana ziggy ziguana two official mascots programming language zig znurt flying saucer one gentoo linux unofficial mascots      see also   list video game mascotsos-tan   references   
in computer science  tree widely used abstract data type simulates hierarchical tree structure  root value subtrees children parent node  represented set linked nodes a tree data structure defined recursively collection nodes  node data structure consisting value list references nodes  the start tree  root node  reference nodes  children   no reference duplicated none points root alternatively  tree defined abstractly whole  globally  ordered tree  value assigned node  both perspectives useful  tree analyzed mathematically whole  actually represented data structure usually represented worked separately node  rather set nodes adjacency list edges nodes  one may represent digraph  instance   for example  looking tree whole  one talk  parent node  given node  general  data structure  given node contains list children contain reference parent      common uses   representing hierarchical data file systems used store data hard drives files easily found nameexploded-view drawing used identify sub components components used construct larger componentssubroutine calls used identify subroutines program call subroutines non recursivelyevolution species evolved prior species  restricted biology  e g  linux evolution timeline abstract syntax trees computer languagesparse trees human languagesdocument object models xml html documentsjson yaml documents processedsearch trees store data way makes efficient search algorithm possible via tree traversala binary search tree type binary treerepresenting sorted lists dataas workflow compositing digital images visual effectsstoring barnes-hut trees used simulate galaxies   terminology   a node structure may contain value condition  represent separate data structure  could tree   each node tree zero child nodes  tree  convention  trees drawn growing downwards   a node child called child parent node  superior   a node one parent  possibly many ancestor nodes  parent parent   child nodes parent sibling nodes an internal node  also known inner node  inode short  branch node  node tree child nodes  similarly  external node  also known outer node  leaf node  terminal node  node child nodes the topmost node tree called root node  depending definition  tree may required root node  case trees non-empty   may allowed empty  case necessarily root node  being topmost node  root node parent  it node algorithms tree begin  since data structure  one pass parents children  note algorithms  post-order depth-first search  begin root  first visit leaf nodes  access value leaf nodes   visit root last  i e   first access children root  access value root last   all nodes reached following edges links   in formal definition  path also unique   in diagrams  root node conventionally drawn top  in trees  heaps  root node special properties  every node tree seen root node subtree rooted node the height node length longest downward path leaf node  the height root height tree  the depth node length path root  i e   root path   this commonly needed manipulation various self-balancing trees  avl trees particular  the root node depth zero  leaf nodes height zero  tree single node  hence root leaf  depth height zero  conventionally  empty tree  tree nodes  allowed  height    a subtree tree t tree consisting node t descendants t  nodes thus correspond subtrees  node corresponds subtree descendants    subtree corresponding root node entire tree  node root node subtree determines  subtree corresponding node called proper subtree  analogy proper subset  other terms used trees neighbor parent child ancestor a node reachable repeated proceeding child parent descendant a node reachable repeated proceeding parent child  also known subchild degree for given node  number children  a leaf necessarily degree zero degree tree the degree tree maximum degree node tree distance the number edges along shortest path two nodes level the level node number edges along theunique path root node width the number nodes level breadth the number leaves forest a set n     disjoint trees ordered tree a rooted tree ordering specified children vertex size tree number nodes tree    preliminary definition   a tree nonlinear data structure  compared arrays  linked lists  stacks queues linear data structures  a tree empty nodes tree structure consisting one node called root zero one subtrees    drawing trees   trees often drawn plane  ordered trees represented essentially uniquely plane  hence called plane trees  follows  one fixes conventional order  say  counterclockwise   arranges child nodes order  first incoming parent edge  first child edge  etc    yields embedding tree plane  unique ambient isotopy  conversely  embedding determines ordering child nodes if one places root top  parents children  family tree  places nodes given distance root  terms number edges   level  tree  given horizontal line  one obtains standard drawing tree  given binary tree  first child left   left node    second child right   right node      common operations   enumerating itemsenumerating section treesearching itemadding new item certain position treedeleting itempruning  removing whole section treegrafting  adding whole section treefinding root nodefinding lowest common ancestor two nodes    traversal search methods    stepping items tree  means connections parents children  called walking tree  action walk tree  often  operation might performed pointer arrives particular node  a walk parent node traversed children called pre-order walk  walk children traversed respective parents traversed called post-order walk  walk node left subtree  node  finally right subtree traversed called in-order traversal   this last scenario  referring exactly two subtrees  left subtree right subtree  assumes specifically binary tree   a level-order walk effectively performs breadth-first search entirety tree  nodes traversed level level  root node visited first  followed direct child nodes siblings  followed grandchild nodes siblings  etc   nodes tree traversed    representations   there many different ways represent trees  common representations represent nodes dynamically allocated records pointers children  parents   items array  relationships determined positions array  e g   binary heap  indeed  binary tree implemented list lists  list values lists   head list  value first term  left child  subtree   tail  list second subsequent terms  right child  subtree   this modified allow values well  lisp s-expressions  head  value first term  value node  head tail  value second term  left child  tail tail  list third subsequent terms  right child in general node tree pointers parents  information included  expanding data structure also include pointer parent  stored separately  alternatively  upward links included child node data  threaded binary tree    generalizations       digraphs    if edges  child nodes  thought references  tree special case digraph  tree data structure generalized represent directed graphs removing constraints node may one parent  cycles allowed  edges still abstractly considered pairs nodes  however  terms parent child usually replaced different terminology  example  source target   different implementation strategies exist  digraph represented local data structure tree  node value list children   assuming  list children  list references  globally structures adjacency lists in graph theory  tree connected acyclic graph  unless stated otherwise  graph theory trees graphs assumed undirected  there one-to-one correspondence trees trees data structure  we take arbitrary undirected tree  arbitrarily pick one vertices root  make edges directed making point away root node   producing arborescence   assign order nodes  the result corresponds tree data structure  picking different root different ordering produces different one given node tree  children define ordered forest  union subtrees given children  equivalently taking subtree given node erasing root   just subtrees natural recursion  depth-first search   forests natural corecursion  breadth-first search  via mutual recursion  forest defined list trees  represented root nodes   node  tree  consists value forest  children  f   n          n k  n  v f   data type versus data structure   there distinction tree abstract data type concrete data structure  analogous distinction list linked list as data type  tree value children  children trees  value children tree interpreted value root node subtrees children root node  to allow finite trees  one must either allow list children empty  case trees required non-empty   empty tree  instead represented forest zero trees   allow trees empty  case list children fixed size  branching factor  especially    binary    desired as data structure  linked tree group nodes  node value list references nodes  children    there also requirement two  downward  references point node  in practice  nodes tree commonly include data well  next previous references  references parent nodes  nearly anything owing use references trees linked tree data structure  trees often discussed implicitly assuming represented references root node  often actually implemented  for example  rather empty tree  one may null reference  tree always non-empty  reference tree may null     recursive    recursively  data type tree defined value  data type  possibly empty   together list trees  possibly empty list   subtrees children  symbolically  v           k   a tree consists value v list trees  more elegantly  via mutual recursion  tree one basic examples  tree defined terms forest  list trees   tree consists value forest  subtrees children  f            k   v fnote definition terms values  appropriate functional languages  assumes referential transparency   different trees connections  simply lists values as data structure  tree defined node  root   consists value  data type  possibly empty   together list references nodes  list possibly empty  references possibly null   symbolically n  v   n           n k   a node n consists value v list references nodes  this data structure defines directed graph  tree one must add condition global structure  topology   namely one reference point given node  node single parent   node tree point root  in fact  every node  root  must exactly one parent  root must parents indeed  given list nodes  node list references children  one cannot tell structure tree without analyzing global structure fact topologically tree  defined below     type theory    as abstract data type  abstract tree type t values type e defined  using abstract forest type f  list trees   functions value  t   echildren  t   fnil       fnode  e   f   twith axioms value node e  f     echildren node e  f     fin terms type theory  tree inductive type defined constructors nil  empty forest  node  tree root node given value children      mathematical terminology    viewed whole  tree data structure ordered tree  generally values attached node  concretely   required non-empty  a rooted tree  away root  direction  narrow term  arborescence    meaning a directed graph whose underlying undirected graph tree  two vertices connected exactly one simple path  distinguished root  one vertex designated root  determines direction edges  arrows point away root  given edge  node edge points called parent node edge points called child  together ordering child nodes given node  anda value  data type  node often trees fixed  properly  bounded  branching factor  outdegree   particularly always two child nodes  possibly empty  hence two non-empty child nodes   hence  binary tree  allowing empty trees makes definitions simpler  complicated  rooted tree must non-empty  hence empty trees allowed definition instead becomes  empty tree rooted tree       on hand  empty trees simplify defining fixed branching factor  empty trees allowed  binary tree tree every node exactly two children  tree  possibly empty   the complete sets operations tree must include fork operation    mathematical definition       unordered tree    mathematically  unordered tree   algebraic tree   defined algebraic structure  x  parent  x non-empty carrier set nodes parent function x assigns node x  parent  node  parent x   the structure subject condition every non-empty subalgebra must fixed point  that  must unique  root  node r  parent r    r every node x  iterative application parent parent  parent x     equals r there several equivalent definitions as closest alternative  one define unordered trees partial algebras  x  parent  obtained total algebras described letting parent r  undefined  that  root r node parent function defined every node x  root reachable x directed graph  x  parent   this definition fact coincident anti-arborescence  the taocp book uses term oriented tree the box right describes partial algebra  x  parent  relational structure  x      if     replaced condition     becomes redundant using definition  dedicated terminology provided generalizations unordered trees correspond distinguished subsets listed conditions            directed pseudotree       directed pseudoforest         unordered forest  whose components unordered trees        directed acyclic graph  assumed x finite          acyclic accessible pointed graph  condition     holds implicitly  another equivalent definition unordered tree set-theoretic tree singly-rooted whose height     finite-ish  tree   that  algebraic structures  x  parent  equivalent partial orders  x     top element r whose every principal upset  aka principal filter  finite chain  to precise  speak inverse set-theoretic tree since set-theoretic definition usually employs opposite ordering the correspondence  x  parent   x     established via reflexive transitive closure   reduction  reduction resulting  partial  version without root cycle the definition trees descriptive set theory  dst  utilizes representation partial orders  x     prefix orders finite sequences  in turns isomorphism  one-to-one correspondence  inverse  dst trees tree structures defined far we refer four equivalent characterizations tree algebra  tree partial algebra  tree partial order  tree prefix order  there also fifth equivalent definition   graph-theoretic rooted tree connected acyclic rooted graph the expression trees  partial  algebras  also called functional graphs   x  parent  follows directly implementation tree structures using parent pointers  typically  partial version used root node parent defined  however  implementations models even parent r    r circularity established  notable examples  the linux vfs  the root dentry parent points  the concept instantiation treefrom object-oriented programming  in case  root node top metaclass   class direct instance itself note definition admits infinite trees  this allows description infinite structures supported implementations via lazy evaluation  a notable example infinite regress eigenclasses ruby object model  in model  tree established via superclass links non-terminal objects infinite infinite branch  single infinite branch  helix  objects   see diagram       sibling sets     in every unordered tree  x  parent  distinguished partition set x nodes sibling sets  two non-root nodes x  belong sibling set parent x    parent   the root node r forms singleton sibling set  r   a tree said locally finite finitely branching sibling sets finite each pair distinct siblings incomparable    this word unordered used definition  such terminology might become misleading sibling sets singletons  i e  set x nodes totally ordered  thus well-ordered    in case might speak singly-branching tree instead      using set inclusion     as every partially ordered set  tree structures  x     represented inclusion order   set systems   coincident    induced inclusion order  consider structure  u     u non-empty set    set subsets u following satisfied  nested set collection definition          that   u     hypergraph  u     for every x  y    x   y       x  y    that    laminar family  for every x    finitely many y   x   y then structure        unordered tree whose root equals u  conversely   u     unordered tree    set   x   x   u  principal ideals  u     set system  u     satisfies properties the set-system view tree structures provides default semantic model   majority popular cases  tree data structures represent containment hierarchy  this also offers justification order direction root top  the root node greater container node  notable examples directory structure file system  a directory contains sub-directories dom tree  the document parts correspondent dom nodes subpart relation according tree order single inheritance object-oriented programming  an instance class also instance superclass hierarchical taxonomy dewey decimal classification sections increasing specificity bsp trees  quadtrees  octrees  r-trees tree data structures used recursive space partitioning      well-founded trees     an unordered tree  x     well-founded strict partial order   well-founded relation  in particular  every finite tree well-founded  assuming axiom dependent choice tree well-founded infinite branch well-founded trees defined recursively   forming trees disjoint union smaller trees  for precise definition  suppose x set nodes  using reflexivity partial orders  identify tree  y     subset x partial order       subset x   x  the set   relations r form well-founded tree  y  r  subset y x defined stages            ordinal   for ordinal number  let r belong i-th stage  r equal       dom        x      x    subset    k   k    elements   pairwise disjoint  x node belong dom       we use dom s  denote domain relation s   observe lowest stage    consists single-node trees   x x   since empty   possible  in stage   possibly  new trees r built taking forest    components   lower stages attaching new root x atop    in contrast tree height    rank well-founded trees unlimited  see properties  unfolding       using recursive pairs     in computing  common way define well-founded trees via recursive ordered pairs f  x   tree forest f together  fresh  node x   a forest f turn possibly empty set trees pairwise disjoint sets nodes  for precise definition  proceed similarly construction names used set-theoretic technique forcing  let x set nodes  in superstructure x  define sets t    trees forests  respectively  map  nodes   t     x  assigning tree underlying set nodes circularities conditions eliminated stratifying t    nodes stages like previous subsection  subsequently  define  subtree  relation   t reflexive transitive closure  immediate subtree  relation   defined trees bywhere     projection onto first coordinate  i e   forest f    f  x  x   x  it observed  t     multitree  every   t  principal ideal  ordered   well-founded tree partial order  moreover  every tree    t   nodes -order structure   nodes     given  x  forests f  g      f  x   g   subtrees  f  x     g        using arrows     another formalization well generalization unordered trees obtained reifying parent-child pairs nodes  each ordered pair regarded abstract entity    arrow   this results multidigraph  x  a    x set nodes  a set arrows  functions a x assigning arrow source target  respectively  the structure subject following conditions      a       unordered tree  total algebra     the map bijection arrows nodes in      composition symbol   interpreted left-to-right  the condition says inverse consecutivity arrows total child-to-parent map  let parent map arrows denoted p  i e  p        then also   p    thus multidigraph satisfying       also axiomatized  x  a  p    parent map p instead definitory constituent  observe root arrow necessarily loop  i e  source target coincide an important generalization structure established allowing target map many-to-one  this means     weakened     the map surjective   node target arrow note condition     asserts leaf arrows allowed target  that  restriction range p still injective multidigraphs satisfying        called  arrow trees    tree characteristics imposed arrows rather nodes  these structures regarded essential abstraction linux vfs reflect hard-link structure filesystems  nodes called inodes  arrows dentries  hard links   the parent target maps p respectively represented parent inode fields dentry data structure  each inode assigned fixed file type  directory type plays special role  designed parents    directory inodes appear hard-link source  b  directory inode cannot appear target one hard-link using dashed style first half root loop indicates  similarly parent map  partial version source map source root arrow undefined  this variant employed generalization  see  using paths multidigraph      using paths digraph     unordered trees naturally arise  unfolding  accessible pointed graphs let      x  r  r  pointed relational structure  i e  x set nodes  r relation nodes  subset x   x   r distinguished  root  node  assume   accessible  means x equals preimage  r  reflexive transitive closure r  call structure accessible pointed graph apg short  then one derive another apg       x   r   r     unfolding     follows x  set reversed paths r  i e  set non-empty finite sequences p nodes  elements x    consecutive members p inversely r-related   b  first member p root r r  relation paths x  paths p q r -related p   q    x  node x  i e  q maximal proper prefix p   popped  p   andr  one-element sequence  r  apparently  structure  x   r   unordered tree  partial-algebra  version  r  partial map relates non-root element x  parent path popping  the root element obviously  r   moreover  following properties satisfied   isomorphic unfolding      tree   in particular  unfolding idempotent  isomorphism  unfolding preserves well-foundedness  if r well-founded r  unfolding preserves rank  if r well-founded ranks r r  coincide notes      using paths multidigraph     as shown example hard-link structure file systems  many data structures computing allow multiple links nodes  therefore   order properly exhibit appearance unordered trees among data structures necessary generalize accessible pointed graphs multidigraph setting  to simplify terminology  make use term quiver established synonym  multidigraph  let accessible pointed quiver apq short defined structure     x  a   wherex set nodes a set arrows partial function a x  source map   andt total function a x  target map  thus     partial multidigraph  the structure subject following conditions there exactly one  root  arrow  ar  whose source ar  undefined every node x   x reachable via finite sequence consecutive arrows starting root arrow ar   said tree target map bijection arrows nodes the unfolding   formed sequences mentioned       accessibility paths  cf  path algebra   as apq  unfolding written       x   a      x  set accessibility paths a  coincides x   coincides path popping  andt  identity x  like apgs  unfolding idempotent always results tree the underlying apg obtained structure x  r  ar  wherer            a    ar   the diagram shows example apq        arrows  in javascript  python ruby  structure created following  exactly  code      using names     unordered trees generalizations form essence naming systems there two prominent examples naming systems  file systems  nested  associative arrays  the multidigraph-based structures previous subsections provided anonymous abstractions cases  to obtain naming capabilities  arrows equipped names identifiers a name must locally unique   within sibling set arrows one arrow labelled given name this formalized structure      x     a      x set nodes    set names  a set arrows  partial function a x    partial function a    andt total function a x for arrow  constituents triple          respectively source  name target the structure subject following conditions the reduct  x  a    accessible pointed quiver  apq  defined previously the name function   undefined source-less root arrow the name function   injective restriction every sibling set arrows  i e  every non-root arrows  b     b         b    b this structure called nested dictionary named apq  in computing  structures ubiquitous  the table shows arrows considered  un-reified  set a                  a    ar   source-name-target triples  this leads relational structure  x     a   viewed relational database table  underlines source name indicate primary key the structure rephrased deterministic labelled transition system  x set  states     set  labels   a  set  labelled transitions    moreover  root node r   ar   initial state   accessibility condition means every state reachable initial state  the diagram right shows nested dictionary   underlying multidigraph example previous subsection  the structure created code below  like  exactly code applies javascript  python ruby first  substructure      created single assignment literal       r  this structure  depicted full lines   arrow tree   therefore  spanning tree   the literal turn appears json serialization    subsequently  remaining arrows created assignments already existing nodes  arrows cause cycles displayed blue in linux vfs  name function   represented name field dentry data structure  the    structure demonstrates correspondence json-representable structures hard-link structures file systems  in cases  fixed set built-in types  nodes  one type container type  except json  fact two types   object array  if latter one ignored  well distinction individual primitive data types  provided abstractions file-systems json data   arrow trees equipped naming   distinction container nodes see  nested data formal description tree structures   json-trees   distinction bipartition container nodes       pathnames      the naming function   nested dictionary   naturally extends arrows arrow paths  each sequence p             consecutive arrows implicitly assigned pathname  cf  pathname    sequence   p                    arrow names local uniqueness carries arrow paths  different sibling paths different pathnames  in particular  root-originating arrow paths one-to-one correspondence pathnames  this correspondence provides  symbolic  representation unfolding   via pathnames   nodes   globally identified via tree pathnames     ordered tree    the structures introduced previous subsection form core  hierarchical   part tree data structures appear computing  in cases  also additional  horizontal  ordering siblings  in search trees order commonly established  key  value associated sibling  many trees case  for example  xml documents  lists within json files  many structures order depend values nodes  data   sorting paragraphs novel alphabetically would change meaning the correspondent expansion previously described tree structures  x     defined endowing sibling set linear order follows an alternative definition according kuboyama presented next subsection an ordered tree structure  x   v   s   x non-empty set nodes  v  s relations x called vertical  also hierarchical  order sibling order  respectively  the structure subject following conditions  x   v  partial order unordered tree defined previous subsection  x   s   partial order distinct nodes comparable  s siblings   s      s       v      v     idx every node finitely many preceding siblings  i e  every principal ideal  x   s  finite    this condition omitted case finite trees  conditions         say  x   s  component-wise linear order  component sibling set  condition     asserts sibling set s infinite  s   s  isomorphic                                n                        displaystyle  mathbb  n           usual ordering natural numbers given  three  another  distinguished partial orders uniquely given following prescriptions this amounts  v-s-h-l   system five partial orders  v   s   h   l    l- set x nodes   except pair    s   h    two relations uniquely determine three  see determinacy table notes notational conventions the relation composition symbol   used subsection interpreted left-to-right                                                       l                                  displaystyle  circ   l      symbols     express strict non-strict versions partial order symbols     express converse relations the   symbol used covering relation   immediate version partial order this yields six versions                  single partial order relation  except      version uniquely determines others  passing    requires   transitively reducible  this always satisfied  v   s  h might hold  l   l- x infinite the partial orders  v  hare complementary   v      v      h      h    x   x   idx as consequence   concordant  linear order  l  linear extension  v  similarly   l- linear extension  v the covering relations  l-  l  correspond pre-order traversal post-order traversal  respectively  if x  l-  according whether previous sibling  x node either  rightmost  non-strict descendant previous sibling  latter case  x first child y  pairs                              x                                         displaystyle  x     latter case form relation    l-      h  partial map assigns non-leaf node first child node  similarly    l       h  assigns non-leaf node finitely many children last child node      definition using horizontal order     the kuboyama definition  rooted ordered trees  makes use horizontal order  h definitory relation   see also suppes  using notation terminology introduced far  definition expressed follows an ordered tree structure  x   v   h  conditions       satisfied  x   v  partial order unordered tree    the vertical order   x   h  partial order   the horizontal order  the partial orders  v  h complementary    v      v      h      h    x   x   idx  that  pairs nodes incomparable   v  comparable   h  vice versa  the partial orders  v  h  consistent     h      v      h      v   that  every nodes x  x  h  descendants x must precede descendants y  every node finitely many preceding siblings   that  every infinite sibling set s   s   h  order type natural numbers     like  condition omitted case finite trees  the sibling order   s  obtained   s      h       v      v    i e  two distinct nodes sibling order horizontal order siblings      determinacy table     the following table shows determinacy  v-s-h-l   system  relational expressions table body equal one  v   s   h   l-   l  according column  it follows except pair    s   h    ordered tree  x       uniquely determined two five relations in last two rows  infl- y  denotes infimum y  x   l-   supl  y  denotes supremum y  x   l    in rows    s  resp    s  equivalently replaced sibling equivalence   s    s   in particular  partition sibling sets together either  l-  l  also sufficient determine ordered tree  the first prescription  v read  parent non-root node x equals infimum set immediate predecessors siblings x  words  infimum   predecessors  meant regard  l-  similarly second prescription  use  supremum    successors   l  the relations  s  h obviously cannot form definitory pair  for simplest example  consider ordered tree exactly two nodes   one cannot tell root      xpath axes     the table right shows correspondence introduced relations xpath axes  used structured document systems access nodes bear particular ordering relationships starting  context  node  for context node x  axis named specifier left column set nodes equals theimage  x  correspondent relation  as xpath      nodes  returned  document order   discordant  linear order  l-  a  concordance  would achieved  vertical order  v defined oppositely  bottom-up direction outwards root like set theory accordance natural trees      traversal maps     below list partial maps typically used ordered tree traversal  each map distinguished functional subrelation   l- opposite  v     parent-node partial map  s     previous-sibling partial map  s     next-sibling partial map   l-      h      first-child partial map   l       h      last-child partial map  l-     previous-node partial map  l-     next-node partial map      generating structure     the traversal maps constitute partial unary algebra  x  parent  previoussibling       nextnode  forms basis representing trees linked data structures  at least conceptually  parent links  sibling adjacency links  first   last child links  this also applies unordered trees general  observed dentry data structure linux vfs similarly  v-s-h-l   system partial orders  pairs traversal maps uniquely determine whole ordered tree structure  naturally  one generating structure  x   v   s  transcribed  x  parent  nextsibling    structure parent next-sibling links  another important generating structure  x  firstchild  nextsibling  known left-child right-sibling binary tree  this partial algebra establishes one-to-one correspondence binary trees ordered trees      definition using binary trees     the correspondence binary trees provides concise definition ordered trees partial algebras an ordered tree structure                              x                 l        c                 r                                displaystyle  x lc rs     x non-empty set nodes  lc  rs partial maps x called left-child  right-sibling  respectively  the structure subject following conditions the partial maps lc rs disjoint  i e   lc     rs       the inverse  lc     rs  partial map p partial algebra  x  p  unordered tree the partial order structure  x   v   s  obtained follows      per-level ordering     as possible expansion  v-s-h-l   system  another distinguished relations nodes defined  based tree level structure  first  let us denote  e equivalence relation defined x  e x number ancestors  this yields partition set nodes levels l   l          ln    coarsement partition sibling sets  then define relations  e   b-  b                                                                                                                                                                                                     e                                                                                                                                                                                                                                                                                                        h                                                                                                                                                                                                                                                            e                                                                                                                                                               per  level order                                                                                                                                                                                                                                            b                                                                                                                                                                                                                                                                                                                                                                                                           e                                                                                                                                                                                                                                                                                                                                             e                                                                                                                                                                                                                                                                                                                v                                                                                                                                                                                                                                       breadth-first order  bfs ordering                                                                                                                                                                                                                                            b                                                                                                                                                                                                                                                                                                                                                                                                           e                                                                                                                                                                                                                                                                                                                                                                                               v                                                                                                                                                                                                                                                                                                                e                                                                                                                                                                                                                                       breadth-first post-order                                                                              displaystyle   begin aligned  left     mathrm  e    right    left     mathrm  h    right  cap  left  sim    mathrm  e    right    text   per  level order       left     mathrm  b    -   right    left     mathrm  e    right  cup  left  left  sim    mathrm  e    right  circ  left     mathrm  v    right  right    text  breadth-first order  bfs ordering       left     mathrm  b        right    left     mathrm  e    right  cup  left  left       mathrm  v    right  circ  left  sim    mathrm  e    right  right    text  breadth-first post-order     end aligned     it observed  e strict partial order  b-  b  strict total orders  moreover  similarity  v-s-l     v-e-b   systems   e component-wise linear orthogonal  v   b- linear extension  e  v   b  linear extension  e  v      encoding sequences     ordered trees naturally encoded finite sequences natural numbers  denote                               n                        displaystyle  mathbb  n       set finite sequences natural numbers  a non-empty subset w                               n                        displaystyle  mathbb  n       called tree domainif u  v                               n                        displaystyle  mathbb  n        j                               n                        displaystyle  mathbb  n      following holds    concatenation operator  if u   v    w     u    w    w prefix-closed  if u        w j       u    j    w     w left-sibling-closed  the induced structure w gives rise ordered tree  take prefix order  v lexicographical order  l- conversely  ordered tree t    x   v   l-  assign node x sequence w x  sibling indices  i e  root assigned empty sequence every non-root node x  let w x    w parent x       number preceding siblings x  put w    w x    x   x    then w tree domain induced structure isomorphic t      nested list     ordering siblings naturally applied multidigraph generalizations introduced unordered trees  moveover  sibling indices viewed special names  a tree domain tree pathnames  as result  one obtains nested list counterpart nested dictionary the example shown right provides nested-list version nested dictionary presented before like  initial structure  arrow tree  depicted full lines  created single assignment literal       r  the structure subsequently modified assignments introduce additional links the code applicable javascript ruby  in python  modifying assignments disallowed use sibling indices present initial structure     nested data    the notions nested dictionary nested list  generalizations unordered   ordered trees  respectively  combined unifying concept nested data  such structures popular connection json data format  these structures multidigraphs distinguished set container nodes  container either dictionary list  in text  sets dictionaries lists respectively denoted xo xa  this according json terminology corresponding two types containers called object array the complementary set non-container nodes represents  primitive values   json-specific formalizationsprovide refinement according supported data types nested data formalized structure      x     a  xo  xa          x set nodes    set names  a set arrows  xo andxa distinguished subsets x partial function a x  source map   total function a x  target map    partial function a   assigning arrow name    partial function a set                               n                        displaystyle  mathbb  n      natural numbers assigning arrow sibling index let    called nested data tree following conditions satisfied there exactly one  root  arrow  ar  whose source ar  undefined every node reachable via path arrows starting root arrow ar every node xo   xa target ofexactly one arrow every node source arrow xo   xa the sets xo xa disjoint the arrow-naming function   satisfies following  every arrows  b    defined       xo if      b  defined equal   eithera   b ors    b  the arrow-indexing function   satisfies following  every arrows  b    defined       xa if      b  defined equal   eithera   b ors    b  if    defined non-zero              arrow      note particular         define accessible pointed quivers  x  a    conditions       provide axiomatization arrow trees distinction containers xo   xa  by     unique links containers     non-containers must leaf nodes  cf  conditions  b    hard-links file systems  an important consequence       condition acyclicity there circular paths consecutive arrows this condition provides weak alternative          total ordering     although dictionaries semantics unordered collections  programming environments often equipped intrinsic ordering such ordering supported python  ruby javascript thus  worthwhile also consider ordered nested data trees  refinement nested data trees sibling sets ordered  condition    altered let    defined every non-root arrow a       nomenclature     by considering particular subsets conditions particular constituents    obtain nomenclature tree data structures  accessible pointed quivers  x a  form  lowest common denominator    conditions         always required conditions       imposed appropriately whether xo  xa      defined the  tree  attribution established condition        see also   tree structuretree  graph theory tree  set theory cardinal tree ordinal treehierarchy  mathematics dialog treesingle inheritancegenerative grammargenetic programminghierarchical clusteringbinary space partition treerecursionfenwick tree    other trees    trieday stout warren algorithmenfiladeleft child-right sibling binary treehierarchical temporal memoryintegral tree    notes      references      further reading   donald knuth  the art computer programming  fundamental algorithms  third edition  addison-wesley        isbn  -   -     -    section      trees  pp          thomas h  cormen  charles e  leiserson  ronald l  rivest  clifford stein  introduction algorithms  second edition  mit press mcgraw-hill        isbn  -   -     -    section       representing rooted trees  pp           chapters        binary search trees  red-black trees  augmenting data structures   pp             external links   data trees means presenting complex data analysis sally knipe august        description dictionary algorithms data structurescran - package data tree implementation tree data structure r programming languagewormweb org  interactive visualization c  elegans cell tree   visualize entire cell lineage tree nematode c  elegans  javascript binary trees l  allison
in computer programming  string traditionally sequence characters  either literal constant kind variable  the latter may allow elements mutated length changed  may fixed  creation   a string generally considered data type often implemented array data structure bytes  words  stores sequence elements  typically characters  using character encoding  string may also denote general arrays sequence  list  data types structures depending programming language precise data type used  variable declared string may either cause storage memory statically allocated predetermined maximum length employ dynamic allocation allow hold variable number elements when string appears literally source code  known string literal anonymous string in formal languages  used mathematical logic theoretical computer science  string finite sequence symbols chosen set called alphabet    string datatypes   a string datatype datatype modeled idea formal string  strings important useful datatype implemented nearly every programming language  in languages available primitive types others composite types  the syntax high-level programming languages allows string  usually quoted way  represent instance string datatype  meta-string called literal string literal     string length    although formal strings arbitrary finite length  length strings real languages often constrained artificial maximum  in general  two types string datatypes  fixed-length strings  fixed maximum length determined compile time use amount memory whether maximum needed  variable-length strings  whose length arbitrarily fixed use varying amounts memory depending actual requirements run time  see memory management   most strings modern programming languages variable-length strings  of course  even variable-length strings limited length   size available computer memory  the string length stored separate integer  may put another artificial limit length  implicitly termination character  usually character value bits zero c programming language  see also  null-terminated  below     character encoding    string datatypes historically allocated one byte per character   although exact character set varied region  character encodings similar enough programmers could often get away ignoring  since characters program treated specially  period space comma  place encodings program would encounter  these character sets typically based ascii ebcdic  if text one encoding displayed system using different encoding  text often mangled  though often somewhat readable computer users learned read mangled text logographic languages chinese  japanese  korean  known collectively cjk  need far     characters  limit one  -bit byte per-character encoding  reasonable representation  the normal solutions involved keeping single-byte representations ascii using two-byte representations cjk ideographs  use existing code led problems matching cutting strings  severity depended character encoding designed  some encodings euc family guarantee byte value ascii range represent ascii character  making encoding safe systems use characters field separators  other encodings iso-     shift-jis make guarantees  making matching byte codes unsafe  these encodings also  self-synchronizing   locating character boundaries required backing start string  pasting two strings together could result corruption second string unicode simplified picture somewhat  most programming languages datatype unicode strings  unicode preferred byte stream format utf-  designed problems described older multibyte encodings  utf-   utf-   utf-   require programmer know fixed-size code units different  characters   main difficulty currently incorrectly designed apis attempt hide difference  utf-   make code points fixed-sized   characters  due composing codes      implementations    some languages  c   ruby  normally allow contents string changed created  termed mutable strings   in languages  java python  value fixed new string must created alteration made  termed immutable strings  languages also provide another type mutable  java  net stringbuilder  thread-safe java stringbuffer  cocoa nsmutablestring  strings typically implemented arrays bytes  characters  code units  order allow fast access individual units substrings including characters fixed length   a languages haskell implement linked lists instead some languages  prolog erlang  avoid implementing dedicated string datatype  instead adopting convention representing strings lists character codes     representations    representations strings depend heavily choice character repertoire method character encoding  older string implementations designed work repertoire encoding defined ascii  recent extensions like iso      series  modern implementations often use extensive repertoire defined unicode along variety complex encodings utf-  utf-   the term byte string usually indicates general-purpose string bytes  rather strings  readable  characters  strings bits  such  byte strings often imply bytes take value data stored as-is  meaning value interpreted termination value most string implementations similar variable-length arrays entries storing character codes corresponding characters  the principal difference  certain encodings  single logical character may take one entry array  this happens example utf-   single codes  ucs code points  take anywhere one four bytes  single characters take arbitrary number codes  in cases  logical length string  number characters  differs physical length array  number bytes use   utf-   avoids first part problem      null-terminated     the length string stored implicitly using special terminating character  often null character  nul   bits zero  convention used perpetuated popular c programming language  hence  representation commonly referred c string  this representation n-character string takes n     space    terminator   thus implicit data structure in terminated strings  terminating code allowable character string  strings length field limitation also store arbitrary binary data an example null-terminated string stored   -byte buffer  along ascii  modern utf-   representation  -bit hexadecimal numbers the length string example   frank     characters  occupies   bytes  characters terminator form part representation  may either part data garbage   strings form sometimes called asciz strings  original assembly language directive used declare them       byte- bit-terminated     using special byte null terminating strings historically appeared hardware software  though sometimes value also printing character    used many assembler systems    used cdc systems  character value zero   zx   used   since string delimiter basic language somewhat similar   data processing  machines like ibm      used special word mark bit delimit strings left  operation would start right  this bit clear parts string  this meant  ibm      seven-bit word  almost no-one ever thought use feature  override assignment seventh bit  example  handle ascii codes early microcomputer software relied upon fact ascii codes use high-order bit  set indicate end string  it must reset   prior output      length-prefixed     the length string also stored explicitly  example prefixing string length byte value  this convention used many pascal dialects  consequence  people call string pascal string p-string  storing string length byte limits maximum string length      to avoid limitations  improved implementations p-strings use   -    -    -bit words store string length  when length field covers address space  strings limited available memory if length bounded  encoded constant space  typically machine word  thus leading implicit data structure  taking n   k space  k number characters word     -bit ascii   -bit machine      -bit utf-   ucs-    -bit machine  etc   if length bounded  encoding length n takes log n  space  see fixed-length code   length-prefixed strings succinct data structure  encoding string length n log n    n space in latter case  length-prefix field fixed length  therefore actual string data needs moved string grows length field needs increased here pascal string stored   -byte buffer  along ascii   utf-  representation      strings records     many languages  including object-oriented ones  implement strings records internal structure like however  since implementation usually hidden  string must accessed modified member functions  text pointer dynamically allocated memory area  might expanded needed  see also string  c         other representations     both character termination length codes limit strings  for example  c character arrays contain null  nul  characters cannot handled directly c string library functions  strings using length code limited maximum value length code both limitations overcome clever programming it possible create data structures functions manipulate problems associated character termination principle overcome length code bounds  it also possible optimize string represented using techniques run length encoding  replacing repeated characters character value length  hamming encoding while representations common  others possible  using ropes makes certain string operations  insertions  deletions  concatenations efficient the core data structure text editor one manages string  sequence characters  represents current state file edited while state could stored single long consecutive array characters  typical text editor instead uses alternative representation sequence data structure gap buffer  linked list lines  piece table  rope makes certain string operations  insertions  deletions  undoing previous edits  efficient     security concerns    the differing memory layout storage requirements strings affect security program accessing string data  string representations requiring terminating character commonly susceptible buffer overflow problems terminating character present  caused coding error attacker deliberately altering data  string representations adopting separate length field also susceptible length manipulated  in cases  program code accessing string data requires bounds checking ensure inadvertently access change data outside string memory limits string data frequently obtained user input program  as  responsibility program validate string ensure represents expected format  performing limited validation user input cause program vulnerable code injection attacks    literal strings   sometimes  strings need embedded inside text file human-readable intended consumption machine   this needed  example  source code programming languages  configuration files  in case  nul character work well terminator since normally invisible  non-printable  difficult input via keyboard   storing string length would also inconvenient manual computation tracking length tedious error-prone two common representations surrounded quotation marks  ascii  x   double quote ascii  x   single quote   used programming languages  to able include special characters quotation mark  newline characters  non-printable characters  escape sequences often available  usually prefixed backslash character  ascii  x c  terminated newline sequence  example windows ini files    non-text strings   while character strings common uses strings  string computer science may refer generically sequence homogeneously typed data  a bit string byte string  example  may used represent non-textual binary data retrieved communications medium  this data may may represented string-specific datatype  depending needs application  desire programmer  capabilities programming language used  if programming language string implementation  -bit clean  data corruption may ensue c programmers draw sharp distinction  string   aka  string characters   definition always null terminated  vs   byte string   pseudo string  may stored array often null terminated using c string handling functions  byte string  often seems work  later leads security problems    string processing algorithms   there many algorithms processing strings  various trade-offs  competing algorithms analyzed respect run time  storage requirements  forth some categories algorithms include string searching algorithms finding given substring patternstring manipulation algorithmssorting algorithmsregular expression algorithmsparsing stringsequence miningadvanced string algorithms often employ complex mechanisms data structures  among suffix trees finite-state machines the name stringology coined      computer scientist zvi galil issue algorithms data structures used string processing    character string-oriented languages utilities   character strings useful datatype several languages designed order make string processing applications easy write  examples include following languages awkiconmumpsperlrexxrubysedsnoboltclttmmany unix utilities perform simple string manipulations used easily program powerful string processing algorithms  files finite streams may viewed strings some apis like multimedia control interface  embedded sql printf use strings hold commands interpreted recent scripting programming languages  including perl  python  ruby  tcl employ regular expressions facilitate text operations  perl particularly noted regular expression use  many languages applications implement perl compatible regular expressions some languages perl ruby support string interpolation  permits arbitrary expressions evaluated included string literals    character string functions   string functions used create strings change contents mutable string  they also used query information string  the set functions names varies depending computer programming language the basic example string function string length function   function returns length string  counting terminator characters string internal structural information  modify string  this function often named length len  for example  length  hello world   would return     another common function concatenation  new string created appending two strings  often   addition operator some microprocessor instruction set architectures contain direct support string operations  block copy  e g  in intel x  repnz movsb     formal theory   let   finite set symbols  alternatively called characters   called alphabet  no assumption made nature symbols  a string  word    finite sequence symbols    for example                    string   the length string number symbols  length sequence  non-negative integer  often denoted     the empty string unique string   length    denoted     the set strings   length n denoted  n   for example                                      note          alphabet   the set strings   length kleene closure   denoted      in terms  n                                                                                                                           n                                       n                                                                                                                           n                                  displaystyle  sigma       bigcup   n  mathbb  n   cup        sigma   n    for example                                                                        although set    countably infinite  element    string finite length a set strings    i e  subset     called formal language     for example              set strings even number zeros                                                                                           formal language       concatenation substrings    concatenation important binary operation      for two strings     concatenation defined sequence symbols followed sequence characters  denoted st   for example        b       z     bear    hug  st   bearhug ts   hugbear string concatenation associative  non-commutative operation  the empty string   serves identity element  string        s   therefore  set    concatenation operation form monoid  free monoid generated     in addition  length function defines monoid homomorphism    non-negative integers   function                     l                                                                                                n                                                            displaystyle l  sigma      mapsto  mathbb  n   cup                               l                                                 l                                          l                                                                                                                                                      displaystyle l st  l  l  quad  forall  sigma          a string said substring factor exist  possibly empty  strings u v   usv   the relation  substring  defines partial order     least element empty string     prefixes suffixes    a string said prefix exists string u   su  if u nonempty  said proper prefix t  symmetrically  string said suffix exists string u   us  if u nonempty  said proper suffix t  suffixes prefixes substrings t  both relations  prefix   suffix  prefix orders     reversal    the reverse string string symbols reverse order  for example    abc   b  c symbols alphabet   reverse cba  a string reverse  e g     madam  called palindrome  also includes empty string strings length       rotations    a string   uv said rotation t   vu  for example             string         rotation          u         v       as another example  string abc three different rotations  viz  abc  u abc  v     bca  u bc  v   cab  u c  v ab      lexicographical ordering    it often useful define ordering set strings  if alphabet   total order  cf  alphabetical order  one define total order    called lexicographical order  for example                    lexicographical order    includes relationships                                                                                                                   the lexicographical order total alphabetical order  well-founded nontrivial alphabet  even alphabetical order is see shortlex alternative string ordering preserves well-foundedness     string operations    a number additional operations strings commonly occur formal theory  these given article string operations     topology    strings admit following interpretation nodes graph  k number symbols   fixed-length strings length n viewed integer locations n-dimensional hypercube sides length k-  variable-length strings  finite length  viewed nodes perfect k-ary tree infinite strings  otherwise considered  viewed infinite paths k-node complete graph the natural topology set fixed-length strings variable-length strings discrete topology  natural topology set infinite strings limit topology  viewing set infinite strings inverse limit sets finite strings  this construction used p-adic numbers constructions cantor set  yields topology isomorphisms string representations topologies found normalizing according lexicographically minimal string rotation    see also   binary-safe   property string manipulating functions treating input raw data streambit array   string binary digitsc string handling   overview c string handlingc   string handling   overview c   string handlingcomparison programming languages  string functions connection string   passed driver initiate connection  e g   database empty string   properties representation programming languagesincompressible string   string cannot compressed algorithmrope  data structure    data structure efficiently manipulating long stringsstring metric   notions similarity strings   references   
a data matrix two-dimensional code consisting black white  cells  dots arranged either square rectangular pattern  also known matrix  the information encoded text numeric data  usual data size bytes      bytes  the length encoded data depends number cells matrix  error correction codes often used increase reliability  even one cells damaged unreadable  message still read  a data matrix symbol store       alphanumeric characters data matrix symbols rectangular  usually square shape composed square  cells  represent bits  depending coding used   light  cell represents    dark  cell    vice versa  every data matrix composed two solid adjacent borders  l  shape  called  finder pattern   two borders consisting alternating dark light  cells  modules  called  timing pattern    within borders rows columns cells encoding information  the finder pattern used locate orient symbol timing pattern provides count number rows columns symbol  as data encoded symbol  number cells  rows columns  increases  each code unique   symbol sizes vary               new version ecc                old version ecc              applications   the popular application data matrix marking small items  due code ability encode fifty characters symbol readable     mm               sq  fact code read     contrast ratio a data matrix scalable  commercial applications exist images small     micrometres          laser etched    -micrometre         silicon device  large   metre    ft  square  painted roof boxcar   fidelity marking reading systems limitation the us electronic industries alliance  eia  recommends using data matrix labeling small electronic components data matrix codes becoming common printed media labels letters  the code read quickly barcode reader allows media tracked  example parcel dispatched recipient for industrial engineering purposes  data matrix codes marked directly onto components  ensuring intended component identified data-matrix-encoded data  the codes marked onto components various methods  within aerospace industry commonly industrial ink-jet  dot-peen marking  laser marking  electrolytic chemical etching  ece   these methods give permanent mark last lifetime component data matrix codes usually verified using specialist camera equipment software  this verification ensures code conforms relevant standards  ensures readability lifetime component  after  component enters service  data matrix code read reader camera  decodes data matrix data used number purposes  movement tracking inventory stock checks data matrix codes  along open-source codes  d barcodes also read mobile phones downloading code specific mobile applications  although many mobile devices able read  d codes including data matrix code   extend decoding enable mobile access interaction  whereupon codes used securely across media  example  track trace  anti-counterfeit  e govt  banking solutions     food industry    data matrix codes used food industry autocoding systems prevent food products packaged dated incorrectly  codes maintained internally food manufacturers database associated unique product  e g  ingredient variations  for product run unique code supplied printer  label artwork required allow  d data matrix positioned optimal scanning  for black white codes testing required unless print quality issue  color variations need tested production ensure readable     art    in may      german computer programmer  bernd hopfeng rtner  created large data matrix wheat field  fashion similar crop circles   the message read  hello  world    in june      parisian tattoo artist k a r l   part promotion ballantine scotch whisky  created world first animated tattoo utilizing data matrix code collaborative process streamed live facebook    technical specifications   data matrix symbols made modules arranged within perimeter finder timing pattern  it encode       characters entire ascii character set  extensions   the symbol consists data regions contain modules set regular array  large symbols contain several regions  each data region delimited finder pattern  surrounded four sides quiet zone border  margin    note  the modules may round square- specific shape defined standard  for example  dot-peened cells generally round      data matrix ecc        ecc      newer version data matrix  uses reed solomon codes error erasure recovery  ecc     allows routine reconstruction entire encoded data string symbol sustained     damage  assuming matrix still accurately located    data matrix error rate less      million characters scanned symbols even number rows even number columns  most symbols square sizes                    some symbols however rectangular sizes             even values   all symbols using ecc     error correction recognized upper-right corner module background color   binary    additional capabilities differentiate ecc     symbols earlier standards include inverse reading symbols  light images dark background specification character set  via extended channel interpretations rectangular symbolsstructured append  linking    symbols encode larger amounts data     data matrix ecc            older versions data matrix include ecc      ecc      ecc      ecc      ecc      instead using reed solomon codes like ecc      ecc         use convolution-based error correction   each varies amount error correction offers  ecc     offering none  ecc     offering greatest  for error detection decode time  even case ecc      versions also encode cyclic redundancy check  crc  bit pattern   as added measure  placement bit code determined bit-placement tables included specification   these older versions always odd number modules  made sizes ranging                all symbols utilizing ecc         error correction recognized upper-right corner module inverse background color   binary    according iso iec         ecc         used closed applications single party controls production reading symbols responsible overall system performance     standards   data matrix invented international data matrix  inc   id matrix  merged rvsi acuity cimatrix  acquired siemens ag october      microscan systems september       data matrix covered today several iso iec standards public domain many applications  means used free licensing royalties iso iec            data matrix bar code symbology specificationiso iec        -d print quality standardiso iec            symbol data format semantics  gs  application identifiers asc mh   data identifiers maintenance iso iec            data carrier identifiers  including symbology identifiers   ids distinguishing different barcode types iso iec            syntax high-capacity adc media  format data transferred scanner software  etc  iso iec       unique identifiers   encoding   the encoding process described iso iec standard              open-source software encoding decoding ecc-    variant data matrix published the diagrams illustrate placement message data within data matrix symbol  the message  wikipedia   arranged somewhat complicated diagonal pattern starting near upper-left corner  some characters split two pieces  initial w  third    corner pattern    rather usual l-shaped arrangement  also shown end-of-message code  marked end   padding  p  error correction  e  bytes  four modules unused space  x  multiple encoding modes used store different kinds messages  the default mode stores one ascii character per  -bit codeword  control codes provided switch modes  shown below     text modes    the c    text x   modes potentially compact storing text messages  they similar dec radix-    using character codes range       three codes combined make number            packed two bytes  maximum value        follows v   c         c       c     b    floor v     b    v mod    the resulting value b  range        the special value     used return ascii encoding mode character code interpretations shown table below  the c   text modes four separate sets  set   default  contains codes temporarily select different set next character   the difference reverse upper-and lower-case letters   c   primarily upper-case  lower-case letters set    text way around   set    containing ascii control codes  set    containing punctuation symbols identical c   text mode     edifact mode    edifact mode uses six bits per character  four characters packed three bytes  it store digits  upper-case letters  many punctuation marks  support lower-case letters     base     mode    base     mode data starts length indicator  followed number data bytes  a length       encoded single byte longer lengths stored two bytes l    floor length               l    length mod    it desirable avoid long strings zeros coded message  become large blank areas data matrix symbol  maycause scanner lose synchronization   the default ascii encoding use zero reason   in order make less likely  thelength data bytes obscured adding pseudorandom value r n   n position byte stream r n           n  mod           patent issues   prior expiration u s  patent           november       intellectual property company acacia technologies claimed data matrix partially covered contents  as patent owner  acacia allegedly contacted data matrix users demanding license fees related patent cognex corporation  large manufacturer  d barcode devices  filed declaratory judgment complaint    march      receiving information acacia contacted customers demanding licensing fees  on    may      judge joan n  ericksen u s  district court minnesota ruled favor cognex  the ruling held      patent  claimed cover system capturing reading  d symbology codes  invalid unenforceable due inequitable conduct defendants procurement patent while ruling delivered patent expired  precluded claims infringement based use data matrix prior november      a german patent application de         filed       published       this patent cited us patent applications might invalidate them    see also   pdf   aztec codehigh capacity color barcodemaxicodenintendo e-readerqr codesemacodesparqcodetrusted paper key   references      external links   gs  datamatrix guideline  overview technical introduction use gs  datamatrixdatamatrix code generator - online tool
in computing  database organized collection data stored accessed electronically computer system  where databases complex often developed using formal design modeling techniques the database management system  dbms  software interacts end users  applications  database capture analyze data  the dbms software additionally encompasses core facilities provided administer database  the sum total database  dbms associated applications referred  database system   often term  database  also used loosely refer dbms  database system application associated database computer scientists may classify database-management systems according database models support  relational databases became dominant     s  these model data rows columns series tables  vast majority use sql writing querying data  in      non-relational databases became popular  referred nosql use different query languages    terminology overview   formally   database  refers set related data way organized  access data usually provided  database management system   dbms  consisting integrated set computer software allows users interact one databases provides access data contained database  although restrictions may exist limit access particular data   the dbms provides various functions allow entry  storage retrieval large quantities information provides ways manage information organized because close relationship  term  database  often used casually refer database dbms used manipulate it outside world professional information technology  term database often used refer collection related data  spreadsheet card index  size usage requirements typically necessitate use database management system existing dbmss provide various functions allow management database data classified four main functional groups data definition   creation  modification removal definitions define organization data update   insertion  modification  deletion actual data retrieval   providing information form directly usable processing applications  the retrieved data may made available form basically stored database new form obtained altering combining existing data database administration   registering monitoring users  enforcing data security  monitoring performance  maintaining data integrity  dealing concurrency control  recovering information corrupted event unexpected system failure both database dbms conform principles particular database model   database system  refers collectively database model  database management system  database physically  database servers dedicated computers hold actual databases run dbms related software  database servers usually multiprocessor computers  generous memory raid disk arrays used stable storage  hardware database accelerators  connected one servers via high-speed channel  also used large volume transaction processing environments  dbmss found heart database applications  dbmss may built around custom multitasking kernel built-in networking support  modern dbmss typically rely standard operating system provide functions since dbmss comprise significant market  computer storage vendors often take account dbms requirements development plans databases dbmss categorized according database model  support  relational xml   type  computer run  server cluster mobile phone   query language  used access database  sql xquery   internal engineering  affects performance  scalability  resilience  security    history   the sizes  capabilities  performance databases respective dbmss grown orders magnitude  these performance increases enabled technology progress areas processors  computer memory  computer storage  computer networks  the concept database made possible emergence direct access storage media magnetic disks  became widely available mid      earlier systems relied sequential storage data magnetic tape  the subsequent development database technology divided three eras based data model structure  navigational  sql relational  post-relational the two main early navigational data models hierarchical model codasyl model  network model   these characterized use pointers  often physical disk addresses  follow relationships one record another the relational model  first proposed      edgar f  codd  departed tradition insisting applications search data content  rather following links  the relational model employs sets ledger-style tables  used different type entity  only mid-    computing hardware become powerful enough allow wide deployment relational systems  dbmss plus applications   by early      however  relational systems dominated large-scale data processing applications       remain dominant  ibm db   oracle  mysql  microsoft sql server searched dbms  the dominant database language  standardised sql relational model  influenced database languages data models object databases developed     overcome inconvenience object relational impedance mismatch  led coining term  post-relational  also development hybrid object relational databases the next generation post-relational databases late     became known nosql databases  introducing fast key value stores document-oriented databases  a competing  next generation  known newsql databases attempted new implementations retained relational sql model aiming match high performance nosql compared commercially available relational dbmss          navigational dbms    the introduction term database coincided availability direct-access storage  disks drums  mid-    onwards  the term represented contrast tape-based systems past  allowing shared interactive use rather daily batch processing  the oxford english dictionary cites      report system development corporation california first use term  data-base  specific technical sense as computers grew speed capability  number general-purpose database systems emerged  mid-    number systems come commercial use  interest standard began grow  charles bachman  author one product  integrated data store  ids   founded database task group within codasyl  group responsible creation standardization cobol  in       database task group delivered standard  generally became known codasyl approach  soon number commercial products based approach entered market the codasyl approach offered applications ability navigate around linked data set formed large network  applications could find records one three methods use primary key  known calc key  typically implemented hashing navigating relationships  called sets  one record anotherscanning records sequential orderlater systems added b-trees provide alternate access paths  many codasyl databases also added declarative query language end users  distinct navigational api   however codasyl databases complex required significant training effort produce useful applications ibm also dbms       known information management system  ims   ims development software written apollo program system      ims generally similar concept codasyl  used strict hierarchy model data navigation instead codasyl network model  both concepts later became known navigational databases due way data accessed  term popularized bachman      turing award presentation the programmer navigator  ims classified ibm hierarchical database  idms cincom systems  total database classified network databases  ims remains use               relational dbms    edgar f  codd worked ibm san jose  california  one offshoot offices primarily involved development hard disk systems  he unhappy navigational model codasyl approach  notably lack  search  facility  in       wrote number papers outlined new approach database construction eventually culminated groundbreaking a relational model data large shared data banks in paper  described new system storing working large databases  instead records stored sort linked list free-form records codasyl  codd idea organize data number  tables   table used different type entity  each table would contain fixed number columns containing attributes entity  one columns table designated  primary key rows table could uniquely identified  cross-references tables always used primary keys  rather disk addresses  queries would join tables based key relationships  using set operations based mathematical system relational calculus  model takes name   splitting data set normalized tables  relations  aimed ensure  fact  stored  thus simplifying update operations  virtual tables called views could present data different ways different users  views could directly updated codd used mathematical terms define model  relations  tuples  domains rather tables  rows  columns  the terminology familiar came early implementations  codd would later criticize tendency practical implementations depart mathematical foundations model based the use primary keys  user-oriented identifiers  represent cross-table relationships  rather disk addresses  two primary motivations  from engineering perspective  enabled tables relocated resized without expensive database reorganization  but codd interested difference semantics  use explicit identifiers made easier define update operations clean mathematical definitions  also enabled query operations defined terms established discipline first-order predicate calculus  operations clean mathematical properties  becomes possible rewrite queries provably correct ways  basis query optimization  there loss expressiveness compared hierarchic network models  though connections tables longer explicit in hierarchic network models  records allowed complex internal structure  for example  salary history employee might represented  repeating group  within employee record  in relational model  process normalization led internal structures replaced data held multiple tables  connected logical keys for instance  common use database system track information users  name  login information  various addresses phone numbers  in navigational approach  data would placed single variable-length record  in relational approach  data would normalized user table  address table phone number table  instance   records would created optional tables address phone numbers actually provided as well identifying rows records using logical identifiers rather disk addresses  codd changed way applications assembled data multiple records  rather requiring applications gather data one record time navigating links  would use declarative query language expressed data required  rather access path found  finding efficient access path data became responsibility database management system  rather application programmer  this process  called query optimization  depended fact queries expressed terms mathematical logic codd paper picked two people berkeley  eugene wong michael stonebraker  they started project known ingres using funding already allocated geographical database project student programmers produce code  beginning       ingres delivered first test products generally ready widespread use       ingres similar system r number ways  including use  language  data access  known quel  over time  ingres moved emerging sql standard ibm one test implementation relational model  prtv  production one  business system     discontinued  honeywell wrote mrds multics  two new implementations  alphora dataphor rel  most dbms implementations usually called relational actually sql dbmss in       university michigan began development micro information management system based d l  childs  set-theoretic data model  micro used manage large data sets us department labor  u s  environmental protection agency  researchers university alberta  university michigan  wayne state university  it ran ibm mainframe computers using michigan terminal system  the system remained production          integrated approach    in          attempts made build database systems integrated hardware software  the underlying philosophy integration would provide higher performance lower cost  examples ibm system     early offering teradata  britton lee  inc  database machine another approach hardware support database management icl cafs accelerator  hardware disk controller programmable search capabilities  in long term  efforts generally unsuccessful specialized database machines could keep pace rapid development progress general-purpose computers  thus database systems nowadays software systems running general-purpose hardware  using general-purpose computer data storage  however  idea still pursued certain applications companies like netezza oracle  exadata      late      sql dbms    ibm started working prototype system loosely based codd concepts system r early     s  the first version ready         work started multi-table systems data could split data record  optional  stored single large  chunk   subsequent multi-user versions tested customers            time standardized query language   sql   added  codd ideas establishing workable superior codasyl  pushing ibm develop true production version system r  known sql ds   later  database    db   larry ellison oracle database  simply  oracle  started different chain  based ibm papers system r  though oracle v  implementations completed       oracle version   ellison beat ibm market      stonebraker went apply lessons ingres develop new database  postgres  known postgresql  postgresql often used global mission-critical applications   org  info domain name registries use primary data store  many large companies financial institutions  in sweden  codd paper also read mimer sql developed mid-    uppsala university  in       project consolidated independent enterprise another data model  entity relationship model  emerged      gained popularity database design emphasized familiar description earlier relational model  later  entity relationship constructs retrofitted data modeling construct relational model  difference two become irrelevant          desktop    the     ushered age desktop computing  the new computers empowered users spreadsheets like lotus  - -  database software like dbase  the dbase product lightweight easy computer user understand box  c  wayne ratliff  creator dbase  stated   dbase different programs like basic  c  fortran  cobol lot dirty work already done  the data manipulation done dbase instead user  user concentrate  rather mess dirty details opening  reading  closing files  managing space allocation   dbase one top selling software titles     early     s          object-oriented    the      along rise object-oriented programming  saw growth data various databases handled  programmers designers began treat data databases objects  that say person data database  person attributes  address  phone number  age  considered belong person instead extraneous data  this allows relations data relations objects attributes individual fields  the term  object relational impedance mismatch  described inconvenience translating programmed objects database tables  object databases object relational databases attempt solve problem providing object-oriented language  sometimes extensions sql  programmers use alternative purely relational sql  on programming side  libraries known object relational mappings  orms  attempt solve problem          nosql newsql    xml databases type structured document-oriented database allows querying based xml document attributes  xml databases mostly used applications data conveniently viewed collection documents  structure vary flexible highly rigid  examples include scientific articles  patents  tax filings  personnel records nosql databases often fast  require fixed table schemas  avoid join operations storing denormalized data  designed scale horizontally in recent years  strong demand massively distributed databases high partition tolerance  according cap theorem impossible distributed system simultaneously provide consistency  availability  partition tolerance guarantees  a distributed system satisfy two guarantees time  three  for reason  many nosql databases using called eventual consistency provide availability partition tolerance guarantees reduced level data consistency newsql class modern relational databases aims provide scalable performance nosql systems online transaction processing  read-write  workloads still using sql maintaining acid guarantees traditional database system    use cases   databases used support internal operations organizations underpin online interactions customers suppliers  see enterprise software  databases used hold administrative information specialized data  engineering data economic models  examples include computerized library systems  flight reservation systems  computerized parts inventory systems  many content management systems store websites collections webpages database    classification   one way classify databases involves type contents  example  bibliographic  document-text  statistical  multimedia objects  another way application area  example  accounting  music compositions  movies  banking  manufacturing  insurance  a third way technical aspect  database structure interface type  this section lists adjectives used characterize different kinds databases an in-memory database database primarily resides main memory  typically backed-up non-volatile computer data storage  main memory databases faster disk databases  often used response time critical  telecommunications network equipment an active database includes event-driven architecture respond conditions inside outside database  possible uses include security monitoring  alerting  statistics gathering authorization  many databases provide active database features form database triggers a cloud database relies cloud technology  both database dbms reside remotely   cloud   applications developed programmers later maintained used end-users web browser open apis data warehouses archive data operational databases often external sources market research firms  the warehouse becomes central source data use managers end-users may access operational data  for example  sales data might aggregated weekly totals converted internal product codes use upcs compared acnielsen data  some basic essential components data warehousing include extracting  analyzing  mining data  transforming  loading  managing data make available use a deductive database combines logic programming relational database a distributed database one data dbms span multiple computers a document-oriented database designed storing  retrieving  managing document-oriented  semi structured  information  document-oriented databases one main categories nosql databases an embedded database system dbms tightly integrated application software requires access stored data way dbms hidden application end-users requires little ongoing maintenance end-user databases consist data developed individual end-users  examples collections documents  spreadsheets  presentations  multimedia  files  several products exist support databases  some much simpler full-fledged dbmss  elementary dbms functionality a federated database system comprises several distinct databases  dbms  it handled single database federated database management system  fdbms   transparently integrates multiple autonomous dbmss  possibly different types  case would also heterogeneous database system   provides integrated conceptual view sometimes term multi-database used synonym federated database  though may refer less integrated  e g   without fdbms managed integrated schema  group databases cooperate single application  in case  typically middleware used distribution  typically includes atomic commit protocol  acp   e g   two-phase commit protocol  allow distributed  global  transactions across participating databases a graph database kind nosql database uses graph structures nodes  edges  properties represent store information  general graph databases store graph distinct specialized graph databases triplestores network databases an array dbms kind nosql dbms allows modeling  storage  retrieval  usually large  multi-dimensional arrays satellite images climate simulation output in hypertext hypermedia database  word piece text representing object  e g   another piece text  article  picture  film  hyperlinked object  hypertext databases particularly useful organizing large amounts disparate information  for example  useful organizing online encyclopedias  users conveniently jump around text  the world wide web thus large distributed hypertext database a knowledge base  abbreviated kb  kb    special kind database knowledge management  providing means computerized collection  organization  retrieval knowledge  also collection data representing problems solutions related experiences a mobile database carried synchronized mobile computing device operational databases store detailed data operations organization  they typically process relatively high volumes updates using transactions  examples include customer databases record contact  credit  demographic information business customers  personnel databases hold information salary  benefits  skills data employees  enterprise resource planning systems record details product components  parts inventory  financial databases keep track organization money  accounting financial dealings a parallel database seeks improve performance parallelization tasks loading data  building indexes evaluating queries the major parallel dbms architectures induced underlying hardware architecture shared memory architecture  multiple processors share main memory space  well data storage shared disk architecture  processing unit  typically consisting multiple processors  main memory  units share storage shared-nothing architecture  processing unit main memory storage probabilistic databases employ fuzzy logic draw inferences imprecise data real-time databases process transactions fast enough result come back acted right away a spatial database store data multidimensional features  the queries data include location-based queries  like  where closest hotel area   a temporal database built-in time aspects  example temporal data model temporal version sql  more specifically temporal aspects usually include valid-time transaction-time a terminology-oriented database builds upon object-oriented database  often customized specific field an unstructured data database intended store manageable protected way diverse objects fit naturally conveniently common databases  it may include email messages  documents  journals  multimedia objects  etc  the name may misleading since objects highly structured  however  entire possible object collection fit predefined structured framework  most established dbmss support unstructured data various ways  new dedicated dbmss emerging    database management system   connolly begg define database management system  dbms   software system enables users define  create  maintain control access database   examples dbms include mysql  postgresql  microsoft sql server  oracle database  microsoft access the dbms acronym sometimes extended indicate underlying database model  rdbms relational  oodbms object  oriented  ordbms object relational model  other extensions indicate characteristic  ddbms distributed database management systems the functionality provided dbms vary enormously  the core functionality storage  retrieval update data  codd proposed following functions services fully-fledged general purpose dbms provide data storage  retrieval updateuser accessible catalog data dictionary describing metadatasupport transactions concurrencyfacilities recovering database become damagedsupport authorization access update dataaccess support remote locationsenforcing constraints ensure data database abides certain rulesit also generally expected dbms provide set utilities purposes may necessary administer database effectively  including import  export  monitoring  defragmentation analysis utilities  the core part dbms interacting database application interface sometimes referred database engine often dbmss configuration parameters statically dynamically tuned  example maximum amount main memory server database use  the trend minimize amount manual configuration  cases embedded databases need target zero-administration paramount the large major enterprise dbmss tended increase size functionality involved thousands human years development effort lifetime early multi-user dbms typically allowed application reside computer access via terminals terminal emulation software  the client server architecture development application resided client desktop database server allowing processing distributed  this evolved multitier architecture incorporating application servers web servers end user interface via web browser database directly connected adjacent tier a general-purpose dbms provide public application programming interfaces  api  optionally processor database languages sql allow applications written interact database  a special purpose dbms may use private api specifically customized linked single application  for example  email system performing many functions general-purpose dbms message insertion  message deletion  attachment handling  blocklist lookup  associating messages email address forth however functions limited required handle email    application   external interaction database via application program interfaces dbms  this range database tool allows users execute sql queries textually graphically  web site happens use database store search information     application program interface    a programmer code interactions database  sometimes referred datasource  via application program interface  api  via database language  the particular api language chosen need supported dbms  possible indirectly via preprocessor bridging api  some api aim database independent  odbc commonly known example  other common api include jdbc ado net    database languages   database languages special-purpose languages  allow one following tasks  sometimes distinguished sublanguages data control language  dcl    controls access data data definition language  ddl    defines data types creating  altering  dropping tables relationships among data manipulation language  dml    performs tasks inserting  updating  deleting data occurrences data query language  dql    allows searching information computing derived information database languages specific particular data model  notable examples include sql combines roles data definition  data manipulation  query single language  it one first commercial languages relational model  although departs respects relational model described codd  example  rows columns table ordered   sql became standard american national standards institute  ansi        international organization standardization  iso        the standards regularly enhanced since supported  varying degrees conformance  mainstream commercial relational dbmss oql object model language standard  object data management group   it influenced design newer query languages like jdoql ejb ql xquery standard xml query language implemented xml database systems marklogic exist  relational databases xml capability oracle db   also in-memory xml processors saxon sql xml combines xquery sql a database language may also incorporate features like dbms-specific configuration storage engine managementcomputations modify query results  like counting  summing  averaging  sorting  grouping  cross-referencingconstraint enforcement  e g  automotive database  allowing one engine type per car application programming interface version query language  programmer convenience   storage   database storage container physical materialization database  it comprises internal  physical  level database architecture  it also contains information needed  e g   metadata   data data   internal data structures  reconstruct conceptual level external level internal level needed  putting data permanent storage generally responsibility database engine a k a   storage engine   though typically accessed dbms underlying operating system  often using operating systems  file systems intermediates storage layout   storage properties configuration setting extremely important efficient operation dbms  thus closely maintained database administrators  a dbms  operation  always database residing several types storage  e g   memory external storage   the database data additional needed information  possibly large amounts  coded bits  data typically reside storage structures look completely different way data look conceptual external levels  ways attempt optimize  best possible  levels  reconstruction needed users programs  well computing additional types needed information data  e g   querying database  some dbmss support specifying character encoding used store data  multiple encodings used database various low-level database storage structures used storage engine serialize data model written medium choice  techniques indexing may used improve performance  conventional storage row-oriented  also column-oriented correlation databases     materialized views    often storage redundancy employed increase performance  a common example storing materialized views  consist frequently needed external views query results  storing views saves expensive computing time needed  the downsides materialized views overhead incurred updating keep synchronized original updated database data  cost storage redundancy     replication    occasionally database employs storage redundancy database objects replication  one copies  increase data availability  improve performance simultaneous multiple end-user accesses database object  provide resiliency case partial failure distributed database   updates replicated object need synchronized across object copies  in many cases  entire database replicated    security   database security deals various aspects protecting database content  owners  users  it ranges protection intentional unauthorized database uses unintentional database accesses unauthorized entities  e g   person computer program  database access control deals controlling  person certain computer program  allowed access information database  the information may comprise specific database objects  e g   record types  specific records  data structures   certain computations certain objects  e g   query types  specific queries   using specific access paths former  e g   using specific indexes data structures access information   database access controls set special authorized  database owner  personnel uses dedicated protected security dbms interfaces this may managed directly individual basis  assignment individuals privileges groups   elaborate models  assignment individuals groups roles granted entitlements  data security prevents unauthorized users viewing updating database  using passwords  users allowed access entire database subsets called  subschemas   for example  employee database contain data individual employee  one group users may authorized view payroll data  others allowed access work history medical data  if dbms provides way interactively enter update database  well interrogate  capability allows managing personal databases data security general deals protecting specific chunks data  physically  i e   corruption  destruction  removal  e g   see physical security   interpretation  parts meaningful information  e g   looking strings bits comprise  concluding specific valid credit-card numbers  e g   see data encryption  change access logging records accessed attributes  changed  changed  logging services allow forensic database audit later keeping record access occurrences changes  sometimes application-level code used record changes rather leaving database  monitoring set attempt detect security breaches    transactions concurrency   database transactions used introduce level fault tolerance data integrity recovery crash  a database transaction unit work  typically encapsulating number operations database  e g   reading database object  writing  acquiring releasing lock  etc    abstraction supported database also systems  each transaction well defined boundaries terms program code executions included transaction  determined transaction programmer via special transaction commands  the acronym acid describes ideal properties database transaction  atomicity  consistency  isolation  durability    migration   a database built one dbms portable another dbms  i e   dbms cannot run   however  situations  desirable migrate database one dbms another  the reasons primarily economical  different dbmss may different total costs ownership tcos   functional  operational  different dbmss may different capabilities   the migration involves database transformation one dbms type another  the transformation maintain  possible  database related application  i e   related application programs  intact  thus  database conceptual external architectural levels maintained transformation  it may desired also aspects architecture internal level maintained  a complex large database migration may complicated costly  one-time  project  factored decision migrate  this spite fact tools may exist help migration specific dbmss  typically  dbms vendor provides tools help importing databases popular dbmss    building  maintaining  tuning   after designing database application  next stage building database  typically  appropriate general-purpose dbms selected used purpose  a dbms provides needed user interfaces used database administrators define needed application data structures within dbms respective data model  other user interfaces used select needed dbms parameters  like security related  storage allocation parameters  etc   when database ready  data structures needed components defined   typically populated initial application data  database initialization  typically distinct project  many cases using specialized dbms interfaces support bulk insertion  making operational  in cases  database becomes operational empty application data  data accumulated operation after database created  initialized populated needs maintained  various database parameters may need changing database may need tuned  tuning  better performance  application data structures may changed added  new related application programs may written add application functionality  etc    backup restore   sometimes desired bring database back previous state  many reasons  e g   cases database found corrupted due software error  updated erroneous data   to achieve  backup operation done occasionally continuously  desired database state  i e   values data embedding database data structures  kept within dedicated backup files  many techniques exist effectively   when decided database administrator bring database back state  e g   specifying state desired point time database state   files used restore state    static analysis   static analysis techniques software verification applied also scenario query languages  in particular   abstract interpretation framework extended field query languages relational databases way support sound approximation techniques  the semantics query languages tuned according suitable abstractions concrete domain data  the abstraction relational database system many interesting applications  particular  security purposes  fine grained access control  watermarking  etc    miscellaneous features   other dbms features might include database logs   this helps keeping history executed functions graphics component producing graphs charts  especially data warehouse system query optimizer   performs query optimization every query choose efficient query plan  partial order  tree  operations  executed compute query result  may specific particular storage engine tools hooks database design  application programming  application program maintenance  database performance analysis monitoring  database configuration monitoring  dbms hardware configuration  dbms related database may span computers  networks  storage units  related database mapping  especially distributed dbms   storage allocation database layout monitoring  storage migration  etc increasingly  calls single system incorporates core functionalities build  test  deployment framework database management source control  borrowing developments software industry  market offerings  devops database     design modeling   the first task database designer produce conceptual data model reflects structure information held database  a common approach to develop entity relationship model  often aid drawing tools  another popular approach unified modeling language  a successful data model accurately reflect possible state external world modeled  example  people one phone number  allow information captured  designing good conceptual data model requires good understanding application domain  typically involves asking deep questions things interest organization  like  customer also supplier     product sold two different forms packaging  product different products     plane flies new york dubai via frankfurt  one flight two  maybe even three     the answers questions establish definitions terminology used entities  customers  products  flights  flight segments  relationships attributes producing conceptual data model sometimes involves input business processes  analysis workflow organization  this help establish information needed database  left out  for example  help deciding whether database needs hold historic data well current data having produced conceptual data model users happy  next stage translate schema implements relevant data structures within database  this process often called logical database design  output logical data model expressed form schema  whereas conceptual data model  theory least  independent choice database technology  logical data model expressed terms particular database model supported chosen dbms   the terms data model database model often used interchangeably  article use data model design specific database  database model modeling notation used express design  the popular database model general-purpose databases relational model  precisely  relational model represented sql language  the process creating logical database design using model uses methodical approach known normalization  the goal normalization ensure elementary  fact  recorded one place  insertions  updates  deletions automatically maintain consistency the final stage database design make decisions affect performance  scalability  recovery  security  like  depend particular dbms  this often called physical database design  output physical data model  a key goal stage data independence  meaning decisions made performance optimization purposes invisible end-users applications  there two types data independence  physical data independence logical data independence  physical design driven mainly performance requirements  requires good knowledge expected workload access patterns  deep understanding features offered chosen dbms another aspect physical database design security  it involves defining access control database objects well defining security levels methods data itself     models    a database model type data model determines logical structure database fundamentally determines manner data stored  organized  manipulated  the popular example database model relational model  sql approximation relational   uses table-based format common logical data models databases include navigational databaseshierarchical database modelnetwork modelgraph databaserelational modelentity relationship modelenhanced entity relationship modelobject modeldocument modelentity attribute value modelstar schemaan object relational database combines two related structures physical data models include inverted indexflat fileother models include multidimensional modelarray modelmultivalue modelspecialized models optimized particular types data xml databasesemantic modelcontent storeevent storetime series model    external  conceptual  internal views    a database management system provides three views database data the external level defines group end-users sees organization data database  a single database number views external level the conceptual level unifies various external views compatible global view  it provides synthesis external views  it scope various database end-users  rather interest database application developers database administrators the internal level  physical level  internal organization data inside dbms  it concerned cost  performance  scalability operational matters  it deals storage layout data  using storage structures indexes enhance performance  occasionally stores data individual views  materialized views   computed generic data  performance justification exists redundancy  it balances external views  performance requirements  possibly conflicting  attempt optimize overall performance across activities while typically one conceptual  logical  physical  internal  view data  number different external views  this allows users see database information business-related way rather technical  processing viewpoint  for example  financial department company needs payment details employees part company expenses  need details employees interest human resources department  thus different departments need different views company database the three-level database architecture relates concept data independence one major initial driving forces relational model  the idea changes made certain level affect view higher level  for example  changes internal level affect application programs written using conceptual level interfaces  reduces impact making physical changes improve performance the conceptual view provides level indirection internal external  on one hand provides common view database  independent different external view structures  hand abstracts away details data stored managed  internal level   in principle every level  even every external view  presented different data model  in practice usually given dbms uses data model external conceptual levels  e g   relational model   the internal level  hidden inside dbms depends implementation  requires different level detail uses types data structure types separating external  conceptual internal levels major feature relational database model implementations dominate   st century databases    research   database technology active research topic since      academia research development groups companies  example ibm research   research activity includes theory development prototypes  notable research topics included models  atomic transaction concept  related concurrency control techniques  query languages query optimization methods  raid  more the database research area several dedicated academic journals  example  acm transactions database systems-tods  data knowledge engineering-dke  annual conferences  e g   acm sigmod  acm pods  vldb  ieee icde     see also      notes      references      sources      further reading   ling liu tamer m   zsu  eds             encyclopedia database systems       p     illus  isbn    - -   -     -  gray  j  reuter  a  transaction processing  concepts techniques   st edition   morgan kaufmann publishers       kroenke  david m  david j  auer  database concepts   rd ed  new york  prentice       raghu ramakrishnan johannes gehrke  database management systemsabraham silberschatz  henry f  korth  s  sudarshan  database system conceptslightstone  s   teorey  t   nadeau  t          physical database design  database professional guide exploiting indexes  views  storage  more  morgan kaufmann press  isbn    - -  -      -  teorey  t   lightstone  s  nadeau  t  database modeling   design  logical design   th edition  morgan kaufmann press        isbn  -  -      -    external links   db file extension   information files db extension
in computer science  imperative programming  programming paradigm uses statements change program state  in much way imperative mood natural languages expresses commands  imperative program consists commands computer perform  imperative programming focuses describing program operates the term often used contrast declarative programming  focuses program accomplish without specifying program achieve result    imperative procedural programming   procedural programming type imperative programming program built one procedures  also termed subroutines functions   the terms often used synonyms  use procedures dramatic effect imperative programs appear constructed  heavily procedural programming  state changes localized procedures restricted explicit arguments returns procedures  form structured programming  from     onwards  structured programming modular programming general promoted techniques improve maintainability overall quality imperative programs  the concepts behind object-oriented programming attempt extend approach procedural programming could considered step toward declarative programming  a programmer often tell  simply looking names  arguments  return types procedures  related comments   particular procedure supposed  without necessarily looking details achieves result  at time  complete program still imperative since fixes statements executed order execution large extent    rationale foundations imperative programming   the hardware implementation almost computers imperative  nearly computer hardware designed execute machine code  native computer written imperative style  from low-level perspective  program state defined contents memory  statements instructions native machine language computer  higher-level imperative languages use variables complex statements  still follow paradigm  recipes process checklists  computer programs  also familiar concepts similar style imperative programming  step instruction  physical world holds state  since basic ideas imperative programming conceptually familiar directly embodied hardware  computer languages imperative style assignment statements  imperative paradigm  perform operation information located memory store results memory later use  high-level imperative languages  addition  permit evaluation complex expressions  may consist combination arithmetic operations function evaluations  assignment resulting value memory  looping statements  loops  loops  loops  allow sequence statements executed multiple times  loops either execute statements contain predefined number times  execute repeatedly condition changes  conditional branching statements allow sequence statements executed condition met  otherwise  statements skipped execution sequence continues statement following them  unconditional branching statements allow execution sequence transferred another part program  these include jump  called goto many languages   switch  subprogram  subroutine  procedure call  usually returns next statement call  early development high-level programming languages  introduction block enabled construction programs group statements declarations could treated one statement  this  alongside introduction subroutines  enabled complex structures expressed hierarchical decomposition simpler procedural structures many imperative programming languages  fortran  basic  c  abstractions assembly language    history imperative object-oriented languages   the earliest imperative languages machine languages original computers  in languages  instructions simple  made hardware implementation easier hindered creation complex programs  fortran  developed john backus international business machines  ibm  starting       first major programming language remove obstacles presented machine code creation complex programs  fortran compiled language allowed named variables  complex expressions  subprograms  many features common imperative languages  the next two decades saw development many major high-level imperative programming languages  in late          algol developed order allow mathematical algorithms easily expressed even served operating system target language computers  mumps        carried imperative paradigm logical extreme  statements  relying purely commands  even extent making if else commands independent  connected intrinsic variable named  test  cobol        basic        attempts make programming syntax look like english  in      pascal developed niklaus wirth  c created dennis ritchie working bell laboratories  wirth went design modula-  oberon  for needs united states department defense  jean ichbiah team honeywell began designing ada        -year project define requirements language  the specification first published       revisions                  the     saw rapid growth interest object-oriented programming  these languages imperative style  added features support objects  the last two decades   th century saw development many languages  smalltalk-    originally conceived alan kay       released       xerox palo alto research center  parc   drawing concepts another object-oriented language simula  considered world first object-oriented programming language  developed      bjarne stroustrup designed c    object-oriented language based c  design c   began      first implementation completed       in late          notable imperative languages drawing object-oriented concepts perl  released larry wall       python  released guido van rossum       visual basic visual c    included microsoft foundation class library  mfc        released microsoft           respectively  php  released rasmus lerdorf       java  james gosling  sun microsystems        javascript  brendan eich  netscape   ruby  yukihiro  matz  matsumoto  released       microsoft  net framework        imperative core  main target languages  vb net c  run  however microsoft f   functional language  also runs it    see also   functional programmingcomparison programming paradigmsreactive programminghistory programming languageslist imperative programming languages   notes      references   pratt  terrence w  marvin v  zelkowitz  programming languages  design implementation   rd ed  englewood cliffs  n j   prentice hall       sebesta  robert w  concepts programming languages   rd ed  reading  mass   addison-wesley publishing company       originally based article  imperative programming  stan seibert  nupedia  licensed gnu free documentation license 
procedural programming programming paradigm  derived imperative programming  based concept procedure call   procedures  type routine subroutine  simply contain series computational steps carried out   any given procedure might called point program execution  including procedures itself  the first major procedural programming languages appeared circa            including fortran  algol  cobol  pl i basic   pascal c published circa           computer processors provide hardware support procedural programming stack register instructions calling procedures returning them  hardware support types programming possible  attempt commercially successful  example lisp machines java processors     procedures modularity   modularity generally desirable  especially large  complicated programs  inputs usually specified syntactically form arguments outputs delivered return values scoping another technique helps keep procedures modular   it prevents procedure accessing variables procedures  vice versa   including previous instances  without explicit authorization less modular procedures  often used small quickly written programs  tend interact large number variables execution environment  procedures might also modify because ability specify simple interface  self-contained  reused  procedures convenient vehicle making pieces code written different people different groups  including programming libraries    comparison programming paradigms       imperative programming    procedural programming languages also imperative languages  make explicit references state execution environment  this could anything variables  may correspond processor registers  something like position  turtle  logo programming language often  terms  procedural programming   imperative programming  used synonymously  however  procedural programming relies heavily blocks scope  whereas imperative programming whole may may features  as  procedural languages generally use reserved words act blocks     implement control flow  whereas non-structured imperative languages use goto statements branch tables purpose     object-oriented programming    the focus procedural programming break programming task collection variables  data structures  subroutines  whereas object-oriented programming break programming task objects expose behavior  methods  data  members attributes  using interfaces  the important distinction procedural programming uses procedures operate data structures  object-oriented programming bundles two together   object   instance class  operates   data structure nomenclature varies two  although similar semantics     functional programming    the principles modularity code reuse practical functional languages fundamentally procedural languages  since stem structured programming  so example procedures correspond functions   both allow reuse code various parts programs  various points execution by token  procedure calls correspond function application functions modularly separated manner  use function arguments  return values variable scopes the main difference styles functional programming languages remove least deemphasize imperative elements procedural programming   the feature set functional languages therefore designed support writing programs much possible terms pure functions whereas procedural languages model execution program sequence imperative commands may implicitly alter shared state  functional programming languages model execution evaluation complex expressions depend terms arguments return values   for reason  functional programs free order code execution  languages may offer little control order various parts program executed    for example  arguments procedure invocation scheme executed arbitrary order  functional programming languages support  heavily use  first-class functions  anonymous functions closures  although concepts included newer procedural languages functional programming languages tend rely tail call optimization higher-order functions instead imperative looping constructs many functional languages  however  fact impurely functional offer imperative procedural constructs allow programmer write programs procedural style  combination styles   it common input output code functional languages written procedural style there exist esoteric functional languages  like unlambda  eschew structured programming precepts sake difficult program  therefore challenging    these languages exception common ground procedural functional languages     logic programming    in logic programming  program set premises  computation performed attempting prove candidate theorems  from point view  logic programs declarative  focusing problem  rather solve it however  backward reasoning technique  implemented sld resolution  used solve problems logic programming languages prolog  treats programs goal-reduction procedures  thus  clauses form h  - b      bn have dual interpretation  proceduresto show solve h  show solve b    bnand logical implications b    bn implies h experienced logic programmers use procedural interpretation write programs effective efficient  use declarative interpretation help ensure programs correct    see also   comparison programming paradigmsdeclarative programmingfunctional programming  contrast imperative programminglogic programmingobject-oriented programmingprogramming paradigmsprogramming languagestructured programmingsql procedural extensions   references      external links   procedural languages curlie
in computer science  functional programming programming paradigm programs constructed applying composing functions  it declarative programming paradigm function definitions trees expressions map values values  rather sequence imperative statements update running state program in functional programming  functions treated first-class citizens  meaning bound names  including local identifiers   passed arguments  returned functions  data type can  this allows programs written declarative composable style  small functions combined modular manner functional programming sometimes treated synonymous purely functional programming  subset functional programming treats functions deterministic mathematical functions  pure functions  when pure function called given arguments  always return result  cannot affected mutable state side effects  this contrast impure procedures  common imperative programming  side effects  modifying program state taking input user   proponents purely functional programming claim restricting side effects  programs fewer bugs  easier debug test  suited formal verification functional programming roots academia  evolving lambda calculus  formal system computation based functions  functional programming historically less popular imperative programming  many functional languages seeing use today industry education  including common lisp  scheme  clojure  wolfram language  racket  erlang   elixir  ocaml  haskell  f   functional programming also key languages found success specific domains  like javascript web  r statistics  j  k q financial analysis  xquery xslt xml  domain-specific declarative languages like sql lex yacc use elements functional programming  allowing mutable values  in addition  many programming languages support programming functional style implemented features functional programming  c      c   kotlin  perl  php  python  go  rust  raku  scala  java  since java       history   the lambda calculus  developed     alonzo church  formal system computation built function application  in      alan turing proved lambda calculus turing machines equivalent models computation  showing lambda calculus turing complete  lambda calculus forms basis functional programming languages  an equivalent theoretical formulation  combinatory logic  developed moses sch nfinkel haskell curry         s church later developed weaker system  simply-typed lambda calculus  extended lambda calculus assigning type terms  this forms basis statically-typed functional programming the first functional programming language  lisp  developed late     ibm          series scientific computers john mccarthy massachusetts institute technology  mit   lisp functions defined using church lambda notation  extended label construct allow recursive functions  lisp first introduced many paradigmatic features functional programming  though early lisps multi-paradigm languages  incorporated support numerous programming styles new paradigms evolved  later dialects  scheme clojure  offshoots dylan julia  sought simplify rationalise lisp around cleanly functional core  common lisp designed preserve update paradigmatic features numerous older dialects replaced information processing language  ipl         sometimes cited first computer-based functional programming language  it assembly-style language manipulating lists symbols  it notion generator  amounts function accepts function argument   since assembly-level language  code data  ipl regarded higher-order functions  however  relies heavily mutating list structure similar imperative features kenneth e  iverson developed apl early      described      book a programming language  isbn                 apl primary influence john backus fp  in early      iverson roger hui created j  in mid-     arthur whitney  previously worked iverson  created k  used commercially financial industries along descendant q john backus presented fp      turing award lecture  can programming be liberated from von neumann style  a functional style algebra programs   he defines functional programs built hierarchical way means  combining forms  allow  algebra programs   modern language  means functional programs follow principle compositionality  backus paper popularized research functional programming  though emphasized function-level programming rather lambda-calculus style associated functional programming the      language ml created robin milner university edinburgh  david turner developed language sasl university st andrews  also edinburgh      burstall darlington developed functional language npl  npl based kleene recursion equations first introduced work program transformation  burstall  macqueen sannella incorporated polymorphic type checking ml produce language hope  ml eventually developed several dialects  common ocaml standard ml in      guy l  steele gerald jay sussman developed scheme  described lambda papers      textbook structure interpretation computer programs  scheme first dialect lisp use lexical scoping require tail-call optimization  features encourage functional programming in      per martin-l f developed intuitionistic type theory  also called constructive type theory   associated functional programs constructive proofs expressed dependent types  this led new approaches interactive theorem proving influenced development subsequent functional programming languages the lazy functional language  miranda  developed david turner  initially appeared      strong influence haskell  with miranda proprietary  haskell began consensus      form open standard functional programming research  implementation releases ongoing since      more recently found use niches parametric cad courtesy openscad language built csg geometry framework  although restriction reassigning values  values treated constants  led confusion among users unfamiliar functional programming concept functional programming continues used commercial settings    concepts   a number concepts paradigms specific functional programming  generally foreign imperative programming  including object-oriented programming   however  programming languages often cater several programming paradigms  programmers using  mostly imperative  languages may utilized concepts     first-class higher-order functions    higher-order functions functions either take functions arguments return results  in calculus  example higher-order function differential operator                                                              x                displaystyle dx     returns derivative function                     f                displaystyle f    higher-order functions closely related first-class functions higher-order functions first-class functions allow functions arguments results functions  the distinction two subtle   higher-order  describes mathematical concept functions operate functions   first-class  computer science term programming language entities restriction use  thus first-class functions appear anywhere program first-class entities like numbers  including arguments functions return values  higher-order functions enable partial application currying  technique applies function arguments one time  application returning new function accepts next argument  this lets programmer succinctly express  example  successor function addition operator partially applied natural number one     pure functions    pure functions  expressions  side effects  memory i o   this means pure functions several useful properties  many used optimize code if result pure expression used  removed without affecting expressions if pure function called arguments cause side-effects  result constant respect argument list  sometimes called referential transparency idempotence   i e   calling pure function arguments returns result   this enable caching optimizations memoization  if data dependency two pure expressions  order reversed  performed parallel cannot interfere one another  terms  evaluation pure expression thread-safe  if entire language allow side-effects  evaluation strategy used  gives compiler freedom reorder combine evaluation expressions program  example  using deforestation  while compilers imperative programming languages detect pure functions perform common-subexpression elimination pure function calls  cannot always pre-compiled libraries  generally expose information  thus preventing optimizations involve external functions  some compilers  gcc  add extra keywords programmer explicitly mark external functions pure  enable optimizations  fortran    also lets functions designated pure  c     added constexpr keyword similar semantics     recursion    iteration  looping  functional languages usually accomplished via recursion  recursive functions invoke  letting operation repeated reaches base case  in general  recursion requires maintaining stack  consumes space linear amount depth recursion  this could make recursion prohibitively expensive use instead imperative loops  however  special form recursion known tail recursion recognized optimized compiler code used implement iteration imperative languages  tail recursion optimization implemented transforming program continuation passing style compiling  among approaches the scheme language standard requires implementations support proper tail recursion  meaning must allow unbounded number active tail calls  proper tail recursion simply optimization  language feature assures users use recursion express loop would safe-for-space  moreover  contrary name  accounts tail calls  tail recursion  while proper tail recursion usually implemented turning code imperative loops  implementations might implement ways  for example  chicken intentionally maintains stack lets stack overflow  however  happens  garbage collector claim space back  allowing unbounded number active tail calls even though turn tail recursion loop common patterns recursion abstracted away using higher-order functions  catamorphisms anamorphisms   folds   unfolds   obvious examples  such recursion schemes play role analogous built-in control structures loops imperative languages most general purpose functional programming languages allow unrestricted recursion turing complete  makes halting problem undecidable  cause unsoundness equational reasoning  generally requires introduction inconsistency logic expressed language type system  some special purpose languages coq allow well-founded recursion strongly normalizing  nonterminating computations expressed infinite streams values called codata   as consequence  languages fail turing complete expressing certain functions impossible  still express wide class interesting computations avoiding problems introduced unrestricted recursion  functional programming limited well-founded recursion constraints called total functional programming     strict versus non-strict evaluation    functional languages categorized whether use strict  eager  non-strict  lazy  evaluation  concepts refer function arguments processed expression evaluated  the technical difference denotational semantics expressions containing failing divergent computations  under strict evaluation  evaluation term containing failing subterm fails  for example  expression print length                  -   fails strict evaluation division zero third element list  under lazy evaluation  length function returns value    i e   number items list   since evaluating attempt evaluate terms making list  in brief  strict evaluation always fully evaluates function arguments invoking function  lazy evaluation evaluate function arguments unless values required evaluate function call itself the usual implementation strategy lazy evaluation functional languages graph reduction  lazy evaluation used default several pure functional languages  including miranda  clean  haskell hughes      argues lazy evaluation mechanism improving program modularity separation concerns  easing independent implementation producers consumers data streams  launchbury       describes difficulties lazy evaluation introduces  particularly analyzing program storage requirements  proposes operational semantics aid analysis  harper      proposes including strict lazy evaluation language  using language type system distinguish them     type systems    especially since development hindley milner type inference      functional programming languages tended use typed lambda calculus  rejecting invalid programs compilation time risking false positive errors  opposed untyped lambda calculus  accepts valid programs compilation time risks false negative errors  used lisp variants  scheme   though reject invalid programs runtime information enough reject valid programs  the use algebraic datatypes makes manipulation complex data structures convenient  presence strong compile-time type checking makes programs reliable absence reliability techniques like test-driven development  type inference frees programmer need manually declare types compiler cases some research-oriented functional languages coq  agda  cayenne  epigram based intuitionistic type theory  lets types depend terms  such types called dependent types  these type systems decidable type inference difficult understand program with  but dependent types express arbitrary propositions higher-order logic  through curry howard isomorphism   well-typed programs languages become means writing formal mathematical proofs compiler generate certified code  while languages mainly interest academic research  including formalized mathematics   begun used engineering well  compcert compiler subset c programming language written coq formally verified a limited form dependent types called generalized algebraic data types  gadt  implemented way provides benefits dependently typed programming avoiding inconvenience  gadt available glasgow haskell compiler  ocaml scala  proposed additions languages including java c      referential transparency    functional programs assignment statements   value variable functional program never changes defined  this eliminates chances side effects variable replaced actual value point execution  so  functional programs referentially transparent consider c assignment statement x   x       changes value assigned variable x  let us say initial value x    two consecutive evaluations variable x yields        respectively  clearly  replacing x   x      either        gives program different meaning  expression referentially transparent  in fact  assignment statements never referentially transparent now  consider another function int plusone int x   return x     transparent  implicitly change input x thus side effects functional programs exclusively use type function therefore referentially transparent     data structures    purely functional data structures often represented different way imperative counterparts  for example  array constant access update times basic component imperative languages  many imperative data-structures  hash table binary heap   based arrays  arrays replaced maps random access lists  admit purely functional implementation  logarithmic access update times  purely functional data structures persistence  property keeping previous versions data structure unmodified  in clojure  persistent data structures used functional alternatives imperative counterparts  persistent vectors  example  use trees partial updating  calling insert method result nodes created    comparison imperative programming   functional programming different imperative programming  the significant differences stem fact functional programming avoids side effects  used imperative programming implement state i o  pure functional programming completely prevents side-effects provides referential transparency higher-order functions rarely used older imperative programming  a traditional imperative program might use loop traverse modify list  a functional program  hand  would probably use higher-order  map  function takes function list  generating returning new list applying function list item     imperative vs  functional programming    the following two examples  written javascript  achieve effect  multiply even numbers array    add  storing final sum variable  result  traditional imperative loop functional programming higher-order functions     simulating state    there tasks  example  maintaining bank account balance  often seem naturally implemented state  pure functional programming performs tasks  i o tasks accepting user input printing screen  different way the pure functional programming language haskell implements using monads  derived category theory  monads offer way abstract certain types computational patterns  including  limited  modeling computations mutable state  side effects i o  imperative manner without losing purity  while existing monads may easy apply program  given appropriate templates examples  many students find difficult understand conceptually  e g   asked define new monads  sometimes needed certain types libraries  functional languages also simulate states passing around immutable states  this done making function accept state one parameters  return new state together result  leaving old state unchanged impure functional languages usually include direct method managing mutable state  clojure  example  uses managed references updated applying pure functions current state  this kind approach enables mutability still promoting use pure functions preferred way express computations alternative methods hoare logic uniqueness developed track side effects programs  some modern research languages use effect systems make presence side effects explicit     efficiency issues    functional programming languages typically less efficient use cpu memory imperative languages c pascal   this related fact mutable data structures like arrays straightforward implementation using present hardware  flat arrays may accessed efficiently deeply pipelined cpus  prefetched efficiently caches  complex pointer chasing   handled simd instructions   it also easy create equally efficient general-purpose immutable counterparts  for purely functional languages  worst-case slowdown logarithmic number memory cells used  mutable memory represented purely functional data structure logarithmic access time  balanced tree   however  slowdowns universal  for programs perform intensive numerical computations  functional languages ocaml clean slightly slower c according the computer language benchmarks game  for programs handle large matrices multidimensional databases  array functional languages  j k  designed speed optimizations immutability data many cases lead execution efficiency allowing compiler make assumptions unsafe imperative language  thus increasing opportunities inline expansion lazy evaluation may also speed program  even asymptotically  whereas may slow constant factor  however  may introduce memory leaks used improperly   launchbury      discusses theoretical issues related memory leaks lazy evaluation  o sullivan et al       give practical advice analyzing fixing them however  general implementations lazy evaluation making extensive use dereferenced code data perform poorly modern processors deep pipelines multi-level caches  cache miss may cost hundreds cycles      functional programming non-functional languages    it possible use functional style programming languages traditionally considered functional languages  for example  d fortran    explicitly support pure functions javascript  lua  python go first class functions inception  python support  lambda    map    reduce    filter        well closures python      though python   relegated   reduce  functools standard library module  first-class functions introduced mainstream languages php      visual basic    c       c      kotlin in php  anonymous classes  closures lambdas fully supported  libraries language extensions immutable data structures developed aid programming functional style in java  anonymous classes sometimes used simulate closures  however  anonymous classes always proper replacements closures limited capabilities  java   supports lambda expressions replacement anonymous classes in c   anonymous classes necessary  closures lambdas fully supported  libraries language extensions immutable data structures developed aid programming functional style c  many object-oriented design patterns expressible functional programming terms  example  strategy pattern simply dictates use higher-order function  visitor pattern roughly corresponds catamorphism  fold similarly  idea immutable data functional programming often included imperative programming languages  example tuple python  immutable array  object freeze   javascript    applications       spreadsheets    spreadsheets considered form pure  zeroth-order  strict-evaluation functional programming system  however  spreadsheets generally lack higher-order functions well code reuse  implementations  also lack recursion  several extensions developed spreadsheet programs enable higher-order reusable functions  far remain primarily academic nature     academia    functional programming active area research field programming language theory  there several peer-reviewed publication venues focusing functional programming  including international conference functional programming  journal functional programming  symposium trends functional programming     industry    functional programming seen use wide variety industrial applications  for example  erlang  developed swedish company ericsson late      originally used implement fault-tolerant telecommunications systems  since become popular building range applications companies nortel  facebook   lectricit  de france whatsapp  scheme  dialect lisp  used basis several applications early apple macintosh computers  applied problems training simulation software telescope control  ocaml  introduced mid-     seen commercial use areas financial analysis  driver verification  industrial robot programming  static analysis embedded software  haskell  though initially intended research language  also applied range companies  areas aerospace systems  hardware design  web programming other functional programming languages seen use industry include scala  f   wolfram language  lisp  standard ml  clojure functional  platforms  popular finance risk analytics  particularly larger investment banks   risk factors coded functions form interdependent graphs  categories  measure correlations market shifts unlike gr bner basis optimizations also regulatory compliance comprehensive capital analysis review  given use ocaml caml variations finance  systems sometimes considered related categorical abstract machine cam  indeed  functional programming heavily influenced category theory     education    many universities teach taught functional programming part undergraduate computer science degrees  some use introduction programming  others teach teaching imperative programming outside computer science  functional programming used method teach problem solving  algebra geometric concepts it also used tool teach classical mechanics structure interpretation classical mechanics    see also   purely functional programmingcomparison programming paradigmseager evaluationlist functional programming topicsnested functioninductive functional programmingfunctional reactive programming   references      further reading   abelson  hal  sussman  gerald jay         structure interpretation computer programs  mit press cousineau  guy michel mauny  the functional approach programming  cambridge  uk  cambridge university press       curry  haskell brooks feys  robert craig  william  combinatory logic  volume i  north-holland publishing company  amsterdam       curry  haskell b   hindley  j  roger  seldin  jonathan p          combinatory logic  vol  ii  amsterdam  north holland  isbn    - -    -    -   dominus  mark jason  higher-order perl  morgan kaufmann       felleisen  matthias  findler  robert  flatt  matthew  krishnamurthi  shriram         how design programs  mit press graham  paul  ansi common lisp  englewood cliffs  new jersey  prentice hall       maclennan  bruce j  functional programming  practice theory  addison-wesley       o sullivan  brian  stewart  don  goerzen  john         real world haskell  o reilly pratt  terrence  w  marvin v  zelkowitz  programming languages  design implementation   rd ed  englewood cliffs  new jersey  prentice hall       salus  peter h  functional logic programming languages  vol    handbook programming languages  indianapolis  indiana  macmillan technical publishing       thompson  simon  haskell  the craft functional programming  harlow  england  addison-wesley longman limited          external links   ford  neal      -  -      functional thinking  why functional programming rise   retrieved     -  -   akhmechet  slava      -  -      defmacro   functional programming for the rest us   retrieved     -  -    an introductionfunctional programming python  david mertz   part    part    part  
logic programming programming paradigm largely based formal logic  any program written logic programming language set sentences logical form  expressing facts rules problem domain   major logic programming language families include prolog  answer set programming  asp  datalog  in languages  rules written form clauses h  - b      bn and read declaratively logical implications h b    bn h called head rule b        bn called body  facts rules body  written simplified form h in simplest case h  b        bn atomic formulae  clauses called definite clauses horn clauses  however  many extensions simple case  important one case conditions body clause also negations atomic formulas  logic programming languages include extension knowledge representation capabilities non-monotonic logic in asp datalog  logic programs declarative reading  execution performed means proof procedure model generator whose behaviour meant controlled programmer  however  prolog family languages  logic programs also procedural interpretation goal-reduction procedures solve h  solve b       solve bn consider following clause example fallible x   - human x  based example used terry winograd illustrate programming language planner  as clause logic program  used procedure test whether x fallible testing whether x human  procedure find x fallible finding x human  even facts procedural interpretation  for example  clause human socrates  can used procedure show socrates human  procedure find x human  assigning  socrates x the declarative reading logic programs used programmer verify correctness  moreover  logic-based program transformation techniques also used transform logic programs logically equivalent programs efficient  in prolog family logic programming languages  programmer also use known problem-solving behaviour execution mechanism improve efficiency programs    history   the use mathematical logic represent execute computer programs also feature lambda calculus  developed alonzo church     s  however  first proposal use clausal form logic representing computer programs made cordell green  this used axiomatization subset lisp  together representation input-output relation  compute relation simulating execution program lisp  foster elcock absys  hand  employed combination equations lambda calculus assertional programming language places constraints order operations performed logic programming present form traced back debates late     early     declarative versus procedural representations knowledge artificial intelligence  advocates declarative representations notably working stanford  associated john mccarthy  bertram raphael cordell green  edinburgh  john alan robinson  academic visitor syracuse university   pat hayes  robert kowalski  advocates procedural representations mainly centered mit  leadership marvin minsky seymour papert although based proof methods logic  planner  developed mit  first language emerge within proceduralist paradigm  planner featured pattern-directed invocation procedural plans goals  i e  goal-reduction backward chaining  assertions  i e  forward chaining   the influential implementation planner subset planner  called micro-planner  implemented gerry sussman  eugene charniak terry winograd  it used implement winograd natural-language understanding program shrdlu  landmark time  to cope limited memory systems time  planner used backtracking control structure one possible computation path stored time  planner gave rise programming languages qa-   popler  conniver  qlisp  concurrent language ether hayes kowalski edinburgh tried reconcile logic-based declarative approach knowledge representation planner procedural approach  hayes        developed equational language  golux  different procedures could obtained altering behavior theorem prover  kowalski  hand  developed sld resolution  variant sl-resolution  showed treats implications goal-reduction procedures  kowalski collaborated colmerauer marseille  developed ideas design implementation programming language prolog the association logic programming founded promote logic programming      prolog gave rise programming languages alf  fril  g del  mercury  oz  ciao  visual prolog  xsb   prolog  well variety  concurrent logic programming languages  constraint logic programming languages datalog    concepts       logic control    logic programming viewed controlled deduction  an important concept logic programming separation programs logic component control component  with pure logic programming languages  logic component alone determines solutions produced  the control component varied provide alternative ways executing logic program  this notion captured sloganalgorithm   logic   controlwhere  logic  represents logic program  control  represents different theorem-proving strategies     problem solving    in simplified  propositional case logic program top-level atomic goal contain variables  backward reasoning determines and-or tree  constitutes search space solving goal  the top-level goal root tree  given node tree clause whose head matches node  exists set child nodes corresponding sub-goals body clause  these child nodes grouped together    the alternative sets children corresponding alternative ways solving node grouped together   any search strategy used search space  prolog uses sequential  last-in-first-out  backtracking strategy  one alternative one sub-goal considered time  other search strategies  parallel search  intelligent backtracking  best-first search find optimal solution  also possible in general case  sub-goals share variables  strategies used  choosing subgoal highly instantiated sufficiently instantiated one procedure applies  such strategies used  example  concurrent logic programming     negation failure    for practical applications  well applications require non-monotonic reasoning artificial intelligence  horn clause logic programs need extended normal logic programs  negative conditions  a clause normal logic program form h  - a      an  b      bn  read declaratively logical implication h a    an b    bn where h ai bi atomic formulas  the negation negative literals  bi commonly referred  negation failure   implementations  negative condition  bi shown hold showing positive condition  bi fails hold  for example given goal finding something fly two candidate solutions  solve first subgoal bird x   namely x   john x   mary  the second subgoal abnormal john  first candidate solution fails  wounded john  succeeds therefore abnormal john  succeeds  however  second subgoal abnormal mary  second candidate solution succeeds  wounded mary  fails therefore abnormal mary  fails  therefore  x   mary solution goal micro-planner construct  called  thnot   applied expression returns value true   evaluation expression fails  an equivalent operator typically exists modern prolog implementations  it typically written goal     goal  goal goal  proposition  proved program  this operator differs negation first-order logic  negation    x      fails variable x bound atom    succeeds cases  including x unbound  this makes prolog reasoning non-monotonic  x         x      always fails     x       x     succeed  binding x    depending whether x initially bound  note standard prolog executes goals left-to-right order  the logical status negation failure unresolved keith clark        showed  certain natural conditions  correct  sometimes complete  implementation classical negation respect completion program  completion amounts roughly regarding set program clauses predicate left hand side  sayh  -  body         h  -  bodyk as definition predicateh iff  body    bodyk  iff  means    writing completion also requires explicit use equality predicate inclusion set appropriate axioms equality  however  implementation negation failure needs if-halves definitions without axioms equality for example  completion program canfly x  iff bird x   abnormal x  abnormal x  iff wounded x   bird x  iff x   john x   mary  x   x  john   mary  mary   john the notion completion closely related mccarthy circumscription semantics default reasoning  closed world assumption as alternative completion semantics  negation failure also interpreted epistemically  stable model semantics answer set programming  in interpretation bi  means literally bi known believed  the epistemic interpretation advantage combined simply classical negation   extended logic programming   formalise phrases  contrary shown    contrary  classical negation  shown  epistemic interpretation negation failure     knowledge representation    the fact horn clauses given procedural interpretation  vice versa  goal-reduction procedures understood horn clauses   backward reasoning means logic programs combine declarative procedural representations knowledge  the inclusion negation failure means logic programming kind non-monotonic logic despite simplicity compared classical logic  combination horn clauses negation failure proved surprisingly expressive  for example  provides natural representation common-sense laws cause effect  formalised situation calculus event calculus  it also shown correspond quite naturally semi-formal language legislation  in particular  prakken sartor credit representation british nationality act logic program  hugely influential development computational representations legislation  showing logic programming enables intuitively appealing representations directly deployed generate automatic inferences     variants extensions       prolog    the programming language prolog developed      alain colmerauer  it emerged collaboration colmerauer marseille robert kowalski edinburgh  colmerauer working natural-language understanding  using logic represent semantics using resolution question-answering  during summer       colmerauer kowalski discovered clausal form logic could used represent formal grammars resolution theorem provers could used parsing  they observed theorem provers  like hyper-resolution  behave bottom-up parsers others  like sl-resolution         behave top-down parsers it following summer       kowalski  working colmerauer  developed procedural interpretation implications  this dual declarative procedural interpretation later became formalised prolog notationh  - b      bn which read  used  declaratively procedurally  it also became clear clauses could restricted definite clauses horn clauses  h  b        bn atomic predicate logic formulae  sl-resolution could restricted  generalised  lush sld-resolution  kowalski procedural interpretation lush described      memo  published      colmerauer  philippe roussel  used dual interpretation clauses basis prolog  implemented summer autumn       the first prolog program  also written      implemented marseille  french question-answering system  the use prolog practical programming language given great momentum development compiler david warren edinburgh       experiments demonstrated edinburgh prolog could compete processing speed symbolic programming languages lisp  edinburgh prolog became de facto standard strongly influenced definition iso standard prolog     abductive logic programming    abductive logic programming extension normal logic programming allows predicates  declared abducible predicates   open  undefined  a clause abductive logic program form h  - b      bn  a      an where h atomic formula abducible  bi literals whose predicates abducible  ai atomic formulas whose predicates abducible  the abducible predicates constrained integrity constraints  form false  - l      ln where li arbitrary literals  defined abducible  atomic negated   for example predicate normal abducible problem solving achieved deriving hypotheses expressed terms abducible predicates solutions problems solved  these problems either observations need explained  classical abductive reasoning  goals solved  normal logic programming   for example  hypothesis normal mary  explains observation canfly mary   moreover  hypothesis entails solution x   mary goal finding something fly abductive logic programming used fault diagnosis  planning  natural language processing machine learning  it also used interpret negation failure form abductive reasoning     metalogic programming    because mathematical logic long tradition distinguishing object language metalanguage  logic programming also allows metalevel programming  the simplest metalogic program so-called  vanilla  meta-interpreter true represents empty conjunction  clause a b  means object-level clause form a  - b metalogic programming allows object-level metalevel representations combined  natural language  it also used implement logic specified inference rules  metalogic used logic programming implement metaprograms  manipulate programs  databases  knowledge bases axiomatic theories data     constraint logic programming    constraint logic programming combines horn clause logic programming constraint solving  it extends horn clauses allowing predicates  declared constraint predicates  occur literals body clauses  a constraint logic program set clauses form h  - c      cn   b      bn where h bi atomic formulas  ci constraints  declaratively  clauses read ordinary logical implications h c    cn b    bn however  whereas predicates heads clauses defined constraint logic program  predicates constraints predefined domain-specific model-theoretic structure theory procedurally  subgoals whose predicates defined program solved goal-reduction  ordinary logic programming  constraints checked satisfiability domain-specific constraint-solver  implements semantics constraint predicates  an initial problem solved reducing satisfiable conjunction constraints the following constraint logic program represents toy temporal database john history teacher here     constraint predicates  usual intended semantics  the following goal clause queries database find john taught logic professor  - teaches john  logic  t   rank john  professor  t  the solution        t  t        constraint logic programming used solve problems fields civil engineering  mechanical engineering  digital circuit verification  automated timetabling  air traffic control  finance  it closely related abductive logic programming     concurrent logic programming    concurrent logic programming integrates concepts logic programming concurrent programming  its development given big impetus     choice systems programming language japanese fifth generation project  fgcs  a concurrent logic program set guarded horn clauses form h  - g      gn   b      bn the conjunction g         gn called guard clause      commitment operator  declaratively  guarded horn clauses read ordinary logical implications h g    gn b    bn however  procedurally  several clauses whose heads  h  match given goal  clauses executed parallel  checking whether guards g         gn hold  if guards one clause hold  committed choice made one clauses  execution proceeds subgoals  b        bn chosen clause  these subgoals also executed parallel  thus concurrent logic programming implements form  care nondeterminism   rather  know nondeterminism  for example  following concurrent logic program defines predicate  shuffle left  right  merge    used shuffle two lists left right  combining single list merge preserves ordering two lists left right here     represents empty list   head   tail  represents list first element head followed list tail  prolog   notice first occurrence     second third clauses list constructor  whereas second occurrence     commitment operator    the program used  example  shuffle lists  ace  queen  king            invoking goal clause the program non-deterministically generate single solution  example  merge    ace  queen     king        arguably  concurrent logic programming based message passing  subject indeterminacy concurrent message-passing systems  actors  see indeterminacy concurrent computation   carl hewitt argued concurrent logic programming based logic sense computational steps cannot logically deduced  however  concurrent logic programming  result terminating computation logical consequence program  partial result partial computation logical consequence program residual goal  process network   thus indeterminacy computations implies logical consequences program deduced     concurrent constraint logic programming    concurrent constraint logic programming combines concurrent logic programming constraint logic programming  using constraints control concurrency  a clause contain guard  set constraints may block applicability clause  when guards several clauses satisfied  concurrent constraint logic programming makes committed choice use one     inductive logic programming    inductive logic programming concerned generalizing positive negative examples context background knowledge  machine learning logic programs  recent work area  combining logic programming  learning probability  given rise new field statistical relational learning probabilistic inductive logic programming     higher-order logic programming    several researchers extended logic programming higher-order programming features derived higher-order logic  predicate variables  such languages include prolog extensions hilog  prolog     linear logic programming    basing logic programming within linear logic resulted design logic programming languages considerably expressive based classical logic  horn clause programs represent state change change arguments predicates  in linear logic programming  one use ambient linear logic support state change  some early designs logic programming languages based linear logic include lo  andreoli   pareschi         lolli  acl  forum  miller         forum provides goal-directed interpretation linear logic     object-oriented logic programming    f-logic extends logic programming objects frame syntax logtalk extends prolog programming language support objects  protocols  oop concepts  it supports standard-compliant prolog systems backend compilers     transaction logic programming    transaction logic extension logic programming logical theory state-modifying updates  it model-theoretic semantics procedural one  an implementation subset transaction logic available flora-  system  other prototypes also available    see also   automated theorem provingconstraint logic programmingcontrol theorydatalogfrilfunctional programmingfuzzy logicinductive logic programminglogic computer science  includes formal methods logic programming languagesprogrammable logic controllerr  reasoning systemrule-based machine learningsatisfiabilityboolean satisfiability problemlinear logic   citations      sources       general introductions    baral  c   gelfond  m           logic programming knowledge representation   pdf   the journal logic programming                 doi             -             -  kowalski  r  a           the early years logic programming   pdf   communications acm             doi                      s cid              lloyd  j  w          foundations logic programming    nd edition   springer-verlag     other sources    john mccarthy   programs common sense   symposium mechanization thought processes  national physical laboratory  teddington  england       miller  dale  nadathur  gopalan  pfenning  frank  scedrov  andre          uniform proofs foundation logic programming   annals pure applied logic                     doi             -             -w ehud shapiro  editor   concurrent prolog  mit press       james slagle   experiments deductive question-answering program   cacm  december      gabbay  dov m   hogger  christopher john  robinson  j a   eds       -       handbook logic artificial intelligence logic programming vols       oxford university press    further reading   carl hewitt   procedural embedding knowledge planner   ijcai      carl hewitt   the repeated demise logic programming why it will be reincarnated   aaai spring symposium  what went wrong why  lessons ai research applications           evgeny dantsin  thomas eiter  georg gottlob  andrei voronkov  complexity expressive power logic programming  acm comput  surv                       ulf nilsson jan maluszynski  logic  programming prolog   external links   logic programming virtual library entrybibliographies logic programmingassociation logic programming  alp theory practice logic programming  journal logic programming c   castorlogic programming ozprolog development center racklog  logic programming racket
object-oriented programming  oop  programming paradigm based concept  objects   contain data code  data form fields  often known attributes properties   code  form procedures  often known methods   a feature objects object procedures access often modify data fields  objects notion self   in oop  computer programs designed making objects interact one another  oop languages diverse  popular ones class-based  meaning objects instances classes  also determine types many widely used programming languages  c    java  python  etc   multi-paradigm support object-oriented programming greater lesser degree  typically combination imperative  procedural programming  significant object-oriented languages include java c   c  python r php visual basic net javascript ruby perl simscript object pascal objective-c dart swift scala kotlin common lisp matlab andsmalltalk    history   terminology invoking  objects   oriented  modern sense object-oriented programming made first appearance mit late     early     s  in environment artificial intelligence group  early        object  could refer identified items  lisp atoms  properties  attributes  alan kay later cited detailed understanding lisp internals strong influence thinking      another early mit example sketchpad created ivan sutherland            glossary      technical report based dissertation sketchpad  sutherland defined notions  object   instance   class concept covered  master   definition    albeit specialized graphical interaction also  mit algol version  aed-   established direct link data structures   plexes   dialect  procedures  prefiguring later termed  messages    methods    member functions  simula introduced important concepts today essential part object-oriented programming  class object  inheritance  dynamic binding  the object-oriented simula programming language used mainly researchers involved physical modelling  models study improve movement ships content cargo ports in      first version smalltalk programming language developed xerox parc alan kay  dan ingalls adele goldberg  smaltalk-   included programming environment dynamically typed  first interpreted  compiled  smalltalk became noted application object orientation language-level graphical development environment  smalltalk went various versions interest language grew  while smalltalk influenced ideas introduced simula    designed fully dynamic system classes could created modified dynamically in      smalltalk influenced lisp community incorporate object-based techniques introduced developers via lisp machine  experimentation various extensions lisp  loops flavors introducing multiple inheritance mixins  eventually led common lisp object system  integrates functional programming object-oriented programming allows extension via meta-object protocol  in      attempts design processor architectures included hardware support objects memory successful  examples include intel iapx     linn smart rekursiv in       goldberg edited august issue byte magazine  introducing smalltalk object-oriented programming wider audience  in       association computing machinery organised first conference object-oriented programming  systems  languages  applications  oopsla   unexpectedly attended       people  in mid-    objective-c developed brad cox  used smalltalk itt inc   bjarne stroustrup  used simula phd thesis  eventually went create object-oriented c    in       bertrand meyer also produced first design eiffel language  focused software quality  eiffel purely object-oriented programming language notation supporting entire software lifecycle  meyer described eiffel software development method  based small number key ideas software engineering computer science  object-oriented software construction  essential quality focus eiffel meyer reliability mechanism  design contract  integral part method language in early mid-    object-oriented programming developed dominant programming paradigm programming languages supporting techniques became widely available  these included visual foxpro      c    delphi  its dominance enhanced rising popularity graphical user interfaces  rely heavily upon object-oriented programming techniques  an example closely related dynamic gui library oop language found cocoa frameworks mac os x  written objective-c  object-oriented  dynamic messaging extension c based smalltalk  oop toolkits also enhanced popularity event-driven programming  although concept limited oop  at eth z rich  niklaus wirth colleagues also investigating topics data abstraction modular programming  although common use     earlier   modula-         included  succeeding design  oberon  included distinctive approach object orientation  classes  such object-oriented features added many previously existing languages  including ada  basic  fortran  pascal  cobol  adding features languages initially designed often led problems compatibility maintainability code more recently  number languages emerged primarily object-oriented  also compatible procedural methodology  two languages python ruby  probably commercially important recent object-oriented languages java  developed sun microsystems  well c  visual basic net  vb net   designed microsoft  net platform  each two frameworks shows  way  benefit using oop creating abstraction implementation  vb net c  support cross-language inheritance  allowing classes defined one language subclass classes defined language    features   object-oriented programming uses objects  associated techniques structures supported directly languages claim support oop   the features listed common among languages considered strongly class- object-oriented  multi-paradigm oop support   notable exceptions mentioned     shared non-oop languages    variables store information formatted small number built-in data types like integers alphanumeric characters   this may include data structures like strings  lists  hash tables either built-in result combining variables using memory pointers procedures   also known functions  methods  routines  subroutines   take input  generate output  manipulate data   modern languages include structured programming constructs like loops conditionals modular programming support provides ability group procedures files modules organizational purposes   modules namespaced identifiers one module conflict procedure variable sharing name another file module     objects classes    languages support object-oriented programming  oop  typically use inheritance code reuse extensibility form either classes prototypes  those use classes support two main concepts classes   definitions data format available procedures given type class object  may also contain data procedures  known class methods   i e  classes contain data members member functionsobjects   instances classesobjects sometimes correspond things found real world  for example  graphics program may objects  circle    square    menu   an online shopping system might objects  shopping cart    customer    product   sometimes objects represent abstract entities  like object represents open file  object provides service translating measurements u s  customary metric each object said instance particular class  example  object name field set  mary  might instance class employee    procedures object-oriented programming known methods  variables also known fields  members  attributes  properties   this leads following terms class variables   belong class whole  one copy oneinstance variables attributes   data belongs individual objects  every object copy onemember variables   refers class instance variables defined particular classclass methods   belong class whole access class variables inputs procedure callinstance methods   belong individual objects  access instance variables specific object called  inputs  class variablesobjects accessed somewhat like variables complex internal structure  many languages effectively pointers  serving actual references single instance said object memory within heap stack   they provide layer abstraction used separate internal external code  external code use object calling specific instance method certain set input parameters  read instance variable  write instance variable  objects created calling special type method class known constructor   a program may create many instances class runs  operate independently   this easy way procedures used different sets data object-oriented programming uses classes sometimes called class-based programming  prototype-based programming typically use classes  as result  significantly different yet analogous terminology used define concepts object instance in languages classes objects composed using concepts like traits mixins     class-based vs prototype-based    in class-based languages classes defined beforehand objects instantiated based classes  if two objects apple orange instantiated class fruit  inherently fruits guaranteed may handle way  e g  programmer expect existence attributes color sugar content ripe in prototype-based languages objects primary entities  no classes even exist  the prototype object another object object linked  every object one prototype link  one    new objects created based already existing objects chosen prototype  you may call two different objects apple orange fruit  object fruit exists  apple orange fruit prototype  the idea fruit class exist explicitly  equivalence class objects sharing prototype  the attributes methods prototype delegated objects equivalence class defined prototype  the attributes methods owned individually object may shared objects equivalence class  e g  attribute sugar content may unexpectedly present apple  only single inheritance implemented prototype     dynamic dispatch message passing    it responsibility object  external code  select procedural code execute response method call  typically looking method run time table associated object   this feature known dynamic dispatch  distinguishes object abstract data type  module   fixed  static  implementation operations instances   if call variability relies single type object called  i e  least one parameter object involved method choice   one speaks multiple dispatch a method call also known message passing   it conceptualized message  name method input parameters  passed object dispatch     encapsulation    encapsulation object-oriented programming concept binds together data functions manipulate data  keeps safe outside interference misuse  data encapsulation led important oop concept data hiding if class allow calling code access internal object data permits access methods  strong form abstraction information hiding known encapsulation   some languages  java  example  let classes enforce access restrictions explicitly  example denoting internal data private keyword designating methods intended use code outside class public keyword   methods may also designed public  private  intermediate levels protected  allows access class subclasses  objects different class    in languages  like python  enforced convention  example  private methods may names start underscore    encapsulation prevents external code concerned internal workings object   this facilitates code refactoring  example allowing author class change objects class represent data internally without changing external code  long  public  method calls work way    it also encourages programmers put code concerned certain set data class  organizes easy comprehension programmers   encapsulation technique encourages decoupling     composition  inheritance  delegation    objects contain objects instance variables  known object composition   for example  object employee class might contain  either directly pointer  object address class  addition instance variables like  first name   position    object composition used represent  has-a  relationships  every employee address  every employee object access place store address object  either directly embedded within  separate location addressed via pointer  languages support classes almost always support inheritance   this allows classes arranged hierarchy represents  is-a-type-of  relationships   for example  class employee might inherit class person   all data methods available parent class also appear child class names   for example  class person might define variables  first name   last name  method  make full name      these also available class employee  might add variables  position   salary    this technique allows easy re-use procedures data definitions  addition potentially mirroring real-world relationships intuitive way  rather utilizing database tables programming subroutines  developer utilizes objects user may familiar  objects application domain subclasses override methods defined superclasses  multiple inheritance allowed languages  though make resolving overrides complicated   some languages special support mixins  though language multiple inheritance  mixin simply class represent is-a-type-of relationship   mixins typically used add methods multiple classes   for example  class unicodeconversionmixin might provide method unicode ascii   included class filereader class webpagescraper  share common parent abstract classes cannot instantiated objects  exist purpose inheritance  concrete  classes instantiated   in java  final keyword used prevent class subclassed the doctrine composition inheritance advocates implementing has-a relationships using composition instead inheritance   for example  instead inheriting class person  class employee could give employee object internal person object  opportunity hide external code even class person many public attributes methods   some languages  like go support inheritance all the  open closed principle  advocates classes functions  open extension  closed modification  delegation another language feature used alternative inheritance     polymorphism    subtyping   form polymorphism   calling code agnostic class supported hierarchy operating   parent class one descendants   meanwhile  operation name among objects inheritance hierarchy may behave differently for example  objects type circle square derived common class called shape   the draw function type shape implements necessary draw calling code remain indifferent particular type shape drawn this another type abstraction simplifies code external class hierarchy enables strong separation concerns     open recursion    in languages support open recursion  object methods call methods object  including   typically using special variable keyword called self   this variable late-bound  allows method defined one class invoke another method defined later  subclass thereof    oop languages   simula        generally accepted first language primary features object-oriented language  it created making simulation programs  came called objects important information representation  smalltalk             another early example  one much theory oop developed  concerning degree object orientation  following distinctions made languages called  pure  oo languages  everything treated consistently object  primitives characters punctuation  way whole classes  prototypes  blocks  modules  etc  they designed specifically facilitate  even enforce  oo methods  examples  ruby  scala  smalltalk  eiffel  emerald  jade  self  raku languages designed mainly oo programming  procedural elements  examples  java  python  c    c   delphi object pascal  vb net languages historically procedural languages  extended oo features  examples  php  perl  visual basic  derived basic   matlab  cobol       fortran       abap  ada     pascal languages features objects  classes  methods  inheritance   distinctly original form  examples  oberon  oberon-  oberon-   languages abstract data type support may used resemble oo programming  without features object-orientation  this includes object-based prototype-based languages  examples  javascript  lua  modula-   clu chameleon languages support multiple paradigms  including oo  tcl stands among tcloo  hybrid object system supports prototype-based programming class-based oo     oop dynamic languages    in recent years  object-oriented programming become especially popular dynamic programming languages  python  powershell  ruby groovy dynamic languages built oop principles  perl php adding object-oriented features since perl   php    coldfusion since version   the document object model html  xhtml  xml documents internet bindings popular javascript ecmascript language  javascript perhaps best known prototype-based programming language  employs cloning prototypes rather inheriting class  contrast class-based programming   another scripting language takes approach lua     oop network protocol    the messages flow computers request services client-server environment designed linearizations objects defined class objects known client server   for example  simple linearized object would consist length field  code point identifying class  data value   a complex example would command consisting length code point command values consisting linearized objects representing command parameters   each command must directed server object whose class  superclass  recognizes command able provide requested service  clients servers best modeled complex object-oriented structures  distributed data management architecture  ddm  took approach used class objects define objects four levels formal hierarchy fields defining data values form messages  length  code point data values objects collections objects similar would found smalltalk program messages parameters managers similar ibm objects  directory files files consisting metadata records  managers conceptually provide memory processing resources contained objects a client server consisting managers necessary implement full processing environment  supporting aspects directory services  security concurrency control the initial version ddm defined distributed file services   it later extended foundation distributed relational database architecture  drda     design patterns   challenges object-oriented design addressed several approaches  most common known design patterns codified gamma et al   more broadly  term  design patterns  used refer general  repeatable  solution pattern commonly occurring problem software design  some commonly occurring problems implications solutions particular object-oriented development     inheritance behavioral subtyping    it intuitive assume inheritance creates semantic   relationship  thus infer objects instantiated subclasses always safely used instead instantiated superclass  this intuition unfortunately false oop languages  particular allow mutable objects  subtype polymorphism enforced type checker oop languages  mutable objects  cannot guarantee behavioral subtyping context  behavioral subtyping undecidable general  cannot implemented program  compiler   class object hierarchies must carefully designed  considering possible incorrect uses cannot detected syntactically  this issue known liskov substitution principle     gang four design patterns    design patterns  elements reusable object-oriented software influential book published      erich gamma  richard helm  ralph johnson  john vlissides  often referred humorously  gang four   along exploring capabilities pitfalls object-oriented programming  describes    common programming problems patterns solving them as april       book   th printing the book describes following patterns creational patterns      factory method pattern  abstract factory pattern  singleton pattern  builder pattern  prototype patternstructural patterns      adapter pattern  bridge pattern  composite pattern  decorator pattern  facade pattern  flyweight pattern  proxy patternbehavioral patterns       chain-of-responsibility pattern  command pattern  interpreter pattern  iterator pattern  mediator pattern  memento pattern  observer pattern  state pattern  strategy pattern  template method pattern  visitor pattern    object-orientation databases    both object-oriented programming relational database management systems  rdbmss  extremely common software today  since relational databases store objects directly  though rdbmss object-oriented features approximate   general need bridge two worlds  the problem bridging object-oriented programming accesses data patterns relational databases known object-relational impedance mismatch  there number approaches cope problem  general solution without downsides  one common approaches object-relational mapping  found ide languages visual foxpro libraries java data objects ruby rails  activerecord there also object databases used replace rdbmss  technically commercially successful rdbmss     real-world modeling relationships    oop used associate real-world objects processes digital counterparts  however  everyone agrees oop facilitates direct real-world mapping  see criticism section  real-world mapping even worthy goal  bertrand meyer argues object-oriented software construction program model world model part world   reality cousin twice removed   at time  principal limitations oop noted for example  circle-ellipse problem difficult handle using oop concept inheritance however  niklaus wirth  popularized adage known wirth law   software getting slower rapidly hardware becomes faster   said oop paper   good ideas looking glass    this paradigm closely reflects structure systems  real world   therefore well suited model complex systems complex behaviours   contrast kiss principle  steve yegge others noted natural languages lack oop approach strictly prioritizing things  objects nouns  actions  methods verbs   this problem may cause oop suffer convoluted solutions procedural programming     oop control flow    oop developed increase reusability maintainability source code  transparent representation control flow priority meant handled compiler  with increasing relevance parallel hardware multithreaded coding  developing transparent control flow becomes important  something hard achieve oop     responsibility- vs  data-driven design    responsibility-driven design defines classes terms contract   class defined around responsibility information shares  this contrasted wirfs-brock wilkerson data-driven design  classes defined around data-structures must held  the authors hold responsibility-driven design preferable     solid grasp guidelines    solid mnemonic invented michael feathers stands advocates five programming practices single responsibility principleopen closed principleliskov substitution principleinterface segregation principledependency inversion principlegrasp  general responsibility assignment software patterns  another set guidelines advocated craig larman    criticism   the oop paradigm criticised number reasons  including meeting stated goals reusability modularity  overemphasizing one aspect software design modeling  data objects  expense important aspects  computation algorithms  luca cardelli claimed oop code  intrinsically less efficient  procedural code  oop take longer compile  oop languages  extremely poor modularity properties respect class extension modification   tend extremely complex  the latter point reiterated joe armstrong  principal inventor erlang  quoted saying the problem object-oriented languages got implicit environment carry around them  you wanted banana got gorilla holding banana entire jungle a study potok et al  shown significant difference productivity oop procedural approaches christopher j  date stated critical comparison oop technologies  relational particular  difficult lack agreed-upon rigorous definition oop  however  date darwen proposed theoretical foundation oop uses oop kind customizable type system support rdbms in article lawrence krubner claimed compared languages  lisp dialects  functional languages  etc   oop languages unique strengths  inflict heavy burden unneeded complexity alexander stepanov compares object orientation unfavourably generic programming i find oop technically unsound  it attempts decompose world terms interfaces vary single type  to deal real problems need multisorted algebras   families interfaces span multiple types  i find oop philosophically unsound  it claims everything object  even true interesting   saying everything object saying nothing all paul graham suggested oop popularity within large companies due  large  frequently changing  groups mediocre programmers   according graham  discipline imposed oop prevents one programmer  much damage  leo brodie suggested connection standalone nature objects tendency duplicate code violation repeat principle software development steve yegge noted  opposed functional programming object oriented programming puts nouns first foremost  why would go lengths put one part speech pedestal  why one kind concept take precedence another  it oop suddenly made verbs less important way actually think  it strangely skewed perspective rich hickey  creator clojure  described object systems overly simplistic models real world  he emphasized inability oop model time properly  getting increasingly problematic software systems become concurrent eric s  raymond  unix programmer open-source software advocate  critical claims present object-oriented programming  one true solution   written object-oriented programming languages tend encourage thickly layered programs destroy transparency  raymond compares unfavourably approach taken unix c programming language rob pike  programmer involved creation utf-  go  called object-oriented programming  roman numerals computing  said oop languages frequently shift focus data structures algorithms types  furthermore  cites instance java professor whose  idiomatic  solution problem create six new classes  rather simply use lookup table    formal semantics   objects run-time entities object-oriented system  they may represent person  place  bank account  table data  item program handle there several attempts formalizing concepts used object-oriented programming  the following concepts constructs used interpretations oop concepts co algebraic data typesabstract data types  existential types  allow definition modules support dynamic dispatchrecursive typesencapsulated stateinheritancerecords basis understanding objects function literals stored fields  like functional-programming languages   actual calculi need considerably complex incorporate essential features oop  several extensions system f   deal mutable objects studied  allow subtype polymorphism parametric polymorphism  generics attempts find consensus definition theory behind objects proven successful  however  see abadi   cardelli  a theory objects formal definitions many oop concepts constructs   often diverge widely  for example  definitions focus mental activities  program structuring  one simpler definitions oop act using  map  data structures arrays contain functions pointers maps  syntactic scoping sugar top  inheritance performed cloning maps  sometimes called  prototyping      see also   comparison programming languages  object-oriented programming comparison programming paradigmscomponent-based software engineeringdesign contractobject associationobject databaseobject model referenceobject modeling languageobject-oriented analysis designobject-relational impedance mismatch  the third manifesto object-relational mapping    systems    cadescommon object request broker architecture  corba distributed component object modeldistributed data management architecturejeroo    modeling languages    idef interface description languagelepus uml   references      further reading   abadi  martin  luca cardelli         a theory objects  springer verlag  isbn    - -   -     -  abelson  harold  gerald jay sussman         structure interpretation computer programs  mit press  isbn    - -   -     -  armstrong  deborah j   february         the quarks object-oriented development   communications acm                   doi                          issn     -      s cid          booch  grady         object-oriented analysis design applications  addison-wesley  isbn    - -    -    -  eeles  peter  oliver sims         building business objects  john wiley   sons  isbn    - -   -     -  gamma  erich  richard helm  ralph johnson  john vlissides         design patterns  elements reusable object oriented software  addison-wesley  bibcode     dper book     g  isbn    - -   -     -  harmon  paul  william morrissey         the object technology casebook   lessons award-winning business applications  john wiley   sons  isbn    - -   -     -  jacobson  ivar         object-oriented software engineering  a use case-driven approach  addison-wesley  bibcode     oose book     j  isbn    - -   -     -  kay  alan  the early history smalltalk  archived original   april       retrieved    april      meyer  bertrand         object-oriented software construction  prentice hall  isbn    - -  -      -  pecinovsky  rudolf         oop   learn object oriented thinking   programming  bruckner publishing  isbn    -  -      - -  rumbaugh  james  michael blaha  william premerlani  frederick eddy  william lorensen         object-oriented modeling design  prentice hall  isbn    - -  -      -  schach  stephen         object-oriented classical software engineering  seventh edition  mcgraw-hill  isbn    - -  -      -  schreiner  axel-tobias         object oriented programming ansi-c  hanser  hdl            isbn    - -   -     -  taylor  david a          object-oriented information systems   planning implementation  john wiley   sons  isbn    - -   -     -  weisfeld  matt         the object-oriented thought process  third edition  addison-wesley  isbn    - -   -     -  west  david         object thinking  developer reference   microsoft press  isbn    - -    -    -     external links   introduction object oriented programming concepts  oop  more l w c  niroshdiscussion flaws oodoop concepts  java tutorials 
computer science study algorithmic processes  computational machines computation itself  as discipline  computer science spans range topics theoretical studies algorithms  computation information practical issues implementing computational systems hardware software its fields divided theoretical practical disciplines  for example  theory computation concerns abstract models computation general classes problems solved using  computer graphics computational geometry emphasize specific applications  algorithms data structures called heart computer science  programming language theory considers approaches description computational processes  computer programming involves use create complex systems  computer architecture describes construction computer components computer-operated equipment  artificial intelligence aims synthesize goal-orientated processes problem-solving  decision-making  environmental adaptation  planning learning found humans animals  a digital computer capable simulating various information processes  the fundamental concern computer science determining cannot automated  computer scientists usually focus academic research  the turing award generally recognized highest distinction computer sciences    history   the earliest foundations would become computer science predate invention modern digital computer  machines calculating fixed numerical tasks abacus existed since antiquity  aiding computations multiplication division  algorithms performing computations existed since antiquity  even development sophisticated computing equipment  wilhelm schickard designed constructed first working mechanical calculator       in       gottfried leibniz demonstrated digital mechanical calculator  called stepped reckoner  leibniz may considered first computer scientist information theorist   among reasons  documenting binary number system  in       thomas de colmar launched mechanical calculator industry invented simplified arithmometer  first calculating machine strong enough reliable enough used daily office environment  charles babbage started design first automatic mechanical calculator  difference engine        eventually gave idea first programmable mechanical calculator  analytical engine  he started developing machine        less two years  sketched many salient features modern computer    a crucial step adoption punched card system derived jacquard loom  making infinitely programmable  in       translation french article analytical engine  ada lovelace wrote  one many notes included  algorithm compute bernoulli numbers  considered first published algorithm ever specifically tailored implementation computer  around       herman hollerith invented tabulator  used punched cards process statistical information  eventually company became part ibm  following babbage  although unaware earlier work  percy ludgate      published  nd two designs mechanical analytical engines history  in       one hundred years babbage impossible dream  howard aiken convinced ibm  making kinds punched card equipment also calculator business develop giant programmable calculator  ascc harvard mark i  based babbage analytical engine  used cards central computing unit  when machine finished  hailed  babbage dream come true  during      development new powerful computing machines atanasoff berry computer eniac  term computer came refer machines rather human predecessors  as became clear computers could used mathematical calculations  field computer science broadened study computation general  in       ibm founded watson scientific computing laboratory columbia university new york city  the renovated fraternity house manhattan west side ibm first laboratory devoted pure science  the lab forerunner ibm research division  today operates research facilities around world  ultimately  close relationship ibm university instrumental emergence new scientific discipline  columbia offering one first academic-credit courses computer science       computer science began established distinct academic discipline     early     s  the world first computer science degree program  cambridge diploma computer science  began university cambridge computer laboratory       the first computer science department united states formed purdue university       since practical computers became available  many applications computing become distinct areas study rights    etymology   although first proposed       term  computer science  appears      article communications acm louis fein argues creation graduate school computer sciences analogous creation harvard business school       justifying name arguing  like management science  subject applied interdisciplinary nature  characteristics typical academic discipline his efforts  others numerical analyst george forsythe  rewarded  universities went create departments  starting purdue       despite name  significant amount computer science involve study computers themselves  because  several alternative names proposed  certain departments major universities prefer term computing science  emphasize precisely difference  danish scientist peter naur suggested term datalogy  reflect fact scientific discipline revolves around data data treatment  necessarily involving computers  the first scientific institution use term department datalogy university copenhagen  founded       peter naur first professor datalogy  the term used mainly scandinavian countries  an alternative term  also proposed naur  data science  used multi-disciplinary field data analysis  including statistics databases in early days computing  number terms practitioners field computing suggested communications acm turingineer  turologist  flow-charts-man  applied meta-mathematician  applied epistemologist  three months later journal  comptologist suggested  followed next year hypologist  the term computics also suggested  in europe  terms derived contracted translations expression  automatic information   e g   informazione automatica  italian   information mathematics  often used  e g  informatique  french   informatik  german   informatica  italian  dutch   inform tica  spanish  portuguese   informatika  slavic languages hungarian  pliroforiki               means informatics  greek  similar words also adopted uk  school informatics  university edinburgh    in u s   however  informatics linked applied computing  computing context another domain  a folkloric quotation  often attributed almost certainly first formulated edsger dijkstra  states  computer science computers astronomy telescopes   the design deployment computers computer systems generally considered province disciplines computer science  for example  study computer hardware usually considered part computer engineering  study commercial computer systems deployment often called information technology information systems  however  much cross-fertilization ideas various computer-related disciplines  computer science research also often intersects disciplines  philosophy  cognitive science  linguistics  mathematics  physics  biology  earth science  statistics  logic computer science considered much closer relationship mathematics many scientific disciplines  observers saying computing mathematical science  early computer science strongly influenced work mathematicians kurt g del  alan turing  john von neumann  r zsa p ter alonzo church continues useful interchange ideas two fields areas mathematical logic  category theory  domain theory  algebra the relationship computer science software engineering contentious issue  muddied disputes term  software engineering  means  computer science defined  david parnas  taking cue relationship engineering science disciplines  claimed principal focus computer science studying properties computation general  principal focus software engineering design specific computations achieve practical goals  making two separate complementary disciplines the academic  political  funding aspects computer science tend depend whether department formed mathematical emphasis engineering emphasis  computer science departments mathematics emphasis numerical orientation consider alignment computational science  both types departments tend make efforts bridge field educationally across research    philosophy       epistemology computer science    despite word  science  name  debate whether computer science discipline science  mathematics  engineering  allen newell herbert a  simon argued       computer science empirical discipline  we would called experimental science  like astronomy  economics  geology  unique forms observation experience fit narrow stereotype experimental method  nonetheless  experiments  each new machine built experiment  actually constructing machine poses question nature  listen answer observing machine operation analyzing analytical measurement means available  it since argued computer science classified empirical science since makes use empirical testing evaluate correctness programs  problem remains defining laws theorems computer science  exist  defining nature experiments computer science  proponents classifying computer science engineering discipline argue reliability computational systems investigated way bridges civil engineering airplanes aerospace engineering  they also argue empirical sciences observe presently exists  computer science observes possible exist scientists discover laws observation  proper laws found computer science instead concerned creating phenomena proponents classifying computer science mathematical discipline argue computer programs physical realizations mathematical entities programs deductively reasoned mathematical formal methods  computer scientists edsger w  dijkstra tony hoare regard instructions computer programs mathematical sentences interpret formal semantics programming languages mathematical axiomatic systems     paradigms computer science    a number computer scientists argued distinction three separate paradigms computer science  peter wegner argued paradigms science  technology  mathematics  peter denning working group argued theory  abstraction  modeling   design  amnon h  eden described  rationalist paradigm   treats computer science branch mathematics  prevalent theoretical computer science  mainly employs deductive reasoning    technocratic paradigm   might found engineering approaches  prominently software engineering    scientific paradigm   approaches computer-related artifacts empirical perspective natural sciences  identifiable branches artificial intelligence  computer science focuses methods involved design  specification  programming  verification  implementation testing human-made computing systems    fields   computer science computers astronomy telescopes as discipline  computer science spans range topics theoretical studies algorithms limits computation practical issues implementing computing systems hardware software csab  formerly called computing sciences accreditation board made representatives association computing machinery  acm   ieee computer society  ieee cs  identifies four areas considers crucial discipline computer science  theory computation  algorithms data structures  programming methodology languages  computer elements architecture  in addition four areas  csab also identifies fields software engineering  artificial intelligence  computer networking communication  database systems  parallel computation  distributed computation  human computer interaction  computer graphics  operating systems  numerical symbolic computation important areas computer science     theoretical computer science    theoretical computer science mathematical abstract spirit  derives motivation practical everyday computation  its aim understand nature computation  consequence understanding  provide efficient methodologies      theory computation     according peter denning  fundamental question underlying computer science   what automated   theory computation focused answering fundamental questions computed amount resources required perform computations  in effort answer first question  computability theory examines computational problems solvable various theoretical models computation  the second question addressed computational complexity theory  studies time space costs associated different approaches solving multitude computational problems the famous p   np  problem  one millennium prize problems  open problem theory computation      information coding theory     information theory  closely related probability statistics  related quantification information  this developed claude shannon find fundamental limits signal processing operations compressing data reliably storing communicating data coding theory study properties codes  systems converting information one form another  fitness specific application  codes used data compression  cryptography  error detection correction  recently also network coding  codes studied purpose designing efficient reliable data transmission methods      data structures algorithms     data structures algorithms studies commonly used computational methods computational efficiency      programming language theory formal methods     programming language theory branch computer science deals design  implementation  analysis  characterization  classification programming languages individual features  it falls within discipline computer science  depending affecting mathematics  software engineering  linguistics  it active research area  numerous dedicated academic journals formal methods particular kind mathematically based technique specification  development verification software hardware systems  the use formal methods software hardware design motivated expectation  engineering disciplines  performing appropriate mathematical analysis contribute reliability robustness design  they form important theoretical underpinning software engineering  especially safety security involved  formal methods useful adjunct software testing since help avoid errors also give framework testing  for industrial use  tool support required  however  high cost using formal methods means usually used development high-integrity life-critical systems  safety security utmost importance  formal methods best described application fairly broad variety theoretical computer science fundamentals  particular logic calculi  formal languages  automata theory  program semantics  also type systems algebraic data types problems software hardware specification verification     computer systems computational processes         artificial intelligence     artificial intelligence  ai  aims required synthesize goal-orientated processes problem-solving  decision-making  environmental adaptation  learning  communication found humans animals  from origins cybernetics dartmouth conference         artificial intelligence research necessarily cross-disciplinary  drawing areas expertise applied mathematics  symbolic logic  semiotics  electrical engineering  philosophy mind  neurophysiology  social intelligence  ai associated popular mind robotic development  main field practical application embedded component areas software development  require computational understanding  the starting point late     alan turing question  can computers think    question remains effectively unanswered  although turing test still used assess computer output scale human intelligence  but automation evaluative predictive tasks increasingly successful substitute human monitoring intervention domains computer application involving complex real-world data      computer architecture organization     computer architecture  digital computer organization  conceptual design fundamental operational structure computer system  it focuses largely way central processing unit performs internally accesses addresses memory  computer engineers study computational logic design computer hardware  individual processor components  microcontrollers  personal computers supercomputers embedded systems  the term  architecture  computer literature traced work lyle r  johnson frederick p  brooks  jr   members machine organization department ibm main research center           concurrent  parallel distributed computing     concurrency property systems several computations executing simultaneously  potentially interacting other  a number mathematical models developed general concurrent computation including petri nets  process calculi parallel random access machine model  when multiple computers connected network using concurrency  known distributed system  computers within distributed system private memory  information exchanged achieve common goals      computer networks     this branch computer science aims manage networks computers worldwide      computer security cryptography     computer security branch computer technology objective protecting information unauthorized access  disruption  modification maintaining accessibility usability system intended users  cryptography practice study hiding  encryption  therefore deciphering  decryption  information  modern cryptography largely related computer science  many encryption decryption algorithms based computational complexity      databases data mining     a database intended organize  store  retrieve large amounts data easily  digital databases managed using database management systems store  create  maintain  search data  database models query languages  data mining process discovering patterns large data sets      computer graphics visualization     computer graphics study digital visual contents involves synthesis manipulation image data  the study connected many fields computer science  including computer vision  image processing  computational geometry  heavily applied fields special effects video games      image sound processing     information take form images  sound  video multimedia  bits information streamed via signals  its processing central notion informatics  european view computing  studies information processing algorithms independently type information carrier - whether electrical  mechanical biological  this field plays important role information theory  telecommunications  information engineering applications medical image computing speech synthesis  among others  what lower bound complexity fast fourier transform algorithms  one unsolved problems theoretical computer science     applied computer science         computational science  finance engineering     scientific computing  computational science  field study concerned constructing mathematical models quantitative analysis techniques using computers analyze solve scientific problems  a major usage scientific computing simulation various processes  including computational fluid dynamics  physical  electrical  electronic systems circuits  well societies social situations  notably war games  along habitats  among many others  modern computers enable optimization designs complete aircraft  notable electrical electronic circuit design spice  well software physical realization new  modified  designs  the latter includes essential design software integrated circuits      social computing human computer interaction     social computing area concerned intersection social behavior computational systems  human computer interaction research develops theories  principles  guidelines user interface designers      software engineering     software engineering study designing  implementing  modifying software order ensure high quality  affordable  maintainable  fast build  it systematic approach software design  involving application engineering practices software  software engineering deals organizing analyzing software deal creation manufacture new software  internal arrangement maintenance  for example software testing  systems engineering  technical debt software development processes    discoveries   the philosopher computing bill rapaport noted three great insights computer science gottfried wilhelm leibniz  george boole  alan turing  claude shannon  samuel morse insight  two objects computer deal order represent  anything  all information computable problem represented using      bistable pair flip-flop two easily distinguishable states      magnetized de-magnetized    high-voltage low-voltage   etc   alan turing insight  five actions computer perform order  anything  every algorithm expressed language computer consisting five basic instructions move left one location move right one location read symbol current location print   current location print   current location corrado b hm giuseppe jacopini insight  three ways combining actions  complex ones  needed order computer  anything  only three rules needed combine set basic instructions complex ones sequence  first   selection  if such-and-such case  then  else repetition  while such-and-such case  do this note three rules boehm jacopini insight simplified use goto  means elementary structured programming     programming paradigms   programming languages used accomplish different tasks different ways  common programming paradigms include functional programming  style building structure elements computer programs treats computation evaluation mathematical functions avoids state mutable data  it declarative programming paradigm  means programming done expressions declarations instead statements imperative programming  programming paradigm uses statements change program state  in much way imperative mood natural languages expresses commands  imperative program consists commands computer perform  imperative programming focuses describing program operates object-oriented programming  programming paradigm based concept  objects   may contain data  form fields  often known attributes  code  form procedures  often known methods  a feature objects object procedures access often modify data fields object associated  thus object-oriented computer programs made objects interact one another service-oriented programming  programming paradigm uses  services  unit computer work  design implement integrated business applications mission critical software programsmany languages offer support multiple paradigms  making distinction matter style technical capabilities    academia   conferences important events computer science research  during conferences  researchers public private sectors present recent work meet  unlike academic fields  computer science  prestige conference papers greater journal publications  one proposed explanation quick development relatively new field requires rapid review distribution results  task better handled conferences journals    education   computer science  known near synonyms  computing  computer studies  taught uk schools since days batch processing  mark sensitive cards paper tape usually select students  in       bbc produced micro-computer classroom network computer studies became common gce o level students       -year-old   computer science a level students  its importance recognised  became compulsory part national curriculum  key stage        in september      became entitlement pupils age   in us         school districts deciding curriculum  provision fractured  according      report association computing machinery  acm  computer science teachers association  csta         states adopted significant education standards high school computer science israel  new zealand  south korea included computer science national secondary education curricula  several others following    see also      notes      references      further reading      external links   computer science curliescholarly societies computer sciencewhat computer science best papers awards computer science since     photographs computer scientists bertrand meyereecs berkeley edu    bibliography academic search engines    citeseerx  article   search engine  digital library repository scientific academic papers focus computer information science dblp computer science bibliography  article   computer science bibliography website hosted universit trier  germany the collection computer science bibliographies  collection computer science bibliographies     professional organizations    association computing machineryieee computer societyinformatics europeaaaiaaas computer science    misc    computer science stack exchange  community-run question-and-answer site computer sciencewhat computer scienceis computer science science computer science  software  must considered independent discipline 
in object-oriented programming  inheritance mechanism basing object class upon another object  prototype-based inheritance  class  class-based inheritance   retaining similar implementation  also defined deriving new classes  sub classes  existing ones super class base class forming hierarchy classes  in class-based object-oriented languages  object created inheritance   child object   acquires properties behaviors  parent object    exception  constructors  destructor  overloaded operators friend functions base class  inheritance allows programmers create classes built upon existing classes  specify new implementation maintaining behaviors  realizing interface   reuse code independently extend original software via public classes interfaces  the relationships objects classes inheritance give rise directed graph inheritance invented      simula used throughout many object-oriented programming languages java  c    php python an inherited class called subclass parent class super class  the term  inheritance  loosely used class-based prototype-based programming  narrow use term reserved class-based programming  one class inherits another   corresponding technique prototype-based programming instead called delegation  one object delegates another  inheritance confused subtyping  in languages inheritance subtyping agree  whereas others differ  general  subtyping establishes is-a relationship  whereas inheritance reuses implementation establishes syntactic relationship  necessarily semantic relationship  inheritance ensure behavioral subtyping   to distinguish concepts  subtyping sometimes referred interface inheritance  without acknowledging specialization type variables also induces subtyping relation   whereas inheritance defined known implementation inheritance code inheritance  still  inheritance commonly used mechanism establishing subtype relationships inheritance contrasted object composition  one object contains another object  objects one class contain objects another class   see composition inheritance  composition implements has-a relationship  contrast is-a relationship subtyping    types   there various types inheritance  based paradigm specific language single inheritancewhere subclasses inherit features one superclass  a class acquires properties another class multiple inheritancewhere one class one superclass inherit features parent classes  multiple inheritance     widely supposed difficult implement efficiently  for example  summary c   book objective c  brad cox actually claimed adding multiple inheritance c   impossible  thus  multiple inheritance seemed challenge  since i considered multiple inheritance early      found simple efficient implementation technique       i resist challenge  i suspect case fashion affected sequence events  multilevel inheritancewhere subclass inherited another subclass  it uncommon class derived another derived class shown figure  multilevel inheritance  the class a serves base class derived class b  turn serves base class derived class c  the class b known intermediate base class provides link inheritance a c  the chain abc known inheritance path a derived class multilevel inheritance declared follows this process extended number levels hierarchical inheritancethis one class serves superclass  base class  one sub class  for example  parent class  a  two subclasses b c  both b c parent class a  b c two separate subclasses hybrid inheritancehybrid inheritance mix two types inheritance occurs  an example class a subclass b two subclasses  c d  this mixture multilevel inheritance hierarchal inheritance    subclasses superclasses   subclasses  derived classes  heir classes  child classes modular derivative classes inherits one language entities one classes  called superclass  base classes  parent classes   the semantics class inheritance vary language language  commonly subclass automatically inherits instance variables member functions superclasses  the general form defining derived class the colon indicates subclass inherits superclass  the visibility optional  present  may either private public  the default visibility private  visibility specifies whether features base class privately derived publicly derived some languages support also inheritance constructs  for example  eiffel  contracts define specification class also inherited heirs  the superclass establishes common interface foundational functionality  specialized subclasses inherit  modify  supplement  the software inherited subclass considered reused subclass  a reference instance class may actually referring one subclasses  the actual class object referenced impossible predict compile-time  a uniform interface used invoke member functions objects number different classes  subclasses may replace superclass functions entirely new functions must share method signature     non-subclassable classes    in languages class may declared  non-subclassable adding certain class modifiers class declaration  examples include final keyword java c     onwards sealed keyword c   such modifiers added class declaration class keyword class identifier declaration  such non-subclassable classes restrict reusability  particularly developers access precompiled binaries source code a non-subclassable class subclasses  easily deduced compile time references pointers objects class actually referencing instances class instances subclasses  exist  instances superclasses  upcasting reference type violates type system   because exact type object referenced known execution  early binding  also called static dispatch  used instead late binding  also called dynamic dispatch   requires one virtual method table lookups depending whether multiple inheritance single inheritance supported programming language used     non-overridable methods    just classes may non-subclassable  method declarations may contain method modifiers prevent method overridden  i e  replaced new function name type signature subclass   a private method un-overridable simply accessible classes class member function  true c    though   a final method java  sealed method c  frozen feature eiffel cannot overridden     virtual methods    if superclass method virtual method  invocations superclass method dynamically dispatched  some languages require methods specifically declared virtual  e g  c     others  methods virtual  e g  java   an invocation non-virtual method always statically dispatched  i e  address function call determined compile-time   static dispatch faster dynamic dispatch allows optimizations inline expansion    visibility inherited members   the following table shows variables functions get inherited dependent visibility given deriving class    applications   inheritance used co-relate two classes other      overriding    many object-oriented programming languages permit class object replace implementation aspect typically behavior inherited  this process called overriding  overriding introduces complication  version behavior instance inherited class use one part class  one parent  base  class  the answer varies programming languages  languages provide ability indicate particular behavior overridden behave defined base class  for instance  c   base method property overridden subclass marked virtual  abstract  override modifier  programming languages java  different methods called override methods  an alternative overriding hiding inherited code     code reuse    implementation inheritance mechanism whereby subclass re-uses code base class  by default subclass retains operations base class  subclass may override operations  replacing base-class implementation own in following python example  subclasses squaresumcomputer cubesumcomputer override transform   method base class sumcomputer  the base class comprises operations compute sum squares two integers  the subclass re-uses functionality base class exception operation transforms number square  replacing operation transforms number square cube respectively  the subclasses therefore compute sum squares cubes two integers below example python in quarters  class inheritance sole purpose code reuse fallen favor  the primary concern implementation inheritance provide assurance polymorphic substitutability instance reusing class cannot necessarily substituted instance inherited class  an alternative technique  explicit delegation  requires programming effort  avoids substitutability issue  in c   private inheritance used form implementation inheritance without substitutability  whereas public inheritance represents  is-a  relationship delegation represents  has-a  relationship  private  protected  inheritance thought  implemented terms  relationship another frequent use inheritance guarantee classes maintain certain common interface   implement methods  the parent class combination implemented operations operations implemented child classes  often  interface change supertype subtype- child implements behavior described instead parent class    inheritance vs subtyping   inheritance similar distinct subtyping subtyping enables given type substituted another type abstraction  said establish is-a relationship subtype existing abstraction  either implicitly explicitly  depending language support  the relationship expressed explicitly via inheritance languages support inheritance subtyping mechanism  for example  following c   code establishes explicit inheritance relationship classes b a  b subclass subtype a  used a wherever b specified  via reference  pointer object  in programming languages support inheritance subtyping mechanism  relationship base class derived class relationship implementations  mechanism code reuse   compared relationship types  inheritance  even programming languages support inheritance subtyping mechanism  necessarily entail behavioral subtyping  it entirely possible derive class whose object behave incorrectly used context parent class expected  see liskov substitution principle   compare connotation denotation   in oop languages  notions code reuse subtyping coincide way declare subtype define new class inherits implementation another     design constraints    using inheritance extensively designing program imposes certain constraints for example  consider class person contains person name  date birth  address phone number  we define subclass person called student contains person grade point average classes taken  another subclass person called employee contains person job-title  employer  salary in defining inheritance hierarchy already defined certain restrictions  desirable singlenessusing single inheritance  subclass inherit one superclass  continuing example given  person either student employee  both  using multiple inheritance partially solves problem  one define studentemployee class inherits student employee  however  implementations  still inherit superclass  thus  support cases student two jobs attends two institutions  the inheritance model available eiffel makes possible support repeated inheritance staticthe inheritance hierarchy object fixed instantiation object type selected change time  for example  inheritance graph allow student object become employee object retaining state person superclass   this kind behavior  however  achieved decorator pattern   some criticized inheritance  contending locks developers original design standards visibilitywhenever client code access object  generally access object superclass data  even superclass declared public  client still cast object superclass type  for example  way give function pointer student grade point average transcript without also giving function access personal data stored student person superclass  many modern languages  including c   java  provide  protected  access modifier allows subclasses access data  without allowing code outside chain inheritance access it the composite reuse principle alternative inheritance  this technique supports polymorphism code reuse separating behaviors primary class hierarchy including specific behavior classes required business domain class  this approach avoids static nature class hierarchy allowing behavior modifications run time allows one class implement behaviors buffet-style  instead restricted behaviors ancestor classes    issues alternatives   implementation inheritance controversial among programmers theoreticians object-oriented programming since least     s  among authors design patterns  advocate interface inheritance instead  favor composition inheritance  for example  decorator pattern  mentioned  proposed overcome static nature inheritance classes  as fundamental solution problem  role-oriented programming introduces distinct relationship  played-by  combining properties inheritance composition new concept according allen holub  main problem implementation inheritance introduces unnecessary coupling form  fragile base class problem   modifications base class implementation cause inadvertent behavioral changes subclasses  using interfaces avoids problem implementation shared  api  another way stating  inheritance breaks encapsulation   the problem surfaces clearly open object-oriented systems frameworks  client code expected inherit system-supplied classes substituted system classes algorithms reportedly  java inventor james gosling spoken implementation inheritance  stating would include redesign java  language designs decouple inheritance subtyping  interface inheritance  appeared early       modern example go programming language complex inheritance  inheritance used within insufficiently mature design  may lead yo-yo problem   when inheritance used primary approach structure code system late      developers naturally started break code multiple layers inheritance system functionality grew   if development team combined multiple layers inheritance single responsibility principle created many super thin layers code  many would     lines code layer   too many layers make debugging significant challenge  becomes hard determine layer needs debugged another issue inheritance subclasses must defined code  means program users cannot add new subclasses runtime  other design patterns  entity component system  allow program users define variations entity runtime    see also   archetype patterncircle ellipse problemdefeasible reasoning   reasoning rationally compelling  though deductively validinterface  computing    concept computer science  point interaction two thingsmethod overridingmixinpolymorphism  computer science protocolrole-oriented programming   programming paradigm based conceptual understanding objectsthe third manifestotrait  computer programming    concept used object-oriented programmingvirtual inheritance   notes      references      further reading   meyer  bertrand              using inheritance well   object-oriented software construction   nd ed    prentice hall  isbn  -  -      -  samokhin  vadim          implementation inheritance is evil   hackernoon  medium 
in computer science  object variable  data structure  function  method   value memory referenced identifier in object-oriented programming paradigm  object combination variables  functions  data structures  particular class-based variations paradigm refers particular instance class in relational model database management  object table column  association data database entity  relating person age specific person     object-based languages   an important distinction programming languages difference object-oriented language object-based language  a language usually considered object-based includes basic capabilities object  identity  properties  attributes  a language considered object-oriented object-based also capability polymorphism  inheritance  encapsulation   possibly  composition  polymorphism refers ability overload name function multiple behaviors based object  passed it  conventional message passing discriminates first object considers  sending message  object  however  oop languages flavors common lisp object system  clos  enable discriminating first parameter function  inheritance ability subclass object class  create new class subclass existing one inherits data constraints behaviors parents also adds new changes one them    object-oriented programming   object-oriented programming approach designing modular reusable software systems  the object-oriented approach evolution good design practices go back beginning computer programming  object-orientation simply logical extension older techniques structured programming abstract data types  an object abstract data type addition polymorphism inheritance rather structure programs code data  object-oriented system integrates two using concept  object   an object state  data  behavior  code   objects correspond things found real world  so example  graphics program objects circle  square  menu  an online shopping system objects shopping cart  customer  product  the shopping system support behaviors place order  make payment  offer discount  the objects designed class hierarchies  so example shopping system might high level classes electronics product  kitchen product  book  there may refinements example electronic products  cd player  dvd player  etc  these classes subclasses correspond sets subsets mathematical logic    specialized objects   an important concept objects design pattern  a design pattern provides reusable template address common problem  the following object descriptions examples common design patterns objects function object  object single method  c    method would function operator   operator     acts much like function  like c c   pointer function  immutable object  object set fixed state creation time change afterward first-class object  object used without restriction container object  object contain objects factory object  object whose purpose create objects metaobject  object objects created  compare class  necessarily object  prototype object  specialized metaobject objects created copyinggod object  object knows much  example anti-pattern  singleton object  object instance class lifetime program filter object  object receives stream data input transforms object output  often input output streams streams characters  also may streams arbitrary objects  these generally used wrappers since conceal existing implementation abstraction required developer side    distributed objects   the object-oriented approach programming model  it used equally well interface definition language distributed systems  the objects distributed computing model tend larger grained  longer lasting  service-oriented programming objects a standard method package distributed objects via interface definition language  idl   an idl shields client details distributed server object  details computer object resides  programming language uses  operating system  platform-specific issues  the idl also usually part distributed environment provides services transactions persistence objects uniform manner  two popular standards distributed objects object management group corba standard microsoft dcom in addition distributed objects  number extensions basic concept object proposed enable distributed computing protocol objects components protocol stack enclose network communication within object-oriented interface replicated objects groups distributed objects  called replicas  run distributed multi-party protocol achieve high consistency internal states  respond requests coordinated way  examples include fault-tolerant corba objects live distributed objects  simply live objects  generalize replicated object concept groups replicas might internally use distributed protocol  perhaps resulting weak consistency local states some extensions  distributed objects protocol objects  domain-specific terms special types  ordinary  objects used certain context  remote method invocation protocol composition   others  replicated objects live distributed objects  non-standard  abandon usual case object resides single location time  apply concept groups entities  replicas  might span across multiple locations  might weakly consistent state  whose membership might dynamically change    the semantic web   the semantic web essentially distributed-objects framework  two key technologies semantic web web ontology language  owl  resource description framework  rdf   rdf provides capability define basic objects names  properties  attributes  relations accessible via internet  owl adds richer object model  based set theory  provides additional modeling capabilities multiple inheritance owl objects like standard large-grained distributed objects accessed via interface definition language  such approach would appropriate internet internet constantly evolving standardization one set interfaces difficult achieve  owl objects tend similar kinds objects used define application domain models programming languages java c   however  important distinctions owl objects traditional object-oriented programming objects  traditional objects get compiled static hierarchies usually single inheritance  owl objects dynamic  an owl object change structure run time become instance new different classes another critical difference way model treats information currently system  programming objects database systems use  closed-world assumption   if fact known system fact assumed false  semantic web objects use open-world assumption  statement considered false actual relevant information false  otherwise assumed unknown  neither true false owl objects actually like objects artificial intelligence frame languages kl-one loom the following table contrasts traditional objects object-oriented programming languages java c   semantic web objects    see also   object lifetimeobject copydesign pattern  computer science business object  computer science actor model   references      external links   what is object  the java tutorialshow merge two php objects
in software engineering computer science  abstraction process removing physical  spatial  temporal details attributes study objects systems focus attention details greater importance  similar nature process generalization creation abstract concept-objects mirroring common features attributes various non-abstract objects systems study   result process abstraction abstraction  general  fundamental concept computer science software development  the process abstraction also referred modeling closely related concepts theory design  models also considered types abstractions per generalization aspects reality abstraction computer science closely related abstraction mathematics due common focus building abstractions objects  also related notions abstraction used fields art abstractions may also refer real-world objects systems  rules computational systems rules programming languages carry utilize features abstraction  usage data types perform data abstraction separate usage working representations data structures within programs concept procedures  functions  subroutines represent specific implementing control flow programs rules commonly named  abstraction  generalize expressions using free bound variables various versions lambda calculus usage s-expressions abstraction data structures programs lisp programming language process reorganizing common behavior non-abstract classes  abstract classes  using inheritance abstract sub-classes seen object-oriented c   java programming languages    rationale   computing mostly operates independently concrete world  the hardware implements model computation interchangeable others  the software structured architectures enable humans create enormous systems concentrating issues time  these architectures made specific choices abstractions  greenspun tenth rule aphorism architecture inevitable complex a central form abstraction computing language abstraction  new artificial languages developed express specific aspects system  modeling languages help planning  computer languages processed computer  an example abstraction process generational development programming languages machine language assembly language high-level language  each stage used stepping stone next stage  the language abstraction continues example scripting languages domain-specific programming languages within programming language  features let programmer create new abstractions  these include subroutines  modules  polymorphism  software components  some abstractions software design patterns architectural styles remain invisible translator operate design system some abstractions try limit range concepts programmer needs aware  completely hiding abstractions turn built on  the software engineer writer joel spolsky criticised efforts claiming abstractions leaky   never completely hide details  however  negate usefulness abstraction some abstractions designed inter-operate abstractions   example  programming language may contain foreign function interface making calls lower-level language    abstraction features       programming languages    different programming languages provide different types abstraction  depending intended applications language  for example in object-oriented programming languages c    object pascal  java  concept abstraction become declarative statement   using syntax function parameters        c    keywords abstract interface  java   after declaration  responsibility programmer implement class instantiate object declaration functional programming languages commonly exhibit abstractions related functions  lambda abstractions  making term function variable  higher-order functions  parameters functions  modern members lisp programming language family clojure  scheme common lisp support macro systems allow syntactic abstraction  other programming languages scala also macros  similar metaprogramming features  example  haskell template haskell  ocaml metaocaml   these allow programmer eliminate boilerplate code  abstract away tedious function call sequences  implement new control flow structures  implement domain specific languages  dsls   allow domain-specific concepts expressed concise elegant ways  all  used correctly  improve programmer efficiency clarity code making intended purpose explicit  a consequence syntactic abstraction also lisp dialect fact almost programming language  principle  implemented modern lisp significantly reduced  still non-trivial cases  effort compared  traditional  programming languages python  c java     specification methods    analysts developed various methods formally specify software systems   some known methods include abstract-model based method  vdm  z  algebraic techniques  larch  clear  obj  act one  casl  process-based techniques  lotos  sdl  estelle  trace-based techniques  special  tam  knowledge-based techniques  refine  gist      specification languages    specification languages generally rely abstractions one kind another  since specifications typically defined earlier project   abstract level  eventual implementation  the uml specification language  example  allows definition abstract classes  waterfall project  remain abstract architecture specification phase project    control abstraction   programming languages offer control abstraction one main purposes use  computer machines understand operations low level moving bits one location memory another location producing sum two sequences bits  programming languages allow done higher level  for example  consider statement written pascal-like fashion               to human  seems fairly simple obvious calculation   one plus two three  times five fifteen    however  low-level steps necessary carry evaluation  return value       assign value variable    actually quite subtle complex  the values need converted binary representation  often much complicated task one would think  calculations decomposed  compiler interpreter  assembly instructions   much less intuitive programmer  operations shifting binary register left  adding binary complement contents one register another  simply humans think abstract arithmetical operations addition multiplication   finally  assigning resulting value      variable labeled      used later  involves additional  behind-the-scenes  steps looking variable label resultant location physical virtual memory  storing binary representation      memory location  etc without control abstraction  programmer would need specify register binary-level steps time simply wanted add multiply couple numbers assign result variable  such duplication effort two serious negative consequences forces programmer constantly repeat fairly common tasks every time similar operation neededit forces programmer program particular hardware instruction set    structured programming    structured programming involves splitting complex program tasks smaller pieces clear flow-control interfaces components  reduction complexity potential side-effects in simple program  may aim ensure loops single obvious exit points  possible  single exit points functions procedures in larger system  may involve breaking complex tasks many different modules  consider system handles payroll ships shore offices the uppermost level may feature menu typical end-user operations within could standalone executables libraries tasks signing employees printing checks within standalone components could many different source files  containing program code handle part problem  selected interfaces available parts program  a sign program could source files data entry screen database interface  may standalone third party library statically linked set library routines  either database payroll application also initiate process exchanging data ship shore  data transfer task often contain many components these layers produce effect isolating implementation details one component assorted internal methods others  object-oriented programming embraces extends concept    data abstraction   data abstraction enforces clear separation abstract properties data type concrete details implementation  the abstract properties are visible client code makes use data type interface data type concrete implementation kept entirely private  indeed change  example incorporate efficiency improvements time  the idea changes supposed impact client code  since involve difference abstract behaviour for example  one could define abstract data type called lookup table uniquely associates keys values  values may retrieved specifying corresponding keys  such lookup table may implemented various ways  hash table  binary search tree  even simple linear list  key value  pairs  as far client code concerned  abstract properties type case of course  relies getting details interface right first place  since changes major impacts client code  as one way look  interface forms contract agreed behaviour data type client code  anything spelled contract subject change without notice    manual data abstraction   while much data abstraction occurs computer science automation  times process done manually without programming intervention  one way understood data abstraction within process conducting systematic review literature  in methodology  data abstracted one several abstractors conducting meta-analysis  errors reduced dual data abstraction followed independent checking  known adjudication    abstraction object oriented programming   in object-oriented programming theory  abstraction involves facility define objects represent abstract  actors  perform work  report change state   communicate  objects system  the term encapsulation refers hiding state details  extending concept data type earlier programming languages associate behavior strongly data  standardizing way different data types interact  beginning abstraction   when abstraction proceeds operations defined  enabling objects different types substituted  called polymorphism  when proceeds opposite direction  inside types classes  structuring simplify complex set relationships  called delegation inheritance various object-oriented programming languages offer similar facilities abstraction  support general strategy polymorphism object-oriented programming  includes substitution one type another similar role  although generally supported  configuration image package may predetermine great many bindings compile-time  link-time  loadtime  this would leave minimum bindings change run-time common lisp object system self  example  feature less class-instance distinction use delegation polymorphism  individual objects functions abstracted flexibly better fit shared functional heritage lisp c   exemplifies another extreme  relies heavily templates overloading static bindings compile-time  turn certain flexibility problems although examples offer alternate strategies achieving abstraction  fundamentally alter need support abstract nouns code   programming relies ability abstract verbs functions  nouns data structures  either processes consider example sample java fragment represent common farm  animals  level abstraction suitable model simple aspects hunger feeding  it defines animal class represent state animal functions with definition  one could create objects type animal call methods like in example  class animal abstraction used place actual animal  livingthing abstraction  case generalisation  animal if one requires differentiated hierarchy animals   differentiate  say  provide milk provide nothing except meat end lives   intermediary level abstraction  probably dairyanimal  cows  goats  would eat foods suitable giving good milk  meatanimal  pigs  steers  would eat foods give best meat-quality such abstraction could remove need application coder specify type food  could concentrate instead feeding schedule  the two classes could related using inheritance stand alone  programmer could define varying degrees polymorphism two types  these facilities tend vary drastically languages  general achieve anything possible others  a great many operation overloads  data type data type  effect compile-time degree inheritance means achieve polymorphism  the class notation simply coder convenience     object-oriented design    decisions regarding abstract keep control coder become major concern object-oriented design domain analysis actually determining relevant relationships real world concern object-oriented analysis legacy analysis in general  determine appropriate abstraction  one must make many small decisions scope  domain analysis   determine systems one must cooperate  legacy analysis   perform detailed object-oriented analysis expressed within project time budget constraints object-oriented design  in simple example  domain barnyard  live pigs cows eating habits legacy constraints  detailed analysis coders must flexibility feed animals available thus reason code type food class  design single simple animal class pigs cows instances functions  a decision differentiate dairyanimal would change detailed analysis domain legacy analysis would unchanged thus entirely control programmer  called abstraction object-oriented programming distinct abstraction domain legacy analysis    considerations   when discussing formal semantics programming languages  formal methods abstract interpretation  abstraction refers act considering less detailed  safe  definition observed program behaviors  for instance  one may observe final result program executions instead considering intermediate steps executions  abstraction defined concrete  precise  model execution abstraction may exact faithful respect property one answer question property equally well concrete abstract model  for instance  one wishes know result evaluation mathematical expression involving integers    -     worth modulo n  one needs perform operations modulo n  familiar form abstraction casting nines  abstractions  however  though necessarily exact  sound  that  possible get sound answers even though abstraction may simply yield result undecidability  for instance  students class may abstracted minimal maximal ages  one asks whether certain person belongs class  one may simply compare person age minimal maximal ages  age lies outside range  one may safely answer person belong class   one may answer  i know  the level abstraction included programming language influence overall usability  the cognitive dimensions framework includes concept abstraction gradient formalism  this framework allows designer programming language study trade-offs abstraction characteristics design  changes abstraction influence language usability abstractions prove useful dealing computer programs  non-trivial properties computer programs essentially undecidable  see rice theorem   as consequence  automatic methods deriving information behavior computer programs either drop termination  occasions  may fail  crash never yield result   soundness  may provide false information   precision  may answer  i know  questions  abstraction core concept abstract interpretation  model checking generally takes place abstract versions studied systems    levels abstraction   computer science commonly presents levels   less commonly  layers  abstraction  wherein level represents different model information processes  varying amounts detail  each level uses system expression involving unique set objects compositions apply particular domain each relatively abstract   higher  level builds relatively concrete   lower  level  tends provide increasingly  granular  representation  for example  gates build electronic circuits  binary gates  machine language binary  programming language machine language  applications operating systems programming languages  each level embodied  determined  level beneath  making language description somewhat self-contained     database systems    since many users database systems lack in-depth familiarity computer data-structures  database developers often hide complexity following levels physical level  the lowest level abstraction describes system actually stores data  the physical level describes complex low-level data structures detail logical level  the next higher level abstraction describes data database stores  relationships exist among data  the logical level thus describes entire database terms small number relatively simple structures  although implementation simple structures logical level may involve complex physical level structures  user logical level need aware complexity  this referred physical data independence  database administrators  must decide information keep database  use logical level abstraction view level  the highest level abstraction describes part entire database  even though logical level uses simpler structures  complexity remains variety information stored large database  many users database system need information  instead  need access part database  the view level abstraction exists simplify interaction system  the system may provide many views database     layered architecture    the ability provide design different levels abstraction cansimplify design considerablyenable different role players effectively work various levels abstractionsupport portability software artifacts  model-based ideally systems design business process design use this  some design processes specifically generate designs contain various levels abstraction layered architecture partitions concerns application stacked groups  layers  it technique used designing computer software  hardware  communications system network components isolated layers changes made one layer without affecting others    see also   abstraction principle  computer programming abstraction inversion anti-pattern one danger abstractionabstract data type abstract description set dataalgorithm abstract description computational procedurebracket abstraction making term function variabledata modeling structuring data independent processes use itencapsulation abstractions hide implementation detailsgreenspun tenth rule aphorism    optimum point space abstractionshigher-order function abstraction functions produce consume functionslambda abstraction making term function variablelist abstractions  computer science refinement opposite abstraction computinginteger  computer science heuristic  computer science    references      further reading      external links   simarch example layered architecture distributed simulation systems 
big o notation mathematical notation describes limiting behavior function argument tends towards particular value infinity  big o member family notations invented paul bachmann  edmund landau  others  collectively called bachmann landau notation asymptotic notation in computer science  big o notation used classify algorithms according run time space requirements grow input size grows   in analytic number theory  big o notation often used express bound difference arithmetical function better understood approximation  famous example difference remainder term prime number theorem  big o notation also used many fields provide similar estimates big o notation characterizes functions according growth rates  different functions growth rate may represented using o notation  the letter o used growth rate function also referred order function   a description function terms big o notation usually provides upper bound growth rate function  associated big o notation several related notations  using symbols           describe kinds bounds asymptotic growth rates     formal definition   let f real complex valued function g real valued function  let functions defined unbounded subset positive real numbers                      g                 x                         displaystyle g x     strictly positive large enough values x  one writes                    f                 x                          o                                                         g                 x                                                                                                     x                                  displaystyle f x  o  bigl   g x   bigr    quad   text    x  infty    absolute value                     f                 x                         displaystyle f x     positive constant multiple                     g                 x                         displaystyle g x     sufficiently large values x  that                      f                 x                          o                                                         g                 x                                                                          displaystyle f x  o  bigl   g x   bigr       exists positive real number m real number x                                                f                 x                                                     m        g                 x                                                    x                           x                                                                  displaystyle  f x   leq mg x  quad   text    x geq x        in many contexts  assumption interested growth rate variable x goes infinity left unstated  one writes simply                    f                 x                          o                                                         g                 x                                                                                   displaystyle f x  o  bigl   g x   bigr       the notation also used describe behavior f near real number  often        say                    f                 x                          o                                                         g                 x                                                                                                     x                                displaystyle f x  o  bigl   g x   bigr    quad   text    x   exist positive numbers                                      displaystyle  delta     m x                                                                  x                                                                             displaystyle    x-a   delta                                                    f                 x                                                     m        g                 x                                  displaystyle  f x   leq mg x     as g x  chosen non-zero values x sufficiently close  definitions unified using limit superior                     f                 x                          o                                                         g                 x                                                                                                     x                                displaystyle f x  o  bigl   g x   bigr    quad   text    x                                lim sup                      x                                                                                                                     f                                 x                                                                                    g                             x                                                                                        displaystyle  limsup   x   frac   left f x  right   g x     infty     in computer science  slightly restrictive definition common                      f                displaystyle f                        g                displaystyle g    required functions positive integers nonnegative real numbers                      f                 x                          o                                                         g                 x                                                                          displaystyle f x  o  bigl   g x   bigr       exist positive integer numbers m n                      f                 n                          m        g                 n                         displaystyle f n  leq mg n                         n                           n                                                         displaystyle n geq n         where necessary  finite ranges  tacitly  excluded                     f                displaystyle f                        g                displaystyle g    domain choosing n  sufficiently large   for example                      log                          n                         displaystyle  log n     undefined                     n                                  displaystyle n          example   in typical usage o notation asymptotical   refers large x   in setting  contribution terms grow  quickly  eventually make ones irrelevant  as result  following simplification rules applied if f x  sum several terms  one largest growth rate  kept  others omitted if f x  product several factors  constants  terms product depend x  omitted for example  let f x     x     x       suppose wish simplify function  using o notation  describe growth rate x approaches infinity  this function sum three terms   x     x      of three terms  one highest growth rate one largest exponent function x  namely  x   now one may apply second rule   x  product   x  first factor depend x  omitting factor results simplified form x   thus  say f x   big o  x   mathematically  write f x    o x    one may confirm calculation using formal definition  let f x     x     x      g x    x   applying formal definition  statement f x    o x   equivalent expansion                                                f                 x                                                     m                  x                                                         displaystyle  f x   leq mx       suitable choice x  m x   x   to prove  let x      m       then  x   x                                                                                                                                                                x                                                                                                                                             x                                                                                                                                                                                                                                                                              x                                                                                                                                                                                                x                                                                                                                                                                                                                                                                                                                    x                                                                                                                                             x                                                                                                                                             x                                                                                                                                                                                                                                x                                                                                                                                     displaystyle   begin aligned   x    - x         leq  x       x           leq  x      x      x          x     end aligned                                                                      x                                                                             x                                                                                                                           x                                                                  displaystyle   x    - x        leq   x           usage   big o notation two main areas application in mathematics  commonly used describe closely finite series approximates given function  especially case truncated taylor series asymptotic expansionin computer science  useful analysis algorithmsin applications  function g x  appearing within o    typically chosen simple possible  omitting constant factors lower order terms there two formally close  noticeably different  usages notation infinite asymptoticsinfinitesimal asymptotics this distinction application principle  however formal definition  big o  cases  different limits function argument     infinite asymptotics    big o notation useful analyzing algorithms efficiency  for example  time  number steps  takes complete problem size n might found t n     n     n      as n grows large  n  term come dominate  terms neglected instance n        term  n       times large  n term  ignoring latter would negligible effect expression value purposes  further  coefficients become irrelevant compare order expression  expression containing term n  n   even t n             n   u n    n   latter always exceed former n grows larger            t                           u              additionally  number steps depends details machine model algorithm runs  different types machines typically vary constant factor number steps needed execute algorithm  so big o notation captures remains  write either                    t                 n                          o                           n                                                                  displaystyle t n  o n                           t                 n                          o                           n                                                                  displaystyle t n  o n        say algorithm order n  time complexity  the sign     meant express  equal  normal mathematical sense  rather colloquial    second expression sometimes considered accurate  see  equals sign  discussion  first considered abuse notation     infinitesimal asymptotics    big o also used describe error term approximation mathematical function  the significant terms written explicitly  least-significant terms summarized single big o term   consider  example  exponential series two expressions valid x small                                                                                           e                                      x                                                                                                                                                 x                                                                                             x                                                                                                                                                                                                                                                                                                              x                                                                                                                                                                                                                                                                                                              x                                                                                                                                                                                                                                                                                                                                                 x                                                                                                                                                     x                                                                                             x                                                                                                                                                                                 o                                                   x                                                                                                                                                                                        x                                                                                                                                                                                       x                                 o                                                   x                                                                                                                                                                                        x                                                                                              displaystyle   begin aligned e  x     x   frac  x             frac  x             frac  x            dotsb    text   x    pt     x   frac  x          o x        text   x      pt     x o x        text   x   end aligned     the second expression  one o x    means absolute-value error ex        x   x     constant times  x   x close enough      properties   if function f written finite sum functions  fastest growing one determines order f n   for example                     f                 n                                   log                 n                                   log                 n                                                                                                n                                                                             n                                                          o                           n                                                                                            n                                           displaystyle f n    log n    log n       n      n     o n      qquad   text   n  infty     in particular  function may bounded polynomial n  n tends infinity  one may disregard lower-order terms polynomial  the sets o nc  o cn  different  if c greater one  latter grows much faster  a function grows faster nc c  called superpolynomial   one grows slowly exponential function form cn called subexponential  an algorithm require time superpolynomial subexponential  examples include fastest known algorithms integer factorization function nlog n we may ignore powers n inside logarithms  the set o log n  exactly o log nc    the logarithms differ constant factor  since log nc    c log n  thus big o notation ignores that  similarly  logs different constant bases equivalent  on hand  exponentials different bases order  for example   n  n order changing units may may affect order resulting algorithm  changing units equivalent multiplying appropriate variable constant wherever appears  for example  algorithm runs order n   replacing n cn means algorithm runs order c n   big o notation ignores constant c   this written c n    o n    if  however  algorithm runs order  n  replacing n cn gives  cn     c n  this equivalent  n general  changing variables may also affect order resulting algorithm  for example  algorithm run time o n  measured terms number n digits input number x  run time o log x  measured function input number x  n   o log x      product                                  f                                                          o                           g                                                                                               f                                                          o                           g                                                                             f                                                           f                                                          o                           g                                                           g                                                                  displaystyle f     o g       text    f     o g      rightarrow f    f     o g    g                            f                 o                 g                          o                 f        g                         displaystyle f cdot o g  o fg        sum    if                               f                                                          o                           g                                                                  displaystyle f     o g                                       f                                                          o                           g                                                                  displaystyle f     o g                                       f                                                                    f                                                          o                 max                           g                                                                    g                                                                           displaystyle f     f     o  max g     g           it follows                               f                                                          o                 g                         displaystyle f     o g                                   f                                                          o                 g                         displaystyle f     o g                                   f                                                                    f                                                          o                 g                         displaystyle f     f     o g       in words  second statement says                     o                 g                         displaystyle o g     convex cone     multiplication constant    let k nonzero constant  then                     o                                            k                                            g                          o                 g                         displaystyle o  k  cdot g  o g       in words                      f                 o                 g                         displaystyle f o g                           k                 f                 o                 g                                  displaystyle k cdot f o g        multiple variables   big o  little     etc   also used multiple variables  to define big o formally multiple variables  suppose                     f                displaystyle f                        g                displaystyle g    two functions defined subset                                           r                                n                                  displaystyle  mathbb  r    n      we say                    f                           x                                                    o                 g                           x                                                                               x                                          displaystyle f  mathbf  x     text    o g  mathbf  x     quad   text     mathbf  x    infty                                m                 c                                                                                 x                                                                       x                                                        m                                                                                                f                           x                                                             c                                   g                           x                                                                              displaystyle  exists m exists c     text      mathbf  x     text     x   geq m   text      f  mathbf  x     leq c g  mathbf  x         equivalently  condition                               x                                                        m                displaystyle x   geq m                                       displaystyle    replaced condition                                        x                                                                                     m                displaystyle    mathbf  x       infty   geq m                                            x                                                                                    displaystyle    mathbf  x       infty      denotes chebyshev norm  for example  statement                    f                 n                                                    n                                                                                                                             o                 n                                                                    n                                                  displaystyle f n  n         o n  quad   text    n  infty    asserts exist constants c m                                               n                                                                                                      m                                                    g                 n                                                                     c                                   n                                                           displaystyle  forall    n      infty   geq m  quad  g n   leq c n    g n  defined                    f                 n                                                    n                                                                                                                             g                 n                                                           displaystyle f n  n         g n      this definition allows coordinates                               x                        displaystyle  mathbf  x      increase infinity  in particular  statement                    f                 n                                          o                           n                                                                                           n                                                  displaystyle f n  o n    quad   text    n  infty     i e                                c                         m                         n                                                         displaystyle  exists c   exists m   forall n   forall   cdots      quite different                                                      f                 n                                          o                           n                                                                                           n                                  displaystyle  forall colon  f n  o n    quad   text    n  infty     i e                                                        c                         m                         n                                 displaystyle  forall   exists c   exists m   forall n   cdots      under definition  subset function defined significant generalizing statements univariate setting multivariate setting  for example                      f                 n                                                           displaystyle f n                           g                 n                                          n                displaystyle g n  n                         f                 n                                          o                 g                 n                                                  displaystyle f n  o g n      restrict                     f                displaystyle f                        g                displaystyle g                                                                                                                                displaystyle     infty           defined                                                                                                                             displaystyle     infty          this generalization big o multivariate functions  practice  inconsistency choice definition    matters notation       equals sign    the statement  f x  o g x    defined usually written f x    o g x    some consider abuse notation  since use equals sign could misleading suggests symmetry statement have  as de bruijn says  o x    o x   true o x     o x  not  knuth describes statements  one-way equalities   since sides could reversed   could deduce ridiculous things like n   n  identities n   o n   n    o n     in another letter  knuth also pointed  equality sign symmetric respect notations    notation   mathematicians customarily use   sign use word   english  aristotle man  man necessarily aristotle  for reasons  would precise use set notation write f x    o g x    read   f x  element o g x      f x  set o g x      thinking o g x   class functions h x   h x     c g x   constant c  however  use equals sign customary     other arithmetic operators    big o notation also used conjunction arithmetic operators complicated equations  for example  h x    o f x   denotes collection functions growth h x  plus part whose growth limited f x   thus                     g                 x                          h                 x                          o                 f                 x                                  displaystyle g x  h x  o f x     expresses                    g                 x                          h                 x                          o                 f                 x                                           displaystyle g x -h x  o f x           example     suppose algorithm developed operate set n elements  its developers interested finding function t n   express long algorithm take run  arbitrary measurement time  terms number elements input set  the algorithm works first calling subroutine sort elements set perform operations  the sort known time complexity o n    subroutine runs algorithm must take additional   n     n      steps terminates   thus overall time complexity algorithm expressed t n      n    o n    here terms  n      subsumed within faster-growing o n     again  usage disregards formal meaning     symbol  allow one use big o notation kind convenient placeholder     multiple uses    in complicated usage  o    appear different places equation  even several times side  for example  following true                     n                                  displaystyle n  infty     the meaning statements follows  functions satisfy o    left side  functions satisfying o    right side  substituting functions equation makes two sides equal  for example  third equation means   for function f n    o     function g n     o en  nf n    g n    in terms  set notation   meaning class functions represented left side subset class functions represented right side  in use     formal symbol unlike usual use     symmetric relation  thus example no      o en  imply false statement o en    no       typesetting    big o typeset italicized uppercase  o   following example                      o                           n                                                                  displaystyle o n           in tex  produced simply typing o inside math mode   unlike greek-named bachmann landau notations  needs special symbol  yet  authors use calligraphic variant                                           o                                  displaystyle   mathcal  o      instead    orders common functions   here list classes functions commonly encountered analyzing running time algorithm   in case  c positive constant n increases without bound  the slower-growing functions generally listed first the statement                     f                 n                          o                 n                                  displaystyle f n  o n      sometimes weakened                     f                 n                          o                                         n                          n                                                         displaystyle f n  o left n  n  right     derive simpler formulas asymptotic complexity  for                     k                                  displaystyle k                          c                                  displaystyle c                           o                           n                      c                                   log                 n                                         k                                           displaystyle o n  c   log n   k      subset                     o                           n                      c                                                                     displaystyle o n  c  varepsilon                                                              displaystyle  varepsilon        may considered polynomial bigger order    related asymptotic notations   big o widely used computer science  together related notations forms family bachmann landau notations     little-o notation    intuitively  assertion  f x  g x     read  f x  little-o g x    means g x  grows much faster f x   let f real complex valued function g real valued function  defined unbounded subset positive real numbers  g x  strictly positive large enough values x  one writes                    f                 x                                          g                 x                                                             x                                  displaystyle f x  g x   quad   text    x  infty    every positive constant   exists constant n                                               f                 x                                                              g                 x                                                    x                 n                         displaystyle  f x   leq  varepsilon g x  quad   text    x geq n    for example  one                             x                                           x                                                                  displaystyle  x x                                                                 x                                                                    displaystyle   x       the difference earlier definition big-o notation present definition little-o former true least one constant m  latter must hold every positive constant    however small  in way  little-o notation makes stronger statement corresponding big-o notation  every function little-o g also big-o g  every function big-o g also little-o g  for example                                         x                                                          o                           x                                                                  displaystyle  x     o x                                                x                                                                                    x                                                                  displaystyle  x     neq x         as g x  nonzero  least becomes nonzero beyond certain point  relation                     f                 x                                          g                 x                                  displaystyle f x  g x      equivalent                              lim                      x                                                                                        f                             x                                                     g                             x                                                                               displaystyle  lim   x  infty    frac  f x   g x          fact landau originally defined little-o notation  little-o respects number arithmetic operations   for example c nonzero constant                     f                                 g                         displaystyle f g                         c                 f                                 g                         displaystyle c cdot f g      andif                     f                                 f                         displaystyle f f                         g                                 g                         displaystyle g g                         f                 g                                 f                 g                                  displaystyle f cdot g f cdot g     it also satisfies transitivity relation                     f                                 g                         displaystyle f g                         g                                 h                         displaystyle g h                         f                                 h                                  displaystyle f h         big omega notation    another asymptotic notation                                      displaystyle  omega      read  big omega   there two widespread incompatible definitions statement                    f                 x                                            g                 x                                  displaystyle f x   omega  g x                          x                                displaystyle x    real number          f g real functions defined neighbourhood  g positive neighbourhood the hardy littlewood definition used mainly analytic number theory  knuth definition mainly computational complexity theory  definitions equivalent      the hardy littlewood definition     in      godfrey harold hardy john edensor littlewood introduced new symbol                                      displaystyle  omega      defined follows                     f                 x                                            g                 x                                  displaystyle f x   omega  g x                          x                                  displaystyle x  infty                                   lim sup                      x                                                                                                                   f                                 x                                                             g                                 x                                                                                                           displaystyle  limsup   x  infty   left   frac  f x   g x    right       thus                     f                 x                                            g                 x                                  displaystyle f x   omega  g x      negation                     f                 x                                          g                 x                                  displaystyle f x  g x      in      authors introduced two new symbols                                                      r                                  displaystyle  omega   r                                                          l                                  displaystyle  omega   l      defined                     f                 x                                                           r                                   g                 x                                  displaystyle f x   omega   r  g x                          x                                  displaystyle x  infty                                   lim sup                      x                                                                                        f                             x                                                     g                             x                                                                               displaystyle  limsup   x  infty    frac  f x   g x                             f                 x                                                           l                                   g                 x                                  displaystyle f x   omega   l  g x                          x                                  displaystyle x  infty                                   lim inf                      x                                                                                        f                             x                                                     g                             x                                                                                displaystyle  liminf   x  infty    frac  f x   g x         these symbols used edmund landau  meanings         after landau  notations never used exactly thus                                                       r                                  displaystyle  omega   r     became                                                                                         displaystyle  omega                                                              l                                  displaystyle  omega   l     became                                                                                         displaystyle  omega   -     these three symbols                                                                                                                                                                                displaystyle  omega   omega       omega   -      well                     f                 x                                                                                               g                 x                                  displaystyle f x   omega    pm   g x       meaning                     f                 x                                                                                               g                 x                                  displaystyle f x   omega      g x                          f                 x                                                                                               g                 x                                  displaystyle f x   omega   -  g x      satisfied   currently used analytic number theory       simple examples      we                    sin                 x                                                             displaystyle  sin x  omega                            x                                           displaystyle x  infty     precisely                    sin                 x                                                                                                                displaystyle  sin x  omega    pm                             x                                           displaystyle x  infty     we                    sin                 x                                                                               displaystyle  sin x    omega                            x                                           displaystyle x  infty     precisely                    sin                 x                                                                                                                                  displaystyle  sin x    omega                                x                                           displaystyle x  infty     however                    sin                 x                                                                                                                                  displaystyle  sin x     omega   -                            x                                           displaystyle x  infty          the knuth definition     in      donald knuth published paper justify use                                      displaystyle  omega    -symbol describe stronger property  knuth wrote   for applications i seen far computer science  stronger requirement     much appropriate   he defined                    f                 x                                            g                 x                                   g                 x                          o                 f                 x                                  displaystyle f x   omega  g x   leftrightarrow g x  o f x     comment   although i changed hardy littlewood definition                                      displaystyle  omega      i feel justified definition means wide use  ways say want say comparatively rare cases definition applies      family bachmann landau notations    the limit definitions assume                     g                 n                                           displaystyle g n       sufficiently large                     n                displaystyle n     the table  partly  sorted smallest largest  sense                                     o                                                             displaystyle o  theta   sim       knuth version                                                         displaystyle  omega   omega     functions correspond                                                                                                     displaystyle    leq   approx                                                              displaystyle  geq       real line  hardy-littlewood version                                      displaystyle  omega      however  correspond description  computer science uses big                     o                displaystyle o     big theta                                      displaystyle  theta      little                                    displaystyle     little omega                                      displaystyle  omega     knuth big omega                                      displaystyle  omega     notations  analytic number theory often uses big                     o                displaystyle o     small                                    displaystyle     hardy littlewood big omega                                      displaystyle  omega      without        subscripts                                       displaystyle  sim     notations  the small omega                                      displaystyle  omega     notation used often analysis     use computer science    informally  especially computer science  big o notation often used somewhat differently describe asymptotic tight bound using big theta   notation might factually appropriate given context  for example  considering function t n      n      n        following generally acceptable  tighter bounds  numbers      usually strongly preferred looser bounds  number    t n    o n    t n    o n  t n      n  the equivalent english statements respectively t n  grows asymptotically faster n   t n  grows asymptotically faster n t n  grows asymptotically fast n  so three statements true  progressively information contained each  in fields  however  big o notation  number   lists  would used commonly big theta notation  items numbered   lists   for example  t n  represents running time newly developed algorithm input size n  inventors users algorithm might inclined put upper asymptotic bound long take run without making explicit statement lower asymptotic bound     other notation    in book introduction algorithms  cormen  leiserson  rivest stein consider set functions f satisfy                    f                 n                          o                 g                 n                                           n                                                             displaystyle f n  o g n   quad  n  infty       in correct notation set  instance  called o g                      o                 g                                   f                           exist positive constants                         c                                                             n                                                                                                              f                 n                          c        g                 n                                            n                           n                                                                           displaystyle o g    f   text exist positive constants   c   text   n       text     leq f n  leq cg n   text    n geq n          the authors state use equality operator     denote set membership rather set membership operator     abuse notation  advantages  inside equation inequality  use asymptotic notation stands anonymous function set o g   eliminates lower-order terms  helps reduce inessential clutter equations  example                                        n                                                                   n                                                      n                                                          o                 n                                  displaystyle  n      n    n     o n         extensions bachmann landau notations    another notation sometimes used computer science    read soft-o   f n      g n   shorthand f n    o g n  logk g n   k  essentially  big o notation  ignoring logarithmic factors growth-rate effects super-logarithmic function indicate growth-rate explosion large-sized input parameters important predicting bad run-time performance finer-point effects contributed logarithmic-growth factor   this notation often used obviate  nitpicking  within growth-rates stated tightly bounded matters hand  since logk n always n   constant k        also l notation  defined                              l                      n                                                     c                                    e                                   c                                                                                                     ln                         n                                                                                                             ln                         ln                         n                                                                                                                                                        displaystyle l  n   alpha  c  e   c      ln n    alpha    ln  ln n    - alpha      convenient functions polynomial exponential terms                     ln                 n                displaystyle  ln n       generalizations related usages   the generalization functions taking values normed vector space straightforward  replacing absolute values norms   f g need take values space  a generalization functions g taking values topological group also possible the  limiting process  x   xo also generalized introducing arbitrary filter base  i e  directed nets f g  the notation used define derivatives differentiability quite general spaces  also  asymptotical  equivalence functions                     f                 g                                          f                 g                                          g                         displaystyle f sim g iff  f-g  g    equivalence relation restrictive notion relationship  f   g   above   it reduces lim f   g     f g positive real valued functions    for example   x   x    x   x x     history  bachmann landau  hardy  vinogradov notations    the symbol o first introduced number theorist paul bachmann       second volume book analytische zahlentheorie   analytic number theory    the number theorist edmund landau adopted  thus inspired introduce      notation  hence called landau symbols  these notations used applied mathematics     asymptotic analysis the symbol                                      displaystyle  omega      sense    introduced      hardy littlewood  hardy littlewood also introduced      symbols                                                      r                                  displaystyle  omega   r       right                                                        l                                  displaystyle  omega   l       left     precursors modern symbols                                                                                         displaystyle  omega           smaller small                                                                                           displaystyle  omega   -       larger small    thus omega symbols  original meanings  sometimes also referred  landau symbols   this notation                                      displaystyle  omega     became commonly used number theory least since     s in     big o popularized computer science donald knuth  introduced related theta notation  proposed different definition omega notation landau never used big theta small omega symbols hardy symbols  terms modern o notation                     f                 g                                 f                 o                 g                         displaystyle f preccurlyeq g iff f o g                             f                 g                                 f                                 g                                  displaystyle f prec g iff f g      hardy however never defined used notation                                                               displaystyle  prec      prec                                           displaystyle       sometimes reported  hardy introduced symbols                                      displaystyle  preccurlyeq                                          displaystyle  prec      well symbols       tract  orders infinity   made use three papers              in nearly     remaining papers books consistently used landau symbols o o hardy notation used anymore  on hand       russian number theorist  ivan matveyevich vinogradov  introduced notation                                      displaystyle        increasingly used number theory instead                      o                displaystyle o    notation  we                    f                 g                                 f                 o                 g                                  displaystyle f g iff f o g     frequently notations used paper the big-o originally stands  order    ordnung   bachmann        thus latin letter  neither bachmann landau ever call  omicron   the symbol much later        viewed knuth capital omicron  probably reference definition symbol omega  the digit zero used    see also   asymptotic expansion  approximation functions generalizing taylor formulaasymptotically optimal algorithm  a phrase frequently used describe algorithm upper bound asymptotically within constant lower bound problembig o probability notation  op  oplimit superior limit inferior  an explanation limit notation used articlemaster theorem  analysis algorithms   for analyzing divide-and-conquer recursive algorithms using big o notationnachbin theorem  a precise method bounding complex analytic functions domain convergence integral transforms statedorders approximationcomputational complexity mathematical operations   references notes      further reading   hardy  g  h          orders infinity  the  infinit rcalc l  paul du bois-reymond  cambridge university press knuth  donald                  asymptotic representations   fundamental algorithms  the art computer programming      rd ed    addison-wesley  isbn    - -   -     -  cormen  thomas h   leiserson  charles e   rivest  ronald l   stein  clifford               asymptotic notation   introduction algorithms   nd ed    mit press mcgraw-hill  isbn    - -   -     -  sipser  michael         introduction theory computation  pws publishing  pp           isbn    - -   -     -  avigad  jeremy  donnelly  kevin         formalizing o notation isabelle hol  pdf   international joint conference automated reasoning  doi            - -   -     -     black  paul e      march         black  paul e   ed     big-o notation   dictionary algorithms data structures  u s  national institute standards technology  retrieved december          black  paul e      december         black  paul e   ed     little-o notation   dictionary algorithms data structures  u s  national institute standards technology  retrieved december          black  paul e      december         black  paul e   ed         dictionary algorithms data structures  u s  national institute standards technology  retrieved december          black  paul e      december         black  paul e   ed         dictionary algorithms data structures  u s  national institute standards technology  retrieved december          black  paul e      december         black  paul e   ed         dictionary algorithms data structures  u s  national institute standards technology  retrieved december             external links   growth sequences   oeis  online encyclopedia integer sequences  wikiintroduction asymptotic notationslandau symbolsbig-o notation   what good forbig o notation explained plain englishan example big o accuracy central divided difference scheme first derivativea gentle introduction algorithm complexity analysis
in programming languages  closure  also lexical closure function closure  technique implementing lexically scoped name binding language first-class functions  operationally  closure record storing function together environment  the environment mapping associating free variable function  variables used locally  defined enclosing scope  value reference name bound closure created  unlike plain function  closure allows function access captured variables closure copies values references  even function invoked outside scope    history etymology   the concept closures developed     mechanical evaluation expressions  -calculus first fully implemented      language feature pal programming language support lexically scoped first-class functions peter j  landin defined term closure      environment part control part used secd machine evaluating expressions  joel moses credits landin introducing term closure refer lambda expression whose open bindings  free variables  closed  bound  lexical environment  resulting closed expression  closure  this usage subsequently adopted sussman steele defined scheme       lexically scoped variant lisp  became widespread sussman abelson also use term closure     second  unrelated meaning  property operator adds data data structure also able add nested data structures  this usage term comes mathematics usage rather prior usage computer science  the authors consider overlap terminology  unfortunate     anonymous functions   the term closure often used synonym anonymous function  though strictly  anonymous function function literal without name  closure instance function  value  whose non-local variables bound either values storage locations  depending language  see lexical environment section  for example  following python code values b closures  cases produced returning nested function free variable enclosing function  free variable binds value parameter x enclosing function  the closures b functionally identical  the difference implementation first case used nested function name  g  second case used anonymous nested function  using python keyword lambda creating anonymous function   the original name   used defining irrelevant a closure value like value  it need assigned variable instead used directly  shown last two lines example  this usage may deemed  anonymous closure  the nested function definitions closures  free variable yet bound  only enclosing function evaluated value parameter free variable nested function bound  creating closure  returned enclosing function lastly  closure distinct function free variables outside scope non-local variables  otherwise defining environment execution environment coincide nothing distinguish  static dynamic binding cannot distinguished names resolve values   for example  program  functions free variable x  bound non-local variable x global scope  executed environment x defined  immaterial whether actually closures this often achieved function return  since function must defined within scope non-local variables  case typically scope smaller this also achieved variable shadowing  reduces scope non-local variable   though less common practice  less useful shadowing discouraged  in example f seen closure x body f bound x global namespace  x local g    applications   the use closures associated languages functions first-class objects  functions returned results higher-order functions  passed arguments function calls  functions free variables first-class  returning one creates closure  this includes functional programming languages lisp ml  well many modern  multi-paradigm languages  python rust  closures also frequently used callbacks  particularly event handlers  javascript  used interactions dynamic web page closures also used continuation-passing style hide state  constructs objects control structures thus implemented closures  in languages  closure may occur function defined within another function  inner function refers local variables outer function  at run-time  outer function executes  closure formed  consisting inner function code references  upvalues  variables outer function required closure     first-class functions    closures typically appear languages first-class functions words  languages enable functions passed arguments  returned function calls  bound variable names  etc   like simpler types strings integers  for example  consider following scheme function in example  lambda expression  lambda  book       book-sales book  threshold   appears within function best-selling-books   when lambda expression evaluated  scheme creates closure consisting code lambda expression reference threshold variable  free variable inside lambda expression the closure passed filter function  calls repeatedly determine books added result list discarded  because closure reference threshold  use variable time filter calls it  the function filter might defined completely separate file here example rewritten javascript  another popular language support closures the function keyword used instead lambda  array filter method instead global filter function  otherwise structure effect code same a function may create closure return  following example because closure case outlives execution function creates  variables f dx live function derivative returns  even though execution left scope longer visible  in languages without closures  lifetime automatic local variable coincides execution stack frame variable declared  in languages closures  variables must continue exist long existing closures references them  this commonly implemented using form garbage collection     state representation    a closure used associate function set  private  variables  persist several invocations function  the scope variable encompasses closed-over function  cannot accessed program code  these analogous private variables object-oriented programming  fact closures analogous type object  specifically function objects  single public method  function call   possibly many private variables  closed-over variables  in stateful languages  closures thus used implement paradigms state representation information hiding  since closure upvalues  closed-over variables  indefinite extent  value established one invocation remains available next   closures used way longer referential transparency  thus longer pure functions  nevertheless  commonly used impure functional languages scheme     other uses    closures many uses because closures delay evaluation i e     anything called used define control structures   for example  smalltalk standard control structures  including branches  else  loops    defined using objects whose methods accept closures   users easily define control structures also in languages implement assignment  multiple functions produced close environment  enabling communicate privately altering environment  in scheme closures used implement object systems note  some speakers call data structure binds lexical environment closure  term usually refers specifically functions    implementation theory   closures typically implemented special data structure contains pointer function code  plus representation function lexical environment  i e   set available variables  time closure created  the referencing environment binds non-local names corresponding variables lexical environment time closure created  additionally extending lifetime least long lifetime closure itself  when closure entered later time  possibly different lexical environment  function executed non-local variables referring ones captured closure  current environment a language implementation cannot easily support full closures run-time memory model allocates automatic variables linear stack  in languages  function automatic local variables deallocated function returns  however  closure requires free variables references survive enclosing function execution  therefore  variables must allocated persist longer needed  typically via heap allocation  rather stack  lifetime must managed survive closures referencing longer use this explains  typically  languages natively support closures also use garbage collection  the alternatives manual memory management non-local variables  explicitly allocating heap freeing done    using stack allocation  language accept certain use cases lead undefined behaviour  due dangling pointers freed automatic variables  lambda expressions c     nested functions gnu c  the funarg problem   functional argument  problem  describes difficulty implementing functions first class objects stack-based programming language c c    similarly d version    assumed programmer knows delegates automatic local variables  references invalid return definition scope  automatic local variables stack    still permits many useful functional patterns  complex cases needs explicit heap allocation variables  d version   solved detecting variables must stored heap  performs automatic allocation  because d uses garbage collection  versions  need track usage variables passed in strict functional languages immutable data  e g  erlang   easy implement automatic memory management  garbage collection   possible cycles variables  references  for example  erlang  arguments variables allocated heap  references additionally stored stack  after function returns  references still valid  heap cleaning done incremental garbage collector in ml  local variables lexically scoped  hence define stack-like model  since bound values objects  implementation free copy values closure data structure way invisible programmer scheme  algol-like lexical scope system dynamic variables garbage collection  lacks stack programming model suffer limitations stack-based languages  closures expressed naturally scheme  the lambda form encloses code  free variables environment persist within program long possibly accessed  used freely scheme expression closures closely related actors actor model concurrent computation values function lexical environment called acquaintances  an important issue closures concurrent programming languages whether variables closure updated   updates synchronized  actors provide one solution closures closely related function objects  transformation former latter known defunctionalization lambda lifting  see also closure conversion    differences semantics       lexical environment    as different languages always common definition lexical environment  definitions closure may vary also  the commonly held minimalist definition lexical environment defines set bindings variables scope  also closures language capture  however meaning variable binding also differs  in imperative languages  variables bind relative locations memory store values   although relative location binding change runtime  value bound location can  in languages  since closure captures binding  operation variable  whether done closure  performed relative memory location  this often called capturing variable  reference   here example illustrating concept ecmascript  one language function foo closures referred variables f g use relative memory location signified local variable x in instances behaviour may undesirable  necessary bind different lexical closure  again ecmascript  would done using function bind       example    reference unbound variable        example    accidental reference bound variable    for example expected behaviour would link emit id clicked  variable  e  bound scope  lazy evaluated click  actually happens click event emits id last element  elements  bound end loop again variable e would need bound scope block using handle bind  let keyword on hand  many functional languages  ml  bind variables directly values  in case  since way change value variable bound  need share state closures use values  this often called capturing variable  value   java local anonymous classes also fall category require captured local variables final  also means need share state some languages enable choose capturing value variable location  for example  c      captured variables either declared      means captured reference       means captured value yet another subset  lazy functional languages haskell  bind variables results future computations rather values  consider example haskell the binding r captured closure defined within function foo computation  x    case results division zero  however  since computation captured  value  error manifests closure invoked  actually attempts use captured binding     closure leaving    yet differences manifest behavior lexically scoped constructs  return  break continue statements  such constructs  general  considered terms invoking escape continuation established enclosing control statement  case break continue  interpretation requires looping constructs considered terms recursive function calls   in languages  ecmascript  return refers continuation established closure lexically innermost respect statement thus  return within closure transfers control code called it  however  smalltalk  superficially similar operator   invokes escape continuation established method invocation  ignoring escape continuations intervening nested closures  the escape continuation particular closure invoked smalltalk implicitly reaching end closure code  the following examples ecmascript smalltalk highlight difference the code snippets behave differently smalltalk   operator javascript return operator analogous   in ecmascript example  return x leave inner closure begin new iteration foreach loop  whereas smalltalk example   x abort loop return method foo common lisp provides construct express either actions  lisp  return-from foo x  behaves smalltalk  x  lisp  return-from nil x  behaves javascript return x  hence  smalltalk makes possible captured escape continuation outlive extent successfully invoked  consider when closure returned method foo invoked  attempts return value invocation foo created closure  since call already returned smalltalk method invocation model follow spaghetti stack discipline facilitate multiple returns  operation results error some languages  ruby  enable programmer choose way return captured  an example ruby both proc new lambda example ways create closure  semantics closures thus created different respect return statement in scheme  definition scope return control statement explicit  arbitrarily named  return  sake example   the following direct translation ruby sample    closure-like constructs   some languages features simulate behavior closures  in languages java  c    objective-c  c   vb net  d  features result language object-oriented paradigm     callbacks  c     some c libraries support callbacks   this sometimes implemented providing two values registering callback library  function pointer separate void  pointer arbitrary data user choice  when library executes callback function  passes along data pointer  this enables callback maintain state refer information captured time registered library  the idiom similar closures functionality  syntax  the void  pointer type safe cidiom differs type-safe closures c   haskell ml callbacks extensively used gui widget toolkits toimplement event-driven programming associating generalfunctions graphical widgets  menus  buttons  check boxes sliders  spinners  etc   application-specific functionsimplementing specific desired behavior application      nested function function pointer  c      with gcc extension  nested function used function pointer emulate closures  providing function exit containing scope the following example invalid adder top-level definition  depending compiler version  could produce correct result compiled without optimization  i e  -o   but moving adder   optionally  typedef  main makes valid if executed prints    expected     local classes lambda functions  java     java enables classes defined inside methods   these called local classes   when classes named  known anonymous classes  anonymous inner classes    a local class  either named anonymous  may refer names lexically enclosing classes  read-only variables  marked final  lexically enclosing method the capturing final variables enables capture variables value  even variable want capture non-final  always copy temporary final variable class capturing variables reference emulated using final reference mutable container  example  single-element array  the local class able change value container reference  able change contents container with advent java   lambda expressions  closure causes code executed local classes one types inner class declared within body method   java also supports inner classes declared non-static members enclosing class  they normally referred  inner classes   these defined body enclosing class full access instance variables enclosing class  due binding instance variables  inner class may instantiated explicit binding instance enclosing class using special syntax upon execution  print integers      beware confuse type class nested class  declared way accompanied usage  static  modifier  desired effect instead classes special binding defined enclosing class as java    java supports functions first class objects  lambda expressions form considered type function t u  t domain u image type  the expression called  apply t  method  standard method call     blocks  c  c    objective-c         apple introduced blocks  form closure  nonstandard extension c  c    objective-c     mac os x       snow leopard  ios      apple made implementation available gcc clang compilers pointers block block literals marked    normal local variables captured value block created  read-only inside block  variables captured reference marked   block  blocks need persist outside scope created may need copied     delegates  c   vb net  d     c  anonymous methods lambda expressions support closure visual basic  net  many language features similar c   also supports lambda expressions closures in d  closures implemented delegates  function pointer paired context pointer  e g  class instance  stack frame heap case closures  d version    limited closure support  for example  code work correctly  variable stack  returning test    longer valid use  probably calling foo via dg    return  random  integer   this solved explicitly allocating variable   heap  using structs class store needed closed variables construct delegate method implementing code  closures passed functions  long used referenced values still valid  example calling another function closure callback parameter   useful writing generic data processing code  limitation  practice  often issue this limitation fixed d version   - variable   automatically allocated heap used inner function  delegate function escape current scope  via assignment dg return   any local variables  arguments  referenced delegates referenced delegates escape current scope  remain stack  simpler faster heap allocation  the true inner class methods reference function variables     function objects  c       c   enables defining function objects overloading operator    these objects behave somewhat like functions functional programming language  they may created runtime may contain state  implicitly capture local variables closures do  as      revision  c   language also supports closures  type function object constructed automatically special language construct called lambda-expression  a c   closure may capture context either storing copies accessed variables members closure object reference  in latter case  closure object escapes scope referenced object  invoking operator   causes undefined behavior since c   closures extend lifetime context     inline agents  eiffel     eiffel includes inline agents defining closures  an inline agent object representing routine  defined giving code routine in-line  for example  inthe argument subscribe agent  representing procedure two arguments  procedure finds country corresponding coordinates displays it  the whole agent  subscribed  event type click event acertain button  whenever instance event type occurs button   user clicked button   procedure executed mouse coordinates passed arguments x y the main limitation eiffel agents  distinguishes closures languages  cannot reference local variables enclosing scope  this design decision helps avoiding ambiguity talking local variable value closure - latest value variable value captured agent created  only current  reference current object  analogous java   features  arguments agent accessed within agent body  the values outer local variables passed providing additional closed operands agent     c  builder   closure reserved word    embarcadero c  builder provides reserve word   closure provide pointer method similar syntax function pointer in standard c could write typedef pointer function type using following syntax in similar way declare typedef pointer method using following syntax    see also   anonymous functionblocks  c language extension command patterncontinuationcurryingfunarg problemlambda calculuslazy evaluationpartial applicationspaghetti stacksyntactic closurevalue-level programming   notes      references      external links   original  lambda papers   a classic series papers guy steele gerald sussman discussing  among things  versatility closures context scheme  appear lambda expressions  neal gafter     january         a definition closures  gilad bracha  neal gafter  james gosling  peter von der ah    closures java programming language  v      cs  maint  multiple names  authors list  link closures  an article closures dynamically typed imperative languages  martin fowler collection closure methods  an example technical domain using closures convenient  martin fowler 
cognitive science interdisciplinary  scientific study mind processes  it examines nature  tasks  functions cognition  broad sense   cognitive scientists study intelligence behavior  focus nervous systems represent  process  transform information  mental faculties concern cognitive scientists include language  perception  memory  attention  reasoning  emotion  understand faculties  cognitive scientists borrow fields linguistics  psychology  artificial intelligence  philosophy  neuroscience  anthropology  the typical analysis cognitive science spans many levels organization  learning decision logic planning  neural circuitry modular brain organization  one fundamental concepts cognitive science  thinking best understood terms representational structures mind computational procedures operate structures  the goal cognitive science understand principles intelligence hope lead better comprehension mind learning develop intelligent devices the cognitive sciences began intellectual movement     often referred cognitive revolution    history   the cognitive sciences began intellectual movement      called cognitive revolution  cognitive science prehistory traceable back ancient greek philosophical texts  see plato meno aristotle de anima   includes writers descartes  david hume  immanuel kant  benedict de spinoza  nicolas malebranche  pierre cabanis  leibniz john locke   however  although early writers contributed greatly philosophical discovery mind would ultimately lead development psychology  working entirely different set tools core concepts cognitive scientist the modern culture cognitive science traced back early cyberneticists          warren mcculloch walter pitts  sought understand organizing principles mind  mcculloch pitts developed first variants known artificial neural networks  models computation inspired structure biological neural networks another precursor early development theory computation digital computer         s  kurt g del  alonzo church  alan turing  john von neumann instrumental developments  the modern computer  von neumann machine  would play central role cognitive science  metaphor mind  tool investigation the first instance cognitive science experiments done academic institution took place mit sloan school management  established j c r  licklider working within psychology department conducting experiments using computer memory models human cognition in       noam chomsky published scathing review b  f  skinner book verbal behavior  at time  skinner behaviorist paradigm dominated field psychology within united states  most psychologists focused functional relations stimulus response  without positing internal representations  chomsky argued order explain language  needed theory like generative grammar  attributed internal representations characterized underlying order the term cognitive science coined christopher longuet-higgins      commentary lighthill report  concerned then-current state artificial intelligence research  in decade  journal cognitive science cognitive science society founded  the founding meeting cognitive science society held university california  san diego       resulted cognitive science becoming internationally visible enterprise  in       hampshire college started first undergraduate education program cognitive science  led neil stillings   in       assistance professor stillings  vassar college became first institution world grant undergraduate degree cognitive science  in       first cognitive science department world founded university california  san diego in     early      access computers increased  artificial intelligence research expanded  researchers marvin minsky would write computer programs languages lisp attempt formally characterize steps human beings went  instance  making decisions solving problems  hope better understanding human thought  also hope creating artificial minds  this approach known  symbolic ai  eventually limits symbolic ai research program became apparent  for instance  seemed unrealistic comprehensively list human knowledge form usable symbolic computer program  the late     saw rise neural networks connectionism research paradigm  under point view  often attributed james mcclelland david rumelhart  mind could characterized set complex associations  represented layered network   critics argue phenomena better captured symbolic models  connectionist models often complex little explanatory power  recently symbolic connectionist models combined  making possible take advantage forms explanation  while connectionism symbolic approaches proven useful testing various hypotheses exploring approaches understanding aspects cognition lower level brain functions  neither biologically realistic therefore  suffer lack neuroscientific plausibility  connectionism proven useful exploring computationally cognition emerges development occurs human brain  provided alternatives strictly domain-specific   domain general approaches  for example  scientists jeff elman  liz bates  annette karmiloff-smith posited networks brain emerge dynamic interaction environmental input    principles       levels analysis    a central tenet cognitive science complete understanding mind brain cannot attained studying single level  assumption also held field cognitive modelling cognitive architectures   an example would problem remembering phone number recalling later  one approach understanding process would study behavior direct observation  naturalistic observation  a person could presented phone number asked recall delay time  accuracy response could measured  another approach measure cognitive ability would study firings individual neurons person trying remember phone number  neither experiments would fully explain process remembering phone number works  even technology map every neuron brain real-time available known neuron fired would still impossible know particular firing neurons translates observed behavior  thus understanding two levels relate imperative  the embodied mind  cognitive science human experience says  new sciences mind need enlarge horizon encompass lived human experience possibilities transformation inherent human experience   this provided functional level account process  studying particular phenomenon multiple levels creates better understanding processes occur brain give rise particular behavior marr gave famous description three levels analysis the computational theory  specifying goals computation representation algorithms  giving representation inputs outputs algorithms transform one  andthe hardware implementation  algorithm representation may physically realized     interdisciplinary nature    cognitive science interdisciplinary field contributors various fields  including psychology  neuroscience  linguistics  philosophy mind  computer science  anthropology biology   cognitive scientists work collectively hope understanding mind interactions surrounding world much like sciences do  the field regards compatible physical sciences uses scientific method well simulation modeling  often comparing output models aspects human cognition  similarly field psychology  doubt whether unified cognitive science  led researchers prefer  cognitive sciences  plural many   consider cognitive scientists hold functionalist view mind view mental states processes explained function   do  according multiple realizability account functionalism  even non-human systems robots computers ascribed cognition     cognitive science  term    the term  cognitive   cognitive science  used  kind mental operation structure studied precise terms   lakoff johnson         this conceptualization broad  confused  cognitive  used traditions analytic philosophy   cognitive  formal rules truth conditional semantics the earliest entries word  cognitive  oed take mean roughly  pertaining action process knowing   the first entry        shows word one time used context discussions platonic theories knowledge  most cognitive science  however  presumably believe field study anything certain knowledge sought plato    scope   cognitive science large field  covers wide array topics cognition  however  recognized cognitive science always equally concerned every topic might bear relevance nature operation minds  among philosophers  classical cognitivists largely de-emphasized avoided social cultural factors  emotion  consciousness  animal cognition  comparative evolutionary psychologies  however  decline behaviorism  internal states affects emotions  well awareness covert attention became approachable again  for example  situated embodied cognition theories take account current state environment well role body cognition  with newfound emphasis information processing  observable behavior longer hallmark psychological theory  modeling recording mental states below main topics cognitive science concerned with  this exhaustive list  see list cognitive science topics list various aspects field     artificial intelligence    artificial intelligence  ai  involves study cognitive phenomena machines  one practical goals ai implement aspects human intelligence computers  computers also widely used tool study cognitive phenomena  computational modeling uses simulations study human intelligence may structured   see   computational modeling  there debate field whether mind best viewed huge array small individually feeble elements  i e  neurons   collection higher-level structures symbols  schemes  plans  rules  the former view uses connectionism study mind  whereas latter emphasizes symbolic artificial intelligence  one way view issue whether possible accurately simulate human brain computer without accurately simulating neurons make human brain     attention    attention selection important information   the human mind bombarded millions stimuli must way deciding information process   attention sometimes seen spotlight  meaning one shine light particular set information   experiments support metaphor include dichotic listening task  cherry        studies inattentional blindness  mack rock          in dichotic listening task  subjects bombarded two different messages  one ear  told focus one messages   at end experiment  asked content unattended message  subjects cannot report it     knowledge processing language    the ability learn understand language extremely complex process  language acquired within first years life  humans normal circumstances able acquire language proficiently  a major driving force theoretical linguistic field discovering nature language must abstract order learned fashion  some driving research questions studying brain processes language include      to extent linguistic knowledge innate learned       why difficult adults acquire second-language infants acquire first-language       how humans able understand novel sentences the study language processing ranges investigation sound patterns speech meaning words whole sentences  linguistics often divides language processing orthography  phonetics  phonology  morphology  syntax  semantics  pragmatics  many aspects language studied components interaction the study language processing cognitive science closely tied field linguistics  linguistics traditionally studied part humanities  including studies history  art literature  in last fifty years  more researchers studied knowledge use language cognitive phenomenon  main problems knowledge language acquired used  precisely consists of  linguists found  humans form sentences ways apparently governed complex systems  remarkably unaware rules govern speech  thus linguists must resort indirect methods determine rules might  indeed rules exist  in event  speech indeed governed rules  appear opaque conscious consideration     learning development    learning development processes acquire knowledge information time  infants born little knowledge  depending knowledge defined   yet rapidly acquire ability use language  walk  recognize people objects  research learning development aims explain mechanisms processes might take place a major question study cognitive development extent certain abilities innate learned  this often framed terms nature nurture debate  the nativist view emphasizes certain features innate organism determined genetic endowment  the empiricist view  hand  emphasizes certain abilities learned environment  although clearly genetic environmental input needed child develop normally  considerable debate remains genetic information might guide cognitive development  in area language acquisition  example   steven pinker  argued specific information containing universal grammatical rules must contained genes  whereas others  jeffrey elman colleagues rethinking innateness  argued pinker claims biologically unrealistic  they argue genes determine architecture learning system  specific  facts  grammar works learned result experience     memory    memory allows us store information later retrieval  memory often thought consisting long-term short-term store  long-term memory allows us store information prolonged periods  days  weeks  years   we yet know practical limit long-term memory capacity  short-term memory allows us store information short time scales  seconds minutes  memory also often grouped declarative procedural forms  declarative memory grouped subsets semantic episodic forms memory refers memory facts specific knowledge  specific meanings  specific experiences  e g   are apples food     what i eat breakfast four days ago     procedural memory allows us remember actions motor sequences  e g  ride bicycle  often dubbed implicit knowledge memory  cognitive scientists study memory psychologists  tend focus memory bears cognitive processes  interrelationship cognition memory  one example could  mental processes person go retrieve long-lost memory  or  differentiates cognitive process recognition  seeing hints something remembering  memory context  recall  retrieving memory   fill-in-the-blank       perception action    perception ability take information via senses  process way  vision hearing two dominant senses allow us perceive environment  some questions study visual perception  example  include      how able recognize objects       why perceive continuous visual environment  even though see small bits one time  one tool studying visual perception looking people process optical illusions  the image right necker cube example bistable percept   cube interpreted oriented two different directions the study haptic  tactile   olfactory  gustatory stimuli also fall domain perception action taken refer output system  in humans  accomplished motor responses  spatial planning movement  speech production  complex motor movements aspects action     consciousness    consciousness awareness whether something external object something within oneself  this helps mind ability experience feel sense self    research methods   many different methodologies used study cognitive science  as field highly interdisciplinary  research often cuts across multiple areas study  drawing research methods psychology  neuroscience  computer science systems theory     behavioral experiments    in order description constitutes intelligent behavior  one must study behavior itself  this type research closely tied cognitive psychology psychophysics  by measuring behavioral responses different stimuli  one understand something stimuli processed  lewandowski   strohmetz        reviewed collection innovative uses behavioral measurement psychology including behavioral traces  behavioral observations  behavioral choice  behavioral traces pieces evidence indicate behavior occurred  actor present  e g   litter parking lot readings electric meter   behavioral observations involve direct witnessing actor engaging behavior  e g   watching close person sits next another person   behavioral choices person selects two options  e g   voting behavior  choice punishment another participant  reaction time  the time presentation stimulus appropriate response indicate differences two cognitive processes  indicate things nature  for example  search task reaction times vary proportionally number elements  evident cognitive process searching involves serial instead parallel processing psychophysical responses  psychophysical experiments old psychological technique  adopted cognitive psychology  they typically involve making judgments physical property  e g  loudness sound  correlation subjective scales individuals show cognitive sensory biases compared actual physical measurements  some examples include sameness judgments colors  tones  textures  etc threshold differences colors  tones  textures  etc eye tracking  this methodology used study variety cognitive processes  notably visual perception language processing  the fixation point eyes linked individual focus attention  thus  monitoring eye movements  study information processed given time  eye tracking allows us study cognitive processes extremely short time scales  eye movements reflect online decision making task  provide us insight ways decisions may processed     brain imaging    brain imaging involves analyzing activity within brain performing various tasks  this allows us link behavior brain function help understand information processed  different types imaging techniques vary temporal  time-based  spatial  location-based  resolution  brain imaging often used cognitive neuroscience single-photon emission computed tomography positron emission tomography  spect pet use radioactive isotopes  injected subject bloodstream taken brain  by observing areas brain take radioactive isotope  see areas brain active areas  pet similar spatial resolution fmri  extremely poor temporal resolution electroencephalography  eeg measures electrical fields generated large populations neurons cortex placing series electrodes scalp subject  this technique extremely high temporal resolution  relatively poor spatial resolution functional magnetic resonance imaging  fmri measures relative amount oxygenated blood flowing different parts brain  more oxygenated blood particular region assumed correlate increase neural activity part brain  this allows us localize particular functions within different brain regions  fmri moderate spatial temporal resolution optical imaging  this technique uses infrared transmitters receivers measure amount light reflectance blood near different areas brain  since oxygenated deoxygenated blood reflects light different amounts  study areas active  i e   oxygenated blood   optical imaging moderate temporal resolution  poor spatial resolution  it also advantage extremely safe used study infants  brains magnetoencephalography  meg measures magnetic fields resulting cortical activity  it similar eeg  except improved spatial resolution since magnetic fields measures blurred attenuated scalp  meninges forth electrical activity measured eeg is  meg uses squid sensors detect tiny magnetic fields     computational modeling    computational models require mathematically logically formal representation problem  computer models used simulation experimental verification different specific general properties intelligence   computational modeling help us understand functional organization particular cognitive phenomenon approaches cognitive modeling categorized      symbolic  abstract mental functions intelligent mind means symbols      subsymbolic  neural associative properties human brain      across symbolic subsymbolic border  including hybrid symbolic modeling evolved computer science paradigms using technologies knowledge-based systems  well philosophical perspective  e g   good old-fashioned artificial intelligence   gofai    they developed first cognitive researchers later used information engineering expert systems  since early     generalized systemics investigation functional human-like intelligence models  personoids   parallel  developed soar environment  recently  especially context cognitive decision-making  symbolic cognitive modeling extended socio-cognitive approach  including social organizational cognition  interrelated sub-symbolic non-conscious layer subsymbolic modeling includes connectionist neural network models  connectionism relies idea mind brain composed simple nodes problem-solving capacity derives connections them  neural nets textbook implementations approach  some critics approach feel models approach biological reality representation system works  models lack explanatory powers  even systems endowed simple connection rules  emerging high complexity makes less interpretable connection-level apparently macroscopic level other approaches gaining popularity include     dynamical systems theory      mapping symbolic models onto connectionist models  neural-symbolic integration hybrid intelligent systems       bayesian models  often drawn machine learning all approaches tend generalized form integrated computational models synthetic abstract intelligence order applied explanation improvement individual social organizational decision-making reasoning     neurobiological methods    research methods borrowed directly neuroscience neuropsychology also help us understand aspects intelligence  these methods allow us understand intelligent behavior implemented physical system single-unit recordingdirect brain stimulationanimal modelspostmortem studiesthe textbook encompasses areas gone   editions    key findings   cognitive science given rise models human cognitive bias risk perception  influential development behavioral finance  part economics  it also given rise new theory philosophy mathematics  related denotational mathematics   many theories artificial intelligence  persuasion coercion  it made presence known philosophy language epistemology well constituting substantial wing modern linguistics  fields cognitive science influential understanding brain particular functional systems  functional deficits  ranging speech production auditory processing visual perception  it made progress understanding damage particular areas brain affect cognition  helped uncover root causes results specific dysfunction  dyslexia  anopia  hemispatial neglect    criticism   see criticism cognitive psychology    notable researchers   some recognized names cognitive science usually either controversial cited  within philosophy  familiar names include daniel dennett  writes computational systems perspective  john searle  known controversial chinese room argument  jerry fodor  advocates functionalism others include david chalmers  advocates dualism also known articulating hard problem consciousness  douglas hofstadter  famous writing g del  escher  bach  questions nature words thought in realm linguistics  noam chomsky george lakoff influential  also become notable political commentators   in artificial intelligence  marvin minsky  herbert a  simon  allen newell prominent popular names discipline psychology include george a  miller  james mcclelland  philip johnson-laird  lawrence barsalou  vittorio guidano  howard gardner steven pinker  anthropologists dan sperber  edwin hutchins  bradd shore  james wertsch scott atran  involved collaborative projects cognitive social psychologists  political scientists evolutionary biologists attempts develop general theories culture formation  religion  political association computational theories  models simulations  also developed  david rumelhart  james mcclelland philip johnson-laird    epistemics   epistemics term coined      university edinburgh foundation school epistemics  epistemics distinguished epistemology epistemology philosophical theory knowledge  whereas epistemics signifies scientific study knowledge christopher longuet-higgins defined  construction formal models processes  perceptual  intellectual  linguistic  knowledge understanding achieved communicated  in      essay  epistemics  the regulative theory cognition   alvin i  goldman claims coined term  epistemics  describe reorientation epistemology  goldman maintains epistemics continuous traditional epistemology new term avoid opposition  epistemics  goldman version  differs slightly traditional epistemology alliance psychology cognition  epistemics stresses detailed study mental processes information-processing mechanisms lead knowledge beliefs in mid-     school epistemics renamed the centre cognitive science  ccs    in       ccs incorporated university edinburgh school informatics    see also   outlinesoutline human intelligence   topic tree presenting traits  capacities  models  research fields human intelligence  more outline thought   topic tree identifies many types thoughts  types thinking  aspects thought  related fields  more    references      external links    media related cognitive science wikimedia commons quotations related cognitive science wikiquote learning materials related cognitive science wikiversity cognitive science  stanford encyclopedia philosophycognitive science societycognitive science movie index  a broad list movies showcasing themes cognitive scienceslist leading thinkers cognitive science
earl simmons  december            april           known stage name dmx   dark man x    american rapper actor  he began rapping early     released debut album it dark hell is hot       critical acclaim commercial success  selling         copies within first week release  dmx released best-selling album      and then there was x        included hit single  party up  up here    his      singles  where hood at    x gon  give it ya  also commercially successful  he first artist debut album no    five times row billboard     charts  overall  dmx sold    million records worldwide dmx featured films belly  romeo must die  exit wounds  cradle   grave  last hour  in       starred reality television series dmx  soul man  primarily aired bet cable television network  in       published book memoirs entitled  e a r l   the autobiography dmx in april       dmx hospitalized due cocaine-induced heart attack  he never regained consciousness died multiple organ failure week later    early life   earl simmons born december           various accounts giving birthplace either baltimore  maryland  mount vernon  new york  he son   -year-old arnett simmons   -year-old joe barker  earl simmons  second child  given birth daughter  bonita  two years prior  later gave birth one daughter  shayla  two stillborn sons  his father  barker  artist painted watercolor paintings street scenes sell local fairs  barker moved philadelphia largely absent life as child  simmons suffered greatly bronchial asthma  taken emergency room almost nightly due waking unable breathe  he raised jehovah witness became disillusioned faith incident hit drunk driver crossing street  a month later  insurance representative went house try reach agreement prevent family suing  simmons claims told family could awarded settlement         possibly even injuries sustained mother rejected settlement claimed jehovah witnesses taught self-sufficient although group official doctrine time prohibit suing receiving settlements simmons went disjointed childhood included beaten mother various boyfriends badly lost teeth sustained numerous bruises cuts face  due poverty  slept floor roaches mice crawling night  when simmons five years old  family settled school street projects inyonkers  new york  when six years old  mother knocked two teeth broom innocently erased something notebook  at school  threw chairs teachers stabbed another child face pencil  when seven  aunt got drunk vodka  the year  jailed stealing cakes market  one summer  mother locked bedroom  allowing exit trips bathroom  at end fifth grade  age     simmons expelled school sent julia dyckman andrus children home    months  in described defining moment betrayal  mother tricked telling visiting home  enrolled there  a months later  arrested arson attempt burn school down  he nearly killed co-conspirator when     simmons began living streets yonkers escape mother abuse  sleeping salvation army clothing bins  befriending stray dogs shortly began  mother sent group home  during stay  simmons bonded students new york shared love hip hop music  after performing friends  encouraged simmons continue writing music behest teacher  when returned home  simmons met ready ron  local rapper  impressed simmons  beatboxing skills asked become partner  simmons chose name  dmx   came instrument used boys  home  oberheim dmx drum machine  it later also interpreted  dark man x  as freshman yonkers middle high school  dmx second-fastest track field varsity team  however  bad grades sparse attendance record  he turned robbery way get poverty  first purse snatch theft yonkers netted         equivalent              used buy new leather dog collar dog harness dog  pair timberland boots himself  by end year  attended school rob people robbing   people per day  he turned carjacking    musical career                  career beginnings    dmx got start music industry age           beatboxed ready ron  after serving time prison stealing dog  began writing lyrics performing local recreation center younger children  in       prison carjacking  began dedicating almost free time writing lyrics also meeting rapping k-solo  when released summer  began producing selling mixtapes rapped instrumentals songs sell street corners  helped build local fan base new york  in       the source magazine praised dmx unsigned hype column highlighted unsigned hip-hop artists  in       columbia records signed dmx subsidiary label ruffhouse records  released debut single  born loser   he released second single   make move        he made guest appearance alongside jay-z  ja rule  mic geronimo classic underground track  time build  mic geronimo debut album                     signing def jam commercial success    dmx recorded tracks september      january      debut album  during time  guest appearances mase singles     hrs  live   take what yours   the lox single  money  power   respect   ll cool j single              created strong buzz then-unsigned rapper  in february       released debut major-label single   get me dog   def jam recordings  the single  received riaa certification gold  his first major-label album  it dark hell is hot  included single  ruff ryders  anthem   released may       the album debuted number one billboard     chart u s  sold five million copies  in december       released second album  flesh my flesh  blood my blood  it debuted number one billboard     went multi-platinum  he released third best-selling album     and then there was x  december           it third album debut number one billboard      its popular single   party up  up here    became first top ten hit r b charts  nominated grammy award best rap solo performance      grammy awards  the album certified six-times platinum  nominated best rap album      grammy awards  in       dmx also made cameo appearance sum    music video  makes no difference                 return music    after improving legal situation  dmx returned studio complete fourth album  the great depression  within release october           fourth album debut number one billboard      featuring singles  who we be    we right here    shorty was the bomb   despite album triple platinum certification  commercial critical success lower previous album  his fifth album  grand champ  released september       debuted number one billboard     charts  placing dmx musical artist history release five consecutive albums  entire album catalog time  debuted number one  singles released album include  where hood at    get it floor   after release  informed public planned retire grand champ final album                year dog   again the definition x    dmx signed columbia records january       he recorded next album  year dog    again  switching record labels  caused numerous delays  it released august          missed number one billboard spot hundred copies  he released two singles   lord give me sign   we here   on june           def jam recordings released compilation greatest hits  the definition x  the pick litter  in       def jam released another compilation album  the best dmx  features hit singles including  where hood at    x gon  give it ya   in       dmx claimed would pursue preaching jersey city  new jersey well  continue produce music  he completed gospel music album prior incarceration  according mtv  semi-retired study bible effort give messages behind pulpit                undisputed    on october           dmx performed      bet hip hop awards  he stated working  nonstop  every day  seventh album  later titled undisputed  a video new track entitled  last hope  released via internet september           later included the weigh in ep released digitally may          in late february       seven arts pictures acquired catalog dmx music signed dmx two-album deal  during performance new york santos party house december           dmx stated new album would titled undisputed would released march           after numerous delays  album eventually released september           featured production swizz beatz j r  rotem guest appearance mgk                def jam reunion exodus    in       dmx announced begun working eighth studio album  he collaborated producers swizz beatz dame grease  in december  regaining passport  embarked world tour performances bulgaria kosovo  on january          seven arts music announced dmx would releasing  redemption beast following week  however  close personal friend recurring collaborator producer rapper entrepreneur swizz beatz dmx management confirmed false  on january           seven arts music released redemption beast  without acquiring legal artist contract  on january           announced dmx brother manager montana dmx longer signed seven arts music would taking legal action seven arts music unauthorized release redemption beast long-time collaborator swizz beatz stated two collaborators album would kanye west dr  dre  his      song  x gon  give it ya  featured      film deadpool trailers  on june           dmx released new song titled  blood red  produced divine bars  on january           dmx released new song produced swizz beats titled  bain iz back   on september           dmx signed new record deal def jam recordings  reuniting label first time since      album grand champ dmx eighth first posthumous studio album exodus released def jam may             personal life       religion    dmx born-again christian  stated read bible every day  while jail  dmx stated purpose   i came meet somebody   don know  i know i see him  and i came give message  and message jesus loves them   dmx transitional deacon aspired become ordained pastor  stating received call       in       gave sermon church phoenix  arizona  in april       held online bible study asked people accept jesus lord savior     relationships children    dmx father    children   different women  he married childhood friend tashera simmons      married    years  they four children together  xavier  born        tacoma  born        sean  born        praise mary ella  born        in july       first three incarcerations year  tashera announced separation  they remained friends  although       tashera accused dmx missing         month child support payment dmx extramarital affairs marriage tashera  produced children  he daughter  sasha  born        patricia trejo  in       trejo sued dmx    million unpaid child support  the case settled       dmx monique wayne  maryland resident  fought claim father son born       she sued defamation child support  after genetic testing proved dmx indeed father  january       dmx ordered pay wayne      million  judge vacated judgment may       dmx also fathered child      fathered two children ex-girlfriend yadira borrego  in       daughter sonovah junior born  in       daughter aaliyah  named close friend  aaliyah  born  his fifteenth child  exodus simmons  born fianc e  desiree lindstrom  august          dark man x leave will  as result  legal battles ensued probate courts following death     finances bankruptcies    dmx earned      million songs           he also filed bankruptcy three times  his first filing july           citing child support obligations priority claim  the filing challenged united states trustee program dismissed u s  bankruptcy court manhattan november              feud ja rule    during      dmx formed close bond fellow up-and-coming rappers jay-z ja rule  the three collaborated many times formed group known murder inc  the group short-lived due internal issues dmx jay-z  after breakup murder inc   dmx disparaged ja rule interviews  accusing copycat  drawing comparisons saw ja stealing signature  gruff  style delivery dmx released diss track   they want war        dj kay slay mixtape  ja rule never directly responded  dmx also released single  go sleep  eminem obie trice apart cradle   the grave soundtrack numerous lines directed ja rule  however  time passed feud faded obscurity  dmx said wanted officially bring end released prison        gotti came jail said i want make peace him  i like   alright gotti  let it   despite  dmx ja rule officially end feud       vh  hip hop honors     feud jay-z    when dmx partnered jay-z ja rule murder inc   feud two  also contributed failure group working together  according reports  feud started early     rap battle two  led dmx disdain jay-z  prior dmx death  feud  although fizzled years  continued dmx said instagram video wanted rap battle jay-z verzuz    legal trouble   dmx jail    times various offenses  including robbery  assault  carjacking  animal cruelty  reckless driving  driving influence  unlicensed driving  drug possession  probation violation  failure pay child support  pretending federal agent  tax evasion                  dmx first sent prison      stealing dog junkyard  he sentenced two years juvenile unit woodfield prison valhalla  new york  however  weeks starting sentence  cellmate successfully escaped prison dmx returned home mother forced turn finish sentence  mccormick juvenile detention centre brooktondale  new york  simmons sent prison      carjacking  later moved higher security prison attempting extort fellow inmate drugs  he released summer                       when officers fort lee police department executed search home       dmx promptly surrendered weapons possession charges dmx faced      animal cruelty charge teaneck  new jersey dozen pit bulls found home  charge dismissed performer agreed accept responsibility record public service announcements animal rights group               metro ny    in       dmx served   -day jail sentence possession marijuana dmx served another jail sentence      driving without license possession marijuana  his appeal reduce sentence denied  rather  charged assault throwing objects prison guards in january       dmx pleaded guilty new jersey    counts animal cruelty  two counts maintaining nuisance  one count disorderly conduct possession drug paraphernalia  he eventually plea-bargained fines  probation  community service starred public service announcements dangers guns animal abuse in june       dmx arrested john f  kennedy international airport  charges cocaine possession  criminal impersonation  criminal possession weapon  criminal mischief  menacing  driving influence drugs alcohol  claiming federal agent attempting carjack vehicle  he given conditional discharge december          pleaded guilty october           violating parole on november           dmx sentenced    days jail riker island violating parole  lateness charge added   -day extension original   -day sentence  dmx released early   good behavior   december                      in       dmx home raided reports animal cruelty               arizona california    on may          dmx arrested drug animal cruelty charges attempting barricade inside cave creek  arizona home dmx pleaded guilty charges drug possession  theft  animal cruelty stemming august      drug raid well may      arrest  hearing december           sentenced    days jail january          on may           dmx entered plea agreement change plea pleaded guilty attempted aggravated assault jail after serving four six months violating drug probation  dmx released jail july          that day  television pilot filmed portray road recovery  however  dmx arrested three weeks later pilot evolve series on july           dmx turned los angeles metropolitan court reckless driving charge received       he sentenced serve ninety days jail on november           dmx arrested maricopa county  arizona charges violating probation february          aggravated assault officer incarcerated  on december           dmx moved mental health unit arizona alhambra state prison  released july          on august           dmx arrested tenth time maricopa county  time speeding  recorded     miles per hour      km h    -mile-per-hour      km h  zone  reckless driving  driving suspended license  while dmx admitted speeding  claimed driving    miles per hour      km h           south carolina    on february           dmx arrested spartanburg  south carolina driving without driver license on july           dmx arrested greenville county  south carolina charged driving influence alcohol  well driving without license on august           dmx arrested greer  south carolina traffic stop car passenger made improper u-turn  he arrested due outstanding warrant driving suspension  four packages marijuana also found vehicle  along driver cited them on november          dmx arrested greenville-spartanburg international airport police near greer  south carolina police  familiar prior arrests  noticed dmx behind wheel vehicle terminal  dmx booked charges driving suspended license  uninsured vehicle  driving unlicensed vehicle  he subsequently released spending three hours jail          new york    on april          man charged dmx robbing him on june           dmx arrested new york  charged robbery newark  new jersey  failure pay child support on july           dmx sentenced   months jail failure pay          child support on december           arrest warrant issued dmx missed court hearing address child support issues ex-wife tashera simmons four children                tax fraud conviction    in july       dmx charged    federal counts tax fraud  federal prosecutors charged failing file income tax returns            period earned least      million   dmx pleaded guilty single count tax fraud november       dmx originally free pending sentencing remanded jail january      leaving drug treatment program ordered court relapsing cocaine oxycodone  in march       judge jed s  rakoff sentenced dmx one year prison followed three years supervised release  the court also ordered dmx pay       million restitution government  he released prison january             health issues death   simmons said became addicted crack cocaine    years old  ready ron tricked smoking marijuana cigarette laced drug  he also said bipolar disorder simmons entered drug rehabilitation several times including                    cancelled concerts on february           simmons found unresponsive ramada inn parking lot yonkers  new york  he resuscitated first responders intravenously given narcan  opioid-reversal drug  responded quickly narcan became semi-conscious  simmons subsequently rushed hospital  a witness said ingested type substance collapsing  police found illegal substances property  simmons stated asthma attack on april          approximately       pm  simmons rushed white plains hospital  reported critical condition following heart attack home possibly resulting drug overdose  the next day  attorney murray richman confirmed simmons life support  that night  simmons suffered cerebral hypoxia  oxygen deprivation brain  paramedics attempted resuscitate    minutes  simmons  former manager  nakia walker  said  vegetative state   lung brain failure current brain activity   his manager  steve rifkind  stated simmons comatose set undergo tests determine brain functionality family  determine best  on morning april          simmons lost functionality multiple essential organs  reportedly liver  kidneys lungs  pronounced dead shortly after  he    years old  it revealed july   westchester county medical examiner office simmons  official cause death cocaine-induced heart attack    legacy   upon dmx death  the ringer wrote   throughout nearly three-decade career  dmx came embody passion  rawness  pure emotional honesty like hip-hop artists ever  barking way hits like  ruff ryders  anthem   get me dog  one moment  repenting philosophizing tracks like  slippin   next  his decidedly anti-commercial approach  worked  made genre first new superstar wake killings tupac shakur notorious b i g  to day  able reach heights rapper first five studio albums debut no     first living hip-hop artist two projects go platinum year  various celebrities paid tribute outlets like social media including former nfl star torrey smith  lebron james  shaquille o neal  eminem  gabrielle union  co-starred dmx      film  cradle   grave  along jet li  also paid tribute   swizz beatz  dmx collaborated including hit single   ruff ryders  anthem    eve missy elliott a  celebration life  brooklyn barclays center took place april           led kanye west sunday service choir  they performed several songs honor dmx  the memorial took place barclays center brooklyn  n y  limited capacity        it livestreamed dmx youtube instagram accounts  on way barclays  dmx casket carried black monster truck  long live dmx  painted side  a procession hundreds motorcyclists  homage hip-hop collective ruff ryders  rode dmx birthplace yonkers barclays center  in performances  people gave speeches including eve  nas  swizz beatz ruff ryders founders joaquin  waah  dean   darin  dee  dean  kanye west also confirmed attendance celebration  according variety dmx funeral   dmx homegoing celebration   took place brooklyn christian cultural center april           it livestreamed bet network youtube channel  it lasted around five hours limited capacity       people  dmx casket color red featured word  faith  large printing  it featured front room  people attendance included nas  lil kim  alicia keys swizz beatz well pastor church  reverend a r  bernard  louis farrakhan  leader nation islam  joined service via zoom  with exception alicia keys  nas lil kim  gave speeches  dmx former wife  tashera simmons ruff ryders founders waah   dee also gave speech  there controversial testimonies like former def jam chief lyor cohen  video featured overheard view beach explained earl simmons wonderful man dmx gremlin  additionally  def jam cofounder russell simmons compared issues drug abuse dmx via video  the homegoing ended dmx obituary read stage virtual performance faith evans at funeral  new york city community leader peacemaker erica ford presented dmx family several citations proclamations new york governor senate office  including proclamation new york state senate declaring dec       dmx birthday    earl  dmx  simmons day   additional citations came gov  andrew cuomo mayor mike spano yonkers  hometown dmx   cuomo flag flying state capitol day dmx death presented family    discography   studio albumsit dark hell is hot       flesh my flesh  blood my blood           and then there was x       the great depression       grand champ       year dog    again       undisputed       exodus          awards nominations   grammy awardamerican music awardmtv video music awardbillboard music award   filmography   filmsvideo gamestelevision   see also   ruff rydersmurder inc    notes      references      external links   dmx imdb
the association computing machinery  acm  us-based international learned society computing  it founded      world largest scientific educational computing society  the acm non-profit professional membership group  claiming nearly         student professional members       its headquarters new york city the acm umbrella organization academic scholarly interests computer science  informatics   its motto  advancing computing science   profession     history   the acm founded      name eastern association computing machinery  changed following year association computing machinery    activities   acm organized     local chapters    special interest groups  sigs   conducts activities  additionally      college university chapters  the first student chapter founded      university louisiana lafayettemany sigs  siggraph  sigda  sigplan  sigcse sigcomm  sponsor regular conferences  become famous dominant venue presenting innovations certain fields  the groups also publish large number specialized journals  magazines  newsletters acm also sponsors computer science related events worldwide acm international collegiate programming contest  icpc   sponsored events chess match garry kasparov ibm deep blue computer    services       publications    acm publishes    journals including prestigious journal acm  two general magazines computer professionals  communications acm  also known communications cacm  queue  other publications acm include acm xrds  formerly  crossroads   redesigned      popular student computing magazine us acm interactions  interdisciplinary hci publication focused connections experiences  people technology  third largest acm publication acm computing surveys  csur computers entertainment  cie acm journal emerging technologies computing systems  jetc acm special interest group  computers society  sigcas  a number journals  specific subfields computer science  titled acm transactions  some notable transactions include acm transactions computer systems  tocs ieee acm transactions computational biology bioinformatics  tcbb acm transactions computational logic  tocl acm transactions computer-human interaction  tochi acm transactions database systems  tods acm transactions graphics  tog acm transactions mathematical software  toms acm transactions multimedia computing  communications  applications  tomm ieee acm transactions networking  ton acm transactions programming languages systems  toplas although communications longer publishes primary research  considered prestigious venue  many great debates results computing history published pages acm made almost publications available paid subscribers online digital library also guide computing literature  individual members additionally access safari books online books  x   acm also offers insurance  online courses  services members in       acm press published wizards their wonders  portraits computing  isbn              written christopher morgan  new photographs louis fabian bachrach  the book collection historic current portrait photographs figures computer industry    portal digital library   the acm portal online service acm  its core two main sections  acm digital library acm guide computing literature the acm digital library full-text collection articles published acm articles  magazines conference proceedings  the guide bibliography computing one million entries the acm digital library contains comprehensive archive starting     organization journals  magazines  newsletters conference proceedings  online services include forum called ubiquity tech news digest  there extensive underlying bibliographic database containing key works genres major publishers computing literature  this secondary database rich discovery service known the acm guide computing literature acm adopted hybrid open access  oa  publishing model       authors choose pay oa fee must grant acm publishing rights either copyright transfer agreement publishing license agreement acm  green  publisher term invented  authors may post documents websites institutional repositories link back acm digital library permanently maintained version record all metadata digital library open world  including abstracts  linked references citing works  citation usage statistics  well functionality services  other free articles  full-texts accessed subscription there also mounting challenge acm publication practices coming open access movement  some authors see centralized peer review process less relevant publish home pages unreviewed sites like arxiv  other organizations sprung peer review entirely free online  journal artificial intelligence research  journal machine learning research journal research practice information technology    membership grades   in addition student regular members  acm several advanced membership grades recognize multiple years membership  demonstrated performance sets apart peers  the number fellows  distinguished members  senior members cannot exceed              total number professional members  respectively     fellows    the acm fellows program established council association computing machinery       recognize honor outstanding acm members achievements computer science information technology significant contributions mission acm   there      fellows              members     distinguished members    in       acm began recognizing two additional membership grades  one called distinguished members  distinguished members  distinguished engineers  distinguished scientists  distinguished educators  least    years professional experience   years continuous acm membership  made significant impact computing field   note      distinguished members first came  one three levels called  distinguished member  changed two years later  distinguished educator   those already distinguished member title titles changed one three titles list distinguished members association computing machinery     senior members    also       acm began recognizing senior members  according acm   the senior members grade recognizes acm members least    years professional experience   years continuous professional membership demonstrated performance technical leadership  technical professional contributions   senior membership also requires   letters reference    distinguished speakers    while technically membership grade  acm recognizes distinguished speakers topics computer science  a distinguished speaker appointed three-year period  there usually     current distinguished speakers  the acm website describes people  renowned international thought leaders    the distinguished speakers program  dsp  existence    years serves outreach program brings renowned experts academia  industry government present topic expertise   the dsp overseen committee    chapters   acm three kinds chapters  special interest groups  professional chapters  student chapters as       acm professional   sig chapters    countries as       exist acm student chapters    different countries     special interest groups       conferences   acm special interest groups  sigs  sponsors numerous conferences     hosted worldwide       acm conferences page up-to-date complete list partial list shown below  most sigs also annual conference  acm conferences often popular publishing venues therefore competitive  for example       siggraph conference attracted       visitors  cikm accepted     long papers submitted      mobihoc  international symposium mobile ad hoc networking computingthe acm co presenter founding partner grace hopper celebration women computing  ghc  anita borg institute women technology some conferences hosted acm student branches  includes reflections projections  hosted uiuc acm   in addition  acm sponsors regional conferences  regional conferences facilitate increased opportunities collaboration nearby institutions well attended for additional non-acm conferences  see list computer science conferences    awards   the acm presents co presents number awards outstanding technical professional achievements contributions computer science information technology over    acm special interest groups also award individuals contributions listed below    leadership   the president acm           gabriele kotsis  professor johannes kepler university linz  she successor cherri m  pancake              professor emeritus oregon state university director northwest alliance computational science engineering  nacse   vicki l  hanson              distinguished professor rochester institute technology visiting professor university dundee  alexander l  wolf              dean jack baskin school engineering university california  santa cruz  vint cerf              american computer scientist recognized one  fathers internet   alain chesnais              french citizen living toronto  ontario  canada  runs company named visual transitions  dame wendy hall university southampton  uk             acm led council consisting president  vice-president  treasurer  past president  sig governing board chair  publications board chair  three representatives sig governing board  seven members at large  this institution often referred simply  council  communications acm    infrastructure   acm five  boards  make various committees subgroups  help headquarters staff maintain quality services products  these boards follows publications boardsig governing boardeducation boardmembership services boardpractitioners board   acm council women computing   acm-w  acm council women computing  supports  celebrates  advocates internationally full engagement women computing  acm w main programs regional celebrations women computing  acm-w chapters  scholarships women cs students attend research conferences  in india europe activities overseen acm-w india acm-w europe respectively   acm-w collaborates organizations anita borg institute  national center women   information technology  ncwit   committee status women computing research  cra-w      athena lectures    the acm-w gives annual athena lecturer award honor outstanding women researchers made fundamental contributions computer science   this program began       speakers nominated sig officers            deborah estrin ucla           karen sp rck jones cambridge university           shafi goldwasser mit weitzmann institute science           susan j  eggers university washington           mary jane irwin pennsylvania state university           judith s  olson university california  irvine           nancy lynch mit           katherine yelick lbnl           susan dumais microsoft research           jennifer widom stanford university           jennifer rexford princeton university           lydia kavraki rice university           andrea goldsmith princeton university           elisa bertino purdue university           sarit kraus bar-ilan university           ayanna howard ohio state university   cooperation   acm primary partner ieee computer society  ieee-cs   largest subgroup institute electrical electronics engineers  ieee   the ieee focuses hardware standardization issues theoretical computer science  considerable overlap acm agenda  they many joint activities including conferences  publications awards  acm sigs co-sponsor    conferences year ieee-cs parts ieee  eckert-mauchly award ken kennedy award  major awards computer science  given jointly acm ieee-cs  they occasionally cooperate projects like developing computing curricula acm also jointly sponsored events professional organizations like society industrial applied mathematics  siam     criticism   in december       acm signed letter president trump opposing open access  a petition formed collected thousand signatures  in reaction  acm clarified position the socg conference  originally acm conference  parted ways acm      problems organizing conferences abroad    see also      references      external links   official website acm portal publicationsacm digital libraryassociation computing machinery records      -      charles babbage institute  university minnesota acm upsilon phi epsilon honor society archived april          wayback machine
bertrand meyer    french   j     born    november       french academic  author  consultant field computer languages  he created eiffel programming language idea design contract    education academic career   bertrand meyer received master degree engineering  cole polytechnique paris  second master degree stanford university  phd universit  de nancy  he technical managerial career nine years  lectricit  de france  three years member faculty university california  santa barbara from            professor software engineering eth z rich  swiss federal institute technology  pursued research building trusted components  reusable software elements  guaranteed level quality  he chair eth computer science department              years             taught introduction programming course taken eth computer science students  resulting widely disseminated programming textbook  touch class  springer  he remains professor emeritus software engineering eth zurich currently professor software engineering schaffhausen institute technology  sit   new research university schaffhausen  switzerland meyer activities include associate professorships innopolis university           chair excellence university toulouse  from           adjunct professor monash university melbourne  australia  he also active consultant  object-oriented system design  architectural reviews  technology assessment   trainer object technology software topics  conference speaker  for many years meyer active issues research education policy founding president             informatics europe  association european computer science departments    computer languages   meyer pursues ideal simple  elegant user-friendly computer languages one earliest vocal proponents object-oriented programming  oop   his book object-oriented software construction one earliest comprehensive works presenting case oop  other books written include eiffel  the language  description eiffel language   object success  discussion object technology managers   reusable software  discussion reuse issues solutions   introduction theory programming languages  touch class  introduction programming software engineering  agile  the good  hype ugly  tutorial critical analysis agile methods   he authored numerous articles edited    conference proceedings  many springer lncs  lecture notes computer science  series he initial designer eiffel method language continued participate evolution  originator design contract development method his experiences object technology simula language  well early work abstract data types formal specification  including z notation   provided background development eiffel    contributions   meyer known among contributions following the concept design contract  highly influential design programming methodology concept language mechanism present languages java modeling language  spec   uml object constraint language microsoft code contracts the design eiffel language  applicable programming well design requirements the early publication  first       edition object-oriented software construction book  widely used design patterns command pattern  basis undo-redo mechanisms  i e  ctrl-z ctrl-y  interactive systems  bridge pattern the original design  collaboration jean-raymond abrial steven schuman  z specification language his establishment connection object-oriented programming concept software reusability       paper   reusability  case object-oriented design his critical analysis pros cons agile development development software lifecycle management models    awards   meyer member academia europaea french academy technologies fellow acm  he received honorary doctorates itmo university saint petersburg  russia        university york  uk        he first  senior award  winner aito dahl-nygaard award       this prize  named two creators object technology  awarded annually senior junior researchers made significant technical contributions field object orientation he      recipient harlan mills ieee computer society in       meyer received software system award acm  impact software quality  recognition design eiffel    wikipedia hoax   on    december       anonymous user falsely announced meyer death german wikipedia biography meyer  the hoax reported five days later heise news ticker article immediately corrected  many major news media outlets germany switzerland picked story  meyer went publish positive evaluation wikipedia  concluding  the system succumbed one potential flaws  quickly healed itself  this affect big picture  just like  rumors wikipedia downfall grossly exaggerated     see also   open closed principleuniform access principle   references      external links   bertrand meyer home page
